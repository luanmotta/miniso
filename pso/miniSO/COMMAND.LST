Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 1
command.ASM



      1				     $comm   macro   name,dist,size,count
      2					     comm    dist name[size]:BYTE:count
      3					     endm
      4					     ?debug  V 300h
      5					     ?debug  S "command.c"
      6					     ?debug  C E951AA764B09636F6D6D616E642E63
      7					     ?debug  C E94FAE6C4B086D696E69534F2E68
      8					     ?debug  C E963AA764B09636F6D6D616E642E68
      9					     ?debug  C E990AC6C4B056C69622E68
     10	0000			     _TEXT   segment byte public 'CODE'
     11	0000			     _TEXT   ends
     12				     DGROUP  group   _DATA,_BSS
     13					     assume  cs:_TEXT,ds:DGROUP
     14	0000			     _DATA   segment word public 'DATA'
     15	0000			     d@	     label   byte
     16	0000			     d@w     label   word
     17	0000			     _DATA   ends
     18	0000			     _BSS    segment word public 'BSS'
     19	0000			     b@	     label   byte
     20	0000			     b@w     label   word
     21	0000			     _BSS    ends
     22	0000			     _DATA   segment word public 'DATA'
     23	0000			     num_var label   word
     24	0000  00			     db	     0
     25	0001  00			     db	     0
     26	0002			     commands	     label   word
     27	0002  00A2r			     dw	     DGROUP:s@
     28	0004  00A4r			     dw	     DGROUP:s@+2
     29	0006  07EDr			     dw	     _cmd_help
     30	0008  00CFr			     dw	     DGROUP:s@+45
     31	000A  00D4r			     dw	     DGROUP:s@+50
     32	000C  07EDr			     dw	     _cmd_help
     33	000E  00FCr			     dw	     DGROUP:s@+90
     34	0010  0100r			     dw	     DGROUP:s@+94
     35	0012  0996r			     dw	     _cmd_ver
     36	0014  0128r			     dw	     DGROUP:s@+134
     37	0016  012Dr			     dw	     DGROUP:s@+139
     38	0018  0845r			     dw	     _cmd_date
     39	001A  014Br			     dw	     DGROUP:s@+169
     40	001C  0150r			     dw	     DGROUP:s@+174
     41	001E  08E0r			     dw	     _cmd_time
     42	0020  016Er			     dw	     DGROUP:s@+204
     43	0022  0172r			     dw	     DGROUP:s@+208
     44	0024  0980r			     dw	     _cmd_cls
     45	0026  0190r			     dw	     DGROUP:s@+238
     46	0028  0196r			     dw	     DGROUP:s@+244
     47	002A  0980r			     dw	     _cmd_cls
     48	002C  01B2r			     dw	     DGROUP:s@+272
     49	002E  01B9r			     dw	     DGROUP:s@+279
     50	0030  07C2r			     dw	     _cmd_reboot
     51	0032  01DEr			     dw	     DGROUP:s@+316
     52	0034  01E3r			     dw	     DGROUP:s@+321
     53	0036  07D8r			     dw	     _cmd_exit
     54	0038  0206r			     dw	     DGROUP:s@+356
     55	003A  020Br			     dw	     DGROUP:s@+361
     56	003C  07D8r			     dw	     _cmd_exit
     57	003E  022Er			     dw	     DGROUP:s@+396
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 2
command.ASM



     58	0040  0231r			     dw	     DGROUP:s@+399
     59	0042  09C5r			     dw	     _cmd_ps
     60	0044  0267r			     dw	     DGROUP:s@+453
     61	0046  026Cr			     dw	     DGROUP:s@+458
     62	0048  0C6Br			     dw	     _cmd_kill
     63	004A  0297r			     dw	     DGROUP:s@+501
     64	004C  029Cr			     dw	     DGROUP:s@+506
     65	004E  0FE4r			     dw	     _cmd_demo
     66	0050  02D5r			     dw	     DGROUP:s@+563
     67	0052  02D9r			     dw	     DGROUP:s@+567
     68	0054  0CB3r			     dw	     _cmd_set
     69	0056  0318r			     dw	     DGROUP:s@+630
     70	0058  031Er			     dw	     DGROUP:s@+636
     71	005A  0D4Cr			     dw	     _cmd_unset
     72	005C  033Er			     dw	     DGROUP:s@+668
     73	005E  0343r			     dw	     DGROUP:s@+673
     74	0060  0D8Cr			     dw	     _cmd_echo
     75	0062  0366r			     dw	     DGROUP:s@+708
     76	0064  036Er			     dw	     DGROUP:s@+716
     77	0066  1038r			     dw	     _cmd_waitpid
     78	0068  039Fr			     dw	     DGROUP:s@+765
     79	006A  03A4r			     dw	     DGROUP:s@+770
     80	006C  10C7r			     dw	     _cmd_wait
     81	006E  03D1r			     dw	     DGROUP:s@+815
     82	0070  03D7r			     dw	     DGROUP:s@+821
     83	0072  113Fr			     dw	     _cmd_semls
     84	0074  0400r			     dw	     DGROUP:s@+862
     85	0076  040Ar			     dw	     DGROUP:s@+872
     86	0078  1235r			     dw	     _cmd_semcreate
     87	007A  0426r			     dw	     DGROUP:s@+900
     88	007C  042Er			     dw	     DGROUP:s@+908
     89	007E  13CDr			     dw	     _cmd_semtest
     90	0080  045Dr			     dw	     DGROUP:s@+955
     91	0082  0463r			     dw	     DGROUP:s@+961
     92	0084  1421r			     dw	     _cmd_semup
     93	0086  0494r			     dw	     DGROUP:s@+1010
     94	0088  049Fr			     dw	     DGROUP:s@+1021
     95	008A  145Ar			     dw	     _cmd_semdestroy
     96	008C  04BDr			     dw	     DGROUP:s@+1051
     97	008E  04C2r			     dw	     DGROUP:s@+1056
     98	0090  1493r			     dw	     _cmd_stop
     99	0092  04EDr			     dw	     DGROUP:s@+1099
    100	0094  04F4r			     dw	     DGROUP:s@+1106
    101	0096  14DFr			     dw	     _cmd_resume
    102	0098  051Dr			     dw	     DGROUP:s@+1147
    103	009A  0526r			     dw	     DGROUP:s@+1156
    104	009C  153Ar			     dw	     _cmd_prodcons
    105	009E			     _DATA   ends
    106	0000			     _TEXT   segment byte public 'CODE'
    107					;
    108					;    void command()
    109					;
    110					     assume  cs:_TEXT
    111	0000			     _command	     proc    near
    112	0000  55			     push    bp
    113	0001  8B EC			     mov     bp,sp
    114	0003  83 EC 22			     sub     sp,34
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 3
command.ASM



    115	0006  56			     push    si
    116	0007  57			     push    di
    117					;
    118					;    {
    119					;      char car,str[10];
    120					;      int numcar;
    121					;      int i,achou,pos;
    122					;      int novalinha,res,argc;
    123					;      char far	*ptrline,far *var;
    124					;
    125					;      /* InicializaÁıes... */
    126					;      numcar =	0;
    127					;
    128	0008  33 F6			     xor     si,si
    129					;
    130					;      end_command = 0;
    131					;
    132	000A  C7 06 0625r 0000		     mov     word ptr DGROUP:end_command,0
    133					;
    134					;      history_ini = 0;
    135					;
    136	0010  C7 06 020Er 0000		     mov     word ptr DGROUP:history_ini,0
    137					;
    138					;      history_nxt = 0;
    139					;
    140	0016  C7 06 020Cr 0000		     mov     word ptr DGROUP:history_nxt,0
    141					;
    142					;      history_pos = -1;
    143					;
    144	001C  C7 06 020Ar FFFF		     mov     word ptr DGROUP:history_pos,-1
    145					;
    146					;      /* Mensagem inicial */
    147					;      setcolor(7);
    148					;
    149	0022  B8 0007			     mov     ax,7
    150	0025  50			     push    ax
    151	0026  E8 0000e			     call    near ptr _setcolor
    152	0029  59			     pop     cx
    153					;
    154					;      clrscr();
    155					;
    156	002A  E8 0000e			     call    near ptr _clrscr
    157					;
    158					;      setcolor(LOGOCOLOR);
    159					;
    160	002D  B8 0001			     mov     ax,1
    161	0030  50			     push    ax
    162	0031  E8 0000e			     call    near ptr _setcolor
    163	0034  59			     pop     cx
    164					;
    165					;      putstr("			 ‹‹‹‹‹‹‹  ‹‹‹‹‹‹\n");
    166					;
    167	0035  1E			     push    ds
    168	0036  B8 054Cr			     mov     ax,offset DGROUP:s@+1194
    169	0039  50			     push    ax
    170	003A  E8 0000e			     call    near ptr _putstr
    171	003D  59			     pop     cx
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 4
command.ASM



    172	003E  59			     pop     cx
    173					;
    174					;      putstr("	‹‹‹‹‹  ‹  ‹‹‹  ‹ €€   ﬂﬂ  €€  €€  "); setcolor(7); putstr("MinisSistema	    +
    175				     Operacional\n"); setcolor(LOGOCOLOR);
    176					;
    177	003F  1E			     push    ds
    178	0040  B8 056Fr			     mov     ax,offset DGROUP:s@+1229
    179	0043  50			     push    ax
    180	0044  E8 0000e			     call    near ptr _putstr
    181	0047  59			     pop     cx
    182	0048  59			     pop     cx
    183	0049  B8 0007			     mov     ax,7
    184	004C  50			     push    ax
    185	004D  E8 0000e			     call    near ptr _setcolor
    186	0050  59			     pop     cx
    187	0051  1E			     push    ds
    188	0052  B8 0593r			     mov     ax,offset DGROUP:s@+1265
    189	0055  50			     push    ax
    190	0056  E8 0000e			     call    near ptr _putstr
    191	0059  59			     pop     cx
    192	005A  59			     pop     cx
    193	005B  B8 0001			     mov     ax,1
    194	005E  50			     push    ax
    195	005F  E8 0000e			     call    near ptr _setcolor
    196	0062  59			     pop     cx
    197					;
    198					;      putstr("‹€ € € ‹€ ‹€ € ‹€ ﬂﬂﬂﬂ€€€ €€€  €€  "); setcolor(7); putstr("Vs "); putstr    +
    199				     (miniSO_VERSION); putstr("\n"); setcolor(LOGO
    200					;
    201	0063  1E			     push    ds
    202	0064  B8 05ADr			     mov     ax,offset DGROUP:s@+1291
    203	0067  50			     push    ax
    204	0068  E8 0000e			     call    near ptr _putstr
    205	006B  59			     pop     cx
    206	006C  59			     pop     cx
    207	006D  B8 0007			     mov     ax,7
    208	0070  50			     push    ax
    209	0071  E8 0000e			     call    near ptr _setcolor
    210	0074  59			     pop     cx
    211	0075  1E			     push    ds
    212	0076  B8 05D1r			     mov     ax,offset DGROUP:s@+1327
    213	0079  50			     push    ax
    214	007A  E8 0000e			     call    near ptr _putstr
    215	007D  59			     pop     cx
    216	007E  59			     pop     cx
    217	007F  1E			     push    ds
    218	0080  B8 05D5r			     mov     ax,offset DGROUP:s@+1331
    219	0083  50			     push    ax
    220	0084  E8 0000e			     call    near ptr _putstr
    221	0087  59			     pop     cx
    222	0088  59			     pop     cx
    223	0089  1E			     push    ds
    224	008A  B8 05DAr			     mov     ax,offset DGROUP:s@+1336
    225	008D  50			     push    ax
    226	008E  E8 0000e			     call    near ptr _putstr
    227	0091  59			     pop     cx
    228	0092  59			     pop     cx
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 5
command.ASM



    229	0093  B8 0001			     mov     ax,1
    230	0096  50			     push    ax
    231	0097  E8 0000e			     call    near ptr _setcolor
    232	009A  59			     pop     cx
    233					;
    234					;      putstr("€€ € € €€ €€ € €€ €€‹‹€€€ €€€‹‹€€  "); setcolor(7); putstr("por Roland	    +
    235				     Teodorowitsch\n");
    236					;
    237	009B  1E			     push    ds
    238	009C  B8 05DCr			     mov     ax,offset DGROUP:s@+1338
    239	009F  50			     push    ax
    240	00A0  E8 0000e			     call    near ptr _putstr
    241	00A3  59			     pop     cx
    242	00A4  59			     pop     cx
    243	00A5  B8 0007			     mov     ax,7
    244	00A8  50			     push    ax
    245	00A9  E8 0000e			     call    near ptr _setcolor
    246	00AC  59			     pop     cx
    247	00AD  1E			     push    ds
    248	00AE  B8 0600r			     mov     ax,offset DGROUP:s@+1374
    249	00B1  50			     push    ax
    250	00B2  E8 0000e			     call    near ptr _putstr
    251	00B5  59			     pop     cx
    252	00B6  59			     pop     cx
    253					;
    254					;
    255					;      putstr("\nDigite	'help' ou '?' para ajuda...\n\n");
    256					;
    257	00B7  1E			     push    ds
    258	00B8  B8 061Ar			     mov     ax,offset DGROUP:s@+1400
    259	00BB  50			     push    ax
    260	00BC  E8 0000e			     call    near ptr _putstr
    261	00BF  59			     pop     cx
    262	00C0  59			     pop     cx
    263					;
    264					;      /* Inicializa vari·veis de ambiente */
    265					;      command_var_init();
    266					;
    267	00C1  E8 04F7			     call    near ptr command_var_init
    268					;
    269					;      command_var_set("PROMPT","miniSO>");
    270					;
    271	00C4  1E			     push    ds
    272	00C5  B8 0647r			     mov     ax,offset DGROUP:s@+1445
    273	00C8  50			     push    ax
    274	00C9  1E			     push    ds
    275	00CA  B8 0640r			     mov     ax,offset DGROUP:s@+1438
    276	00CD  50			     push    ax
    277	00CE  E8 066B			     call    near ptr command_var_set
    278	00D1  83 C4 08			     add     sp,8
    279					;
    280					;      command_var_set("ERRORLEVEL","0");
    281					;
    282	00D4  1E			     push    ds
    283	00D5  B8 065Ar			     mov     ax,offset DGROUP:s@+1464
    284	00D8  50			     push    ax
    285	00D9  1E			     push    ds
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 6
command.ASM



    286	00DA  B8 064Fr			     mov     ax,offset DGROUP:s@+1453
    287	00DD  50			     push    ax
    288	00DE  E8 065B			     call    near ptr command_var_set
    289	00E1  83 C4 08			     add     sp,8
    290					;
    291					;      /* Imprime sinal	de pronto */
    292					;      command_showprompt();
    293					;
    294	00E4  E8 0488			     call    near ptr command_showprompt
    295	00E7  E9 0427			     jmp     @1@3362
    296	00EA			     @1@58:
    297					;
    298					;      /* LaÁo para interpretaÁ„o de comandos */
    299					;      while ( !end_command )  {
    300					;	     car=getch();
    301					;
    302	00EA  E8 0000e			     call    near ptr _getch
    303	00ED  88 46 FF			     mov     byte ptr [bp-1],al
    304					;
    305					;	     switch (car)  {
    306					;
    307	00F0  8A 46 FF			     mov     al,byte ptr [bp-1]
    308	00F3  98			     cbw
    309	00F4  89 46 E0			     mov     word ptr [bp-32],ax
    310	00F7  B9 0005			     mov     cx,5
    311	00FA  BB 0531r			     mov     bx,offset @1@C3234
    312	00FD			     @1@142:
    313	00FD  2E: 8B 07			     mov     ax,word ptr cs:[bx]
    314	0100  3B 46 E0			     cmp     ax,word ptr [bp-32]
    315	0103  74 08			     je	     short @1@226
    316	0105  83 C3 02			     add     bx,2
    317	0108  E2 F3			     loop    short @1@142
    318	010A  E9 03EE			     jmp     @1@3306
    319	010D			     @1@226:
    320	010D  2E: FF 67	0A		     jmp     word ptr cs:[bx+10]
    321	0111			     @1@254:
    322					;
    323					;		    case 9:
    324					;			 break;
    325					;
    326	0111  E9 03FD			     jmp     @1@3362
    327	0114			     @1@282:
    328					;
    329					;		    case 8:
    330					;			 if (numcar>0)	{
    331					;
    332	0114  0B F6			     or	     si,si
    333	0116  7E 04			     jle     short @1@338
    334					;
    335					;			    --numcar;
    336					;
    337	0118  4E			     dec     si
    338					;
    339					;			    command_backspace();
    340					;
    341	0119  E8 0429			     call    near ptr command_backspace
    342	011C			     @1@338:
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 7
command.ASM



    343					;
    344					;			 }
    345					;			 break;
    346					;
    347	011C  E9 03F2			     jmp     @1@3362
    348	011F			     @1@366:
    349	011F  EB 04			     jmp     short @1@422
    350	0121			     @1@394:
    351					;
    352					;		    case 27:
    353					;			 /* Limpa a linha de comandos */
    354					;			 while (numcar>0)  {
    355					;			       --numcar;
    356					;
    357	0121  4E			     dec     si
    358					;
    359					;			       command_backspace();
    360					;
    361	0122  E8 0420			     call    near ptr command_backspace
    362	0125			     @1@422:
    363	0125  0B F6			     or	     si,si
    364	0127  7F F8			     jg	     short @1@394
    365					;
    366					;			 }
    367					;			 break;
    368					;
    369	0129  E9 03E5			     jmp     @1@3362
    370	012C			     @1@478:
    371					;
    372					;		    case 0:
    373					;			 car=getch();
    374					;
    375	012C  E8 0000e			     call    near ptr _getch
    376	012F  88 46 FF			     mov     byte ptr [bp-1],al
    377					;
    378					;			 switch	(car)  {
    379					;
    380	0132  8A 46 FF			     mov     al,byte ptr [bp-1]
    381	0135  98			     cbw
    382	0136  89 46 DE			     mov     word ptr [bp-34],ax
    383	0139  B9 0004			     mov     cx,4
    384	013C  BB 0521r			     mov     bx,offset @1@C3330
    385	013F			     @1@562:
    386	013F  2E: 8B 07			     mov     ax,word ptr cs:[bx]
    387	0142  3B 46 DE			     cmp     ax,word ptr [bp-34]
    388	0145  74 08			     je	     short @1@646
    389	0147  83 C3 02			     add     bx,2
    390	014A  E2 F3			     loop    short @1@562
    391	014C  E9 01C0			     jmp     @1@2102
    392	014F			     @1@646:
    393	014F  2E: FF 67	08		     jmp     word ptr cs:[bx+8]
    394	0153			     @1@674:
    395					;
    396					;				case 65: /* F7 */
    397					;				     history_pos = -1;
    398					;
    399	0153  C7 06 020Ar FFFF		     mov     word ptr DGROUP:history_pos,-1
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 8
command.ASM



    400	0159  EB 04			     jmp     short @1@730
    401	015B			     @1@702:
    402					;
    403					;				     /*	Limpa a	linha de comandos */
    404					;				     while (numcar>0)  {
    405					;					   --numcar;
    406					;
    407	015B  4E			     dec     si
    408					;
    409					;					   command_backspace();
    410					;
    411	015C  E8 03E6			     call    near ptr command_backspace
    412	015F			     @1@730:
    413	015F  0B F6			     or	     si,si
    414	0161  7F F8			     jg	     short @1@702
    415					;
    416					;				     }
    417					;				     putch('\n');
    418					;
    419	0163  B8 000A			     mov     ax,10
    420	0166  50			     push    ax
    421	0167  E8 0000e			     call    near ptr _putch
    422	016A  59			     pop     cx
    423					;
    424					;				     /*	Imprime	o histÛrico */
    425					;				     for (i=0;i<history_len;++i)  {
    426					;
    427	016B  33 FF			     xor     di,di
    428	016D  EB 25			     jmp     short @1@842
    429	016F			     @1@786:
    430					;
    431					;					 putstr(history[(history_ini+i)%MAXHISTORY]);
    432					;
    433	016F  1E			     push    ds
    434	0170  A1 020Er			     mov     ax,word ptr DGROUP:history_ini
    435	0173  03 C7			     add     ax,di
    436	0175  BB 000A			     mov     bx,10
    437	0178  99			     cwd
    438	0179  F7 FB			     idiv    bx
    439	017B  BB 001F			     mov     bx,31
    440	017E  8B C2			     mov     ax,dx
    441	0180  F7 EB			     imul    bx
    442	0182  05 0212r			     add     ax,offset DGROUP:history
    443	0185  50			     push    ax
    444	0186  E8 0000e			     call    near ptr _putstr
    445	0189  59			     pop     cx
    446	018A  59			     pop     cx
    447					;
    448					;					 putch('\n');
    449					;
    450	018B  B8 000A			     mov     ax,10
    451	018E  50			     push    ax
    452	018F  E8 0000e			     call    near ptr _putch
    453	0192  59			     pop     cx
    454	0193  47			     inc     di
    455	0194			     @1@842:
    456	0194  3B 3E 0210r		     cmp     di,word ptr DGROUP:history_len
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 9
command.ASM



    457	0198  7C D5			     jl	     short @1@786
    458					;
    459					;				     }
    460					;				     command_showprompt();
    461					;
    462	019A  E8 03D2			     call    near ptr command_showprompt
    463					;
    464					;				     break;
    465					;
    466	019D  E9 016F			     jmp     @1@2102
    467	01A0			     @1@898:
    468					;
    469					;				case 75: /* Seta para esquerda */
    470					;				     if	(numcar>0)  {
    471					;
    472	01A0  0B F6			     or	     si,si
    473	01A2  7E 04			     jle     short @1@954
    474					;
    475					;					--numcar;
    476					;
    477	01A4  4E			     dec     si
    478					;
    479					;					command_backspace();
    480					;
    481	01A5  E8 039D			     call    near ptr command_backspace
    482	01A8			     @1@954:
    483					;
    484					;				     }
    485					;				     break;
    486					;
    487	01A8  E9 0164			     jmp     @1@2102
    488	01AB			     @1@982:
    489					;
    490					;				case 72: /* Seta para cima */
    491					;				     if	(history_len>0)	 {
    492					;
    493	01AB  83 3E 0210r 00		     cmp     word ptr DGROUP:history_len,0
    494	01B0  7F 03			     jg	     @@0
    495	01B2  E9 00C3			     jmp     @1@1598
    496	01B5			     @@0:
    497					;
    498					;					novalinha=0;
    499					;
    500	01B5  C7 46 EE 0000		     mov     word ptr [bp-18],0
    501					;
    502					;					if (history_len<MAXHISTORY)  {
    503					;
    504	01BA  83 3E 0210r 0A		     cmp     word ptr DGROUP:history_len,10
    505	01BF  7D 27			     jge     short @1@1178
    506					;
    507					;					   if (history_pos==-1)	 {
    508					;
    509	01C1  83 3E 020Ar FF		     cmp     word ptr DGROUP:history_pos,-1
    510	01C6  75 0E			     jne     short @1@1094
    511					;
    512					;					      history_pos=history_nxt-1;
    513					;
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 10
command.ASM



    514	01C8  A1 020Cr			     mov     ax,word ptr DGROUP:history_nxt
    515	01CB  48			     dec     ax
    516	01CC  A3 020Ar			     mov     word ptr DGROUP:history_pos,ax
    517					;
    518					;					      novalinha=1;
    519					;
    520	01CF  C7 46 EE 0001		     mov     word ptr [bp-18],1
    521					;
    522					;					   }
    523					;
    524	01D4  EB 10			     jmp     short @1@1150
    525	01D6			     @1@1094:
    526					;
    527					;					   else	 {
    528					;					      if (history_pos>0)  {
    529					;
    530	01D6  83 3E 020Ar 00		     cmp     word ptr DGROUP:history_pos,0
    531	01DB  7E 09			     jle     short @1@1150
    532					;
    533					;						 history_pos--;
    534					;
    535	01DD  FF 0E 020Ar		     dec     word ptr DGROUP:history_pos
    536					;
    537					;						 novalinha=1;
    538					;
    539	01E1  C7 46 EE 0001		     mov     word ptr [bp-18],1
    540	01E6			     @1@1150:
    541					;
    542					;					      }
    543					;					   }
    544					;					}
    545					;
    546	01E6  EB 52			     jmp     short @1@1458
    547	01E8			     @1@1178:
    548					;
    549					;					else  {
    550					;					   if (history_pos==-1)	 {
    551					;
    552	01E8  83 3E 020Ar FF		     cmp     word ptr DGROUP:history_pos,-1
    553	01ED  75 1B			     jne     short @1@1290
    554					;
    555					;					      history_pos=history_nxt-1;
    556					;
    557	01EF  A1 020Cr			     mov     ax,word ptr DGROUP:history_nxt
    558	01F2  48			     dec     ax
    559	01F3  A3 020Ar			     mov     word ptr DGROUP:history_pos,ax
    560					;
    561					;					      if (history_pos<0)
    562					;
    563	01F6  83 3E 020Ar 00		     cmp     word ptr DGROUP:history_pos,0
    564	01FB  7D 06			     jge     short @1@1262
    565					;
    566					;						 history_pos=MAXHISTORY-1;
    567					;
    568	01FD  C7 06 020Ar 0009		     mov     word ptr DGROUP:history_pos,9
    569	0203			     @1@1262:
    570					;
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 11
command.ASM



    571					;					      novalinha=1;
    572					;
    573	0203  C7 46 EE 0001		     mov     word ptr [bp-18],1
    574					;
    575					;					   }
    576					;
    577	0208  EB 30			     jmp     short @1@1458
    578	020A			     @1@1290:
    579					;
    580					;					   else	 {
    581					;					      if (history_pos!=history_ini)  {
    582					;
    583	020A  A1 020Ar			     mov     ax,word ptr DGROUP:history_pos
    584	020D  3B 06 020Er		     cmp     ax,word ptr DGROUP:history_ini
    585	0211  74 27			     je	     short @1@1458
    586					;
    587					;						 novalinha=1;
    588					;
    589	0213  C7 46 EE 0001		     mov     word ptr [bp-18],1
    590					;
    591					;						 if (history_pos>history_ini)
    592					;
    593	0218  A1 020Ar			     mov     ax,word ptr DGROUP:history_pos
    594	021B  3B 06 020Er		     cmp     ax,word ptr DGROUP:history_ini
    595	021F  7E 06			     jle     short @1@1374
    596					;
    597					;						    --history_pos;
    598					;
    599	0221  FF 0E 020Ar		     dec     word ptr DGROUP:history_pos
    600	0225  EB 13			     jmp     short @1@1458
    601	0227			     @1@1374:
    602					;
    603					;						 else  {  /* history_pos<history_ini */
    604					;						    if (history_pos>0)
    605					;
    606	0227  83 3E 020Ar 00		     cmp     word ptr DGROUP:history_pos,0
    607	022C  7E 06			     jle     short @1@1430
    608					;
    609					;						       history_pos--;
    610					;
    611	022E  FF 0E 020Ar		     dec     word ptr DGROUP:history_pos
    612	0232  EB 06			     jmp     short @1@1458
    613	0234			     @1@1430:
    614					;
    615					;						    else
    616					;						       history_pos=MAXHISTORY-1;
    617					;
    618	0234  C7 06 020Ar 0009		     mov     word ptr DGROUP:history_pos,9
    619	023A			     @1@1458:
    620					;
    621					;						  }
    622					;					      }
    623					;					   }
    624					;					}
    625					;					if (novalinha)	{
    626					;
    627	023A  83 7E EE 00		     cmp     word ptr [bp-18],0
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 12
command.ASM



    628	023E  74 38			     je	     short @1@1598
    629	0240  EB 04			     jmp     short @1@1542
    630	0242			     @1@1514:
    631					;
    632					;					   /* Limpa a linha de comandos	*/
    633					;					   while (numcar>0)  {
    634					;						 --numcar;
    635					;
    636	0242  4E			     dec     si
    637					;
    638					;						 command_backspace();
    639					;
    640	0243  E8 02FF			     call    near ptr command_backspace
    641	0246			     @1@1542:
    642	0246  0B F6			     or	     si,si
    643	0248  7F F8			     jg	     short @1@1514
    644					;
    645					;					   }
    646					;					   strcpy(cmdline,history[history_pos]);
    647					;
    648	024A  1E			     push    ds
    649	024B  A1 020Ar			     mov     ax,word ptr DGROUP:history_pos
    650	024E  BA 001F			     mov     dx,31
    651	0251  F7 EA			     imul    dx
    652	0253  05 0212r			     add     ax,offset DGROUP:history
    653	0256  50			     push    ax
    654	0257  1E			     push    ds
    655	0258  B8 0606r			     mov     ax,offset DGROUP:cmdline
    656	025B  50			     push    ax
    657	025C  E8 0000e			     call    near ptr _strcpy
    658	025F  83 C4 08			     add     sp,8
    659					;
    660					;					   putstr(cmdline);
    661					;
    662	0262  1E			     push    ds
    663	0263  B8 0606r			     mov     ax,offset DGROUP:cmdline
    664	0266  50			     push    ax
    665	0267  E8 0000e			     call    near ptr _putstr
    666	026A  59			     pop     cx
    667	026B  59			     pop     cx
    668					;
    669					;					   numcar=strlen(cmdline);
    670					;
    671	026C  1E			     push    ds
    672	026D  B8 0606r			     mov     ax,offset DGROUP:cmdline
    673	0270  50			     push    ax
    674	0271  E8 0000e			     call    near ptr _strlen
    675	0274  59			     pop     cx
    676	0275  59			     pop     cx
    677	0276  8B F0			     mov     si,ax
    678	0278			     @1@1598:
    679					;
    680					;					}
    681					;				     }
    682					;				     break;
    683					;
    684	0278  E9 0094			     jmp     @1@2102
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 13
command.ASM



    685	027B			     @1@1626:
    686					;
    687					;				case 80: /* Seta para baixo */
    688					;				     if	(history_len>0 && history_pos!=-1)  {
    689					;
    690	027B  83 3E 0210r 00		     cmp     word ptr DGROUP:history_len,0
    691	0280  7F 03			     jg	     @@1
    692	0282  E9 0088			     jmp     @1@2074
    693	0285			     @@1:
    694	0285  83 3E 020Ar FF		     cmp     word ptr DGROUP:history_pos,-1
    695	028A  75 03			     jne     @@2
    696	028C  EB 7F 90			     jmp     @1@2074
    697	028F			     @@2:
    698					;
    699					;					if (history_len<MAXHISTORY)  {
    700					;
    701	028F  83 3E 0210r 0A		     cmp     word ptr DGROUP:history_len,10
    702	0294  7D 18			     jge     short @1@1822
    703					;
    704					;					   if (history_pos<history_len-1)
    705					;
    706	0296  A1 0210r			     mov     ax,word ptr DGROUP:history_len
    707	0299  48			     dec     ax
    708	029A  3B 06 020Ar		     cmp     ax,word ptr DGROUP:history_pos
    709	029E  7E 06			     jle     short @1@1766
    710					;
    711					;					      history_pos++;
    712					;
    713	02A0  FF 06 020Ar		     inc     word ptr DGROUP:history_pos
    714	02A4  EB 06			     jmp     short @1@1794
    715	02A6			     @1@1766:
    716					;
    717					;					   else
    718					;					      history_pos = -1;
    719					;
    720	02A6  C7 06 020Ar FFFF		     mov     word ptr DGROUP:history_pos,-1
    721	02AC			     @1@1794:
    722					;
    723					;					}
    724					;
    725	02AC  EB 20			     jmp     short @1@1934
    726	02AE			     @1@1822:
    727					;
    728					;					else  {
    729					;					   history_pos++;
    730					;
    731	02AE  FF 06 020Ar		     inc     word ptr DGROUP:history_pos
    732					;
    733					;					   if (history_pos>=MAXHISTORY)
    734					;
    735	02B2  83 3E 020Ar 0A		     cmp     word ptr DGROUP:history_pos,10
    736	02B7  7C 06			     jl	     short @1@1878
    737					;
    738					;					      history_pos = 0;
    739					;
    740	02B9  C7 06 020Ar 0000		     mov     word ptr DGROUP:history_pos,0
    741	02BF			     @1@1878:
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 14
command.ASM



    742					;
    743					;					   if (history_pos==history_nxt)
    744					;
    745	02BF  A1 020Ar			     mov     ax,word ptr DGROUP:history_pos
    746	02C2  3B 06 020Cr		     cmp     ax,word ptr DGROUP:history_nxt
    747	02C6  75 06			     jne     short @1@1934
    748					;
    749					;					      history_pos = -1;
    750					;
    751	02C8  C7 06 020Ar FFFF		     mov     word ptr DGROUP:history_pos,-1
    752	02CE			     @1@1934:
    753	02CE  EB 04			     jmp     short @1@1990
    754	02D0			     @1@1962:
    755					;
    756					;					}
    757					;					/* Limpa a linha de comandos */
    758					;					while (numcar>0)  {
    759					;					      --numcar;
    760					;
    761	02D0  4E			     dec     si
    762					;
    763					;					      command_backspace();
    764					;
    765	02D1  E8 0271			     call    near ptr command_backspace
    766	02D4			     @1@1990:
    767	02D4  0B F6			     or	     si,si
    768	02D6  7F F8			     jg	     short @1@1962
    769					;
    770					;					}
    771					;					if (history_pos!=-1)  {
    772					;
    773	02D8  83 3E 020Ar FF		     cmp     word ptr DGROUP:history_pos,-1
    774	02DD  74 2E			     je	     short @1@2074
    775					;
    776					;					   strcpy(cmdline,history[history_pos]);
    777					;
    778	02DF  1E			     push    ds
    779	02E0  A1 020Ar			     mov     ax,word ptr DGROUP:history_pos
    780	02E3  BA 001F			     mov     dx,31
    781	02E6  F7 EA			     imul    dx
    782	02E8  05 0212r			     add     ax,offset DGROUP:history
    783	02EB  50			     push    ax
    784	02EC  1E			     push    ds
    785	02ED  B8 0606r			     mov     ax,offset DGROUP:cmdline
    786	02F0  50			     push    ax
    787	02F1  E8 0000e			     call    near ptr _strcpy
    788	02F4  83 C4 08			     add     sp,8
    789					;
    790					;					   putstr(cmdline);
    791					;
    792	02F7  1E			     push    ds
    793	02F8  B8 0606r			     mov     ax,offset DGROUP:cmdline
    794	02FB  50			     push    ax
    795	02FC  E8 0000e			     call    near ptr _putstr
    796	02FF  59			     pop     cx
    797	0300  59			     pop     cx
    798					;
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 15
command.ASM



    799					;					   numcar=strlen(cmdline);
    800					;
    801	0301  1E			     push    ds
    802	0302  B8 0606r			     mov     ax,offset DGROUP:cmdline
    803	0305  50			     push    ax
    804	0306  E8 0000e			     call    near ptr _strlen
    805	0309  59			     pop     cx
    806	030A  59			     pop     cx
    807	030B  8B F0			     mov     si,ax
    808	030D			     @1@2074:
    809					;
    810					;					}
    811					;				     }
    812					;				     break;
    813					;
    814	030D  EB 00			     jmp     short @1@2102
    815	030F			     @1@2102:
    816					;
    817					;			 }
    818					;			 break;
    819					;
    820	030F  E9 01FF			     jmp     @1@3362
    821	0312			     @1@2130:
    822					;
    823					;		    case 13:
    824					;			 history_pos = -1;
    825					;
    826	0312  C7 06 020Ar FFFF		     mov     word ptr DGROUP:history_pos,-1
    827					;
    828					;			 putch('\n');
    829					;
    830	0318  B8 000A			     mov     ax,10
    831	031B  50			     push    ax
    832	031C  E8 0000e			     call    near ptr _putch
    833	031F  59			     pop     cx
    834					;
    835					;			 cmdline[numcar]='\0';
    836					;
    837	0320  C6 84 0606r 00		     mov     byte ptr DGROUP:cmdline[si],0
    838					;
    839					;			 /* Divide a linha de comandos em comando e opÁıes */
    840					;			 ptrline = cmdline;
    841					;
    842	0325  8C 5E E8			     mov     word ptr [bp-24],ds
    843	0328  C7 46 E6 0606r		     mov     word ptr [bp-26],offset DGROUP:cmdline
    844					;
    845					;			 argc =	0;
    846					;
    847	032D  C7 46 EA 0000		     mov     word ptr [bp-22],0
    848					;
    849					;			 pos = 0;
    850					;
    851	0332  C7 46 F0 0000		     mov     word ptr [bp-16],0
    852	0337			     @1@2158:
    853	0337  EB 03			     jmp     short @1@2214
    854	0339			     @1@2186:
    855					;
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 16
command.ASM



    856					;			 while (1) {
    857					;			       while (*ptrline!='\0' &&	(*ptrline==' ' || *ptrline=='\t'))
    858					;				     ++ptrline;
    859					;
    860	0339  FF 46 E6			     inc     word ptr [bp-26]
    861	033C			     @1@2214:
    862	033C  C4 5E E6			     les     bx,dword ptr [bp-26]
    863	033F  26: 80 3F	00		     cmp     byte ptr es:[bx],0
    864	0343  74 12			     je	     short @1@2298
    865	0345  C4 5E E6			     les     bx,dword ptr [bp-26]
    866	0348  26: 80 3F	20		     cmp     byte ptr es:[bx],32
    867	034C  74 EB			     je	     short @1@2186
    868	034E  C4 5E E6			     les     bx,dword ptr [bp-26]
    869	0351  26: 80 3F	09		     cmp     byte ptr es:[bx],9
    870	0355  74 E2			     je	     short @1@2186
    871	0357			     @1@2298:
    872					;
    873					;			       if (*ptrline=='\0')
    874					;
    875	0357  C4 5E E6			     les     bx,dword ptr [bp-26]
    876	035A  26: 80 3F	00		     cmp     byte ptr es:[bx],0
    877	035E  75 03			     jne     short @1@2354
    878					;
    879					;				  break;
    880					;
    881	0360  E9 00B4			     jmp     @1@2718
    882	0363			     @1@2354:
    883					;
    884					;			       i = 0;
    885					;
    886	0363  33 FF			     xor     di,di
    887	0365  EB 0E			     jmp     short @1@2410
    888	0367			     @1@2382:
    889					;
    890					;			       while (*ptrline!='\0' &&	*ptrline!=' ' && *ptrline!='\t')  {
    891					;				     palavra[i++] = *ptrline;
    892					;
    893	0367  C4 5E E6			     les     bx,dword ptr [bp-26]
    894	036A  26: 8A 07			     mov     al,byte ptr es:[bx]
    895	036D  88 85 05E7r		     mov     byte ptr DGROUP:palavra[di],al
    896	0371  47			     inc     di
    897					;
    898					;				     ++ptrline;
    899					;
    900	0372  FF 46 E6			     inc     word ptr [bp-26]
    901	0375			     @1@2410:
    902	0375  C4 5E E6			     les     bx,dword ptr [bp-26]
    903	0378  26: 80 3F	00		     cmp     byte ptr es:[bx],0
    904	037C  74 12			     je	     short @1@2494
    905	037E  C4 5E E6			     les     bx,dword ptr [bp-26]
    906	0381  26: 80 3F	20		     cmp     byte ptr es:[bx],32
    907	0385  74 09			     je	     short @1@2494
    908	0387  C4 5E E6			     les     bx,dword ptr [bp-26]
    909	038A  26: 80 3F	09		     cmp     byte ptr es:[bx],9
    910	038E  75 D7			     jne     short @1@2382
    911	0390			     @1@2494:
    912					;
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 17
command.ASM



    913					;			       }
    914					;			       palavra[i] = '\0';
    915					;
    916	0390  C6 85 05E7r 00		     mov     byte ptr DGROUP:palavra[di],0
    917					;
    918					;			       if (palavra[0]=='$')  {
    919					;
    920	0395  80 3E 05E7r 24		     cmp     byte ptr DGROUP:palavra,36
    921	039A  75 39			     jne     short @1@2606
    922					;
    923					;				  var =	command_var_value(&palavra[1]);
    924					;
    925	039C  1E			     push    ds
    926	039D  B8 05E8r			     mov     ax,offset DGROUP:palavra+1
    927	03A0  50			     push    ax
    928	03A1  E8 036B			     call    near ptr command_var_value
    929	03A4  59			     pop     cx
    930	03A5  59			     pop     cx
    931	03A6  89 56 E4			     mov     word ptr [bp-28],dx
    932	03A9  89 46 E2			     mov     word ptr [bp-30],ax
    933					;
    934					;				  if (var!=NULL)  {
    935					;
    936	03AC  8B 46 E2			     mov     ax,word ptr [bp-30]
    937	03AF  0B 46 E4			     or	     ax,word ptr [bp-28]
    938	03B2  74 1F			     je	     short @1@2578
    939					;
    940					;				     strcpy(palavra,var);
    941					;
    942	03B4  FF 76 E4			     push    word ptr [bp-28]
    943	03B7  FF 76 E2			     push    word ptr [bp-30]
    944	03BA  1E			     push    ds
    945	03BB  B8 05E7r			     mov     ax,offset DGROUP:palavra
    946	03BE  50			     push    ax
    947	03BF  E8 0000e			     call    near ptr _strcpy
    948	03C2  83 C4 08			     add     sp,8
    949					;
    950					;				     i = strlen(palavra);
    951					;
    952	03C5  1E			     push    ds
    953	03C6  B8 05E7r			     mov     ax,offset DGROUP:palavra
    954	03C9  50			     push    ax
    955	03CA  E8 0000e			     call    near ptr _strlen
    956	03CD  59			     pop     cx
    957	03CE  59			     pop     cx
    958	03CF  8B F8			     mov     di,ax
    959					;
    960					;				  }
    961					;
    962	03D1  EB 02			     jmp     short @1@2606
    963	03D3			     @1@2578:
    964					;
    965					;				  else
    966					;				     continue;
    967					;
    968	03D3  EB 3F			     jmp     short @1@2690
    969	03D5			     @1@2606:
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 18
command.ASM



    970					;
    971					;
    972					;			       }
    973					;			       strcpy(&argline[pos],palavra);
    974					;
    975	03D5  1E			     push    ds
    976	03D6  B8 05E7r			     mov     ax,offset DGROUP:palavra
    977	03D9  50			     push    ax
    978	03DA  1E			     push    ds
    979	03DB  8B 46 F0			     mov     ax,word ptr [bp-16]
    980	03DE  05 0388r			     add     ax,offset DGROUP:argline
    981	03E1  50			     push    ax
    982	03E2  E8 0000e			     call    near ptr _strcpy
    983	03E5  83 C4 08			     add     sp,8
    984					;
    985					;			       argv[argc++] = &argline[pos];
    986					;
    987	03E8  8B 46 F0			     mov     ax,word ptr [bp-16]
    988	03EB  05 0388r			     add     ax,offset DGROUP:argline
    989	03EE  8B 5E EA			     mov     bx,word ptr [bp-22]
    990	03F1  B1 02			     mov     cl,2
    991	03F3  D3 E3			     shl     bx,cl
    992	03F5  8C 9F 034Ar		     mov     word ptr DGROUP:argv[bx+2],ds
    993	03F9  89 87 0348r		     mov     word ptr DGROUP:argv[bx],ax
    994	03FD  FF 46 EA			     inc     word ptr [bp-22]
    995					;
    996					;			       pos+= (i+1);
    997					;
    998	0400  8B C7			     mov     ax,di
    999	0402  40			     inc     ax
   1000	0403  01 46 F0			     add     word ptr [bp-16],ax
   1001					;
   1002					;			       if (*ptrline=='\0')
   1003					;
   1004	0406  C4 5E E6			     les     bx,dword ptr [bp-26]
   1005	0409  26: 80 3F	00		     cmp     byte ptr es:[bx],0
   1006	040D  75 02			     jne     short @1@2662
   1007					;
   1008					;				  break;
   1009					;
   1010	040F  EB 06			     jmp     short @1@2718
   1011	0411			     @1@2662:
   1012					;
   1013					;			       ++ptrline;
   1014					;
   1015	0411  FF 46 E6			     inc     word ptr [bp-26]
   1016	0414			     @1@2690:
   1017	0414  E9 FF20			     jmp     @1@2158
   1018	0417			     @1@2718:
   1019					;
   1020					;			 }
   1021					;			 /* Se È comando vazio n„o faz nada */
   1022					;			 if (argc==0)  {
   1023					;
   1024	0417  83 7E EA 00		     cmp     word ptr [bp-22],0
   1025	041B  75 06			     jne     short @1@2774
   1026					;
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 19
command.ASM



   1027					;			    command_showprompt();
   1028					;
   1029	041D  E8 014F			     call    near ptr command_showprompt
   1030					;
   1031					;			    break;
   1032					;
   1033	0420  E9 00EE			     jmp     @1@3362
   1034	0423			     @1@2774:
   1035					;
   1036					;			 }
   1037					;			 /* Salva linha	de comando no histÛrico	*/
   1038					;			 strcpy	(history[history_nxt],cmdline);
   1039					;
   1040	0423  1E			     push    ds
   1041	0424  B8 0606r			     mov     ax,offset DGROUP:cmdline
   1042	0427  50			     push    ax
   1043	0428  1E			     push    ds
   1044	0429  A1 020Cr			     mov     ax,word ptr DGROUP:history_nxt
   1045	042C  BA 001F			     mov     dx,31
   1046	042F  F7 EA			     imul    dx
   1047	0431  05 0212r			     add     ax,offset DGROUP:history
   1048	0434  50			     push    ax
   1049	0435  E8 0000e			     call    near ptr _strcpy
   1050	0438  83 C4 08			     add     sp,8
   1051					;
   1052					;			 if (history_len<MAXHISTORY)
   1053					;
   1054	043B  83 3E 0210r 0A		     cmp     word ptr DGROUP:history_len,10
   1055	0440  7D 06			     jge     short @1@2830
   1056					;
   1057					;			    ++history_len;
   1058					;
   1059	0442  FF 06 0210r		     inc     word ptr DGROUP:history_len
   1060	0446  EB 13			     jmp     short @1@2914
   1061	0448			     @1@2830:
   1062					;
   1063					;			 else  {
   1064					;			    if (history_ini==MAXHISTORY-1)
   1065					;
   1066	0448  83 3E 020Er 09		     cmp     word ptr DGROUP:history_ini,9
   1067	044D  75 08			     jne     short @1@2886
   1068					;
   1069					;			       history_ini = 0;
   1070					;
   1071	044F  C7 06 020Er 0000		     mov     word ptr DGROUP:history_ini,0
   1072	0455  EB 04			     jmp     short @1@2914
   1073	0457			     @1@2886:
   1074					;
   1075					;			    else
   1076					;			       ++history_ini;
   1077					;
   1078	0457  FF 06 020Er		     inc     word ptr DGROUP:history_ini
   1079	045B			     @1@2914:
   1080					;
   1081					;			 }
   1082					;			 if (history_nxt==MAXHISTORY-1)
   1083					;
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 20
command.ASM



   1084	045B  83 3E 020Cr 09		     cmp     word ptr DGROUP:history_nxt,9
   1085	0460  75 08			     jne     short @1@2970
   1086					;
   1087					;			    history_nxt	= 0;
   1088					;
   1089	0462  C7 06 020Cr 0000		     mov     word ptr DGROUP:history_nxt,0
   1090	0468  EB 04			     jmp     short @1@2998
   1091	046A			     @1@2970:
   1092					;
   1093					;			 else
   1094					;			    ++history_nxt;
   1095					;
   1096	046A  FF 06 020Cr		     inc     word ptr DGROUP:history_nxt
   1097	046E			     @1@2998:
   1098					;
   1099					;			 /* Verifica qual È o comando ... */
   1100					;			 achou = 0;
   1101					;
   1102	046E  C7 46 F2 0000		     mov     word ptr [bp-14],0
   1103					;
   1104					;			 for (i=0;i<MAXCOMMANDS;++i)  {
   1105					;
   1106	0473  33 FF			     xor     di,di
   1107	0475  EB 28			     jmp     short @1@3110
   1108	0477			     @1@3026:
   1109					;
   1110					;			     if	(strcmp(argv[0],commands[i].name)==0)  {
   1111					;
   1112	0477  1E			     push    ds
   1113	0478  8B C7			     mov     ax,di
   1114	047A  BA 0006			     mov     dx,6
   1115	047D  F7 EA			     imul    dx
   1116	047F  8B D8			     mov     bx,ax
   1117	0481  FF B7 0002r		     push    word ptr DGROUP:commands[bx]
   1118	0485  FF 36 034Ar		     push    word ptr DGROUP:argv+2
   1119	0489  FF 36 0348r		     push    word ptr DGROUP:argv
   1120	048D  E8 0000e			     call    near ptr _strcmp
   1121	0490  83 C4 08			     add     sp,8
   1122	0493  0B C0			     or	     ax,ax
   1123	0495  75 07			     jne     short @1@3082
   1124					;
   1125					;				achou=1;
   1126					;
   1127	0497  C7 46 F2 0001		     mov     word ptr [bp-14],1
   1128					;
   1129					;				break;
   1130					;
   1131	049C  EB 06			     jmp     short @1@3138
   1132	049E			     @1@3082:
   1133	049E  47			     inc     di
   1134	049F			     @1@3110:
   1135	049F  83 FF 1A			     cmp     di,26
   1136	04A2  7C D3			     jl	     short @1@3026
   1137	04A4			     @1@3138:
   1138					;
   1139					;			     }
   1140					;			 }
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 21
command.ASM



   1141					;
   1142					;			 /* Executa o comando */
   1143					;			 if (achou)  {
   1144					;
   1145	04A4  83 7E F2 00		     cmp     word ptr [bp-14],0
   1146	04A8  74 39			     je	     short @1@3194
   1147					;
   1148					;			    res	= commands[i].code(argc,argv);
   1149					;
   1150	04AA  B8 0348r			     mov     ax,offset DGROUP:argv
   1151	04AD  50			     push    ax
   1152	04AE  FF 76 EA			     push    word ptr [bp-22]
   1153	04B1  8B C7			     mov     ax,di
   1154	04B3  BA 0006			     mov     dx,6
   1155	04B6  F7 EA			     imul    dx
   1156	04B8  8B D8			     mov     bx,ax
   1157	04BA  FF 97 0006r		     call    word ptr DGROUP:commands[bx+4]
   1158	04BE  59			     pop     cx
   1159	04BF  59			     pop     cx
   1160	04C0  89 46 EC			     mov     word ptr [bp-20],ax
   1161					;
   1162					;			    inttostr(str,res);
   1163					;
   1164	04C3  FF 76 EC			     push    word ptr [bp-20]
   1165	04C6  16			     push    ss
   1166	04C7  8D 46 F4			     lea     ax,word ptr [bp-12]
   1167	04CA  50			     push    ax
   1168	04CB  E8 0000e			     call    near ptr _inttostr
   1169	04CE  83 C4 06			     add     sp,6
   1170					;
   1171					;			    command_var_set("ERRORLEVEL",str);
   1172					;
   1173	04D1  16			     push    ss
   1174	04D2  8D 46 F4			     lea     ax,word ptr [bp-12]
   1175	04D5  50			     push    ax
   1176	04D6  1E			     push    ds
   1177	04D7  B8 065Cr			     mov     ax,offset DGROUP:s@+1466
   1178	04DA  50			     push    ax
   1179	04DB  E8 025E			     call    near ptr command_var_set
   1180	04DE  83 C4 08			     add     sp,8
   1181					;
   1182					;			 }
   1183					;
   1184	04E1  EB 0A			     jmp     short @1@3222
   1185	04E3			     @1@3194:
   1186					;
   1187					;			 else
   1188					;			    putstr("Erro: comando desconhecido!\n");
   1189					;
   1190	04E3  1E			     push    ds
   1191	04E4  B8 0667r			     mov     ax,offset DGROUP:s@+1477
   1192	04E7  50			     push    ax
   1193	04E8  E8 0000e			     call    near ptr _putstr
   1194	04EB  59			     pop     cx
   1195	04EC  59			     pop     cx
   1196	04ED			     @1@3222:
   1197					;
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 22
command.ASM



   1198					;
   1199					;			 if (!end_command)
   1200					;
   1201	04ED  83 3E 0625r 00		     cmp     word ptr DGROUP:end_command,0
   1202	04F2  75 03			     jne     short @1@3278
   1203					;
   1204					;			    command_showprompt();
   1205					;
   1206	04F4  E8 0078			     call    near ptr command_showprompt
   1207	04F7			     @1@3278:
   1208					;
   1209					;
   1210					;			 numcar=0;
   1211					;
   1212	04F7  33 F6			     xor     si,si
   1213					;
   1214					;			 break;
   1215					;
   1216	04F9  EB 16			     jmp     short @1@3362
   1217	04FB			     @1@3306:
   1218					;
   1219					;		    default:
   1220					;			 if (numcar<MAXLINE)  {
   1221					;
   1222	04FB  83 FE 1E			     cmp     si,30
   1223	04FE  7D 11			     jge     short @1@3362
   1224					;
   1225					;			    putch(car);
   1226					;
   1227	0500  8A 46 FF			     mov     al,byte ptr [bp-1]
   1228	0503  98			     cbw
   1229	0504  50			     push    ax
   1230	0505  E8 0000e			     call    near ptr _putch
   1231	0508  59			     pop     cx
   1232					;
   1233					;			    cmdline[numcar++]=car;
   1234					;
   1235	0509  8A 46 FF			     mov     al,byte ptr [bp-1]
   1236	050C  88 84 0606r		     mov     byte ptr DGROUP:cmdline[si],al
   1237	0510  46			     inc     si
   1238	0511			     @1@3362:
   1239	0511  83 3E 0625r 00		     cmp     word ptr DGROUP:end_command,0
   1240	0516  75 03			     jne     @@3
   1241	0518  E9 FBCF			     jmp     @1@58
   1242	051B			     @@3:
   1243					;
   1244					;			 }
   1245					;	     }
   1246					;      }
   1247					;
   1248					;    }
   1249					;
   1250	051B  5F			     pop     di
   1251	051C  5E			     pop     si
   1252	051D  8B E5			     mov     sp,bp
   1253	051F  5D			     pop     bp
   1254	0520  C3			     ret
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 23
command.ASM



   1255	0521			     _command	     endp
   1256	0521			     @1@C3330	     label   word
   1257	0521  41			     db	     65
   1258	0522  00			     db	     0
   1259	0523  48			     db	     72
   1260	0524  00			     db	     0
   1261	0525  4B			     db	     75
   1262	0526  00			     db	     0
   1263	0527  50			     db	     80
   1264	0528  00			     db	     0
   1265	0529  0153r			     dw	     @1@674
   1266	052B  01ABr			     dw	     @1@982
   1267	052D  01A0r			     dw	     @1@898
   1268	052F  027Br			     dw	     @1@1626
   1269	0531			     @1@C3234	     label   word
   1270	0531  00			     db	     0
   1271	0532  00			     db	     0
   1272	0533  08			     db	     8
   1273	0534  00			     db	     0
   1274	0535  09			     db	     9
   1275	0536  00			     db	     0
   1276	0537  0D			     db	     13
   1277	0538  00			     db	     0
   1278	0539  1B			     db	     27
   1279	053A  00			     db	     0
   1280	053B  012Cr			     dw	     @1@478
   1281	053D  0114r			     dw	     @1@282
   1282	053F  0111r			     dw	     @1@254
   1283	0541  0312r			     dw	     @1@2130
   1284	0543  011Fr			     dw	     @1@366
   1285					;
   1286					;    static void command_backspace()
   1287					;
   1288					     assume  cs:_TEXT
   1289	0545			     command_backspace	     proc    near
   1290	0545  55			     push    bp
   1291	0546  8B EC			     mov     bp,sp
   1292	0548  56			     push    si
   1293	0549  57			     push    di
   1294					;
   1295					;    {
   1296					;      int x,y;
   1297					;
   1298					;      x = wherex();
   1299					;
   1300	054A  E8 0000e			     call    near ptr _wherex
   1301	054D  8B F0			     mov     si,ax
   1302					;
   1303					;      y = wherey();
   1304					;
   1305	054F  E8 0000e			     call    near ptr _wherey
   1306	0552  8B F8			     mov     di,ax
   1307					;
   1308					;      --x;
   1309					;
   1310	0554  4E			     dec     si
   1311					;
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 24
command.ASM



   1312					;      gotoxy(x,y);
   1313					;
   1314	0555  57			     push    di
   1315	0556  56			     push    si
   1316	0557  E8 0000e			     call    near ptr _gotoxy
   1317	055A  59			     pop     cx
   1318	055B  59			     pop     cx
   1319					;
   1320					;      putch(' ');
   1321					;
   1322	055C  B8 0020			     mov     ax,32
   1323	055F  50			     push    ax
   1324	0560  E8 0000e			     call    near ptr _putch
   1325	0563  59			     pop     cx
   1326					;
   1327					;      gotoxy(x,y);
   1328					;
   1329	0564  57			     push    di
   1330	0565  56			     push    si
   1331	0566  E8 0000e			     call    near ptr _gotoxy
   1332	0569  59			     pop     cx
   1333	056A  59			     pop     cx
   1334					;
   1335					;    }
   1336					;
   1337	056B  5F			     pop     di
   1338	056C  5E			     pop     si
   1339	056D  5D			     pop     bp
   1340	056E  C3			     ret
   1341	056F			     command_backspace	     endp
   1342					;
   1343					;    static void command_showprompt()
   1344					;
   1345					     assume  cs:_TEXT
   1346	056F			     command_showprompt	     proc    near
   1347	056F  55			     push    bp
   1348	0570  8B EC			     mov     bp,sp
   1349	0572  83 EC 06			     sub     sp,6
   1350					;
   1351					;    {
   1352					;      char cor;
   1353					;      char far	*prompt;
   1354					;
   1355					;      prompt =	command_var_value("PROMPT");
   1356					;
   1357	0575  1E			     push    ds
   1358	0576  B8 0684r			     mov     ax,offset DGROUP:s@+1506
   1359	0579  50			     push    ax
   1360	057A  E8 0192			     call    near ptr command_var_value
   1361	057D  59			     pop     cx
   1362	057E  59			     pop     cx
   1363	057F  89 56 FC			     mov     word ptr [bp-4],dx
   1364	0582  89 46 FA			     mov     word ptr [bp-6],ax
   1365					;
   1366					;      if (prompt!=NULL)  {
   1367					;
   1368	0585  8B 46 FA			     mov     ax,word ptr [bp-6]
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 25
command.ASM



   1369	0588  0B 46 FC			     or	     ax,word ptr [bp-4]
   1370	058B  74 22			     je	     short @3@86
   1371					;
   1372					;	  cor =	getcolor();
   1373					;
   1374	058D  E8 0000e			     call    near ptr _getcolor
   1375	0590  88 46 FF			     mov     byte ptr [bp-1],al
   1376					;
   1377					;	  setcolor(PROMPTCOLOR);
   1378					;
   1379	0593  B8 0009			     mov     ax,9
   1380	0596  50			     push    ax
   1381	0597  E8 0000e			     call    near ptr _setcolor
   1382	059A  59			     pop     cx
   1383					;
   1384					;	  putstr(prompt);
   1385					;
   1386	059B  FF 76 FC			     push    word ptr [bp-4]
   1387	059E  FF 76 FA			     push    word ptr [bp-6]
   1388	05A1  E8 0000e			     call    near ptr _putstr
   1389	05A4  59			     pop     cx
   1390	05A5  59			     pop     cx
   1391					;
   1392					;	  setcolor(cor);
   1393					;
   1394	05A6  8A 46 FF			     mov     al,byte ptr [bp-1]
   1395	05A9  98			     cbw
   1396	05AA  50			     push    ax
   1397	05AB  E8 0000e			     call    near ptr _setcolor
   1398	05AE  59			     pop     cx
   1399	05AF			     @3@86:
   1400					;
   1401					;      }
   1402					;      putch(' ');
   1403					;
   1404	05AF  B8 0020			     mov     ax,32
   1405	05B2  50			     push    ax
   1406	05B3  E8 0000e			     call    near ptr _putch
   1407	05B6  59			     pop     cx
   1408					;
   1409					;    }
   1410					;
   1411	05B7  8B E5			     mov     sp,bp
   1412	05B9  5D			     pop     bp
   1413	05BA  C3			     ret
   1414	05BB			     command_showprompt	     endp
   1415					;
   1416					;    static void command_var_init()
   1417					;
   1418					     assume  cs:_TEXT
   1419	05BB			     command_var_init	     proc    near
   1420	05BB  55			     push    bp
   1421	05BC  8B EC			     mov     bp,sp
   1422					;
   1423					;    {
   1424					;      int i;
   1425					;
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 26
command.ASM



   1426					;      for (i=0;i<VAR_MAX;++i)	{
   1427					;
   1428	05BE  33 C9			     xor     cx,cx
   1429	05C0  EB 1D			     jmp     short @4@114
   1430	05C2			     @4@58:
   1431					;
   1432					;	   var[i].name[0]='\0';
   1433					;
   1434	05C2  8B C1			     mov     ax,cx
   1435	05C4  BA 0032			     mov     dx,50
   1436	05C7  F7 EA			     imul    dx
   1437	05C9  8B D8			     mov     bx,ax
   1438	05CB  C6 87 0016r 00		     mov     byte ptr DGROUP:var[bx],0
   1439					;
   1440					;	   var[i].value[0]='\0';
   1441					;
   1442	05D0  8B C1			     mov     ax,cx
   1443	05D2  BA 0032			     mov     dx,50
   1444	05D5  F7 EA			     imul    dx
   1445	05D7  8B D8			     mov     bx,ax
   1446	05D9  C6 87 0023r 00		     mov     byte ptr DGROUP:var[bx+13],0
   1447	05DE  41			     inc     cx
   1448	05DF			     @4@114:
   1449	05DF  83 F9 0A			     cmp     cx,10
   1450	05E2  7C DE			     jl	     short @4@58
   1451					;
   1452					;      }
   1453					;      num_var = 0;
   1454					;
   1455	05E4  C7 06 0000r 0000		     mov     word ptr DGROUP:num_var,0
   1456					;
   1457					;    }
   1458					;
   1459	05EA  5D			     pop     bp
   1460	05EB  C3			     ret
   1461	05EC			     command_var_init	     endp
   1462					;
   1463					;    static int	command_var_nextfree()
   1464					;
   1465					     assume  cs:_TEXT
   1466	05EC			     command_var_nextfree    proc    near
   1467	05EC  55			     push    bp
   1468	05ED  8B EC			     mov     bp,sp
   1469					;
   1470					;    {
   1471					;      int i;
   1472					;
   1473					;      if (num_var>=VAR_MAX)
   1474					;
   1475	05EF  83 3E 0000r 0A		     cmp     word ptr DGROUP:num_var,10
   1476	05F4  7C 05			     jl	     short @5@114
   1477	05F6			     @5@58:
   1478					;
   1479					;	  return -1;
   1480					;
   1481	05F6  B8 FFFF			     mov     ax,-1
   1482	05F9			     @5@86:
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 27
command.ASM



   1483	05F9  EB 20			     jmp     short @5@282
   1484	05FB			     @5@114:
   1485					;
   1486					;      for (i=0;i<VAR_MAX;++i)
   1487					;
   1488	05FB  33 C9			     xor     cx,cx
   1489	05FD  EB 15			     jmp     short @5@226
   1490	05FF			     @5@142:
   1491					;
   1492					;	   if (var[i].name[0]=='\0')
   1493					;
   1494	05FF  8B C1			     mov     ax,cx
   1495	0601  BA 0032			     mov     dx,50
   1496	0604  F7 EA			     imul    dx
   1497	0606  8B D8			     mov     bx,ax
   1498	0608  80 BF 0016r 00		     cmp     byte ptr DGROUP:var[bx],0
   1499	060D  75 04			     jne     short @5@198
   1500					;
   1501					;	      return i;
   1502					;
   1503	060F  8B C1			     mov     ax,cx
   1504	0611  EB E6			     jmp     short @5@86
   1505	0613			     @5@198:
   1506	0613  41			     inc     cx
   1507	0614			     @5@226:
   1508	0614  83 F9 0A			     cmp     cx,10
   1509	0617  7C E6			     jl	     short @5@142
   1510	0619  EB DB			     jmp     short @5@58
   1511	061B			     @5@282:
   1512					;
   1513					;      return -1;
   1514					;    }
   1515					;
   1516	061B  5D			     pop     bp
   1517	061C  C3			     ret
   1518	061D			     command_var_nextfree    endp
   1519					;
   1520					;    static void command_var_list()
   1521					;
   1522					     assume  cs:_TEXT
   1523	061D			     command_var_list	     proc    near
   1524	061D  55			     push    bp
   1525	061E  8B EC			     mov     bp,sp
   1526	0620  83 EC 02			     sub     sp,2
   1527	0623  56			     push    si
   1528					;
   1529					;    {
   1530					;      int i;
   1531					;      char cor;
   1532					;
   1533					;      cor = getcolor();
   1534					;
   1535	0624  E8 0000e			     call    near ptr _getcolor
   1536	0627  88 46 FF			     mov     byte ptr [bp-1],al
   1537					;
   1538					;      for (i=0;i<VAR_MAX;++i)	{
   1539					;
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 28
command.ASM



   1540	062A  33 F6			     xor     si,si
   1541	062C  EB 54			     jmp     short @6@142
   1542	062E			     @6@58:
   1543					;
   1544					;	   if (var[i].name[0]!='\0')  {
   1545					;
   1546	062E  8B C6			     mov     ax,si
   1547	0630  BA 0032			     mov     dx,50
   1548	0633  F7 EA			     imul    dx
   1549	0635  8B D8			     mov     bx,ax
   1550	0637  80 BF 0016r 00		     cmp     byte ptr DGROUP:var[bx],0
   1551	063C  74 43			     je	     short @6@114
   1552					;
   1553					;	      putstr(var[i].name);
   1554					;
   1555	063E  1E			     push    ds
   1556	063F  8B C6			     mov     ax,si
   1557	0641  BA 0032			     mov     dx,50
   1558	0644  F7 EA			     imul    dx
   1559	0646  05 0016r			     add     ax,offset DGROUP:var
   1560	0649  50			     push    ax
   1561	064A  E8 0000e			     call    near ptr _putstr
   1562	064D  59			     pop     cx
   1563	064E  59			     pop     cx
   1564					;
   1565					;	      putch('=');
   1566					;
   1567	064F  B8 003D			     mov     ax,61
   1568	0652  50			     push    ax
   1569	0653  E8 0000e			     call    near ptr _putch
   1570	0656  59			     pop     cx
   1571					;
   1572					;	      setcolor(VARCOLOR);
   1573					;
   1574	0657  B8 000E			     mov     ax,14
   1575	065A  50			     push    ax
   1576	065B  E8 0000e			     call    near ptr _setcolor
   1577	065E  59			     pop     cx
   1578					;
   1579					;	      putstr(var[i].value);
   1580					;
   1581	065F  1E			     push    ds
   1582	0660  8B C6			     mov     ax,si
   1583	0662  BA 0032			     mov     dx,50
   1584	0665  F7 EA			     imul    dx
   1585	0667  05 0023r			     add     ax,offset DGROUP:var+13
   1586	066A  50			     push    ax
   1587	066B  E8 0000e			     call    near ptr _putstr
   1588	066E  59			     pop     cx
   1589	066F  59			     pop     cx
   1590					;
   1591					;	      setcolor(cor);
   1592					;
   1593	0670  8A 46 FF			     mov     al,byte ptr [bp-1]
   1594	0673  98			     cbw
   1595	0674  50			     push    ax
   1596	0675  E8 0000e			     call    near ptr _setcolor
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 29
command.ASM



   1597	0678  59			     pop     cx
   1598					;
   1599					;	      putch('\n');
   1600					;
   1601	0679  B8 000A			     mov     ax,10
   1602	067C  50			     push    ax
   1603	067D  E8 0000e			     call    near ptr _putch
   1604	0680  59			     pop     cx
   1605	0681			     @6@114:
   1606	0681  46			     inc     si
   1607	0682			     @6@142:
   1608	0682  83 FE 0A			     cmp     si,10
   1609	0685  7C A7			     jl	     short @6@58
   1610					;
   1611					;	   }
   1612					;      }
   1613					;    }
   1614					;
   1615	0687  5E			     pop     si
   1616	0688  8B E5			     mov     sp,bp
   1617	068A  5D			     pop     bp
   1618	068B  C3			     ret
   1619	068C			     command_var_list	     endp
   1620					;
   1621					;    static int	 command_var_search(char far *nome)
   1622					;
   1623					     assume  cs:_TEXT
   1624	068C			     command_var_search	     proc    near
   1625	068C  55			     push    bp
   1626	068D  8B EC			     mov     bp,sp
   1627	068F  56			     push    si
   1628					;
   1629					;    {
   1630					;      int i;
   1631					;
   1632					;      if (nome[0] == '\0')
   1633					;
   1634	0690  C4 5E 04			     les     bx,dword ptr [bp+4]
   1635	0693  26: 80 3F	00		     cmp     byte ptr es:[bx],0
   1636	0697  75 05			     jne     short @7@114
   1637	0699			     @7@58:
   1638					;
   1639					;	  return -1;
   1640					;
   1641	0699  B8 FFFF			     mov     ax,-1
   1642	069C			     @7@86:
   1643	069C  EB 2C			     jmp     short @7@282
   1644	069E			     @7@114:
   1645					;
   1646					;      for (i=0;i<VAR_MAX;++i)	{
   1647					;
   1648	069E  33 F6			     xor     si,si
   1649	06A0  EB 21			     jmp     short @7@226
   1650	06A2			     @7@142:
   1651					;
   1652					;	   if (strcmp(nome,var[i].name)==0)
   1653					;
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 30
command.ASM



   1654	06A2  1E			     push    ds
   1655	06A3  8B C6			     mov     ax,si
   1656	06A5  BA 0032			     mov     dx,50
   1657	06A8  F7 EA			     imul    dx
   1658	06AA  05 0016r			     add     ax,offset DGROUP:var
   1659	06AD  50			     push    ax
   1660	06AE  FF 76 06			     push    word ptr [bp+6]
   1661	06B1  FF 76 04			     push    word ptr [bp+4]
   1662	06B4  E8 0000e			     call    near ptr _strcmp
   1663	06B7  83 C4 08			     add     sp,8
   1664	06BA  0B C0			     or	     ax,ax
   1665	06BC  75 04			     jne     short @7@198
   1666					;
   1667					;	      return i;
   1668					;
   1669	06BE  8B C6			     mov     ax,si
   1670	06C0  EB DA			     jmp     short @7@86
   1671	06C2			     @7@198:
   1672	06C2  46			     inc     si
   1673	06C3			     @7@226:
   1674	06C3  83 FE 0A			     cmp     si,10
   1675	06C6  7C DA			     jl	     short @7@142
   1676	06C8  EB CF			     jmp     short @7@58
   1677	06CA			     @7@282:
   1678					;
   1679					;      }
   1680					;      return -1;
   1681					;    }
   1682					;
   1683	06CA  5E			     pop     si
   1684	06CB  5D			     pop     bp
   1685	06CC  C3			     ret
   1686	06CD			     command_var_search	     endp
   1687					;
   1688					;    static int	 command_var_unset(char	far *nome)
   1689					;
   1690					     assume  cs:_TEXT
   1691	06CD			     command_var_unset	     proc    near
   1692	06CD  55			     push    bp
   1693	06CE  8B EC			     mov     bp,sp
   1694	06D0  56			     push    si
   1695					;
   1696					;    {
   1697					;      int i;
   1698					;
   1699					;      i = command_var_search(nome);
   1700					;
   1701	06D1  FF 76 06			     push    word ptr [bp+6]
   1702	06D4  FF 76 04			     push    word ptr [bp+4]
   1703	06D7  E8 FFB2			     call    near ptr command_var_search
   1704	06DA  59			     pop     cx
   1705	06DB  59			     pop     cx
   1706	06DC  8B F0			     mov     si,ax
   1707					;
   1708					;      if (i==-1)
   1709					;
   1710	06DE  83 FE FF			     cmp     si,-1
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 31
command.ASM



   1711	06E1  75 05			     jne     short @8@114
   1712					;
   1713					;	  return -1;
   1714					;
   1715	06E3  B8 FFFF			     mov     ax,-1
   1716	06E6			     @8@86:
   1717	06E6  EB 24			     jmp     short @8@142
   1718	06E8			     @8@114:
   1719					;
   1720					;      var[i].name[0]='\0';
   1721					;
   1722	06E8  8B C6			     mov     ax,si
   1723	06EA  BA 0032			     mov     dx,50
   1724	06ED  F7 EA			     imul    dx
   1725	06EF  8B D8			     mov     bx,ax
   1726	06F1  C6 87 0016r 00		     mov     byte ptr DGROUP:var[bx],0
   1727					;
   1728					;      var[i].value[0]='\0';
   1729					;
   1730	06F6  8B C6			     mov     ax,si
   1731	06F8  BA 0032			     mov     dx,50
   1732	06FB  F7 EA			     imul    dx
   1733	06FD  8B D8			     mov     bx,ax
   1734	06FF  C6 87 0023r 00		     mov     byte ptr DGROUP:var[bx+13],0
   1735					;
   1736					;      --num_var;
   1737					;
   1738	0704  FF 0E 0000r		     dec     word ptr DGROUP:num_var
   1739					;
   1740					;      return 0;
   1741					;
   1742	0708  33 C0			     xor     ax,ax
   1743	070A  EB DA			     jmp     short @8@86
   1744	070C			     @8@142:
   1745					;
   1746					;    }
   1747					;
   1748	070C  5E			     pop     si
   1749	070D  5D			     pop     bp
   1750	070E  C3			     ret
   1751	070F			     command_var_unset	     endp
   1752					;
   1753					;    static char far *command_var_value(char far *nome)
   1754					;
   1755					     assume  cs:_TEXT
   1756	070F			     command_var_value	     proc    near
   1757	070F  55			     push    bp
   1758	0710  8B EC			     mov     bp,sp
   1759	0712  56			     push    si
   1760					;
   1761					;    {
   1762					;      int i;
   1763					;
   1764					;      i = command_var_search(nome);
   1765					;
   1766	0713  FF 76 06			     push    word ptr [bp+6]
   1767	0716  FF 76 04			     push    word ptr [bp+4]
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 32
command.ASM



   1768	0719  E8 FF70			     call    near ptr command_var_search
   1769	071C  59			     pop     cx
   1770	071D  59			     pop     cx
   1771	071E  8B F0			     mov     si,ax
   1772					;
   1773					;      if (i==-1)
   1774					;
   1775	0720  83 FE FF			     cmp     si,-1
   1776	0723  75 06			     jne     short @9@114
   1777					;
   1778					;	  return NULL;
   1779					;
   1780	0725  33 D2			     xor     dx,dx
   1781	0727  33 C0			     xor     ax,ax
   1782	0729			     @9@86:
   1783	0729  EB 0E			     jmp     short @9@142
   1784	072B			     @9@114:
   1785					;
   1786					;      return var[i].value;
   1787					;
   1788	072B  8B C6			     mov     ax,si
   1789	072D  BA 0032			     mov     dx,50
   1790	0730  F7 EA			     imul    dx
   1791	0732  05 0023r			     add     ax,offset DGROUP:var+13
   1792	0735  8C DA			     mov     dx,ds
   1793	0737  EB F0			     jmp     short @9@86
   1794	0739			     @9@142:
   1795					;
   1796					;    }
   1797					;
   1798	0739  5E			     pop     si
   1799	073A  5D			     pop     bp
   1800	073B  C3			     ret
   1801	073C			     command_var_value	     endp
   1802					;
   1803					;    static int	command_var_set(char far *nome,char far	*valor)
   1804					;
   1805					     assume  cs:_TEXT
   1806	073C			     command_var_set proc    near
   1807	073C  55			     push    bp
   1808	073D  8B EC			     mov     bp,sp
   1809	073F  56			     push    si
   1810					;
   1811					;    {
   1812					;      int i;
   1813					;
   1814					;      if (strlen(nome)>VAR_NOME_TAM)
   1815					;
   1816	0740  FF 76 06			     push    word ptr [bp+6]
   1817	0743  FF 76 04			     push    word ptr [bp+4]
   1818	0746  E8 0000e			     call    near ptr _strlen
   1819	0749  59			     pop     cx
   1820	074A  59			     pop     cx
   1821	074B  3D 000C			     cmp     ax,12
   1822	074E  76 05			     jbe     short @10@114
   1823					;
   1824					;	  return -3;
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 33
command.ASM



   1825					;
   1826	0750  B8 FFFD			     mov     ax,-3
   1827	0753			     @10@86:
   1828	0753  EB 6A			     jmp     short @10@310
   1829	0755			     @10@114:
   1830					;
   1831					;      if (strlen(valor)>VAR_VALOR_TAM)
   1832					;
   1833	0755  FF 76 0A			     push    word ptr [bp+10]
   1834	0758  FF 76 08			     push    word ptr [bp+8]
   1835	075B  E8 0000e			     call    near ptr _strlen
   1836	075E  59			     pop     cx
   1837	075F  59			     pop     cx
   1838	0760  3D 0024			     cmp     ax,36
   1839	0763  76 05			     jbe     short @10@170
   1840					;
   1841					;	  return -4;
   1842					;
   1843	0765  B8 FFFC			     mov     ax,-4
   1844	0768  EB E9			     jmp     short @10@86
   1845	076A			     @10@170:
   1846					;
   1847					;      i = command_var_search(nome);
   1848					;
   1849	076A  FF 76 06			     push    word ptr [bp+6]
   1850	076D  FF 76 04			     push    word ptr [bp+4]
   1851	0770  E8 FF19			     call    near ptr command_var_search
   1852	0773  59			     pop     cx
   1853	0774  59			     pop     cx
   1854	0775  8B F0			     mov     si,ax
   1855					;
   1856					;      if (i==-1)  {
   1857					;
   1858	0777  83 FE FF			     cmp     si,-1
   1859	077A  75 27			     jne     short @10@282
   1860					;
   1861					;	  i = command_var_nextfree();
   1862					;
   1863	077C  E8 FE6D			     call    near ptr command_var_nextfree
   1864	077F  8B F0			     mov     si,ax
   1865					;
   1866					;	  if (i==-1)
   1867					;
   1868	0781  83 FE FF			     cmp     si,-1
   1869	0784  75 05			     jne     short @10@254
   1870					;
   1871					;	     return -2;
   1872					;
   1873	0786  B8 FFFE			     mov     ax,-2
   1874	0789  EB C8			     jmp     short @10@86
   1875	078B			     @10@254:
   1876					;
   1877					;	  strcpy(var[i].name,nome);
   1878					;
   1879	078B  FF 76 06			     push    word ptr [bp+6]
   1880	078E  FF 76 04			     push    word ptr [bp+4]
   1881	0791  1E			     push    ds
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 34
command.ASM



   1882	0792  8B C6			     mov     ax,si
   1883	0794  BA 0032			     mov     dx,50
   1884	0797  F7 EA			     imul    dx
   1885	0799  05 0016r			     add     ax,offset DGROUP:var
   1886	079C  50			     push    ax
   1887	079D  E8 0000e			     call    near ptr _strcpy
   1888	07A0  83 C4 08			     add     sp,8
   1889	07A3			     @10@282:
   1890					;
   1891					;      }
   1892					;      strcpy(var[i].value,valor);
   1893					;
   1894	07A3  FF 76 0A			     push    word ptr [bp+10]
   1895	07A6  FF 76 08			     push    word ptr [bp+8]
   1896	07A9  1E			     push    ds
   1897	07AA  8B C6			     mov     ax,si
   1898	07AC  BA 0032			     mov     dx,50
   1899	07AF  F7 EA			     imul    dx
   1900	07B1  05 0023r			     add     ax,offset DGROUP:var+13
   1901	07B4  50			     push    ax
   1902	07B5  E8 0000e			     call    near ptr _strcpy
   1903	07B8  83 C4 08			     add     sp,8
   1904					;
   1905					;      return 0;
   1906					;
   1907	07BB  33 C0			     xor     ax,ax
   1908	07BD  EB 94			     jmp     short @10@86
   1909	07BF			     @10@310:
   1910					;
   1911					;    }
   1912					;
   1913	07BF  5E			     pop     si
   1914	07C0  5D			     pop     bp
   1915	07C1  C3			     ret
   1916	07C2			     command_var_set endp
   1917					;
   1918					;    int cmd_reboot(int	argc, char far *argv[])
   1919					;
   1920					     assume  cs:_TEXT
   1921	07C2			     _cmd_reboot     proc    near
   1922	07C2  55			     push    bp
   1923	07C3  8B EC			     mov     bp,sp
   1924	07C5  56			     push    si
   1925	07C6  57			     push    di
   1926	07C7  8B 76 04			     mov     si,word ptr [bp+4]
   1927	07CA  8B 7E 06			     mov     di,word ptr [bp+6]
   1928					;
   1929					;    {
   1930					;      argc=argc;
   1931					;
   1932					;
   1933					;      argv=argv;
   1934					;
   1935					;
   1936					;      reboot();
   1937					;
   1938	07CD  E8 0000e			     call    near ptr _reboot
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 35
command.ASM



   1939					;
   1940					;      return 0;
   1941					;
   1942	07D0  33 C0			     xor     ax,ax
   1943	07D2  EB 00			     jmp     short @11@58
   1944	07D4			     @11@58:
   1945					;
   1946					;    }
   1947					;
   1948	07D4  5F			     pop     di
   1949	07D5  5E			     pop     si
   1950	07D6  5D			     pop     bp
   1951	07D7  C3			     ret
   1952	07D8			     _cmd_reboot     endp
   1953					;
   1954					;    int cmd_exit(int argc, char far *argv[])
   1955					;
   1956					     assume  cs:_TEXT
   1957	07D8			     _cmd_exit	     proc    near
   1958	07D8  55			     push    bp
   1959	07D9  8B EC			     mov     bp,sp
   1960	07DB  8B 56 04			     mov     dx,word ptr [bp+4]
   1961	07DE  8B 5E 06			     mov     bx,word ptr [bp+6]
   1962					;
   1963					;    {
   1964					;      argc=argc;
   1965					;
   1966					;
   1967					;      argv=argv;
   1968					;
   1969					;
   1970					;      end_command = 1;
   1971					;
   1972	07E1  C7 06 0625r 0001		     mov     word ptr DGROUP:end_command,1
   1973					;
   1974					;      return 0;
   1975					;
   1976	07E7  33 C0			     xor     ax,ax
   1977	07E9  EB 00			     jmp     short @12@58
   1978	07EB			     @12@58:
   1979					;
   1980					;    }
   1981					;
   1982	07EB  5D			     pop     bp
   1983	07EC  C3			     ret
   1984	07ED			     _cmd_exit	     endp
   1985					;
   1986					;    int cmd_help(int argc, char far *argv[])
   1987					;
   1988					     assume  cs:_TEXT
   1989	07ED			     _cmd_help	     proc    near
   1990	07ED  55			     push    bp
   1991	07EE  8B EC			     mov     bp,sp
   1992	07F0  56			     push    si
   1993	07F1  57			     push    di
   1994	07F2  8B 7E 04			     mov     di,word ptr [bp+4]
   1995					;
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 36
command.ASM



   1996					;    {
   1997					;      int i;
   1998					;
   1999					;      argc=argc;
   2000					;
   2001					;
   2002					;      argv=argv;
   2003					;
   2004	07F5  8B 46 06			     mov     ax,word ptr [bp+6]
   2005	07F8  89 46 06			     mov     word ptr [bp+6],ax
   2006					;
   2007					;      putstr("Comandos	do minisSistema	Operacional:\n");
   2008					;
   2009	07FB  1E			     push    ds
   2010	07FC  B8 068Br			     mov     ax,offset DGROUP:s@+1513
   2011	07FF  50			     push    ax
   2012	0800  E8 0000e			     call    near ptr _putstr
   2013	0803  59			     pop     cx
   2014	0804  59			     pop     cx
   2015					;
   2016					;      for (i=0;i<MAXCOMMANDS;++i)  {
   2017					;
   2018	0805  33 F6			     xor     si,si
   2019	0807  EB 2F			     jmp     short @13@114
   2020	0809			     @13@58:
   2021					;
   2022					;	   putstr(commands[i].name);
   2023					;
   2024	0809  1E			     push    ds
   2025	080A  8B C6			     mov     ax,si
   2026	080C  BA 0006			     mov     dx,6
   2027	080F  F7 EA			     imul    dx
   2028	0811  8B D8			     mov     bx,ax
   2029	0813  FF B7 0002r		     push    word ptr DGROUP:commands[bx]
   2030	0817  E8 0000e			     call    near ptr _putstr
   2031	081A  59			     pop     cx
   2032	081B  59			     pop     cx
   2033					;
   2034					;	   putstr(commands[i].help);
   2035					;
   2036	081C  1E			     push    ds
   2037	081D  8B C6			     mov     ax,si
   2038	081F  BA 0006			     mov     dx,6
   2039	0822  F7 EA			     imul    dx
   2040	0824  8B D8			     mov     bx,ax
   2041	0826  FF B7 0004r		     push    word ptr DGROUP:commands[bx+2]
   2042	082A  E8 0000e			     call    near ptr _putstr
   2043	082D  59			     pop     cx
   2044	082E  59			     pop     cx
   2045					;
   2046					;	   putch('\n');
   2047					;
   2048	082F  B8 000A			     mov     ax,10
   2049	0832  50			     push    ax
   2050	0833  E8 0000e			     call    near ptr _putch
   2051	0836  59			     pop     cx
   2052	0837  46			     inc     si
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 37
command.ASM



   2053	0838			     @13@114:
   2054	0838  83 FE 1A			     cmp     si,26
   2055	083B  7C CC			     jl	     short @13@58
   2056					;
   2057					;      }
   2058					;      return 0;
   2059					;
   2060	083D  33 C0			     xor     ax,ax
   2061	083F  EB 00			     jmp     short @13@170
   2062	0841			     @13@170:
   2063					;
   2064					;    }
   2065					;
   2066	0841  5F			     pop     di
   2067	0842  5E			     pop     si
   2068	0843  5D			     pop     bp
   2069	0844  C3			     ret
   2070	0845			     _cmd_help	     endp
   2071					;
   2072					;    int cmd_date(int argc, char far *argv[])
   2073					;
   2074					     assume  cs:_TEXT
   2075	0845			     _cmd_date	     proc    near
   2076	0845  55			     push    bp
   2077	0846  8B EC			     mov     bp,sp
   2078	0848  83 EC 18			     sub     sp,24
   2079	084B  56			     push    si
   2080	084C  57			     push    di
   2081	084D  8B 76 04			     mov     si,word ptr [bp+4]
   2082	0850  8B 7E 06			     mov     di,word ptr [bp+6]
   2083					;
   2084					;    {
   2085					;      struct date d;
   2086					;      char str[20];
   2087					;
   2088					;      argc=argc;
   2089					;
   2090					;
   2091					;      argv=argv;
   2092					;
   2093					;
   2094					;
   2095					;
   2096					;
   2097					;      getdate(&d);
   2098					;
   2099	0853  16			     push    ss
   2100	0854  8D 46 FC			     lea     ax,word ptr [bp-4]
   2101	0857  50			     push    ax
   2102	0858  E8 0000e			     call    near ptr _getdate
   2103	085B  59			     pop     cx
   2104	085C  59			     pop     cx
   2105					;
   2106					;      unsignedtostr(str,d.da_day,2,'0');
   2107					;
   2108	085D  B0 30			     mov     al,48
   2109	085F  50			     push    ax
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 38
command.ASM



   2110	0860  B8 0002			     mov     ax,2
   2111	0863  50			     push    ax
   2112	0864  8A 46 FE			     mov     al,byte ptr [bp-2]
   2113	0867  98			     cbw
   2114	0868  50			     push    ax
   2115	0869  16			     push    ss
   2116	086A  8D 46 E8			     lea     ax,word ptr [bp-24]
   2117	086D  50			     push    ax
   2118	086E  E8 0000e			     call    near ptr _unsignedtostr
   2119	0871  83 C4 0A			     add     sp,10
   2120					;
   2121					;      putstr(str);
   2122					;
   2123	0874  16			     push    ss
   2124	0875  8D 46 E8			     lea     ax,word ptr [bp-24]
   2125	0878  50			     push    ax
   2126	0879  E8 0000e			     call    near ptr _putstr
   2127	087C  59			     pop     cx
   2128	087D  59			     pop     cx
   2129					;
   2130					;      putch('/');
   2131					;
   2132	087E  B8 002F			     mov     ax,47
   2133	0881  50			     push    ax
   2134	0882  E8 0000e			     call    near ptr _putch
   2135	0885  59			     pop     cx
   2136					;
   2137					;      unsignedtostr(str,d.da_mon,2,'0');
   2138					;
   2139	0886  B0 30			     mov     al,48
   2140	0888  50			     push    ax
   2141	0889  B8 0002			     mov     ax,2
   2142	088C  50			     push    ax
   2143	088D  8A 46 FF			     mov     al,byte ptr [bp-1]
   2144	0890  98			     cbw
   2145	0891  50			     push    ax
   2146	0892  16			     push    ss
   2147	0893  8D 46 E8			     lea     ax,word ptr [bp-24]
   2148	0896  50			     push    ax
   2149	0897  E8 0000e			     call    near ptr _unsignedtostr
   2150	089A  83 C4 0A			     add     sp,10
   2151					;
   2152					;      putstr(str);
   2153					;
   2154	089D  16			     push    ss
   2155	089E  8D 46 E8			     lea     ax,word ptr [bp-24]
   2156	08A1  50			     push    ax
   2157	08A2  E8 0000e			     call    near ptr _putstr
   2158	08A5  59			     pop     cx
   2159	08A6  59			     pop     cx
   2160					;
   2161					;      putch('/');
   2162					;
   2163	08A7  B8 002F			     mov     ax,47
   2164	08AA  50			     push    ax
   2165	08AB  E8 0000e			     call    near ptr _putch
   2166	08AE  59			     pop     cx
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 39
command.ASM



   2167					;
   2168					;      unsignedtostr(str,d.da_year,4,'0');
   2169					;
   2170	08AF  B0 30			     mov     al,48
   2171	08B1  50			     push    ax
   2172	08B2  B8 0004			     mov     ax,4
   2173	08B5  50			     push    ax
   2174	08B6  FF 76 FC			     push    word ptr [bp-4]
   2175	08B9  16			     push    ss
   2176	08BA  8D 46 E8			     lea     ax,word ptr [bp-24]
   2177	08BD  50			     push    ax
   2178	08BE  E8 0000e			     call    near ptr _unsignedtostr
   2179	08C1  83 C4 0A			     add     sp,10
   2180					;
   2181					;      putstr(str);
   2182					;
   2183	08C4  16			     push    ss
   2184	08C5  8D 46 E8			     lea     ax,word ptr [bp-24]
   2185	08C8  50			     push    ax
   2186	08C9  E8 0000e			     call    near ptr _putstr
   2187	08CC  59			     pop     cx
   2188	08CD  59			     pop     cx
   2189					;
   2190					;      putch('\n');
   2191					;
   2192	08CE  B8 000A			     mov     ax,10
   2193	08D1  50			     push    ax
   2194	08D2  E8 0000e			     call    near ptr _putch
   2195	08D5  59			     pop     cx
   2196					;
   2197					;      return 0;
   2198					;
   2199	08D6  33 C0			     xor     ax,ax
   2200	08D8  EB 00			     jmp     short @14@58
   2201	08DA			     @14@58:
   2202					;
   2203					;    }
   2204					;
   2205	08DA  5F			     pop     di
   2206	08DB  5E			     pop     si
   2207	08DC  8B E5			     mov     sp,bp
   2208	08DE  5D			     pop     bp
   2209	08DF  C3			     ret
   2210	08E0			     _cmd_date	     endp
   2211					;
   2212					;    int cmd_time(int argc, char far *argv[])
   2213					;
   2214					     assume  cs:_TEXT
   2215	08E0			     _cmd_time	     proc    near
   2216	08E0  55			     push    bp
   2217	08E1  8B EC			     mov     bp,sp
   2218	08E3  83 EC 18			     sub     sp,24
   2219	08E6  56			     push    si
   2220	08E7  57			     push    di
   2221	08E8  8B 76 04			     mov     si,word ptr [bp+4]
   2222	08EB  8B 7E 06			     mov     di,word ptr [bp+6]
   2223					;
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 40
command.ASM



   2224					;    {
   2225					;      struct time t;
   2226					;      char str[20];
   2227					;
   2228					;      argc=argc;
   2229					;
   2230					;
   2231					;      argv=argv;
   2232					;
   2233					;
   2234					;      gettime(&t);
   2235					;
   2236	08EE  16			     push    ss
   2237	08EF  8D 46 FC			     lea     ax,word ptr [bp-4]
   2238	08F2  50			     push    ax
   2239	08F3  E8 0000e			     call    near ptr _gettime
   2240	08F6  59			     pop     cx
   2241	08F7  59			     pop     cx
   2242					;
   2243					;      unsignedtostr(str,t.ti_hour,2,'0');
   2244					;
   2245	08F8  B0 30			     mov     al,48
   2246	08FA  50			     push    ax
   2247	08FB  B8 0002			     mov     ax,2
   2248	08FE  50			     push    ax
   2249	08FF  8A 46 FD			     mov     al,byte ptr [bp-3]
   2250	0902  B4 00			     mov     ah,0
   2251	0904  50			     push    ax
   2252	0905  16			     push    ss
   2253	0906  8D 46 E8			     lea     ax,word ptr [bp-24]
   2254	0909  50			     push    ax
   2255	090A  E8 0000e			     call    near ptr _unsignedtostr
   2256	090D  83 C4 0A			     add     sp,10
   2257					;
   2258					;      putstr(str);
   2259					;
   2260	0910  16			     push    ss
   2261	0911  8D 46 E8			     lea     ax,word ptr [bp-24]
   2262	0914  50			     push    ax
   2263	0915  E8 0000e			     call    near ptr _putstr
   2264	0918  59			     pop     cx
   2265	0919  59			     pop     cx
   2266					;
   2267					;      putch(':');
   2268					;
   2269	091A  B8 003A			     mov     ax,58
   2270	091D  50			     push    ax
   2271	091E  E8 0000e			     call    near ptr _putch
   2272	0921  59			     pop     cx
   2273					;
   2274					;
   2275					;
   2276					;      unsignedtostr(str,t.ti_min,2,'0');
   2277					;
   2278	0922  B0 30			     mov     al,48
   2279	0924  50			     push    ax
   2280	0925  B8 0002			     mov     ax,2
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 41
command.ASM



   2281	0928  50			     push    ax
   2282	0929  8A 46 FC			     mov     al,byte ptr [bp-4]
   2283	092C  B4 00			     mov     ah,0
   2284	092E  50			     push    ax
   2285	092F  16			     push    ss
   2286	0930  8D 46 E8			     lea     ax,word ptr [bp-24]
   2287	0933  50			     push    ax
   2288	0934  E8 0000e			     call    near ptr _unsignedtostr
   2289	0937  83 C4 0A			     add     sp,10
   2290					;
   2291					;      putstr(str);
   2292					;
   2293	093A  16			     push    ss
   2294	093B  8D 46 E8			     lea     ax,word ptr [bp-24]
   2295	093E  50			     push    ax
   2296	093F  E8 0000e			     call    near ptr _putstr
   2297	0942  59			     pop     cx
   2298	0943  59			     pop     cx
   2299					;
   2300					;      putch(':');
   2301					;
   2302	0944  B8 003A			     mov     ax,58
   2303	0947  50			     push    ax
   2304	0948  E8 0000e			     call    near ptr _putch
   2305	094B  59			     pop     cx
   2306					;
   2307					;      unsignedtostr(str,t.ti_sec,2,'0');
   2308					;
   2309	094C  B0 30			     mov     al,48
   2310	094E  50			     push    ax
   2311	094F  B8 0002			     mov     ax,2
   2312	0952  50			     push    ax
   2313	0953  8A 46 FF			     mov     al,byte ptr [bp-1]
   2314	0956  B4 00			     mov     ah,0
   2315	0958  50			     push    ax
   2316	0959  16			     push    ss
   2317	095A  8D 46 E8			     lea     ax,word ptr [bp-24]
   2318	095D  50			     push    ax
   2319	095E  E8 0000e			     call    near ptr _unsignedtostr
   2320	0961  83 C4 0A			     add     sp,10
   2321					;
   2322					;      putstr(str);
   2323					;
   2324	0964  16			     push    ss
   2325	0965  8D 46 E8			     lea     ax,word ptr [bp-24]
   2326	0968  50			     push    ax
   2327	0969  E8 0000e			     call    near ptr _putstr
   2328	096C  59			     pop     cx
   2329	096D  59			     pop     cx
   2330					;
   2331					;      putch('\n');
   2332					;
   2333	096E  B8 000A			     mov     ax,10
   2334	0971  50			     push    ax
   2335	0972  E8 0000e			     call    near ptr _putch
   2336	0975  59			     pop     cx
   2337					;
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 42
command.ASM



   2338					;      return 0;
   2339					;
   2340	0976  33 C0			     xor     ax,ax
   2341	0978  EB 00			     jmp     short @15@58
   2342	097A			     @15@58:
   2343					;
   2344					;    }
   2345					;
   2346	097A  5F			     pop     di
   2347	097B  5E			     pop     si
   2348	097C  8B E5			     mov     sp,bp
   2349	097E  5D			     pop     bp
   2350	097F  C3			     ret
   2351	0980			     _cmd_time	     endp
   2352					;
   2353					;    int cmd_cls(int argc, char	far *argv[])
   2354					;
   2355					     assume  cs:_TEXT
   2356	0980			     _cmd_cls	     proc    near
   2357	0980  55			     push    bp
   2358	0981  8B EC			     mov     bp,sp
   2359	0983  56			     push    si
   2360	0984  57			     push    di
   2361	0985  8B 76 04			     mov     si,word ptr [bp+4]
   2362	0988  8B 7E 06			     mov     di,word ptr [bp+6]
   2363					;
   2364					;    {
   2365					;      argc=argc;
   2366					;
   2367					;
   2368					;      argv=argv;
   2369					;
   2370					;
   2371					;      clrscr();
   2372					;
   2373	098B  E8 0000e			     call    near ptr _clrscr
   2374					;
   2375					;      return 0;
   2376					;
   2377	098E  33 C0			     xor     ax,ax
   2378	0990  EB 00			     jmp     short @16@58
   2379	0992			     @16@58:
   2380					;
   2381					;    }
   2382					;
   2383	0992  5F			     pop     di
   2384	0993  5E			     pop     si
   2385	0994  5D			     pop     bp
   2386	0995  C3			     ret
   2387	0996			     _cmd_cls	     endp
   2388					;
   2389					;    int cmd_ver(int argc, char	far *argv[])
   2390					;
   2391					     assume  cs:_TEXT
   2392	0996			     _cmd_ver	     proc    near
   2393	0996  55			     push    bp
   2394	0997  8B EC			     mov     bp,sp
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 43
command.ASM



   2395	0999  56			     push    si
   2396	099A  57			     push    di
   2397	099B  8B 76 04			     mov     si,word ptr [bp+4]
   2398	099E  8B 7E 06			     mov     di,word ptr [bp+6]
   2399					;
   2400					;    {
   2401					;      argc=argc;
   2402					;
   2403					;
   2404					;      argv=argv;
   2405					;
   2406					;
   2407					;      putstr("minisSistema Operacional	- Vs ");
   2408					;
   2409	09A1  1E			     push    ds
   2410	09A2  B8 06B2r			     mov     ax,offset DGROUP:s@+1552
   2411	09A5  50			     push    ax
   2412	09A6  E8 0000e			     call    near ptr _putstr
   2413	09A9  59			     pop     cx
   2414	09AA  59			     pop     cx
   2415					;
   2416					;      putstr(miniSO_VERSION);
   2417					;
   2418	09AB  1E			     push    ds
   2419	09AC  B8 06D1r			     mov     ax,offset DGROUP:s@+1583
   2420	09AF  50			     push    ax
   2421	09B0  E8 0000e			     call    near ptr _putstr
   2422	09B3  59			     pop     cx
   2423	09B4  59			     pop     cx
   2424					;
   2425					;      putch('\n');
   2426					;
   2427	09B5  B8 000A			     mov     ax,10
   2428	09B8  50			     push    ax
   2429	09B9  E8 0000e			     call    near ptr _putch
   2430	09BC  59			     pop     cx
   2431					;
   2432					;      return 0;
   2433					;
   2434	09BD  33 C0			     xor     ax,ax
   2435	09BF  EB 00			     jmp     short @17@58
   2436	09C1			     @17@58:
   2437					;
   2438					;    }
   2439					;
   2440	09C1  5F			     pop     di
   2441	09C2  5E			     pop     si
   2442	09C3  5D			     pop     bp
   2443	09C4  C3			     ret
   2444	09C5			     _cmd_ver	     endp
   2445	09C5			     _TEXT   ends
   2446	0000			     _BSS    segment word public 'BSS'
   2447	0000  14*(??)			     db	     20	dup (?)
   2448	0014			     _BSS    ends
   2449	09C5			     _TEXT   segment byte public 'CODE'
   2450					;
   2451					;    int cmd_ps(int argc, char far *argv[])
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 44
command.ASM



   2452					;
   2453					     assume  cs:_TEXT
   2454	09C5			     _cmd_ps proc    near
   2455	09C5  55			     push    bp
   2456	09C6  8B EC			     mov     bp,sp
   2457	09C8  56			     push    si
   2458	09C9  57			     push    di
   2459					;
   2460					;    {
   2461					;      int i,l;
   2462					;      static char str[20];
   2463					;      extern miniSO_PCB miniSO_thread[];
   2464					;
   2465					;      argc=argc;
   2466					;
   2467	09CA  8B 46 04			     mov     ax,word ptr [bp+4]
   2468	09CD  89 46 04			     mov     word ptr [bp+4],ax
   2469					;
   2470					;      argv=argv;
   2471					;
   2472	09D0  8B 46 06			     mov     ax,word ptr [bp+6]
   2473	09D3  89 46 06			     mov     word ptr [bp+6],ax
   2474					;
   2475					;      putstr("	BCP   PID   PPID  STATUS   WAIT	  ZLIST	 PREV	NEXT\n");
   2476					;
   2477	09D6  1E			     push    ds
   2478	09D7  B8 06D6r			     mov     ax,offset DGROUP:s@+1588
   2479	09DA  50			     push    ax
   2480	09DB  E8 0000e			     call    near ptr _putstr
   2481	09DE  59			     pop     cx
   2482	09DF  59			     pop     cx
   2483					;
   2484					;      for (i=0;i<miniSO_MAXTHREADS;++i)  {
   2485					;
   2486	09E0  33 FF			     xor     di,di
   2487	09E2  E9 0266			     jmp     @18@1094
   2488	09E5			     @18@58:
   2489					;
   2490					;	   if (miniSO_thread[i].status!=FREE)  {
   2491					;
   2492	09E5  8B C7			     mov     ax,di
   2493	09E7  BA 001A			     mov     dx,26
   2494	09EA  F7 EA			     imul    dx
   2495	09EC  8B D8			     mov     bx,ax
   2496	09EE  83 BF 0004e FF		     cmp     word ptr DGROUP:_miniSO_thread[bx+4],-1
   2497	09F3  75 03			     jne     @@4
   2498	09F5  E9 0252			     jmp     @18@1066
   2499	09F8			     @@4:
   2500					;
   2501					;	      inttostr(str,i);
   2502					;
   2503	09F8  57			     push    di
   2504	09F9  1E			     push    ds
   2505	09FA  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2506	09FD  50			     push    ax
   2507	09FE  E8 0000e			     call    near ptr _inttostr
   2508	0A01  83 C4 06			     add     sp,6
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 45
command.ASM



   2509					;
   2510					;	      l=strlen(str);
   2511					;
   2512	0A04  1E			     push    ds
   2513	0A05  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2514	0A08  50			     push    ax
   2515	0A09  E8 0000e			     call    near ptr _strlen
   2516	0A0C  59			     pop     cx
   2517	0A0D  59			     pop     cx
   2518	0A0E  8B F0			     mov     si,ax
   2519	0A10  EB 08			     jmp     short @18@142
   2520	0A12			     @18@114:
   2521					;
   2522					;	      while (l++<3)
   2523					;		    putch(' ');
   2524					;
   2525	0A12  B8 0020			     mov     ax,32
   2526	0A15  50			     push    ax
   2527	0A16  E8 0000e			     call    near ptr _putch
   2528	0A19  59			     pop     cx
   2529	0A1A			     @18@142:
   2530	0A1A  8B C6			     mov     ax,si
   2531	0A1C  46			     inc     si
   2532	0A1D  3D 0003			     cmp     ax,3
   2533	0A20  7C F0			     jl	     short @18@114
   2534					;
   2535					;	      putstr(str);
   2536					;
   2537	0A22  1E			     push    ds
   2538	0A23  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2539	0A26  50			     push    ax
   2540	0A27  E8 0000e			     call    near ptr _putstr
   2541	0A2A  59			     pop     cx
   2542	0A2B  59			     pop     cx
   2543					;
   2544					;	      putstr("	");
   2545					;
   2546	0A2C  1E			     push    ds
   2547	0A2D  B8 070Dr			     mov     ax,offset DGROUP:s@+1643
   2548	0A30  50			     push    ax
   2549	0A31  E8 0000e			     call    near ptr _putstr
   2550	0A34  59			     pop     cx
   2551	0A35  59			     pop     cx
   2552					;
   2553					;	      inttostr(str,miniSO_thread[i].pid);
   2554					;
   2555	0A36  8B C7			     mov     ax,di
   2556	0A38  BA 001A			     mov     dx,26
   2557	0A3B  F7 EA			     imul    dx
   2558	0A3D  8B D8			     mov     bx,ax
   2559	0A3F  FF B7 0000e		     push    word ptr DGROUP:_miniSO_thread[bx]
   2560	0A43  1E			     push    ds
   2561	0A44  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2562	0A47  50			     push    ax
   2563	0A48  E8 0000e			     call    near ptr _inttostr
   2564	0A4B  83 C4 06			     add     sp,6
   2565					;
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 46
command.ASM



   2566					;	      l=strlen(str);
   2567					;
   2568	0A4E  1E			     push    ds
   2569	0A4F  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2570	0A52  50			     push    ax
   2571	0A53  E8 0000e			     call    near ptr _strlen
   2572	0A56  59			     pop     cx
   2573	0A57  59			     pop     cx
   2574	0A58  8B F0			     mov     si,ax
   2575	0A5A  EB 08			     jmp     short @18@226
   2576	0A5C			     @18@198:
   2577					;
   2578					;	      while (l++<5)
   2579					;		    putch(' ');
   2580					;
   2581	0A5C  B8 0020			     mov     ax,32
   2582	0A5F  50			     push    ax
   2583	0A60  E8 0000e			     call    near ptr _putch
   2584	0A63  59			     pop     cx
   2585	0A64			     @18@226:
   2586	0A64  8B C6			     mov     ax,si
   2587	0A66  46			     inc     si
   2588	0A67  3D 0005			     cmp     ax,5
   2589	0A6A  7C F0			     jl	     short @18@198
   2590					;
   2591					;	      putstr(str);
   2592					;
   2593	0A6C  1E			     push    ds
   2594	0A6D  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2595	0A70  50			     push    ax
   2596	0A71  E8 0000e			     call    near ptr _putstr
   2597	0A74  59			     pop     cx
   2598	0A75  59			     pop     cx
   2599					;
   2600					;	      putstr("	");
   2601					;
   2602	0A76  1E			     push    ds
   2603	0A77  B8 0710r			     mov     ax,offset DGROUP:s@+1646
   2604	0A7A  50			     push    ax
   2605	0A7B  E8 0000e			     call    near ptr _putstr
   2606	0A7E  59			     pop     cx
   2607	0A7F  59			     pop     cx
   2608					;
   2609					;	      inttostr(str,miniSO_thread[i].ppid);
   2610					;
   2611	0A80  8B C7			     mov     ax,di
   2612	0A82  BA 001A			     mov     dx,26
   2613	0A85  F7 EA			     imul    dx
   2614	0A87  8B D8			     mov     bx,ax
   2615	0A89  FF B7 0002e		     push    word ptr DGROUP:_miniSO_thread[bx+2]
   2616	0A8D  1E			     push    ds
   2617	0A8E  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2618	0A91  50			     push    ax
   2619	0A92  E8 0000e			     call    near ptr _inttostr
   2620	0A95  83 C4 06			     add     sp,6
   2621					;
   2622					;	      l=strlen(str);
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 47
command.ASM



   2623					;
   2624	0A98  1E			     push    ds
   2625	0A99  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2626	0A9C  50			     push    ax
   2627	0A9D  E8 0000e			     call    near ptr _strlen
   2628	0AA0  59			     pop     cx
   2629	0AA1  59			     pop     cx
   2630	0AA2  8B F0			     mov     si,ax
   2631	0AA4  EB 08			     jmp     short @18@310
   2632	0AA6			     @18@282:
   2633					;
   2634					;	      while (l++<5)
   2635					;		    putch(' ');
   2636					;
   2637	0AA6  B8 0020			     mov     ax,32
   2638	0AA9  50			     push    ax
   2639	0AAA  E8 0000e			     call    near ptr _putch
   2640	0AAD  59			     pop     cx
   2641	0AAE			     @18@310:
   2642	0AAE  8B C6			     mov     ax,si
   2643	0AB0  46			     inc     si
   2644	0AB1  3D 0005			     cmp     ax,5
   2645	0AB4  7C F0			     jl	     short @18@282
   2646					;
   2647					;	      putstr(str);
   2648					;
   2649	0AB6  1E			     push    ds
   2650	0AB7  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2651	0ABA  50			     push    ax
   2652	0ABB  E8 0000e			     call    near ptr _putstr
   2653	0ABE  59			     pop     cx
   2654	0ABF  59			     pop     cx
   2655					;
   2656					;	      putstr("	");
   2657					;
   2658	0AC0  1E			     push    ds
   2659	0AC1  B8 0713r			     mov     ax,offset DGROUP:s@+1649
   2660	0AC4  50			     push    ax
   2661	0AC5  E8 0000e			     call    near ptr _putstr
   2662	0AC8  59			     pop     cx
   2663	0AC9  59			     pop     cx
   2664					;
   2665					;	      switch(miniSO_thread[i].status)  {
   2666					;
   2667	0ACA  8B C7			     mov     ax,di
   2668	0ACC  BA 001A			     mov     dx,26
   2669	0ACF  F7 EA			     imul    dx
   2670	0AD1  8B D8			     mov     bx,ax
   2671	0AD3  8B 9F 0004e		     mov     bx,word ptr DGROUP:_miniSO_thread[bx+4]
   2672	0AD7  43			     inc     bx
   2673	0AD8  83 FB 07			     cmp     bx,7
   2674	0ADB  77 3D			     ja	     short @18@702
   2675	0ADD  D1 E3			     shl     bx,1
   2676	0ADF  2E: FF A7	0C5Br		     jmp     word ptr cs:@18@C1266[bx]
   2677	0AE4			     @18@450:
   2678					;
   2679					;		    case FREE:	  putstr(strFREE);    break;
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 48
command.ASM



   2680					;
   2681	0AE4  1E			     push    ds
   2682	0AE5  B8 0716r			     mov     ax,offset DGROUP:s@+1652
   2683	0AE8			     @18@478:
   2684	0AE8  50			     push    ax
   2685	0AE9  E8 0000e			     call    near ptr _putstr
   2686	0AEC  59			     pop     cx
   2687	0AED  59			     pop     cx
   2688	0AEE  EB 2A			     jmp     short @18@702
   2689	0AF0			     @18@506:
   2690					;
   2691					;		    case READY:	  putstr(strREADY);   break;
   2692					;
   2693	0AF0  1E			     push    ds
   2694	0AF1  B8 071Er			     mov     ax,offset DGROUP:s@+1660
   2695	0AF4  EB F2			     jmp     short @18@478
   2696	0AF6			     @18@534:
   2697					;
   2698					;		    case RUNNING: putstr(strRUNNING); break;
   2699					;
   2700	0AF6  1E			     push    ds
   2701	0AF7  B8 0726r			     mov     ax,offset DGROUP:s@+1668
   2702	0AFA  EB EC			     jmp     short @18@478
   2703	0AFC			     @18@562:
   2704					;
   2705					;		    case ZOMBIE:  putstr(strZOMBIE);  break;
   2706					;
   2707	0AFC  1E			     push    ds
   2708	0AFD  B8 072Er			     mov     ax,offset DGROUP:s@+1676
   2709	0B00  EB E6			     jmp     short @18@478
   2710	0B02			     @18@590:
   2711					;
   2712					;		    case WAIT:	  putstr(strWAIT);    break;
   2713					;
   2714	0B02  1E			     push    ds
   2715	0B03  B8 0736r			     mov     ax,offset DGROUP:s@+1684
   2716	0B06  EB E0			     jmp     short @18@478
   2717	0B08			     @18@618:
   2718					;
   2719					;		    case WAITSIG: putstr(strWAITSIG); break;
   2720					;
   2721	0B08  1E			     push    ds
   2722	0B09  B8 073Er			     mov     ax,offset DGROUP:s@+1692
   2723	0B0C  EB DA			     jmp     short @18@478
   2724	0B0E			     @18@646:
   2725					;
   2726					;		    case WAITSEM: putstr(strWAITSEM); break;
   2727					;
   2728	0B0E  1E			     push    ds
   2729	0B0F  B8 0746r			     mov     ax,offset DGROUP:s@+1700
   2730	0B12  EB D4			     jmp     short @18@478
   2731	0B14			     @18@674:
   2732					;
   2733					;		    case STOPPED: putstr(strSTOPPED); break;
   2734					;
   2735	0B14  1E			     push    ds
   2736	0B15  B8 074Er			     mov     ax,offset DGROUP:s@+1708
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 49
command.ASM



   2737	0B18  EB CE			     jmp     short @18@478
   2738	0B1A			     @18@702:
   2739					;
   2740					;	      }
   2741					;	      putstr("	");
   2742					;
   2743	0B1A  1E			     push    ds
   2744	0B1B  B8 0756r			     mov     ax,offset DGROUP:s@+1716
   2745	0B1E  50			     push    ax
   2746	0B1F  E8 0000e			     call    near ptr _putstr
   2747	0B22  59			     pop     cx
   2748	0B23  59			     pop     cx
   2749					;
   2750					;	      inttostr(str,miniSO_thread[i].wait);
   2751					;
   2752	0B24  8B C7			     mov     ax,di
   2753	0B26  BA 001A			     mov     dx,26
   2754	0B29  F7 EA			     imul    dx
   2755	0B2B  8B D8			     mov     bx,ax
   2756	0B2D  FF B7 000Ee		     push    word ptr DGROUP:_miniSO_thread[bx+14]
   2757	0B31  1E			     push    ds
   2758	0B32  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2759	0B35  50			     push    ax
   2760	0B36  E8 0000e			     call    near ptr _inttostr
   2761	0B39  83 C4 06			     add     sp,6
   2762					;
   2763					;	      l=strlen(str);
   2764					;
   2765	0B3C  1E			     push    ds
   2766	0B3D  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2767	0B40  50			     push    ax
   2768	0B41  E8 0000e			     call    near ptr _strlen
   2769	0B44  59			     pop     cx
   2770	0B45  59			     pop     cx
   2771	0B46  8B F0			     mov     si,ax
   2772	0B48  EB 08			     jmp     short @18@758
   2773	0B4A			     @18@730:
   2774					;
   2775					;	      while (l++<5)
   2776					;		    putch(' ');
   2777					;
   2778	0B4A  B8 0020			     mov     ax,32
   2779	0B4D  50			     push    ax
   2780	0B4E  E8 0000e			     call    near ptr _putch
   2781	0B51  59			     pop     cx
   2782	0B52			     @18@758:
   2783	0B52  8B C6			     mov     ax,si
   2784	0B54  46			     inc     si
   2785	0B55  3D 0005			     cmp     ax,5
   2786	0B58  7C F0			     jl	     short @18@730
   2787					;
   2788					;	      putstr(str);
   2789					;
   2790	0B5A  1E			     push    ds
   2791	0B5B  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2792	0B5E  50			     push    ax
   2793	0B5F  E8 0000e			     call    near ptr _putstr
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 50
command.ASM



   2794	0B62  59			     pop     cx
   2795	0B63  59			     pop     cx
   2796					;
   2797					;
   2798					;	      putstr("	");
   2799					;
   2800	0B64  1E			     push    ds
   2801	0B65  B8 0759r			     mov     ax,offset DGROUP:s@+1719
   2802	0B68  50			     push    ax
   2803	0B69  E8 0000e			     call    near ptr _putstr
   2804	0B6C  59			     pop     cx
   2805	0B6D  59			     pop     cx
   2806					;
   2807					;	      inttostr(str,miniSO_thread[i].zombies);
   2808					;
   2809	0B6E  8B C7			     mov     ax,di
   2810	0B70  BA 001A			     mov     dx,26
   2811	0B73  F7 EA			     imul    dx
   2812	0B75  8B D8			     mov     bx,ax
   2813	0B77  FF B7 0014e		     push    word ptr DGROUP:_miniSO_thread[bx+20]
   2814	0B7B  1E			     push    ds
   2815	0B7C  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2816	0B7F  50			     push    ax
   2817	0B80  E8 0000e			     call    near ptr _inttostr
   2818	0B83  83 C4 06			     add     sp,6
   2819					;
   2820					;	      l=strlen(str);
   2821					;
   2822	0B86  1E			     push    ds
   2823	0B87  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2824	0B8A  50			     push    ax
   2825	0B8B  E8 0000e			     call    near ptr _strlen
   2826	0B8E  59			     pop     cx
   2827	0B8F  59			     pop     cx
   2828	0B90  8B F0			     mov     si,ax
   2829	0B92  EB 08			     jmp     short @18@842
   2830	0B94			     @18@814:
   2831					;
   2832					;	      while (l++<5)
   2833					;		    putch(' ');
   2834					;
   2835	0B94  B8 0020			     mov     ax,32
   2836	0B97  50			     push    ax
   2837	0B98  E8 0000e			     call    near ptr _putch
   2838	0B9B  59			     pop     cx
   2839	0B9C			     @18@842:
   2840	0B9C  8B C6			     mov     ax,si
   2841	0B9E  46			     inc     si
   2842	0B9F  3D 0005			     cmp     ax,5
   2843	0BA2  7C F0			     jl	     short @18@814
   2844					;
   2845					;	      putstr(str);
   2846					;
   2847	0BA4  1E			     push    ds
   2848	0BA5  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2849	0BA8  50			     push    ax
   2850	0BA9  E8 0000e			     call    near ptr _putstr
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 51
command.ASM



   2851	0BAC  59			     pop     cx
   2852	0BAD  59			     pop     cx
   2853					;
   2854					;
   2855					;	      putstr(" ");
   2856					;
   2857	0BAE  1E			     push    ds
   2858	0BAF  B8 075Cr			     mov     ax,offset DGROUP:s@+1722
   2859	0BB2  50			     push    ax
   2860	0BB3  E8 0000e			     call    near ptr _putstr
   2861	0BB6  59			     pop     cx
   2862	0BB7  59			     pop     cx
   2863					;
   2864					;	      inttostr(str,miniSO_thread[i].prev);
   2865					;
   2866	0BB8  8B C7			     mov     ax,di
   2867	0BBA  BA 001A			     mov     dx,26
   2868	0BBD  F7 EA			     imul    dx
   2869	0BBF  8B D8			     mov     bx,ax
   2870	0BC1  FF B7 0016e		     push    word ptr DGROUP:_miniSO_thread[bx+22]
   2871	0BC5  1E			     push    ds
   2872	0BC6  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2873	0BC9  50			     push    ax
   2874	0BCA  E8 0000e			     call    near ptr _inttostr
   2875	0BCD  83 C4 06			     add     sp,6
   2876					;
   2877					;	      l=strlen(str);
   2878					;
   2879	0BD0  1E			     push    ds
   2880	0BD1  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2881	0BD4  50			     push    ax
   2882	0BD5  E8 0000e			     call    near ptr _strlen
   2883	0BD8  59			     pop     cx
   2884	0BD9  59			     pop     cx
   2885	0BDA  8B F0			     mov     si,ax
   2886	0BDC  EB 08			     jmp     short @18@926
   2887	0BDE			     @18@898:
   2888					;
   2889					;	      while (l++<5)
   2890					;		    putch(' ');
   2891					;
   2892	0BDE  B8 0020			     mov     ax,32
   2893	0BE1  50			     push    ax
   2894	0BE2  E8 0000e			     call    near ptr _putch
   2895	0BE5  59			     pop     cx
   2896	0BE6			     @18@926:
   2897	0BE6  8B C6			     mov     ax,si
   2898	0BE8  46			     inc     si
   2899	0BE9  3D 0005			     cmp     ax,5
   2900	0BEC  7C F0			     jl	     short @18@898
   2901					;
   2902					;	      putstr(str);
   2903					;
   2904	0BEE  1E			     push    ds
   2905	0BEF  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2906	0BF2  50			     push    ax
   2907	0BF3  E8 0000e			     call    near ptr _putstr
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 52
command.ASM



   2908	0BF6  59			     pop     cx
   2909	0BF7  59			     pop     cx
   2910					;
   2911					;
   2912					;	      putstr("	");
   2913					;
   2914	0BF8  1E			     push    ds
   2915	0BF9  B8 075Er			     mov     ax,offset DGROUP:s@+1724
   2916	0BFC  50			     push    ax
   2917	0BFD  E8 0000e			     call    near ptr _putstr
   2918	0C00  59			     pop     cx
   2919	0C01  59			     pop     cx
   2920					;
   2921					;	      inttostr(str,miniSO_thread[i].next);
   2922					;
   2923	0C02  8B C7			     mov     ax,di
   2924	0C04  BA 001A			     mov     dx,26
   2925	0C07  F7 EA			     imul    dx
   2926	0C09  8B D8			     mov     bx,ax
   2927	0C0B  FF B7 0018e		     push    word ptr DGROUP:_miniSO_thread[bx+24]
   2928	0C0F  1E			     push    ds
   2929	0C10  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2930	0C13  50			     push    ax
   2931	0C14  E8 0000e			     call    near ptr _inttostr
   2932	0C17  83 C4 06			     add     sp,6
   2933					;
   2934					;	      l=strlen(str);
   2935					;
   2936	0C1A  1E			     push    ds
   2937	0C1B  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2938	0C1E  50			     push    ax
   2939	0C1F  E8 0000e			     call    near ptr _strlen
   2940	0C22  59			     pop     cx
   2941	0C23  59			     pop     cx
   2942	0C24  8B F0			     mov     si,ax
   2943	0C26  EB 08			     jmp     short @18@1010
   2944	0C28			     @18@982:
   2945					;
   2946					;	      while (l++<5)
   2947					;		    putch(' ');
   2948					;
   2949	0C28  B8 0020			     mov     ax,32
   2950	0C2B  50			     push    ax
   2951	0C2C  E8 0000e			     call    near ptr _putch
   2952	0C2F  59			     pop     cx
   2953	0C30			     @18@1010:
   2954	0C30  8B C6			     mov     ax,si
   2955	0C32  46			     inc     si
   2956	0C33  3D 0005			     cmp     ax,5
   2957	0C36  7C F0			     jl	     short @18@982
   2958					;
   2959					;	      putstr(str);
   2960					;
   2961	0C38  1E			     push    ds
   2962	0C39  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2963	0C3C  50			     push    ax
   2964	0C3D  E8 0000e			     call    near ptr _putstr
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 53
command.ASM



   2965	0C40  59			     pop     cx
   2966	0C41  59			     pop     cx
   2967					;
   2968					;	      putch('\n');
   2969					;
   2970	0C42  B8 000A			     mov     ax,10
   2971	0C45  50			     push    ax
   2972	0C46  E8 0000e			     call    near ptr _putch
   2973	0C49  59			     pop     cx
   2974	0C4A			     @18@1066:
   2975	0C4A  47			     inc     di
   2976	0C4B			     @18@1094:
   2977	0C4B  83 FF 10			     cmp     di,16
   2978	0C4E  7D 03			     jge     @@5
   2979	0C50  E9 FD92			     jmp     @18@58
   2980	0C53			     @@5:
   2981					;
   2982					;	   }
   2983					;      }
   2984					;      return 0;
   2985					;
   2986	0C53  33 C0			     xor     ax,ax
   2987	0C55  EB 00			     jmp     short @18@1150
   2988	0C57			     @18@1150:
   2989					;
   2990					;    }
   2991					;
   2992	0C57  5F			     pop     di
   2993	0C58  5E			     pop     si
   2994	0C59  5D			     pop     bp
   2995	0C5A  C3			     ret
   2996	0C5B			     _cmd_ps endp
   2997	0C5B			     @18@C1266	     label   word
   2998	0C5B  0AE4r			     dw	     @18@450
   2999	0C5D  0AF0r			     dw	     @18@506
   3000	0C5F  0AF6r			     dw	     @18@534
   3001	0C61  0AFCr			     dw	     @18@562
   3002	0C63  0B02r			     dw	     @18@590
   3003	0C65  0B08r			     dw	     @18@618
   3004	0C67  0B0Er			     dw	     @18@646
   3005	0C69  0B14r			     dw	     @18@674
   3006					;
   3007					;    int cmd_kill(int argc, char far *argv[])
   3008					;
   3009					     assume  cs:_TEXT
   3010	0C6B			     _cmd_kill	     proc    near
   3011	0C6B  55			     push    bp
   3012	0C6C  8B EC			     mov     bp,sp
   3013	0C6E  56			     push    si
   3014	0C6F  57			     push    di
   3015					;
   3016					;    {
   3017					;      int t=0;
   3018					;
   3019	0C70  33 F6			     xor     si,si
   3020					;
   3021					;      pid_t pid=0;
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 54
command.ASM



   3022					;
   3023	0C72  33 FF			     xor     di,di
   3024					;
   3025					;      char str[10];
   3026					;
   3027					;      if (argc<=1)  {
   3028					;
   3029	0C74  83 7E 04 01		     cmp     word ptr [bp+4],1
   3030	0C78  7F 0F			     jg	     short @19@142
   3031					;
   3032					;	  putstr("Erro em kill:	parametro nao fornecido!\n");
   3033					;
   3034	0C7A  1E			     push    ds
   3035	0C7B  B8 0761r			     mov     ax,offset DGROUP:s@+1727
   3036	0C7E			     @19@86:
   3037	0C7E  50			     push    ax
   3038	0C7F  E8 0000e			     call    near ptr _putstr
   3039	0C82  59			     pop     cx
   3040	0C83  59			     pop     cx
   3041					;
   3042					;	  return 1;
   3043					;
   3044	0C84  B8 0001			     mov     ax,1
   3045	0C87			     @19@114:
   3046	0C87  EB 26			     jmp     short @19@226
   3047	0C89			     @19@142:
   3048					;
   3049					;      }
   3050					;      pid = atoi(argv[1]);
   3051					;
   3052	0C89  8B 5E 06			     mov     bx,word ptr [bp+6]
   3053	0C8C  FF 77 06			     push    word ptr [bx+6]
   3054	0C8F  FF 77 04			     push    word ptr [bx+4]
   3055	0C92  E8 0000e			     call    near ptr _atoi
   3056	0C95  59			     pop     cx
   3057	0C96  59			     pop     cx
   3058	0C97  8B F8			     mov     di,ax
   3059					;
   3060					;      t = kill(pid);
   3061					;
   3062	0C99  57			     push    di
   3063	0C9A  E8 0000e			     call    near ptr _kill
   3064	0C9D  59			     pop     cx
   3065	0C9E  8B F0			     mov     si,ax
   3066					;
   3067					;      if (t==miniSO_ERROR)  {
   3068					;
   3069	0CA0  83 FE FF			     cmp     si,-1
   3070	0CA3  75 06			     jne     short @19@198
   3071					;
   3072					;	  putstr("kill:	impossivel matar o processo/thread\n");
   3073					;
   3074	0CA5  1E			     push    ds
   3075	0CA6  B8 0789r			     mov     ax,offset DGROUP:s@+1767
   3076	0CA9  EB D3			     jmp     short @19@86
   3077	0CAB			     @19@198:
   3078					;
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 55
command.ASM



   3079					;	  return 1;
   3080					;      }
   3081					;      return 0;
   3082					;
   3083	0CAB  33 C0			     xor     ax,ax
   3084	0CAD  EB D8			     jmp     short @19@114
   3085	0CAF			     @19@226:
   3086					;
   3087					;    }
   3088					;
   3089	0CAF  5F			     pop     di
   3090	0CB0  5E			     pop     si
   3091	0CB1  5D			     pop     bp
   3092	0CB2  C3			     ret
   3093	0CB3			     _cmd_kill	     endp
   3094					;
   3095					;    int cmd_set(int argc, char	far *argv[])
   3096					;
   3097					     assume  cs:_TEXT
   3098	0CB3			     _cmd_set	     proc    near
   3099	0CB3  55			     push    bp
   3100	0CB4  8B EC			     mov     bp,sp
   3101	0CB6  83 EC 02			     sub     sp,2
   3102	0CB9  56			     push    si
   3103	0CBA  57			     push    di
   3104	0CBB  8B 76 04			     mov     si,word ptr [bp+4]
   3105	0CBE  8B 7E 06			     mov     di,word ptr [bp+6]
   3106					;
   3107					;    {
   3108					;      int res;
   3109					;
   3110					;      if (argc	== 1)  {
   3111					;
   3112	0CC1  83 FE 01			     cmp     si,1
   3113	0CC4  75 07			     jne     short @20@142
   3114					;
   3115					;	  command_var_list();
   3116					;
   3117	0CC6  E8 F954			     call    near ptr command_var_list
   3118					;
   3119					;	  return 0;
   3120					;
   3121	0CC9			     @20@86:
   3122	0CC9  33 C0			     xor     ax,ax
   3123	0CCB			     @20@114:
   3124	0CCB  EB 71			     jmp     short @20@534
   3125	0CCD			     @20@142:
   3126					;
   3127					;      }
   3128					;      if (argc	== 2)
   3129					;
   3130	0CCD  83 FE 02			     cmp     si,2
   3131	0CD0  75 16			     jne     short @20@198
   3132					;
   3133					;	  res =	command_var_set(argv[1],"");
   3134					;
   3135	0CD2  1E			     push    ds
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 56
command.ASM



   3136	0CD3  B8 07B3r			     mov     ax,offset DGROUP:s@+1809
   3137	0CD6  50			     push    ax
   3138	0CD7  FF 75 06			     push    word ptr [di+6]
   3139	0CDA  FF 75 04			     push    word ptr [di+4]
   3140	0CDD  E8 FA5C			     call    near ptr command_var_set
   3141	0CE0  83 C4 08			     add     sp,8
   3142	0CE3  89 46 FE			     mov     word ptr [bp-2],ax
   3143	0CE6  EB 21			     jmp     short @20@282
   3144	0CE8			     @20@198:
   3145					;
   3146					;      else if (argc ==	3)
   3147					;
   3148	0CE8  83 FE 03			     cmp     si,3
   3149	0CEB  75 17			     jne     short @20@254
   3150					;
   3151					;	    res	= command_var_set(argv[1],argv[2]);
   3152					;
   3153	0CED  FF 75 0A			     push    word ptr [di+10]
   3154	0CF0  FF 75 08			     push    word ptr [di+8]
   3155	0CF3  FF 75 06			     push    word ptr [di+6]
   3156	0CF6  FF 75 04			     push    word ptr [di+4]
   3157	0CF9  E8 FA40			     call    near ptr command_var_set
   3158	0CFC  83 C4 08			     add     sp,8
   3159	0CFF  89 46 FE			     mov     word ptr [bp-2],ax
   3160	0D02  EB 05			     jmp     short @20@282
   3161	0D04			     @20@254:
   3162					;
   3163					;      else
   3164					;	  res =	-5;
   3165					;
   3166	0D04  C7 46 FE FFFB		     mov     word ptr [bp-2],-5
   3167	0D09			     @20@282:
   3168					;
   3169					;      switch (res)  {
   3170					;
   3171	0D09  8B 5E FE			     mov     bx,word ptr [bp-2]
   3172	0D0C  83 EB FB			     sub     bx,-5
   3173	0D0F  83 FB 03			     cmp     bx,3
   3174	0D12  77 28			     ja	     short @20@506
   3175	0D14  D1 E3			     shl     bx,1
   3176	0D16  2E: FF A7	0D44r		     jmp     word ptr cs:@20@C482[bx]
   3177	0D1B			     @20@366:
   3178					;
   3179					;	      case -2:
   3180					;		   putstr("Erro	em set:	nao ha espaco para novas variaveis!\n");
   3181					;
   3182	0D1B  1E			     push    ds
   3183	0D1C  B8 07B4r			     mov     ax,offset DGROUP:s@+1810
   3184	0D1F  EB 10			     jmp     short @20@478
   3185	0D21			     @20@394:
   3186					;
   3187					;		   return 1;
   3188					;	      case -3:
   3189					;		   putstr("Erro	em set:	o tamanho do nome da variavel e	muito grande!\n");
   3190					;
   3191	0D21  1E			     push    ds
   3192	0D22  B8 07E6r			     mov     ax,offset DGROUP:s@+1860
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 57
command.ASM



   3193	0D25  EB 0A			     jmp     short @20@478
   3194	0D27			     @20@422:
   3195					;
   3196					;		   return 1;
   3197					;	      case -4:
   3198					;		   putstr("Erro	em set:	o tamanho do conteudo da variavel e muito	    +
   3199				     grande!\n");
   3200					;
   3201	0D27  1E			     push    ds
   3202	0D28  B8 0822r			     mov     ax,offset DGROUP:s@+1920
   3203	0D2B  EB 04			     jmp     short @20@478
   3204	0D2D			     @20@450:
   3205					;
   3206					;		   return 1;
   3207					;	      case -5:
   3208					;		   putstr("Erro	em set:	argumentos demais na linha de comando!\n");
   3209					;
   3210	0D2D  1E			     push    ds
   3211	0D2E  B8 0862r			     mov     ax,offset DGROUP:s@+1984
   3212	0D31			     @20@478:
   3213	0D31  50			     push    ax
   3214	0D32  E8 0000e			     call    near ptr _putstr
   3215	0D35  59			     pop     cx
   3216	0D36  59			     pop     cx
   3217					;
   3218					;		   return 1;
   3219					;
   3220	0D37  B8 0001			     mov     ax,1
   3221	0D3A  EB 8F			     jmp     short @20@114
   3222	0D3C			     @20@506:
   3223	0D3C  EB 8B			     jmp     short @20@86
   3224	0D3E			     @20@534:
   3225					;
   3226					;      }
   3227					;      return 0;
   3228					;    }
   3229					;
   3230	0D3E  5F			     pop     di
   3231	0D3F  5E			     pop     si
   3232	0D40  8B E5			     mov     sp,bp
   3233	0D42  5D			     pop     bp
   3234	0D43  C3			     ret
   3235	0D44			     _cmd_set	     endp
   3236	0D44			     @20@C482	     label   word
   3237	0D44  0D2Dr			     dw	     @20@450
   3238	0D46  0D27r			     dw	     @20@422
   3239	0D48  0D21r			     dw	     @20@394
   3240	0D4A  0D1Br			     dw	     @20@366
   3241					;
   3242					;    int cmd_unset(int argc, char far *argv[])
   3243					;
   3244					     assume  cs:_TEXT
   3245	0D4C			     _cmd_unset	     proc    near
   3246	0D4C  55			     push    bp
   3247	0D4D  8B EC			     mov     bp,sp
   3248	0D4F  83 EC 02			     sub     sp,2
   3249					;
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 58
command.ASM



   3250					;    {
   3251					;      int res;
   3252					;
   3253					;      if (argc	!= 2)  {
   3254					;
   3255	0D52  83 7E 04 02		     cmp     word ptr [bp+4],2
   3256	0D56  74 0F			     je	     short @21@142
   3257					;
   3258					;	  putstr("Erro em unset: numero	invalido de argumentos!\n");
   3259					;
   3260	0D58  1E			     push    ds
   3261	0D59  B8 0897r			     mov     ax,offset DGROUP:s@+2037
   3262	0D5C			     @21@86:
   3263	0D5C  50			     push    ax
   3264	0D5D  E8 0000e			     call    near ptr _putstr
   3265	0D60  59			     pop     cx
   3266	0D61  59			     pop     cx
   3267					;
   3268					;	  return 1;
   3269					;
   3270	0D62  B8 0001			     mov     ax,1
   3271	0D65			     @21@114:
   3272	0D65  EB 21			     jmp     short @21@226
   3273	0D67			     @21@142:
   3274					;
   3275					;      }
   3276					;      res = command_var_unset(argv[1]);
   3277					;
   3278	0D67  8B 5E 06			     mov     bx,word ptr [bp+6]
   3279	0D6A  FF 77 06			     push    word ptr [bx+6]
   3280	0D6D  FF 77 04			     push    word ptr [bx+4]
   3281	0D70  E8 F95A			     call    near ptr command_var_unset
   3282	0D73  59			     pop     cx
   3283	0D74  59			     pop     cx
   3284	0D75  89 46 FE			     mov     word ptr [bp-2],ax
   3285					;
   3286					;      if (res == -1)  {
   3287					;
   3288	0D78  83 7E FE FF		     cmp     word ptr [bp-2],-1
   3289	0D7C  75 06			     jne     short @21@198
   3290					;
   3291					;	  putstr("Erro em unset: variavel inexistente!\n");
   3292					;
   3293	0D7E  1E			     push    ds
   3294	0D7F  B8 08C6r			     mov     ax,offset DGROUP:s@+2084
   3295	0D82  EB D8			     jmp     short @21@86
   3296	0D84			     @21@198:
   3297					;
   3298					;	  return 1;
   3299					;      }
   3300					;      return 0;
   3301					;
   3302	0D84  33 C0			     xor     ax,ax
   3303	0D86  EB DD			     jmp     short @21@114
   3304	0D88			     @21@226:
   3305					;
   3306					;    }
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 59
command.ASM



   3307					;
   3308	0D88  8B E5			     mov     sp,bp
   3309	0D8A  5D			     pop     bp
   3310	0D8B  C3			     ret
   3311	0D8C			     _cmd_unset	     endp
   3312					;
   3313					;    int cmd_echo(int argc, char far *argv[])
   3314					;
   3315					     assume  cs:_TEXT
   3316	0D8C			     _cmd_echo	     proc    near
   3317	0D8C  55			     push    bp
   3318	0D8D  8B EC			     mov     bp,sp
   3319	0D8F  83 EC 02			     sub     sp,2
   3320	0D92  56			     push    si
   3321	0D93  57			     push    di
   3322	0D94  8B 7E 06			     mov     di,word ptr [bp+6]
   3323					;
   3324					;    {
   3325					;      int i,control_n=1;
   3326					;
   3327	0D97  C7 46 FE 0001		     mov     word ptr [bp-2],1
   3328					;
   3329					;
   3330					;      if (argc>1)  {
   3331					;
   3332	0D9C  83 7E 04 01		     cmp     word ptr [bp+4],1
   3333	0DA0  7E 55			     jle     short @22@338
   3334					;
   3335					;	  if (strcmp(argv[1],"-n")==0)
   3336					;
   3337	0DA2  1E			     push    ds
   3338	0DA3  B8 08ECr			     mov     ax,offset DGROUP:s@+2122
   3339	0DA6  50			     push    ax
   3340	0DA7  FF 75 06			     push    word ptr [di+6]
   3341	0DAA  FF 75 04			     push    word ptr [di+4]
   3342	0DAD  E8 0000e			     call    near ptr _strcmp
   3343	0DB0  83 C4 08			     add     sp,8
   3344	0DB3  0B C0			     or	     ax,ax
   3345	0DB5  75 07			     jne     short @22@114
   3346					;
   3347					;	     control_n = 0;
   3348					;
   3349	0DB7  C7 46 FE 0000		     mov     word ptr [bp-2],0
   3350	0DBC  EB 0B			     jmp     short @22@142
   3351	0DBE			     @22@114:
   3352					;
   3353					;	  else
   3354					;	     putstr(argv[1]);
   3355					;
   3356	0DBE  FF 75 06			     push    word ptr [di+6]
   3357	0DC1  FF 75 04			     push    word ptr [di+4]
   3358	0DC4  E8 0000e			     call    near ptr _putstr
   3359	0DC7  59			     pop     cx
   3360	0DC8  59			     pop     cx
   3361	0DC9			     @22@142:
   3362					;
   3363					;	  for (i=2;i<argc;++i)	{
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 60
command.ASM



   3364					;
   3365	0DC9  BE 0002			     mov     si,2
   3366	0DCC  EB 24			     jmp     short @22@310
   3367	0DCE			     @22@170:
   3368					;
   3369					;	      if (i!=2 || control_n)
   3370					;
   3371	0DCE  83 FE 02			     cmp     si,2
   3372	0DD1  75 06			     jne     short @22@226
   3373	0DD3  83 7E FE 00		     cmp     word ptr [bp-2],0
   3374	0DD7  74 08			     je	     short @22@254
   3375	0DD9			     @22@226:
   3376					;
   3377					;		 putch(' ');
   3378					;
   3379	0DD9  B8 0020			     mov     ax,32
   3380	0DDC  50			     push    ax
   3381	0DDD  E8 0000e			     call    near ptr _putch
   3382	0DE0  59			     pop     cx
   3383	0DE1			     @22@254:
   3384					;
   3385					;	      putstr(argv[i]);
   3386					;
   3387	0DE1  8B DE			     mov     bx,si
   3388	0DE3  B1 02			     mov     cl,2
   3389	0DE5  D3 E3			     shl     bx,cl
   3390	0DE7  FF 71 02			     push    word ptr [bx+di+2]
   3391	0DEA  FF 31			     push    word ptr [bx+di]
   3392	0DEC  E8 0000e			     call    near ptr _putstr
   3393	0DEF  59			     pop     cx
   3394	0DF0  59			     pop     cx
   3395	0DF1  46			     inc     si
   3396	0DF2			     @22@310:
   3397	0DF2  3B 76 04			     cmp     si,word ptr [bp+4]
   3398	0DF5  7C D7			     jl	     short @22@170
   3399	0DF7			     @22@338:
   3400					;
   3401					;	  }
   3402					;      }
   3403					;      if (control_n)
   3404					;
   3405	0DF7  83 7E FE 00		     cmp     word ptr [bp-2],0
   3406	0DFB  74 08			     je	     short @22@394
   3407					;
   3408					;	  putch('\n');
   3409					;
   3410	0DFD  B8 000A			     mov     ax,10
   3411	0E00  50			     push    ax
   3412	0E01  E8 0000e			     call    near ptr _putch
   3413	0E04  59			     pop     cx
   3414	0E05			     @22@394:
   3415					;
   3416					;      return 0;
   3417					;
   3418	0E05  33 C0			     xor     ax,ax
   3419	0E07  EB 00			     jmp     short @22@422
   3420	0E09			     @22@422:
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 61
command.ASM



   3421					;
   3422					;    }
   3423					;
   3424	0E09  5F			     pop     di
   3425	0E0A  5E			     pop     si
   3426	0E0B  8B E5			     mov     sp,bp
   3427	0E0D  5D			     pop     bp
   3428	0E0E  C3			     ret
   3429	0E0F			     _cmd_echo	     endp
   3430	0E0F			     _TEXT   ends
   3431	009E			     _DATA   segment word public 'DATA'
   3432	009E			     demo_linha	     label   word
   3433	009E  FC			     db	     252
   3434	009F  FF			     db	     255
   3435	00A0			     exitcode	     label   word
*Warning* command.ASM(3442) Reserved word used as symbol: EXITCODE
   3436	00A0  00			     db	     0
   3437	00A1  00			     db	     0
   3438	00A2			     _DATA   ends
   3439	0E0F			     _TEXT   segment byte public 'CODE'
   3440					;
   3441					;    void demo()
   3442					;
   3443					     assume  cs:_TEXT
   3444	0E0F			     demo    proc    near
   3445	0E0F  55			     push    bp
   3446	0E10  8B EC			     mov     bp,sp
   3447	0E12  83 EC 16			     sub     sp,22
   3448	0E15  56			     push    si
   3449	0E16  57			     push    di
   3450					;
   3451					;    {
   3452					;      extern int demo_linha;
   3453					;      extern int exitcode;
   3454					;      unsigned	i;
   3455					;      int ini = demo_linha;
   3456					;
   3457	0E17  8B 3E 009Er		     mov     di,word ptr DGROUP:demo_linha
   3458					;
   3459					;      char str[20];
   3460					;      int ec =	exitcode;
   3461					;
   3462	0E1B  A1 00A0r			     mov     ax,word ptr DGROUP:exitcode
   3463	0E1E  89 46 FE			     mov     word ptr [bp-2],ax
   3464					;
   3465					;
   3466					;      putstrxy(65,ini+0,"⁄ƒƒ Thread ƒƒƒƒø");
   3467					;
   3468	0E21  1E			     push    ds
   3469	0E22  B8 08EFr			     mov     ax,offset DGROUP:s@+2125
   3470	0E25  50			     push    ax
   3471	0E26  57			     push    di
   3472	0E27  B8 0041			     mov     ax,65
   3473	0E2A  50			     push    ax
   3474	0E2B  E8 0000e			     call    near ptr _putstrxy
   3475	0E2E  83 C4 08			     add     sp,8
   3476					;
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 62
command.ASM



   3477					;      putstrxy(65,ini+1,"≥ PID	 =	 ≥");
   3478					;
   3479	0E31  1E			     push    ds
   3480	0E32  B8 0900r			     mov     ax,offset DGROUP:s@+2142
   3481	0E35  50			     push    ax
   3482	0E36  8B C7			     mov     ax,di
   3483	0E38  40			     inc     ax
   3484	0E39  50			     push    ax
   3485	0E3A  B8 0041			     mov     ax,65
   3486	0E3D  50			     push    ax
   3487	0E3E  E8 0000e			     call    near ptr _putstrxy
   3488	0E41  83 C4 08			     add     sp,8
   3489					;
   3490					;      putstrxy(65,ini+2,"≥ Execucao:	 ≥");
   3491					;
   3492	0E44  1E			     push    ds
   3493	0E45  B8 0911r			     mov     ax,offset DGROUP:s@+2159
   3494	0E48  50			     push    ax
   3495	0E49  8B C7			     mov     ax,di
   3496	0E4B  05 0002			     add     ax,2
   3497	0E4E  50			     push    ax
   3498	0E4F  B8 0041			     mov     ax,65
   3499	0E52  50			     push    ax
   3500	0E53  E8 0000e			     call    near ptr _putstrxy
   3501	0E56  83 C4 08			     add     sp,8
   3502					;
   3503					;      putstrxy(65,ini+3,"≥		 ≥");
   3504					;
   3505	0E59  1E			     push    ds
   3506	0E5A  B8 0922r			     mov     ax,offset DGROUP:s@+2176
   3507	0E5D  50			     push    ax
   3508	0E5E  8B C7			     mov     ax,di
   3509	0E60  05 0003			     add     ax,3
   3510	0E63  50			     push    ax
   3511	0E64  B8 0041			     mov     ax,65
   3512	0E67  50			     push    ax
   3513	0E68  E8 0000e			     call    near ptr _putstrxy
   3514	0E6B  83 C4 08			     add     sp,8
   3515					;
   3516					;      putstrxy(65,ini+4,"¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ");
   3517					;
   3518	0E6E  1E			     push    ds
   3519	0E6F  B8 0933r			     mov     ax,offset DGROUP:s@+2193
   3520	0E72  50			     push    ax
   3521	0E73  8B C7			     mov     ax,di
   3522	0E75  05 0004			     add     ax,4
   3523	0E78  50			     push    ax
   3524	0E79  B8 0041			     mov     ax,65
   3525	0E7C  50			     push    ax
   3526	0E7D  E8 0000e			     call    near ptr _putstrxy
   3527	0E80  83 C4 08			     add     sp,8
   3528					;
   3529					;
   3530					;      inttostr(str,getpid());
   3531					;
   3532	0E83  E8 0000e			     call    near ptr _getpid
   3533	0E86  50			     push    ax
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 63
command.ASM



   3534	0E87  16			     push    ss
   3535	0E88  8D 46 EA			     lea     ax,word ptr [bp-22]
   3536	0E8B  50			     push    ax
   3537	0E8C  E8 0000e			     call    near ptr _inttostr
   3538	0E8F  83 C4 06			     add     sp,6
   3539					;
   3540					;      putstrxy(74,ini+1,str);
   3541					;
   3542	0E92  16			     push    ss
   3543	0E93  8D 46 EA			     lea     ax,word ptr [bp-22]
   3544	0E96  50			     push    ax
   3545	0E97  8B C7			     mov     ax,di
   3546	0E99  40			     inc     ax
   3547	0E9A  50			     push    ax
   3548	0E9B  B8 004A			     mov     ax,74
   3549	0E9E  50			     push    ax
   3550	0E9F  E8 0000e			     call    near ptr _putstrxy
   3551	0EA2  83 C4 08			     add     sp,8
   3552					;
   3553					;
   3554					;      for (i=0;i<60000U;++i)  {
   3555					;
   3556	0EA5  33 F6			     xor     si,si
   3557	0EA7  EB 29			     jmp     short @23@114
   3558	0EA9			     @23@58:
   3559					;
   3560					;	   unsignedtostr(str,i,5,'0');
   3561					;
   3562	0EA9  B0 30			     mov     al,48
   3563	0EAB  50			     push    ax
   3564	0EAC  B8 0005			     mov     ax,5
   3565	0EAF  50			     push    ax
   3566	0EB0  56			     push    si
   3567	0EB1  16			     push    ss
   3568	0EB2  8D 46 EA			     lea     ax,word ptr [bp-22]
   3569	0EB5  50			     push    ax
   3570	0EB6  E8 0000e			     call    near ptr _unsignedtostr
   3571	0EB9  83 C4 0A			     add     sp,10
   3572					;
   3573					;	   putstrxy(70,ini+3,str);
   3574					;
   3575	0EBC  16			     push    ss
   3576	0EBD  8D 46 EA			     lea     ax,word ptr [bp-22]
   3577	0EC0  50			     push    ax
   3578	0EC1  8B C7			     mov     ax,di
   3579	0EC3  05 0003			     add     ax,3
   3580	0EC6  50			     push    ax
   3581	0EC7  B8 0046			     mov     ax,70
   3582	0ECA  50			     push    ax
   3583	0ECB  E8 0000e			     call    near ptr _putstrxy
   3584	0ECE  83 C4 08			     add     sp,8
   3585	0ED1  46			     inc     si
   3586	0ED2			     @23@114:
   3587	0ED2  81 FE EA60		     cmp     si,-5536
   3588	0ED6  72 D1			     jb	     short @23@58
   3589					;
   3590					;      }
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 64
command.ASM



   3591					;      for (i=0;i<60000U;++i)  {
   3592					;
   3593	0ED8  33 F6			     xor     si,si
   3594	0EDA  EB 29			     jmp     short @23@226
   3595	0EDC			     @23@170:
   3596					;
   3597					;	   unsignedtostr(str,i,5,'0');
   3598					;
   3599	0EDC  B0 30			     mov     al,48
   3600	0EDE  50			     push    ax
   3601	0EDF  B8 0005			     mov     ax,5
   3602	0EE2  50			     push    ax
   3603	0EE3  56			     push    si
   3604	0EE4  16			     push    ss
   3605	0EE5  8D 46 EA			     lea     ax,word ptr [bp-22]
   3606	0EE8  50			     push    ax
   3607	0EE9  E8 0000e			     call    near ptr _unsignedtostr
   3608	0EEC  83 C4 0A			     add     sp,10
   3609					;
   3610					;	   putstrxy(70,ini+3,str);
   3611					;
   3612	0EEF  16			     push    ss
   3613	0EF0  8D 46 EA			     lea     ax,word ptr [bp-22]
   3614	0EF3  50			     push    ax
   3615	0EF4  8B C7			     mov     ax,di
   3616	0EF6  05 0003			     add     ax,3
   3617	0EF9  50			     push    ax
   3618	0EFA  B8 0046			     mov     ax,70
   3619	0EFD  50			     push    ax
   3620	0EFE  E8 0000e			     call    near ptr _putstrxy
   3621	0F01  83 C4 08			     add     sp,8
   3622	0F04  46			     inc     si
   3623	0F05			     @23@226:
   3624	0F05  81 FE EA60		     cmp     si,-5536
   3625	0F09  72 D1			     jb	     short @23@170
   3626					;
   3627					;      }
   3628					;      for (i=0;i<60000U;++i)  {
   3629					;
   3630	0F0B  33 F6			     xor     si,si
   3631	0F0D  EB 29			     jmp     short @23@338
   3632	0F0F			     @23@282:
   3633					;
   3634					;	   unsignedtostr(str,i,5,'0');
   3635					;
   3636	0F0F  B0 30			     mov     al,48
   3637	0F11  50			     push    ax
   3638	0F12  B8 0005			     mov     ax,5
   3639	0F15  50			     push    ax
   3640	0F16  56			     push    si
   3641	0F17  16			     push    ss
   3642	0F18  8D 46 EA			     lea     ax,word ptr [bp-22]
   3643	0F1B  50			     push    ax
   3644	0F1C  E8 0000e			     call    near ptr _unsignedtostr
   3645	0F1F  83 C4 0A			     add     sp,10
   3646					;
   3647					;	   putstrxy(70,ini+3,str);
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 65
command.ASM



   3648					;
   3649	0F22  16			     push    ss
   3650	0F23  8D 46 EA			     lea     ax,word ptr [bp-22]
   3651	0F26  50			     push    ax
   3652	0F27  8B C7			     mov     ax,di
   3653	0F29  05 0003			     add     ax,3
   3654	0F2C  50			     push    ax
   3655	0F2D  B8 0046			     mov     ax,70
   3656	0F30  50			     push    ax
   3657	0F31  E8 0000e			     call    near ptr _putstrxy
   3658	0F34  83 C4 08			     add     sp,8
   3659	0F37  46			     inc     si
   3660	0F38			     @23@338:
   3661	0F38  81 FE EA60		     cmp     si,-5536
   3662	0F3C  72 D1			     jb	     short @23@282
   3663					;
   3664					;      }
   3665					;      for (i=0;i<60000U;++i)  {
   3666					;
   3667	0F3E  33 F6			     xor     si,si
   3668	0F40  EB 29			     jmp     short @23@450
   3669	0F42			     @23@394:
   3670					;
   3671					;	   unsignedtostr(str,i,5,'0');
   3672					;
   3673	0F42  B0 30			     mov     al,48
   3674	0F44  50			     push    ax
   3675	0F45  B8 0005			     mov     ax,5
   3676	0F48  50			     push    ax
   3677	0F49  56			     push    si
   3678	0F4A  16			     push    ss
   3679	0F4B  8D 46 EA			     lea     ax,word ptr [bp-22]
   3680	0F4E  50			     push    ax
   3681	0F4F  E8 0000e			     call    near ptr _unsignedtostr
   3682	0F52  83 C4 0A			     add     sp,10
   3683					;
   3684					;	   putstrxy(70,ini+3,str);
   3685					;
   3686	0F55  16			     push    ss
   3687	0F56  8D 46 EA			     lea     ax,word ptr [bp-22]
   3688	0F59  50			     push    ax
   3689	0F5A  8B C7			     mov     ax,di
   3690	0F5C  05 0003			     add     ax,3
   3691	0F5F  50			     push    ax
   3692	0F60  B8 0046			     mov     ax,70
   3693	0F63  50			     push    ax
   3694	0F64  E8 0000e			     call    near ptr _putstrxy
   3695	0F67  83 C4 08			     add     sp,8
   3696	0F6A  46			     inc     si
   3697	0F6B			     @23@450:
   3698	0F6B  81 FE EA60		     cmp     si,-5536
   3699	0F6F  72 D1			     jb	     short @23@394
   3700					;
   3701					;      }
   3702					;      for (i=0;i<60000U;++i)  {
   3703					;
   3704	0F71  33 F6			     xor     si,si
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 66
command.ASM



   3705	0F73  EB 29			     jmp     short @23@562
   3706	0F75			     @23@506:
   3707					;
   3708					;	   unsignedtostr(str,i,5,'0');
   3709					;
   3710	0F75  B0 30			     mov     al,48
   3711	0F77  50			     push    ax
   3712	0F78  B8 0005			     mov     ax,5
   3713	0F7B  50			     push    ax
   3714	0F7C  56			     push    si
   3715	0F7D  16			     push    ss
   3716	0F7E  8D 46 EA			     lea     ax,word ptr [bp-22]
   3717	0F81  50			     push    ax
   3718	0F82  E8 0000e			     call    near ptr _unsignedtostr
   3719	0F85  83 C4 0A			     add     sp,10
   3720					;
   3721					;	   putstrxy(70,ini+3,str);
   3722					;
   3723	0F88  16			     push    ss
   3724	0F89  8D 46 EA			     lea     ax,word ptr [bp-22]
   3725	0F8C  50			     push    ax
   3726	0F8D  8B C7			     mov     ax,di
   3727	0F8F  05 0003			     add     ax,3
   3728	0F92  50			     push    ax
   3729	0F93  B8 0046			     mov     ax,70
   3730	0F96  50			     push    ax
   3731	0F97  E8 0000e			     call    near ptr _putstrxy
   3732	0F9A  83 C4 08			     add     sp,8
   3733	0F9D  46			     inc     si
   3734	0F9E			     @23@562:
   3735	0F9E  81 FE EA60		     cmp     si,-5536
   3736	0FA2  72 D1			     jb	     short @23@506
   3737					;
   3738					;      }
   3739					;      for (i=0;i<60000U;++i)  {
   3740					;
   3741	0FA4  33 F6			     xor     si,si
   3742	0FA6  EB 29			     jmp     short @23@674
   3743	0FA8			     @23@618:
   3744					;
   3745					;	   unsignedtostr(str,i,5,'0');
   3746					;
   3747	0FA8  B0 30			     mov     al,48
   3748	0FAA  50			     push    ax
   3749	0FAB  B8 0005			     mov     ax,5
   3750	0FAE  50			     push    ax
   3751	0FAF  56			     push    si
   3752	0FB0  16			     push    ss
   3753	0FB1  8D 46 EA			     lea     ax,word ptr [bp-22]
   3754	0FB4  50			     push    ax
   3755	0FB5  E8 0000e			     call    near ptr _unsignedtostr
   3756	0FB8  83 C4 0A			     add     sp,10
   3757					;
   3758					;	   putstrxy(70,ini+3,str);
   3759					;
   3760	0FBB  16			     push    ss
   3761	0FBC  8D 46 EA			     lea     ax,word ptr [bp-22]
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 67
command.ASM



   3762	0FBF  50			     push    ax
   3763	0FC0  8B C7			     mov     ax,di
   3764	0FC2  05 0003			     add     ax,3
   3765	0FC5  50			     push    ax
   3766	0FC6  B8 0046			     mov     ax,70
   3767	0FC9  50			     push    ax
   3768	0FCA  E8 0000e			     call    near ptr _putstrxy
   3769	0FCD  83 C4 08			     add     sp,8
   3770	0FD0  46			     inc     si
   3771	0FD1			     @23@674:
   3772	0FD1  81 FE EA60		     cmp     si,-5536
   3773	0FD5  72 D1			     jb	     short @23@618
   3774					;
   3775					;      }
   3776					;      exit(ec);
   3777					;
   3778	0FD7  FF 76 FE			     push    word ptr [bp-2]
   3779	0FDA  E8 0000e			     call    near ptr _exit
   3780	0FDD  59			     pop     cx
   3781					;
   3782					;    }
   3783					;
   3784	0FDE  5F			     pop     di
   3785	0FDF  5E			     pop     si
   3786	0FE0  8B E5			     mov     sp,bp
   3787	0FE2  5D			     pop     bp
   3788	0FE3  C3			     ret
   3789	0FE4			     demo    endp
   3790					;
   3791					;    int cmd_demo(int argc, char far *argv[])
   3792					;
   3793					     assume  cs:_TEXT
   3794	0FE4			     _cmd_demo	     proc    near
   3795	0FE4  55			     push    bp
   3796	0FE5  8B EC			     mov     bp,sp
   3797					;
   3798					;    {
   3799					;	     extern int	demo_linha;
   3800					;
   3801					;	     if	     (argc != 2)  {
   3802					;
   3803	0FE7  83 7E 04 02		     cmp     word ptr [bp+4],2
   3804	0FEB  74 0F			     je	     short @24@142
   3805					;
   3806					;		     putstr("Erro em demo: numero invalido de argumentos!\n");
   3807					;
   3808	0FED  1E			     push    ds
   3809	0FEE  B8 0944r			     mov     ax,offset DGROUP:s@+2210
   3810	0FF1			     @24@86:
   3811	0FF1  50			     push    ax
   3812	0FF2  E8 0000e			     call    near ptr _putstr
   3813	0FF5  59			     pop     cx
   3814	0FF6  59			     pop     cx
   3815					;
   3816					;		     return 1;
   3817					;
   3818	0FF7  B8 0001			     mov     ax,1
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 68
command.ASM



   3819	0FFA			     @24@114:
   3820	0FFA  EB 3A			     jmp     short @24@282
   3821	0FFC			     @24@142:
   3822					;
   3823					;	     }
   3824					;	     demo_linha	+= 5;
   3825					;
   3826	0FFC  83 06 009Er 05		     add     word ptr DGROUP:demo_linha,5
   3827					;
   3828					;	     if	     (demo_linha >21)
   3829					;
   3830	1001  83 3E 009Er 15		     cmp     word ptr DGROUP:demo_linha,21
   3831	1006  7E 06			     jle     short @24@198
   3832					;
   3833					;		     demo_linha	= 1;
   3834					;
   3835	1008  C7 06 009Er 0001		     mov     word ptr DGROUP:demo_linha,1
   3836	100E			     @24@198:
   3837					;
   3838					;	     exitcode =	atoi(argv[1]);
   3839					;
   3840	100E  8B 5E 06			     mov     bx,word ptr [bp+6]
   3841	1011  FF 77 06			     push    word ptr [bx+6]
   3842	1014  FF 77 04			     push    word ptr [bx+4]
   3843	1017  E8 0000e			     call    near ptr _atoi
   3844	101A  59			     pop     cx
   3845	101B  59			     pop     cx
   3846	101C  A3 00A0r			     mov     word ptr DGROUP:exitcode,ax
   3847					;
   3848					;	     if	     (fork(demo)==miniSO_ERROR)	 {
   3849					;
   3850	101F  B8 0E0Fr			     mov     ax,offset demo
   3851	1022  50			     push    ax
   3852	1023  E8 0000e			     call    near ptr _fork
   3853	1026  59			     pop     cx
   3854	1027  3D FFFF			     cmp     ax,-1
   3855	102A  75 06			     jne     short @24@254
   3856					;
   3857					;		     putstr("Erro em demo: fork() nao conseguiu	criar thread!\n");
   3858					;
   3859	102C  1E			     push    ds
   3860	102D  B8 0972r			     mov     ax,offset DGROUP:s@+2256
   3861	1030  EB BF			     jmp     short @24@86
   3862	1032			     @24@254:
   3863					;
   3864					;		     return 1;
   3865					;	     }
   3866					;	     return 0;
   3867					;
   3868	1032  33 C0			     xor     ax,ax
   3869	1034  EB C4			     jmp     short @24@114
   3870	1036			     @24@282:
   3871					;
   3872					;    }
   3873					;
   3874	1036  5D			     pop     bp
   3875	1037  C3			     ret
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 69
command.ASM



   3876	1038			     _cmd_demo	     endp
   3877					;
   3878					;    int cmd_waitpid(int argc, char far	*argv[])
   3879					;
   3880					     assume  cs:_TEXT
   3881	1038			     _cmd_waitpid    proc    near
   3882	1038  55			     push    bp
   3883	1039  8B EC			     mov     bp,sp
   3884	103B  83 EC 16			     sub     sp,22
   3885	103E  56			     push    si
   3886					;
   3887					;    {
   3888					;	     int     status;
   3889					;	     pid_t   pid;
   3890					;	     char    str[20];
   3891					;
   3892					;	     if	     (argc != 2)  {
   3893					;
   3894	103F  83 7E 04 02		     cmp     word ptr [bp+4],2
   3895	1043  74 0F			     je	     short @25@114
   3896					;
   3897					;		     putstr("Erro em waitpid: numero invalido de argumentos!\n");
   3898					;
   3899	1045  1E			     push    ds
   3900	1046  B8 09A4r			     mov     ax,offset DGROUP:s@+2306
   3901	1049  50			     push    ax
   3902	104A  E8 0000e			     call    near ptr _putstr
   3903	104D  59			     pop     cx
   3904	104E  59			     pop     cx
   3905					;
   3906					;		     return 1;
   3907					;
   3908	104F  B8 0001			     mov     ax,1
   3909	1052			     @25@86:
   3910	1052  EB 6E			     jmp     short @25@142
   3911	1054			     @25@114:
   3912					;
   3913					;	     }
   3914					;	     pid = atoi(argv[1]);
   3915					;
   3916	1054  8B 5E 06			     mov     bx,word ptr [bp+6]
   3917	1057  FF 77 06			     push    word ptr [bx+6]
   3918	105A  FF 77 04			     push    word ptr [bx+4]
   3919	105D  E8 0000e			     call    near ptr _atoi
   3920	1060  59			     pop     cx
   3921	1061  59			     pop     cx
   3922	1062  8B F0			     mov     si,ax
   3923					;
   3924					;	     pid = waitpid(pid,&status);
   3925					;
   3926	1064  16			     push    ss
   3927	1065  8D 46 FE			     lea     ax,word ptr [bp-2]
   3928	1068  50			     push    ax
   3929	1069  56			     push    si
   3930	106A  E8 0000e			     call    near ptr _waitpid
   3931	106D  83 C4 06			     add     sp,6
   3932	1070  8B F0			     mov     si,ax
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 70
command.ASM



   3933					;
   3934					;	     putstr("Processo ");
   3935					;
   3936	1072  1E			     push    ds
   3937	1073  B8 09D5r			     mov     ax,offset DGROUP:s@+2355
   3938	1076  50			     push    ax
   3939	1077  E8 0000e			     call    near ptr _putstr
   3940	107A  59			     pop     cx
   3941	107B  59			     pop     cx
   3942					;
   3943					;	     inttostr(str,pid);
   3944					;
   3945	107C  56			     push    si
   3946	107D  16			     push    ss
   3947	107E  8D 46 EA			     lea     ax,word ptr [bp-22]
   3948	1081  50			     push    ax
   3949	1082  E8 0000e			     call    near ptr _inttostr
   3950	1085  83 C4 06			     add     sp,6
   3951					;
   3952					;	     putstr(str);
   3953					;
   3954	1088  16			     push    ss
   3955	1089  8D 46 EA			     lea     ax,word ptr [bp-22]
   3956	108C  50			     push    ax
   3957	108D  E8 0000e			     call    near ptr _putstr
   3958	1090  59			     pop     cx
   3959	1091  59			     pop     cx
   3960					;
   3961					;	     putstr(" encerrado	com codigo de fim ");
   3962					;
   3963	1092  1E			     push    ds
   3964	1093  B8 09DFr			     mov     ax,offset DGROUP:s@+2365
   3965	1096  50			     push    ax
   3966	1097  E8 0000e			     call    near ptr _putstr
   3967	109A  59			     pop     cx
   3968	109B  59			     pop     cx
   3969					;
   3970					;	     inttostr(str,status);
   3971					;
   3972	109C  FF 76 FE			     push    word ptr [bp-2]
   3973	109F  16			     push    ss
   3974	10A0  8D 46 EA			     lea     ax,word ptr [bp-22]
   3975	10A3  50			     push    ax
   3976	10A4  E8 0000e			     call    near ptr _inttostr
   3977	10A7  83 C4 06			     add     sp,6
   3978					;
   3979					;	     putstr(str);
   3980					;
   3981	10AA  16			     push    ss
   3982	10AB  8D 46 EA			     lea     ax,word ptr [bp-22]
   3983	10AE  50			     push    ax
   3984	10AF  E8 0000e			     call    near ptr _putstr
   3985	10B2  59			     pop     cx
   3986	10B3  59			     pop     cx
   3987					;
   3988					;	     putstr("!\n");
   3989					;
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 71
command.ASM



   3990	10B4  1E			     push    ds
   3991	10B5  B8 09FDr			     mov     ax,offset DGROUP:s@+2395
   3992	10B8  50			     push    ax
   3993	10B9  E8 0000e			     call    near ptr _putstr
   3994	10BC  59			     pop     cx
   3995	10BD  59			     pop     cx
   3996					;
   3997					;	     return 0;
   3998					;
   3999	10BE  33 C0			     xor     ax,ax
   4000	10C0  EB 90			     jmp     short @25@86
   4001	10C2			     @25@142:
   4002					;
   4003					;    }
   4004					;
   4005	10C2  5E			     pop     si
   4006	10C3  8B E5			     mov     sp,bp
   4007	10C5  5D			     pop     bp
   4008	10C6  C3			     ret
   4009	10C7			     _cmd_waitpid    endp
   4010					;
   4011					;    int cmd_wait(int argc, char far *argv[])
   4012					;
   4013					     assume  cs:_TEXT
   4014	10C7			     _cmd_wait	     proc    near
   4015	10C7  55			     push    bp
   4016	10C8  8B EC			     mov     bp,sp
   4017	10CA  83 EC 18			     sub     sp,24
   4018	10CD  56			     push    si
   4019	10CE  57			     push    di
   4020	10CF  8B 76 04			     mov     si,word ptr [bp+4]
   4021	10D2  8B 7E 06			     mov     di,word ptr [bp+6]
   4022					;
   4023					;    {
   4024					;	     int     status=123;
   4025					;
   4026	10D5  C7 46 FE 007B		     mov     word ptr [bp-2],123
   4027					;
   4028					;	     pid_t   pid;
   4029					;	     char    str[20];
   4030					;
   4031					;	     argc=argc;
   4032					;
   4033					;
   4034					;	     argv=argv;
   4035					;
   4036					;
   4037					;	     pid = wait(&status);
   4038					;
   4039	10DA  16			     push    ss
   4040	10DB  8D 46 FE			     lea     ax,word ptr [bp-2]
   4041	10DE  50			     push    ax
   4042	10DF  E8 0000e			     call    near ptr _wait
   4043	10E2  59			     pop     cx
   4044	10E3  59			     pop     cx
   4045	10E4  89 46 FC			     mov     word ptr [bp-4],ax
   4046					;
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 72
command.ASM



   4047					;	     putstr("Processo ");
   4048					;
   4049	10E7  1E			     push    ds
   4050	10E8  B8 0A00r			     mov     ax,offset DGROUP:s@+2398
   4051	10EB  50			     push    ax
   4052	10EC  E8 0000e			     call    near ptr _putstr
   4053	10EF  59			     pop     cx
   4054	10F0  59			     pop     cx
   4055					;
   4056					;	     inttostr(str,pid);
   4057					;
   4058	10F1  FF 76 FC			     push    word ptr [bp-4]
   4059	10F4  16			     push    ss
   4060	10F5  8D 46 E8			     lea     ax,word ptr [bp-24]
   4061	10F8  50			     push    ax
   4062	10F9  E8 0000e			     call    near ptr _inttostr
   4063	10FC  83 C4 06			     add     sp,6
   4064					;
   4065					;	     putstr(str);
   4066					;
   4067	10FF  16			     push    ss
   4068	1100  8D 46 E8			     lea     ax,word ptr [bp-24]
   4069	1103  50			     push    ax
   4070	1104  E8 0000e			     call    near ptr _putstr
   4071	1107  59			     pop     cx
   4072	1108  59			     pop     cx
   4073					;
   4074					;	     putstr(" encerrado	com codigo de fim ");
   4075					;
   4076	1109  1E			     push    ds
   4077	110A  B8 0A0Ar			     mov     ax,offset DGROUP:s@+2408
   4078	110D  50			     push    ax
   4079	110E  E8 0000e			     call    near ptr _putstr
   4080	1111  59			     pop     cx
   4081	1112  59			     pop     cx
   4082					;
   4083					;	     inttostr(str,status);
   4084					;
   4085	1113  FF 76 FE			     push    word ptr [bp-2]
   4086	1116  16			     push    ss
   4087	1117  8D 46 E8			     lea     ax,word ptr [bp-24]
   4088	111A  50			     push    ax
   4089	111B  E8 0000e			     call    near ptr _inttostr
   4090	111E  83 C4 06			     add     sp,6
   4091					;
   4092					;	     putstr(str);
   4093					;
   4094	1121  16			     push    ss
   4095	1122  8D 46 E8			     lea     ax,word ptr [bp-24]
   4096	1125  50			     push    ax
   4097	1126  E8 0000e			     call    near ptr _putstr
   4098	1129  59			     pop     cx
   4099	112A  59			     pop     cx
   4100					;
   4101					;	     putstr("!\n");
   4102					;
   4103	112B  1E			     push    ds
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 73
command.ASM



   4104	112C  B8 0A28r			     mov     ax,offset DGROUP:s@+2438
   4105	112F  50			     push    ax
   4106	1130  E8 0000e			     call    near ptr _putstr
   4107	1133  59			     pop     cx
   4108	1134  59			     pop     cx
   4109					;
   4110					;	     return 0;
   4111					;
   4112	1135  33 C0			     xor     ax,ax
   4113	1137  EB 00			     jmp     short @26@58
   4114	1139			     @26@58:
   4115					;
   4116					;    }
   4117					;
   4118	1139  5F			     pop     di
   4119	113A  5E			     pop     si
   4120	113B  8B E5			     mov     sp,bp
   4121	113D  5D			     pop     bp
   4122	113E  C3			     ret
   4123	113F			     _cmd_wait	     endp
   4124					;
   4125					;    int cmd_semls(int argc, char far *argv[])
   4126					;
   4127					     assume  cs:_TEXT
   4128	113F			     _cmd_semls	     proc    near
   4129	113F  55			     push    bp
   4130	1140  8B EC			     mov     bp,sp
   4131	1142  83 EC 14			     sub     sp,20
   4132	1145  56			     push    si
   4133	1146  57			     push    di
   4134					;
   4135					;    {
   4136					;	     int i,n=0;
   4137					;
   4138	1147  33 FF			     xor     di,di
   4139					;
   4140					;	     char str[20];
   4141					;	     extern miniSO_SEM miniSO_sem[miniSO_MAXSEMAPHORES];
   4142					;
   4143					;	     argc=argc;
   4144					;
   4145	1149  8B 46 04			     mov     ax,word ptr [bp+4]
   4146	114C  89 46 04			     mov     word ptr [bp+4],ax
   4147					;
   4148					;	     argv=argv;
   4149					;
   4150	114F  8B 46 06			     mov     ax,word ptr [bp+6]
   4151	1152  89 46 06			     mov     word ptr [bp+6],ax
   4152					;
   4153					;	     putstr("Semaphores:\n");
   4154					;
   4155	1155  1E			     push    ds
   4156	1156  B8 0A2Br			     mov     ax,offset DGROUP:s@+2441
   4157	1159  50			     push    ax
   4158	115A  E8 0000e			     call    near ptr _putstr
   4159	115D  59			     pop     cx
   4160	115E  59			     pop     cx
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 74
command.ASM



   4161					;
   4162					;	     for     (i=0;i<miniSO_MAXSEMAPHORES;++i)
   4163					;
   4164	115F  33 F6			     xor     si,si
   4165	1161  E9 0095			     jmp     @27@142
   4166	1164			     @27@58:
   4167					;
   4168					;		     if	     (miniSO_sem[i].status!=FREE) {
   4169					;
   4170	1164  8B DE			     mov     bx,si
   4171	1166  B1 03			     mov     cl,3
   4172	1168  D3 E3			     shl     bx,cl
   4173	116A  83 BF 0000e FF		     cmp     word ptr DGROUP:_miniSO_sem[bx],-1
   4174	116F  75 03			     jne     @@6
   4175	1171  E9 0084			     jmp     @27@114
   4176	1174			     @@6:
   4177					;
   4178					;			     putstr("- id=");
   4179					;
   4180	1174  1E			     push    ds
   4181	1175  B8 0A38r			     mov     ax,offset DGROUP:s@+2454
   4182	1178  50			     push    ax
   4183	1179  E8 0000e			     call    near ptr _putstr
   4184	117C  59			     pop     cx
   4185	117D  59			     pop     cx
   4186					;
   4187					;			     inttostr(str,miniSO_sem[i].semid);
   4188					;
   4189	117E  8B DE			     mov     bx,si
   4190	1180  B1 03			     mov     cl,3
   4191	1182  D3 E3			     shl     bx,cl
   4192	1184  FF B7 0002e		     push    word ptr DGROUP:_miniSO_sem[bx+2]
   4193	1188  16			     push    ss
   4194	1189  8D 46 EC			     lea     ax,word ptr [bp-20]
   4195	118C  50			     push    ax
   4196	118D  E8 0000e			     call    near ptr _inttostr
   4197	1190  83 C4 06			     add     sp,6
   4198					;
   4199					;			     putstr(str);
   4200					;
   4201	1193  16			     push    ss
   4202	1194  8D 46 EC			     lea     ax,word ptr [bp-20]
   4203	1197  50			     push    ax
   4204	1198  E8 0000e			     call    near ptr _putstr
   4205	119B  59			     pop     cx
   4206	119C  59			     pop     cx
   4207					;
   4208					;			     putstr(" value=");
   4209					;
   4210	119D  1E			     push    ds
   4211	119E  B8 0A3Er			     mov     ax,offset DGROUP:s@+2460
   4212	11A1  50			     push    ax
   4213	11A2  E8 0000e			     call    near ptr _putstr
   4214	11A5  59			     pop     cx
   4215	11A6  59			     pop     cx
   4216					;
   4217					;			     inttostr(str,miniSO_sem[i].value);
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 75
command.ASM



   4218					;
   4219	11A7  8B DE			     mov     bx,si
   4220	11A9  B1 03			     mov     cl,3
   4221	11AB  D3 E3			     shl     bx,cl
   4222	11AD  FF B7 0004e		     push    word ptr DGROUP:_miniSO_sem[bx+4]
   4223	11B1  16			     push    ss
   4224	11B2  8D 46 EC			     lea     ax,word ptr [bp-20]
   4225	11B5  50			     push    ax
   4226	11B6  E8 0000e			     call    near ptr _inttostr
   4227	11B9  83 C4 06			     add     sp,6
   4228					;
   4229					;			     putstr(str);
   4230					;
   4231	11BC  16			     push    ss
   4232	11BD  8D 46 EC			     lea     ax,word ptr [bp-20]
   4233	11C0  50			     push    ax
   4234	11C1  E8 0000e			     call    near ptr _putstr
   4235	11C4  59			     pop     cx
   4236	11C5  59			     pop     cx
   4237					;
   4238					;			     putstr(" queue=");
   4239					;
   4240	11C6  1E			     push    ds
   4241	11C7  B8 0A46r			     mov     ax,offset DGROUP:s@+2468
   4242	11CA  50			     push    ax
   4243	11CB  E8 0000e			     call    near ptr _putstr
   4244	11CE  59			     pop     cx
   4245	11CF  59			     pop     cx
   4246					;
   4247					;			     inttostr(str,miniSO_sem[i].queue);
   4248					;
   4249	11D0  8B DE			     mov     bx,si
   4250	11D2  B1 03			     mov     cl,3
   4251	11D4  D3 E3			     shl     bx,cl
   4252	11D6  FF B7 0006e		     push    word ptr DGROUP:_miniSO_sem[bx+6]
   4253	11DA  16			     push    ss
   4254	11DB  8D 46 EC			     lea     ax,word ptr [bp-20]
   4255	11DE  50			     push    ax
   4256	11DF  E8 0000e			     call    near ptr _inttostr
   4257	11E2  83 C4 06			     add     sp,6
   4258					;
   4259					;			     putstr(str);
   4260					;
   4261	11E5  16			     push    ss
   4262	11E6  8D 46 EC			     lea     ax,word ptr [bp-20]
   4263	11E9  50			     push    ax
   4264	11EA  E8 0000e			     call    near ptr _putstr
   4265	11ED  59			     pop     cx
   4266	11EE  59			     pop     cx
   4267					;
   4268					;			     putch('\n');
   4269					;
   4270	11EF  B8 000A			     mov     ax,10
   4271	11F2  50			     push    ax
   4272	11F3  E8 0000e			     call    near ptr _putch
   4273	11F6  59			     pop     cx
   4274					;
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 76
command.ASM



   4275					;			     ++n;
   4276					;
   4277	11F7  47			     inc     di
   4278	11F8			     @27@114:
   4279	11F8  46			     inc     si
   4280	11F9			     @27@142:
   4281	11F9  83 FE 0A			     cmp     si,10
   4282	11FC  7D 03			     jge     @@7
   4283	11FE  E9 FF63			     jmp     @27@58
   4284	1201			     @@7:
   4285					;
   4286					;		     }
   4287					;	     putstr("TOTAL=");
   4288					;
   4289	1201  1E			     push    ds
   4290	1202  B8 0A4Er			     mov     ax,offset DGROUP:s@+2476
   4291	1205  50			     push    ax
   4292	1206  E8 0000e			     call    near ptr _putstr
   4293	1209  59			     pop     cx
   4294	120A  59			     pop     cx
   4295					;
   4296					;	     inttostr(str,n);
   4297					;
   4298	120B  57			     push    di
   4299	120C  16			     push    ss
   4300	120D  8D 46 EC			     lea     ax,word ptr [bp-20]
   4301	1210  50			     push    ax
   4302	1211  E8 0000e			     call    near ptr _inttostr
   4303	1214  83 C4 06			     add     sp,6
   4304					;
   4305					;	     putstr(str);
   4306					;
   4307	1217  16			     push    ss
   4308	1218  8D 46 EC			     lea     ax,word ptr [bp-20]
   4309	121B  50			     push    ax
   4310	121C  E8 0000e			     call    near ptr _putstr
   4311	121F  59			     pop     cx
   4312	1220  59			     pop     cx
   4313					;
   4314					;	     putstr("\n\n");
   4315					;
   4316	1221  1E			     push    ds
   4317	1222  B8 0A55r			     mov     ax,offset DGROUP:s@+2483
   4318	1225  50			     push    ax
   4319	1226  E8 0000e			     call    near ptr _putstr
   4320	1229  59			     pop     cx
   4321	122A  59			     pop     cx
   4322					;
   4323					;	     return 0;
   4324					;
   4325	122B  33 C0			     xor     ax,ax
   4326	122D  EB 00			     jmp     short @27@198
   4327	122F			     @27@198:
   4328					;
   4329					;    }
   4330					;
   4331	122F  5F			     pop     di
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 77
command.ASM



   4332	1230  5E			     pop     si
   4333	1231  8B E5			     mov     sp,bp
   4334	1233  5D			     pop     bp
   4335	1234  C3			     ret
   4336	1235			     _cmd_semls	     endp
   4337					;
   4338					;    int cmd_semcreate(int argc, char far *argv[])
   4339					;
   4340					     assume  cs:_TEXT
   4341	1235			     _cmd_semcreate  proc    near
   4342	1235  55			     push    bp
   4343	1236  8B EC			     mov     bp,sp
   4344	1238  83 EC 14			     sub     sp,20
   4345	123B  56			     push    si
   4346	123C  57			     push    di
   4347					;
   4348					;    {
   4349					;	     int     res,value;
   4350					;	     semid_t semid;
   4351					;	     char    str[20];
   4352					;
   4353					;	     if	     (argc != 2)     {
   4354					;
   4355	123D  83 7E 04 02		     cmp     word ptr [bp+4],2
   4356	1241  74 0F			     je	     short @28@142
   4357					;
   4358					;		     putstr("Erro em semcreate:	numero invalido	de argumentos!\n");
   4359					;
   4360	1243  1E			     push    ds
   4361	1244  B8 0A58r			     mov     ax,offset DGROUP:s@+2486
   4362	1247  50			     push    ax
   4363	1248  E8 0000e			     call    near ptr _putstr
   4364	124B  59			     pop     cx
   4365	124C  59			     pop     cx
   4366					;
   4367					;		     return 1;
   4368					;
   4369	124D			     @28@86:
   4370	124D  B8 0001			     mov     ax,1
   4371	1250			     @28@114:
   4372	1250  EB 6C			     jmp     short @28@226
   4373	1252			     @28@142:
   4374					;
   4375					;	     }
   4376					;	     value = atoi(argv[1]);
   4377					;
   4378	1252  8B 5E 06			     mov     bx,word ptr [bp+6]
   4379	1255  FF 77 06			     push    word ptr [bx+6]
   4380	1258  FF 77 04			     push    word ptr [bx+4]
   4381	125B  E8 0000e			     call    near ptr _atoi
   4382	125E  59			     pop     cx
   4383	125F  59			     pop     cx
   4384	1260  8B F0			     mov     si,ax
   4385					;
   4386					;	     semid = semcreate(value);
   4387					;
   4388	1262  56			     push    si
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 78
command.ASM



   4389	1263  E8 0000e			     call    near ptr _semcreate
   4390	1266  59			     pop     cx
   4391	1267  8B F8			     mov     di,ax
   4392					;
   4393					;	     if	     (semid==miniSO_ERROR)
   4394					;
   4395	1269  83 FF FF			     cmp     di,-1
   4396	126C  75 02			     jne     short @28@198
   4397	126E  EB DD			     jmp     short @28@86
   4398	1270			     @28@198:
   4399					;
   4400					;		     return 1;
   4401					;	     putstr("Semaforo id=");
   4402					;
   4403	1270  1E			     push    ds
   4404	1271  B8 0A8Br			     mov     ax,offset DGROUP:s@+2537
   4405	1274  50			     push    ax
   4406	1275  E8 0000e			     call    near ptr _putstr
   4407	1278  59			     pop     cx
   4408	1279  59			     pop     cx
   4409					;
   4410					;	     inttostr(str,semid);
   4411					;
   4412	127A  57			     push    di
   4413	127B  16			     push    ss
   4414	127C  8D 46 EC			     lea     ax,word ptr [bp-20]
   4415	127F  50			     push    ax
   4416	1280  E8 0000e			     call    near ptr _inttostr
   4417	1283  83 C4 06			     add     sp,6
   4418					;
   4419					;	     putstr(str);
   4420					;
   4421	1286  16			     push    ss
   4422	1287  8D 46 EC			     lea     ax,word ptr [bp-20]
   4423	128A  50			     push    ax
   4424	128B  E8 0000e			     call    near ptr _putstr
   4425	128E  59			     pop     cx
   4426	128F  59			     pop     cx
   4427					;
   4428					;	     putstr(" criado (value=");
   4429					;
   4430	1290  1E			     push    ds
   4431	1291  B8 0A98r			     mov     ax,offset DGROUP:s@+2550
   4432	1294  50			     push    ax
   4433	1295  E8 0000e			     call    near ptr _putstr
   4434	1298  59			     pop     cx
   4435	1299  59			     pop     cx
   4436					;
   4437					;	     inttostr(str,value);
   4438					;
   4439	129A  56			     push    si
   4440	129B  16			     push    ss
   4441	129C  8D 46 EC			     lea     ax,word ptr [bp-20]
   4442	129F  50			     push    ax
   4443	12A0  E8 0000e			     call    near ptr _inttostr
   4444	12A3  83 C4 06			     add     sp,6
   4445					;
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 79
command.ASM



   4446					;	     putstr(str);
   4447					;
   4448	12A6  16			     push    ss
   4449	12A7  8D 46 EC			     lea     ax,word ptr [bp-20]
   4450	12AA  50			     push    ax
   4451	12AB  E8 0000e			     call    near ptr _putstr
   4452	12AE  59			     pop     cx
   4453	12AF  59			     pop     cx
   4454					;
   4455					;	     putstr(")\n");
   4456					;
   4457	12B0  1E			     push    ds
   4458	12B1  B8 0AA8r			     mov     ax,offset DGROUP:s@+2566
   4459	12B4  50			     push    ax
   4460	12B5  E8 0000e			     call    near ptr _putstr
   4461	12B8  59			     pop     cx
   4462	12B9  59			     pop     cx
   4463					;
   4464					;	     return 0;
   4465					;
   4466	12BA  33 C0			     xor     ax,ax
   4467	12BC  EB 92			     jmp     short @28@114
   4468	12BE			     @28@226:
   4469					;
   4470					;    }
   4471					;
   4472	12BE  5F			     pop     di
   4473	12BF  5E			     pop     si
   4474	12C0  8B E5			     mov     sp,bp
   4475	12C2  5D			     pop     bp
   4476	12C3  C3			     ret
   4477	12C4			     _cmd_semcreate  endp
   4478					;
   4479					;    void sem_aplic()
   4480					;
   4481					     assume  cs:_TEXT
   4482	12C4			     _sem_aplic	     proc    near
   4483	12C4  55			     push    bp
   4484	12C5  8B EC			     mov     bp,sp
   4485	12C7  83 EC 14			     sub     sp,20
   4486	12CA  56			     push    si
   4487	12CB  57			     push    di
   4488					;
   4489					;    {
   4490					;	     extern int	demo_linha;
   4491					;	     extern semid_t semid;
   4492					;	     unsigned i;
   4493					;	     int ini = demo_linha;
   4494					;
   4495	12CC  8B 3E 009Er		     mov     di,word ptr DGROUP:demo_linha
   4496					;
   4497					;	     char str[20];
   4498					;
   4499					;	     putstrxy(65,ini+0,"⁄ƒƒ Thread ƒƒƒƒø");
   4500					;
   4501	12D0  1E			     push    ds
   4502	12D1  B8 0AABr			     mov     ax,offset DGROUP:s@+2569
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 80
command.ASM



   4503	12D4  50			     push    ax
   4504	12D5  57			     push    di
   4505	12D6  B8 0041			     mov     ax,65
   4506	12D9  50			     push    ax
   4507	12DA  E8 0000e			     call    near ptr _putstrxy
   4508	12DD  83 C4 08			     add     sp,8
   4509					;
   4510					;	     putstrxy(65,ini+1,"≥ PID  =       ≥");
   4511					;
   4512	12E0  1E			     push    ds
   4513	12E1  B8 0ABCr			     mov     ax,offset DGROUP:s@+2586
   4514	12E4  50			     push    ax
   4515	12E5  8B C7			     mov     ax,di
   4516	12E7  40			     inc     ax
   4517	12E8  50			     push    ax
   4518	12E9  B8 0041			     mov     ax,65
   4519	12EC  50			     push    ax
   4520	12ED  E8 0000e			     call    near ptr _putstrxy
   4521	12F0  83 C4 08			     add     sp,8
   4522					;
   4523					;	     putstrxy(65,ini+2,"≥ Execucao:    ≥");
   4524					;
   4525	12F3  1E			     push    ds
   4526	12F4  B8 0ACDr			     mov     ax,offset DGROUP:s@+2603
   4527	12F7  50			     push    ax
   4528	12F8  8B C7			     mov     ax,di
   4529	12FA  05 0002			     add     ax,2
   4530	12FD  50			     push    ax
   4531	12FE  B8 0041			     mov     ax,65
   4532	1301  50			     push    ax
   4533	1302  E8 0000e			     call    near ptr _putstrxy
   4534	1305  83 C4 08			     add     sp,8
   4535					;
   4536					;	     putstrxy(65,ini+3,"≥	       ≥");
   4537					;
   4538	1308  1E			     push    ds
   4539	1309  B8 0ADEr			     mov     ax,offset DGROUP:s@+2620
   4540	130C  50			     push    ax
   4541	130D  8B C7			     mov     ax,di
   4542	130F  05 0003			     add     ax,3
   4543	1312  50			     push    ax
   4544	1313  B8 0041			     mov     ax,65
   4545	1316  50			     push    ax
   4546	1317  E8 0000e			     call    near ptr _putstrxy
   4547	131A  83 C4 08			     add     sp,8
   4548					;
   4549					;	     putstrxy(65,ini+4,"¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ");
   4550					;
   4551	131D  1E			     push    ds
   4552	131E  B8 0AEFr			     mov     ax,offset DGROUP:s@+2637
   4553	1321  50			     push    ax
   4554	1322  8B C7			     mov     ax,di
   4555	1324  05 0004			     add     ax,4
   4556	1327  50			     push    ax
   4557	1328  B8 0041			     mov     ax,65
   4558	132B  50			     push    ax
   4559	132C  E8 0000e			     call    near ptr _putstrxy
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 81
command.ASM



   4560	132F  83 C4 08			     add     sp,8
   4561					;
   4562					;
   4563					;	     inttostr(str,getpid());
   4564					;
   4565	1332  E8 0000e			     call    near ptr _getpid
   4566	1335  50			     push    ax
   4567	1336  16			     push    ss
   4568	1337  8D 46 EC			     lea     ax,word ptr [bp-20]
   4569	133A  50			     push    ax
   4570	133B  E8 0000e			     call    near ptr _inttostr
   4571	133E  83 C4 06			     add     sp,6
   4572					;
   4573					;	     putstrxy(74,ini+1,str);
   4574					;
   4575	1341  16			     push    ss
   4576	1342  8D 46 EC			     lea     ax,word ptr [bp-20]
   4577	1345  50			     push    ax
   4578	1346  8B C7			     mov     ax,di
   4579	1348  40			     inc     ax
   4580	1349  50			     push    ax
   4581	134A  B8 004A			     mov     ax,74
   4582	134D  50			     push    ax
   4583	134E  E8 0000e			     call    near ptr _putstrxy
   4584	1351  83 C4 08			     add     sp,8
   4585					;
   4586					;	     for     (i=0;i<30000U;++i)	 {
   4587					;
   4588	1354  33 F6			     xor     si,si
   4589	1356  EB 29			     jmp     short @29@114
   4590	1358			     @29@58:
   4591					;
   4592					;		     unsignedtostr(str,i,5,'0');
   4593					;
   4594	1358  B0 30			     mov     al,48
   4595	135A  50			     push    ax
   4596	135B  B8 0005			     mov     ax,5
   4597	135E  50			     push    ax
   4598	135F  56			     push    si
   4599	1360  16			     push    ss
   4600	1361  8D 46 EC			     lea     ax,word ptr [bp-20]
   4601	1364  50			     push    ax
   4602	1365  E8 0000e			     call    near ptr _unsignedtostr
   4603	1368  83 C4 0A			     add     sp,10
   4604					;
   4605					;		     putstrxy(70,ini+3,str);
   4606					;
   4607	136B  16			     push    ss
   4608	136C  8D 46 EC			     lea     ax,word ptr [bp-20]
   4609	136F  50			     push    ax
   4610	1370  8B C7			     mov     ax,di
   4611	1372  05 0003			     add     ax,3
   4612	1375  50			     push    ax
   4613	1376  B8 0046			     mov     ax,70
   4614	1379  50			     push    ax
   4615	137A  E8 0000e			     call    near ptr _putstrxy
   4616	137D  83 C4 08			     add     sp,8
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 82
command.ASM



   4617	1380  46			     inc     si
   4618	1381			     @29@114:
   4619	1381  81 FE 7530		     cmp     si,30000
   4620	1385  72 D1			     jb	     short @29@58
   4621					;
   4622					;	     }
   4623					;	     semdown(semid);
   4624					;
   4625	1387  FF 36 0014r		     push    word ptr DGROUP:_semid
   4626	138B  E8 0000e			     call    near ptr _semdown
   4627	138E  59			     pop     cx
   4628	138F  EB 29			     jmp     short @29@226
   4629	1391			     @29@170:
   4630					;
   4631					;	     for     (;i<60000U;++i)  {
   4632					;		     unsignedtostr(str,i,5,'0');
   4633					;
   4634	1391  B0 30			     mov     al,48
   4635	1393  50			     push    ax
   4636	1394  B8 0005			     mov     ax,5
   4637	1397  50			     push    ax
   4638	1398  56			     push    si
   4639	1399  16			     push    ss
   4640	139A  8D 46 EC			     lea     ax,word ptr [bp-20]
   4641	139D  50			     push    ax
   4642	139E  E8 0000e			     call    near ptr _unsignedtostr
   4643	13A1  83 C4 0A			     add     sp,10
   4644					;
   4645					;		     putstrxy(70,ini+3,str);
   4646					;
   4647	13A4  16			     push    ss
   4648	13A5  8D 46 EC			     lea     ax,word ptr [bp-20]
   4649	13A8  50			     push    ax
   4650	13A9  8B C7			     mov     ax,di
   4651	13AB  05 0003			     add     ax,3
   4652	13AE  50			     push    ax
   4653	13AF  B8 0046			     mov     ax,70
   4654	13B2  50			     push    ax
   4655	13B3  E8 0000e			     call    near ptr _putstrxy
   4656	13B6  83 C4 08			     add     sp,8
   4657	13B9  46			     inc     si
   4658	13BA			     @29@226:
   4659	13BA  81 FE EA60		     cmp     si,-5536
   4660	13BE  72 D1			     jb	     short @29@170
   4661					;
   4662					;	     }
   4663					;	     exit(0);
   4664					;
   4665	13C0  33 C0			     xor     ax,ax
   4666	13C2  50			     push    ax
   4667	13C3  E8 0000e			     call    near ptr _exit
   4668	13C6  59			     pop     cx
   4669					;
   4670					;    }
   4671					;
   4672	13C7  5F			     pop     di
   4673	13C8  5E			     pop     si
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 83
command.ASM



   4674	13C9  8B E5			     mov     sp,bp
   4675	13CB  5D			     pop     bp
   4676	13CC  C3			     ret
   4677	13CD			     _sem_aplic	     endp
   4678					;
   4679					;    int cmd_semtest(int argc, char far	*argv[])
   4680					;
   4681					     assume  cs:_TEXT
   4682	13CD			     _cmd_semtest    proc    near
   4683	13CD  55			     push    bp
   4684	13CE  8B EC			     mov     bp,sp
   4685					;
   4686					;    {
   4687					;	     extern int	demo_linha;
   4688					;	     extern semid_t semid;
   4689					;
   4690					;	     if	     (argc != 2)     {
   4691					;
   4692	13D0  83 7E 04 02		     cmp     word ptr [bp+4],2
   4693	13D4  74 0F			     je	     short @30@142
   4694					;
   4695					;		     putstr("Erro em semtest: numero invalido de argumentos!\n");
   4696					;
   4697	13D6  1E			     push    ds
   4698	13D7  B8 0B00r			     mov     ax,offset DGROUP:s@+2654
   4699	13DA			     @30@86:
   4700	13DA  50			     push    ax
   4701	13DB  E8 0000e			     call    near ptr _putstr
   4702	13DE  59			     pop     cx
   4703	13DF  59			     pop     cx
   4704					;
   4705					;		     return 1;
   4706					;
   4707	13E0  B8 0001			     mov     ax,1
   4708	13E3			     @30@114:
   4709	13E3  EB 3A			     jmp     short @30@282
   4710	13E5			     @30@142:
   4711					;
   4712					;	     }
   4713					;	     semid = atoi(argv[1]);
   4714					;
   4715	13E5  8B 5E 06			     mov     bx,word ptr [bp+6]
   4716	13E8  FF 77 06			     push    word ptr [bx+6]
   4717	13EB  FF 77 04			     push    word ptr [bx+4]
   4718	13EE  E8 0000e			     call    near ptr _atoi
   4719	13F1  59			     pop     cx
   4720	13F2  59			     pop     cx
   4721	13F3  A3 0014r			     mov     word ptr DGROUP:_semid,ax
   4722					;
   4723					;	     demo_linha	+= 5;
   4724					;
   4725	13F6  83 06 009Er 05		     add     word ptr DGROUP:demo_linha,5
   4726					;
   4727					;	     if	     (demo_linha >21)
   4728					;
   4729	13FB  83 3E 009Er 15		     cmp     word ptr DGROUP:demo_linha,21
   4730	1400  7E 06			     jle     short @30@198
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 84
command.ASM



   4731					;
   4732					;		     demo_linha	= 1;
   4733					;
   4734	1402  C7 06 009Er 0001		     mov     word ptr DGROUP:demo_linha,1
   4735	1408			     @30@198:
   4736					;
   4737					;	     if	     (fork(sem_aplic)==miniSO_ERROR)  {
   4738					;
   4739	1408  B8 12C4r			     mov     ax,offset _sem_aplic
   4740	140B  50			     push    ax
   4741	140C  E8 0000e			     call    near ptr _fork
   4742	140F  59			     pop     cx
   4743	1410  3D FFFF			     cmp     ax,-1
   4744	1413  75 06			     jne     short @30@254
   4745					;
   4746					;		     putstr("Erro em demo: fork() nao conseguiu	criar thread!\n");
   4747					;
   4748	1415  1E			     push    ds
   4749	1416  B8 0B31r			     mov     ax,offset DGROUP:s@+2703
   4750	1419  EB BF			     jmp     short @30@86
   4751	141B			     @30@254:
   4752					;
   4753					;		     return 1;
   4754					;	     }
   4755					;	     return 0;
   4756					;
   4757	141B  33 C0			     xor     ax,ax
   4758	141D  EB C4			     jmp     short @30@114
   4759	141F			     @30@282:
   4760					;
   4761					;    }
   4762					;
   4763	141F  5D			     pop     bp
   4764	1420  C3			     ret
   4765	1421			     _cmd_semtest    endp
   4766					;
   4767					;    int cmd_semup(int argc, char far *argv[])
   4768					;
   4769					     assume  cs:_TEXT
   4770	1421			     _cmd_semup	     proc    near
   4771	1421  55			     push    bp
   4772	1422  8B EC			     mov     bp,sp
   4773	1424  83 EC 02			     sub     sp,2
   4774					;
   4775					;    {
   4776					;	     semid_t semid;
   4777					;
   4778					;	     if	     (argc != 2)     {
   4779					;
   4780	1427  83 7E 04 02		     cmp     word ptr [bp+4],2
   4781	142B  74 0F			     je	     short @31@114
   4782					;
   4783					;		     putstr("Erro em semtest: numero invalido de argumentos!\n");
   4784					;
   4785	142D  1E			     push    ds
   4786	142E  B8 0B63r			     mov     ax,offset DGROUP:s@+2753
   4787	1431  50			     push    ax
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 85
command.ASM



   4788	1432  E8 0000e			     call    near ptr _putstr
   4789	1435  59			     pop     cx
   4790	1436  59			     pop     cx
   4791					;
   4792					;		     return 1;
   4793					;
   4794	1437  B8 0001			     mov     ax,1
   4795	143A			     @31@86:
   4796	143A  EB 1A			     jmp     short @31@142
   4797	143C			     @31@114:
   4798					;
   4799					;	     }
   4800					;	     semid = atoi(argv[1]);
   4801					;
   4802	143C  8B 5E 06			     mov     bx,word ptr [bp+6]
   4803	143F  FF 77 06			     push    word ptr [bx+6]
   4804	1442  FF 77 04			     push    word ptr [bx+4]
   4805	1445  E8 0000e			     call    near ptr _atoi
   4806	1448  59			     pop     cx
   4807	1449  59			     pop     cx
   4808	144A  89 46 FE			     mov     word ptr [bp-2],ax
   4809					;
   4810					;	     return semup(semid);
   4811					;
   4812	144D  FF 76 FE			     push    word ptr [bp-2]
   4813	1450  E8 0000e			     call    near ptr _semup
   4814	1453  59			     pop     cx
   4815	1454  EB E4			     jmp     short @31@86
   4816	1456			     @31@142:
   4817					;
   4818					;    }
   4819					;
   4820	1456  8B E5			     mov     sp,bp
   4821	1458  5D			     pop     bp
   4822	1459  C3			     ret
   4823	145A			     _cmd_semup	     endp
   4824					;
   4825					;    int cmd_semdestroy(int argc, char far *argv[])
   4826					;
   4827					     assume  cs:_TEXT
   4828	145A			     _cmd_semdestroy proc    near
   4829	145A  55			     push    bp
   4830	145B  8B EC			     mov     bp,sp
   4831	145D  83 EC 02			     sub     sp,2
   4832					;
   4833					;    {
   4834					;	     semid_t semid;
   4835					;
   4836					;	     if	     (argc != 2)     {
   4837					;
   4838	1460  83 7E 04 02		     cmp     word ptr [bp+4],2
   4839	1464  74 0F			     je	     short @32@114
   4840					;
   4841					;		     putstr("Erro em semtest: numero invalido de argumentos!\n");
   4842					;
   4843	1466  1E			     push    ds
   4844	1467  B8 0B94r			     mov     ax,offset DGROUP:s@+2802
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 86
command.ASM



   4845	146A  50			     push    ax
   4846	146B  E8 0000e			     call    near ptr _putstr
   4847	146E  59			     pop     cx
   4848	146F  59			     pop     cx
   4849					;
   4850					;		     return 1;
   4851					;
   4852	1470  B8 0001			     mov     ax,1
   4853	1473			     @32@86:
   4854	1473  EB 1A			     jmp     short @32@142
   4855	1475			     @32@114:
   4856					;
   4857					;	     }
   4858					;	     semid = atoi(argv[1]);
   4859					;
   4860	1475  8B 5E 06			     mov     bx,word ptr [bp+6]
   4861	1478  FF 77 06			     push    word ptr [bx+6]
   4862	147B  FF 77 04			     push    word ptr [bx+4]
   4863	147E  E8 0000e			     call    near ptr _atoi
   4864	1481  59			     pop     cx
   4865	1482  59			     pop     cx
   4866	1483  89 46 FE			     mov     word ptr [bp-2],ax
   4867					;
   4868					;	     return semdestroy(semid);
   4869					;
   4870	1486  FF 76 FE			     push    word ptr [bp-2]
   4871	1489  E8 0000e			     call    near ptr _semdestroy
   4872	148C  59			     pop     cx
   4873	148D  EB E4			     jmp     short @32@86
   4874	148F			     @32@142:
   4875					;
   4876					;    }
   4877					;
   4878	148F  8B E5			     mov     sp,bp
   4879	1491  5D			     pop     bp
   4880	1492  C3			     ret
   4881	1493			     _cmd_semdestroy endp
   4882					;
   4883					;    int cmd_stop(int argc, char far *argv[])
   4884					;
   4885					     assume  cs:_TEXT
   4886	1493			     _cmd_stop	     proc    near
   4887	1493  55			     push    bp
   4888	1494  8B EC			     mov     bp,sp
   4889	1496  56			     push    si
   4890	1497  57			     push    di
   4891					;
   4892					;    {
   4893					;	 int t=0;
   4894					;
   4895	1498  33 F6			     xor     si,si
   4896					;
   4897					;	 pid_t pid=0;
   4898					;
   4899	149A  33 FF			     xor     di,di
   4900					;
   4901					;
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 87
command.ASM



   4902					;	 if (argc<2) {
   4903					;
   4904	149C  83 7E 04 02		     cmp     word ptr [bp+4],2
   4905	14A0  7D 0F			     jge     short @33@114
   4906					;
   4907					;	     putstr("stop: nenhum parametro foi	fornecido\n");
   4908					;
   4909	14A2  1E			     push    ds
   4910	14A3  B8 0BC5r			     mov     ax,offset DGROUP:s@+2851
   4911	14A6  50			     push    ax
   4912	14A7  E8 0000e			     call    near ptr _putstr
   4913	14AA  59			     pop     cx
   4914	14AB  59			     pop     cx
   4915					;
   4916					;	     return miniSO_ERROR;
   4917					;
   4918	14AC  B8 FFFF			     mov     ax,-1
   4919	14AF			     @33@86:
   4920	14AF  EB 2A			     jmp     short @33@198
   4921	14B1			     @33@114:
   4922					;
   4923					;	 }
   4924					;	 pid = atoi(argv[1]);
   4925					;
   4926	14B1  8B 5E 06			     mov     bx,word ptr [bp+6]
   4927	14B4  FF 77 06			     push    word ptr [bx+6]
   4928	14B7  FF 77 04			     push    word ptr [bx+4]
   4929	14BA  E8 0000e			     call    near ptr _atoi
   4930	14BD  59			     pop     cx
   4931	14BE  59			     pop     cx
   4932	14BF  8B F8			     mov     di,ax
   4933					;
   4934					;	 t = stop(pid);
   4935					;
   4936	14C1  57			     push    di
   4937	14C2  E8 0000e			     call    near ptr _stop
   4938	14C5  59			     pop     cx
   4939	14C6  8B F0			     mov     si,ax
   4940					;
   4941					;	 if (t==miniSO_ERROR)
   4942					;
   4943	14C8  83 FE FF			     cmp     si,-1
   4944	14CB  75 0A			     jne     short @33@170
   4945					;
   4946					;	     putstr("stop: impossivel suspender	a thread\n");
   4947					;
   4948	14CD  1E			     push    ds
   4949	14CE  B8 0BEBr			     mov     ax,offset DGROUP:s@+2889
   4950	14D1  50			     push    ax
   4951	14D2  E8 0000e			     call    near ptr _putstr
   4952	14D5  59			     pop     cx
   4953	14D6  59			     pop     cx
   4954	14D7			     @33@170:
   4955					;
   4956					;	 return	t;
   4957					;
   4958	14D7  8B C6			     mov     ax,si
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 88
command.ASM



   4959	14D9  EB D4			     jmp     short @33@86
   4960	14DB			     @33@198:
   4961					;
   4962					;    }
   4963					;
   4964	14DB  5F			     pop     di
   4965	14DC  5E			     pop     si
   4966	14DD  5D			     pop     bp
   4967	14DE  C3			     ret
   4968	14DF			     _cmd_stop	     endp
   4969					;
   4970					;    int cmd_resume(int	argc, char far *argv[])
   4971					;
   4972					     assume  cs:_TEXT
   4973	14DF			     _cmd_resume     proc    near
   4974	14DF  55			     push    bp
   4975	14E0  8B EC			     mov     bp,sp
   4976	14E2  56			     push    si
   4977	14E3  57			     push    di
   4978					;
   4979					;    {
   4980					;	 int t=0;
   4981					;
   4982	14E4  33 F6			     xor     si,si
   4983					;
   4984					;	 pid_t pid=0;
   4985					;
   4986	14E6  33 FF			     xor     di,di
   4987					;
   4988					;
   4989					;	 if (argc<2) {
   4990					;
   4991	14E8  83 7E 04 02		     cmp     word ptr [bp+4],2
   4992	14EC  7D 0F			     jge     short @34@114
   4993					;
   4994					;	     putstr("resume: nenhum parametro foi fornecido\n");
   4995					;
   4996	14EE  1E			     push    ds
   4997	14EF  B8 0C10r			     mov     ax,offset DGROUP:s@+2926
   4998	14F2  50			     push    ax
   4999	14F3  E8 0000e			     call    near ptr _putstr
   5000	14F6  59			     pop     cx
   5001	14F7  59			     pop     cx
   5002					;
   5003					;	     return miniSO_ERROR;
   5004					;
   5005	14F8  B8 FFFF			     mov     ax,-1
   5006	14FB			     @34@86:
   5007	14FB  EB 2A			     jmp     short @34@198
   5008	14FD			     @34@114:
   5009					;
   5010					;	 }
   5011					;	 pid = atoi(argv[1]);
   5012					;
   5013	14FD  8B 5E 06			     mov     bx,word ptr [bp+6]
   5014	1500  FF 77 06			     push    word ptr [bx+6]
   5015	1503  FF 77 04			     push    word ptr [bx+4]
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 89
command.ASM



   5016	1506  E8 0000e			     call    near ptr _atoi
   5017	1509  59			     pop     cx
   5018	150A  59			     pop     cx
   5019	150B  8B F8			     mov     di,ax
   5020					;
   5021					;	 t = resume(pid);
   5022					;
   5023	150D  57			     push    di
   5024	150E  E8 0000e			     call    near ptr _resume
   5025	1511  59			     pop     cx
   5026	1512  8B F0			     mov     si,ax
   5027					;
   5028					;	 if (t==miniSO_ERROR)
   5029					;
   5030	1514  83 FE FF			     cmp     si,-1
   5031	1517  75 0A			     jne     short @34@170
   5032					;
   5033					;	     putstr("resume: impossivel	reiniciar a thread\n");
   5034					;
   5035	1519  1E			     push    ds
   5036	151A  B8 0C38r			     mov     ax,offset DGROUP:s@+2966
   5037	151D  50			     push    ax
   5038	151E  E8 0000e			     call    near ptr _putstr
   5039	1521  59			     pop     cx
   5040	1522  59			     pop     cx
   5041	1523			     @34@170:
   5042					;
   5043					;	 return	t;
   5044					;
   5045	1523  8B C6			     mov     ax,si
   5046	1525  EB D4			     jmp     short @34@86
   5047	1527			     @34@198:
   5048					;
   5049					;    }
   5050					;
   5051	1527  5F			     pop     di
   5052	1528  5E			     pop     si
   5053	1529  5D			     pop     bp
   5054	152A  C3			     ret
   5055	152B			     _cmd_resume     endp
   5056					;
   5057					;    void produtor()
   5058					;
   5059					     assume  cs:_TEXT
   5060	152B			     _produtor	     proc    near
   5061	152B  55			     push    bp
   5062	152C  8B EC			     mov     bp,sp
   5063					;
   5064					;    {
   5065					;      putstr("TESTE");
   5066					;
   5067	152E  1E			     push    ds
   5068	152F  B8 0C5Fr			     mov     ax,offset DGROUP:s@+3005
   5069	1532  50			     push    ax
   5070	1533  E8 0000e			     call    near ptr _putstr
   5071	1536  59			     pop     cx
   5072	1537  59			     pop     cx
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 90
command.ASM



   5073					;
   5074					;    }
   5075					;
   5076	1538  5D			     pop     bp
   5077	1539  C3			     ret
   5078	153A			     _produtor	     endp
   5079					;
   5080					;    int cmd_prodcons(int argc,	char far *argv[])
   5081					;
   5082					     assume  cs:_TEXT
   5083	153A			     _cmd_prodcons   proc    near
   5084	153A  55			     push    bp
   5085	153B  8B EC			     mov     bp,sp
   5086					;
   5087					;    {
   5088					;
   5089					;	     if	     (argc != 2)  {
   5090					;
   5091	153D  83 7E 04 02		     cmp     word ptr [bp+4],2
   5092	1541  74 0F			     je	     short @36@142
   5093					;
   5094					;		     putstr("Erro em prodcons: numero invalido de argumentos!\n");
   5095					;
   5096	1543  1E			     push    ds
   5097	1544  B8 0C65r			     mov     ax,offset DGROUP:s@+3011
   5098	1547			     @36@86:
   5099	1547  50			     push    ax
   5100	1548  E8 0000e			     call    near ptr _putstr
   5101	154B  59			     pop     cx
   5102	154C  59			     pop     cx
   5103					;
   5104					;		     return 1;
   5105					;
   5106	154D  B8 0001			     mov     ax,1
   5107	1550			     @36@114:
   5108	1550  EB 17			     jmp     short @36@226
   5109	1552			     @36@142:
   5110					;
   5111					;	     }
   5112					;
   5113					;	     /*	Get arguments
   5114					;	     int cons_time     = atoi(argv[1]);
   5115					;	     int prod_time     = atoi(argv[2]);
   5116					;	 int buffer_length = atoi(argv[3]);
   5117					;	 */
   5118					;
   5119					;	 /* Criar consumidor e produtor*/
   5120					;	 if  (fork(produtor)==miniSO_ERROR)  {
   5121					;
   5122	1552  B8 152Br			     mov     ax,offset _produtor
   5123	1555  50			     push    ax
   5124	1556  E8 0000e			     call    near ptr _fork
   5125	1559  59			     pop     cx
   5126	155A  3D FFFF			     cmp     ax,-1
   5127	155D  75 06			     jne     short @36@198
   5128					;
   5129					;		 putstr("Erro em prodcons: fork() nao conseguiu	criar thread!\n");
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 91
command.ASM



   5130					;
   5131	155F  1E			     push    ds
   5132	1560  B8 0C97r			     mov     ax,offset DGROUP:s@+3061
   5133	1563  EB E2			     jmp     short @36@86
   5134	1565			     @36@198:
   5135					;
   5136					;		 return	1;
   5137					;	 }
   5138					;
   5139					;	     return 0;
   5140					;
   5141	1565  33 C0			     xor     ax,ax
   5142	1567  EB E7			     jmp     short @36@114
   5143	1569			     @36@226:
   5144					;
   5145					;    }
   5146					;
   5147	1569  5D			     pop     bp
   5148	156A  C3			     ret
   5149	156B			     _cmd_prodcons   endp
   5150	156B			     _TEXT   ends
   5151	0014			     _BSS    segment word public 'BSS'
   5152	0014			     _semid  label   word
   5153	0014  02*(??)			     db	     2 dup (?)
   5154	0016			     var     label   word
   5155	0016  01F4*(??)			     db	     500 dup (?)
   5156	020A			     history_pos     label   word
   5157	020A  02*(??)			     db	     2 dup (?)
   5158	020C			     history_nxt     label   word
   5159	020C  02*(??)			     db	     2 dup (?)
   5160	020E			     history_ini     label   word
   5161	020E  02*(??)			     db	     2 dup (?)
   5162	0210			     history_len     label   word
   5163	0210  02*(??)			     db	     2 dup (?)
   5164	0212			     history label   byte
   5165	0212  0136*(??)			     db	     310 dup (?)
   5166	0348			     argv    label   dword
   5167	0348  40*(??)			     db	     64	dup (?)
   5168	0388			     argline label   byte
   5169	0388  025F*(??)			     db	     607 dup (?)
   5170	05E7			     palavra label   byte
   5171	05E7  1F*(??)			     db	     31	dup (?)
   5172	0606			     cmdline label   byte
   5173	0606  1F*(??)			     db	     31	dup (?)
   5174	0625			     end_command     label   word
   5175	0625  02*(??)			     db	     2 dup (?)
   5176					     ?debug  C E9
   5177					     ?debug  C FA00000000
   5178	0627			     _BSS    ends
   5179	00A2			     _DATA   segment word public 'DATA'
   5180	00A2			     s@	     label   byte
   5181	00A2  3F			     db	     '?'
   5182	00A3  00			     db	     0
   5183	00A4  20 20 20 20 20 20	20+	     db	     '			 exibe estas informacoes'
   5184	      20 20 20 20 20 20	20+
   5185	      20 20 20 20 20 65	78+
   5186	      69 62 65 20 65 73	74+
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 92
command.ASM



   5187	      61 73 20 69 6E 66	6F+
   5188	      72 6D 61 63 6F 65	73
   5189	00CE  00			     db	     0
   5190	00CF  68 65 6C 70		     db	     'help'
   5191	00D3  00			     db	     0
   5192	00D4  20 20 20 20 20 20	20+	     db	     '		      exibe estas informacoes'
   5193	      20 20 20 20 20 20	20+
   5194	      20 20 65 78 69 62	65+
   5195	      20 65 73 74 61 73	20+
   5196	      69 6E 66 6F 72 6D	61+
   5197	      63 6F 65 73
   5198	00FB  00			     db	     0
   5199	00FC  76 65 72			     db	     'ver'
   5200	00FF  00			     db	     0
   5201	0100  20 20 20 20 20 20	20+	     db	     '		       mostra a	versao do MSO'
   5202	      20 20 20 20 20 20	20+
   5203	      20 20 20 6D 6F 73	74+
   5204	      72 61 20 61 20 76	65+
   5205	      72 73 61 6F 20 64	6F+
   5206	      20 4D 53 4F
   5207	0127  00			     db	     0
   5208	0128  64 61 74 65		     db	     'date'
   5209	012C  00			     db	     0
   5210	012D  20 20 20 20 20 20	20+	     db	     '		      mostra a data'
   5211	      20 20 20 20 20 20	20+
   5212	      20 20 6D 6F 73 74	72+
   5213	      61 20 61 20 64 61	74+
   5214	      61
   5215	014A  00			     db	     0
   5216	014B  74 69 6D 65		     db	     'time'
   5217	014F  00			     db	     0
   5218	0150  20 20 20 20 20 20	20+	     db	     '		      mostra a hora'
   5219	      20 20 20 20 20 20	20+
   5220	      20 20 6D 6F 73 74	72+
   5221	      61 20 61 20 68 6F	72+
   5222	      61
   5223	016D  00			     db	     0
   5224	016E  63 6C 73			     db	     'cls'
   5225	0171  00			     db	     0
   5226	0172  20 20 20 20 20 20	20+	     db	     '		       limpa a tela'
   5227	      20 20 20 20 20 20	20+
   5228	      20 20 20 6C 69 6D	70+
   5229	      61 20 61 20 74 65	6C+
   5230	      61
   5231	018F  00			     db	     0
   5232	0190  63 6C 65 61 72		     db	     'clear'
   5233	0195  00			     db	     0
   5234	0196  20 20 20 20 20 20	20+	     db	     '		     limpa a tela'
   5235	      20 20 20 20 20 20	20+
   5236	      20 6C 69 6D 70 61	20+
   5237	      61 20 74 65 6C 61
   5238	01B1  00			     db	     0
   5239	01B2  72 65 62 6F 6F 74		     db	     'reboot'
   5240	01B8  00			     db	     0
   5241	01B9  20 20 20 20 20 20	20+	     db	     '		    reinicializa o sistema'
   5242	      20 20 20 20 20 20	20+
   5243	      72 65 69 6E 69 63	69+
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 93
command.ASM



   5244	      61 6C 69 7A 61 20	6F+
   5245	      20 73 69 73 74 65	6D+
   5246	      61
   5247	01DD  00			     db	     0
   5248	01DE  65 78 69 74		     db	     'exit'
   5249	01E2  00			     db	     0
   5250	01E3  20 20 20 20 20 20	20+	     db	     '		      abandona o sistema'
   5251	      20 20 20 20 20 20	20+
   5252	      20 20 61 62 61 6E	64+
   5253	      6F 6E 61 20 6F 20	73+
   5254	      69 73 74 65 6D 61
   5255	0205  00			     db	     0
   5256	0206  71 75 69 74		     db	     'quit'
   5257	020A  00			     db	     0
   5258	020B  20 20 20 20 20 20	20+	     db	     '		      abandona o sistema'
   5259	      20 20 20 20 20 20	20+
   5260	      20 20 61 62 61 6E	64+
   5261	      6F 6E 61 20 6F 20	73+
   5262	      69 73 74 65 6D 61
   5263	022D  00			     db	     0
   5264	022E  70 73			     db	     'ps'
   5265	0230  00			     db	     0
   5266	0231  20 20 20 20 20 20	20+	     db	     '			exibe processos/threads	em execucao'
   5267	      20 20 20 20 20 20	20+
   5268	      20 20 20 20 65 78	69+
   5269	      62 65 20 70 72 6F	63+
   5270	      65 73 73 6F 73 2F	74+
   5271	      68 72 65 61 64 73	20+
   5272	      65 6D 20 65 78 65	63+
   5273	      75 63 61 6F
   5274	0266  00			     db	     0
   5275	0267  6B 69 6C 6C		     db	     'kill'
   5276	026B  00			     db	     0
   5277	026C  20 3C 70 69 64 3E	20+	     db	     ' <pid>	      encerra um processo/thread'
   5278	      20 20 20 20 20 20	20+
   5279	      20 20 65 6E 63 65	72+
   5280	      72 61 20 75 6D 20	70+
   5281	      72 6F 63 65 73 73	6F+
   5282	      2F 74 68 72 65 61	64
   5283	0296  00			     db	     0
   5284	0297  64 65 6D 6F		     db	     'demo'
   5285	029B  00			     db	     0
   5286	029C  20 3C 65 78 69 74	63+	     db	     ' <exitcode>     inicia processos/threads de demonstracao'
   5287	      6F 64 65 3E 20 20	20+
   5288	      20 20 69 6E 69 63	69+
   5289	      61 20 70 72 6F 63	65+
   5290	      73 73 6F 73 2F 74	68+
   5291	      72 65 61 64 73 20	64+
   5292	      65 20 64 65 6D 6F	6E+
   5293	      73 74 72 61 63 61	6F
   5294	02D4  00			     db	     0
   5295	02D5  73 65 74			     db	     'set'
   5296	02D8  00			     db	     0
   5297	02D9  20 5B 3C 76 61 72	3E+	     db	     ' [<var> [<val>]] define o	valor da variavel ou exibe variavei'
   5298	      20 5B 3C 76 61 6C	3E+
   5299	      5D 5D 20 64 65 66	69+
   5300	      6E 65 20 6F 20 76	61+
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 94
command.ASM



   5301	      6C 6F 72 20 64 61	20+
   5302	      76 61 72 69 61 76	65+
   5303	      6C 20 6F 75 20 65	78+
   5304	      69 62 65 20 76 61	72+
   5305	      69 61 76 65 69
   5306	0316  73			     db	     's'
   5307	0317  00			     db	     0
   5308	0318  75 6E 73 65 74		     db	     'unset'
   5309	031D  00			     db	     0
   5310	031E  20 3C 76 61 72 3E	20+	     db	     ' <var>	     apaga a variavel'
   5311	      20 20 20 20 20 20	20+
   5312	      20 61 70 61 67 61	20+
   5313	      61 20 76 61 72 69	61+
   5314	      76 65 6C
   5315	033D  00			     db	     0
   5316	033E  65 63 68 6F		     db	     'echo'
   5317	0342  00			     db	     0
   5318	0343  20 5B 2D 6E 5D 20	3C+	     db	     ' [-n] <args>... imprime argumentos'
   5319	      61 72 67 73 3E 2E	2E+
   5320	      2E 20 69 6D 70 72	69+
   5321	      6D 65 20 61 72 67	75+
   5322	      6D 65 6E 74 6F 73
   5323	0365  00			     db	     0
   5324	0366  77 61 69 74 70 69	64	     db	     'waitpid'
   5325	036D  00			     db	     0
   5326	036E  20 3C 70 69 64 3E	20+	     db	     ' <pid>	   espera pelo processo-filho indicado'
   5327	      20 20 20 20 20 20	65+
   5328	      73 70 65 72 61 20	70+
   5329	      65 6C 6F 20 70 72	6F+
   5330	      63 65 73 73 6F 2D	66+
   5331	      69 6C 68 6F 20 69	6E+
   5332	      64 69 63 61 64 6F
   5333	039E  00			     db	     0
   5334	039F  77 61 69 74		     db	     'wait'
   5335	03A3  00			     db	     0
   5336	03A4  20 20 20 20 20 20	20+	     db	     '		      espera por um processo-filho'
   5337	      20 20 20 20 20 20	20+
   5338	      20 20 65 73 70 65	72+
   5339	      61 20 70 6F 72 20	75+
   5340	      6D 20 70 72 6F 63	65+
   5341	      73 73 6F 2D 66 69	6C+
   5342	      68 6F
   5343	03D0  00			     db	     0
   5344	03D1  73 65 6D 6C 73		     db	     'semls'
   5345	03D6  00			     db	     0
   5346	03D7  20 20 20 20 20 20	20+	     db	     '		     lista tabela de semaforos'
   5347	      20 20 20 20 20 20	20+
   5348	      20 6C 69 73 74 61	20+
   5349	      74 61 62 65 6C 61	20+
   5350	      64 65 20 73 65 6D	61+
   5351	      66 6F 72 6F 73
   5352	03FF  00			     db	     0
   5353	0400  73 65 6D 63 72 65	61+	     db	     'semcreate'
   5354	      74 65
   5355	0409  00			     db	     0
   5356	040A  20 3C 76 61 6C 75	65+	     db	     ' <value>	 cria um semaforo'
   5357	      3E 20 20 20 63 72	69+
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 95
command.ASM



   5358	      61 20 75 6D 20 73	65+
   5359	      6D 61 66 6F 72 6F
   5360	0425  00			     db	     0
   5361	0426  73 65 6D 74 65 73	74	     db	     'semtest'
   5362	042D  00			     db	     0
   5363	042E  20 3C 73 65 6D 69	64+	     db	     ' <semid>	   aplicacao para teste	de semaforos'
   5364	      3E 20 20 20 20 20	61+
   5365	      70 6C 69 63 61 63	61+
   5366	      6F 20 70 61 72 61	20+
   5367	      74 65 73 74 65 20	64+
   5368	      65 20 73 65 6D 61	66+
   5369	      6F 72 6F 73
   5370	045C  00			     db	     0
   5371	045D  73 65 6D 75 70		     db	     'semup'
   5372	0462  00			     db	     0
   5373	0463  20 3C 73 65 6D 69	64+	     db	     ' <semid>	     incrementa	o valor	de um semaforo'
   5374	      3E 20 20 20 20 20	20+
   5375	      20 69 6E 63 72 65	6D+
   5376	      65 6E 74 61 20 6F	20+
   5377	      76 61 6C 6F 72 20	64+
   5378	      65 20 75 6D 20 73	65+
   5379	      6D 61 66 6F 72 6F
   5380	0493  00			     db	     0
   5381	0494  73 65 6D 64 65 73	74+	     db	     'semdestroy'
   5382	      72 6F 79
   5383	049E  00			     db	     0
   5384	049F  20 3C 73 65 6D 69	64+	     db	     ' <semid>	destroi	um semaforo'
   5385	      3E 20 20 64 65 73	74+
   5386	      72 6F 69 20 75 6D	20+
   5387	      73 65 6D 61 66 6F	72+
   5388	      6F
   5389	04BC  00			     db	     0
   5390	04BD  73 74 6F 70		     db	     'stop'
   5391	04C1  00			     db	     0
   5392	04C2  3C 70 69 64 3E 20	20+	     db	     '<pid>	     suspende um processo/thread'
   5393	      20 20 20 20 20 20	20+
   5394	      20 73 75 73 70 65	6E+
   5395	      64 65 20 75 6D 20	70+
   5396	      72 6F 63 65 73 73	6F+
   5397	      2F 74 68 72 65 61	64
   5398	04EC  00			     db	     0
   5399	04ED  72 65 73 75 6D 65		     db	     'resume'
   5400	04F3  00			     db	     0
   5401	04F4  3C 70 69 64 3E 20	20+	     db	     '<pid>	   reinicia um processo/thread'
   5402	      20 20 20 20 20 20	72+
   5403	      65 69 6E 69 63 69	61+
   5404	      20 75 6D 20 70 72	6F+
   5405	      63 65 73 73 6F 2F	74+
   5406	      68 72 65 61 64
   5407	051C  00			     db	     0
   5408	051D  70 72 6F 64 63 6F	6E+	     db	     'prodcons'
   5409	      73
   5410	0525  00			     db	     0
   5411	0526  3C 61 72 67 73 3E	20+	     db	     '<args>	 inicia	produtor consumidor'
   5412	      20 20 20 20 69 6E	69+
   5413	      63 69 61 20 70 72	6F+
   5414	      64 75 74 6F 72 20	63+
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 96
command.ASM



   5415	      6F 6E 73 75 6D 69	64+
   5416	      6F 72
   5417	054B  00			     db	     0
   5418	054C  20 20 20 20 20 20	20+	     db	     '			'
   5419	      20 20 20 20 20 20	20+
   5420	      20 20 20 20
   5421	055E  DC			     db	     -36
   5422	055F  DC			     db	     -36
   5423	0560  DC			     db	     -36
   5424	0561  DC			     db	     -36
   5425	0562  DC			     db	     -36
   5426	0563  DC			     db	     -36
   5427	0564  DC			     db	     -36
   5428	0565  20 20			     db	     '	'
   5429	0567  DC			     db	     -36
   5430	0568  DC			     db	     -36
   5431	0569  DC			     db	     -36
   5432	056A  DC			     db	     -36
   5433	056B  DC			     db	     -36
   5434	056C  DC			     db	     -36
   5435	056D  0A			     db	     10
   5436	056E  00			     db	     0
   5437	056F  20			     db	     ' '
   5438	0570  DC			     db	     -36
   5439	0571  DC			     db	     -36
   5440	0572  DC			     db	     -36
   5441	0573  DC			     db	     -36
   5442	0574  DC			     db	     -36
   5443	0575  20 20			     db	     '	'
   5444	0577  DC			     db	     -36
   5445	0578  20 20			     db	     '	'
   5446	057A  DC			     db	     -36
   5447	057B  DC			     db	     -36
   5448	057C  DC			     db	     -36
   5449	057D  20 20			     db	     '	'
   5450	057F  DC			     db	     -36
   5451	0580  20			     db	     ' '
   5452	0581  DB			     db	     -37
   5453	0582  DB			     db	     -37
   5454	0583  20 20 20			     db	     '	 '
   5455	0586  DF			     db	     -33
   5456	0587  DF			     db	     -33
   5457	0588  20 20			     db	     '	'
   5458	058A  DB			     db	     -37
   5459	058B  DB			     db	     -37
   5460	058C  20 20			     db	     '	'
   5461	058E  DB			     db	     -37
   5462	058F  DB			     db	     -37
   5463	0590  20 20			     db	     '	'
   5464	0592  00			     db	     0
   5465	0593  4D 69 6E 69 73 53	69+	     db	     'MinisSistema Operacional'
   5466	      73 74 65 6D 61 20	4F+
   5467	      70 65 72 61 63 69	6F+
   5468	      6E 61 6C
   5469	05AB  0A			     db	     10
   5470	05AC  00			     db	     0
   5471	05AD  DC			     db	     -36
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 97
command.ASM



   5472	05AE  DB			     db	     -37
   5473	05AF  20			     db	     ' '
   5474	05B0  DB			     db	     -37
   5475	05B1  20			     db	     ' '
   5476	05B2  DB			     db	     -37
   5477	05B3  20			     db	     ' '
   5478	05B4  DC			     db	     -36
   5479	05B5  DB			     db	     -37
   5480	05B6  20			     db	     ' '
   5481	05B7  DC			     db	     -36
   5482	05B8  DB			     db	     -37
   5483	05B9  20			     db	     ' '
   5484	05BA  DB			     db	     -37
   5485	05BB  20			     db	     ' '
   5486	05BC  DC			     db	     -36
   5487	05BD  DB			     db	     -37
   5488	05BE  20			     db	     ' '
   5489	05BF  DF			     db	     -33
   5490	05C0  DF			     db	     -33
   5491	05C1  DF			     db	     -33
   5492	05C2  DF			     db	     -33
   5493	05C3  DB			     db	     -37
   5494	05C4  DB			     db	     -37
   5495	05C5  DB			     db	     -37
   5496	05C6  20			     db	     ' '
   5497	05C7  DB			     db	     -37
   5498	05C8  DB			     db	     -37
   5499	05C9  DB			     db	     -37
   5500	05CA  20 20			     db	     '	'
   5501	05CC  DB			     db	     -37
   5502	05CD  DB			     db	     -37
   5503	05CE  20 20			     db	     '	'
   5504	05D0  00			     db	     0
   5505	05D1  56 73 20			     db	     'Vs '
   5506	05D4  00			     db	     0
   5507	05D5  32 30 31 35		     db	     '2015'
   5508	05D9  00			     db	     0
   5509	05DA  0A			     db	     10
   5510	05DB  00			     db	     0
   5511	05DC  DB			     db	     -37
   5512	05DD  DB			     db	     -37
   5513	05DE  20			     db	     ' '
   5514	05DF  DB			     db	     -37
   5515	05E0  20			     db	     ' '
   5516	05E1  DB			     db	     -37
   5517	05E2  20			     db	     ' '
   5518	05E3  DB			     db	     -37
   5519	05E4  DB			     db	     -37
   5520	05E5  20			     db	     ' '
   5521	05E6  DB			     db	     -37
   5522	05E7  DB			     db	     -37
   5523	05E8  20			     db	     ' '
   5524	05E9  DB			     db	     -37
   5525	05EA  20			     db	     ' '
   5526	05EB  DB			     db	     -37
   5527	05EC  DB			     db	     -37
   5528	05ED  20			     db	     ' '
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 98
command.ASM



   5529	05EE  DB			     db	     -37
   5530	05EF  DB			     db	     -37
   5531	05F0  DC			     db	     -36
   5532	05F1  DC			     db	     -36
   5533	05F2  DB			     db	     -37
   5534	05F3  DB			     db	     -37
   5535	05F4  DB			     db	     -37
   5536	05F5  20			     db	     ' '
   5537	05F6  DB			     db	     -37
   5538	05F7  DB			     db	     -37
   5539	05F8  DB			     db	     -37
   5540	05F9  DC			     db	     -36
   5541	05FA  DC			     db	     -36
   5542	05FB  DB			     db	     -37
   5543	05FC  DB			     db	     -37
   5544	05FD  20 20			     db	     '	'
   5545	05FF  00			     db	     0
   5546	0600  70 6F 72 20 52 6F	6C+	     db	     'por Roland Teodorowitsch'
   5547	      61 6E 64 20 54 65	6F+
   5548	      64 6F 72 6F 77 69	74+
   5549	      73 63 68
   5550	0618  0A			     db	     10
   5551	0619  00			     db	     0
   5552	061A  0A			     db	     10
   5553	061B  44 69 67 69 74 65	20	     db	     'Digite '
   5554	0622  27			     db	     39
   5555	0623  68 65 6C 70		     db	     'help'
   5556	0627  27			     db	     39
   5557	0628  20 6F 75 20		     db	     ' ou '
   5558	062C  27			     db	     39
   5559	062D  3F			     db	     '?'
   5560	062E  27			     db	     39
   5561	062F  20 70 61 72 61 20	61+	     db	     ' para ajuda...'
   5562	      6A 75 64 61 2E 2E	2E
   5563	063D  0A			     db	     10
   5564	063E  0A			     db	     10
   5565	063F  00			     db	     0
   5566	0640  50 52 4F 4D 50 54		     db	     'PROMPT'
   5567	0646  00			     db	     0
   5568	0647  6D 69 6E 69 53 4F	3E	     db	     'miniSO>'
   5569	064E  00			     db	     0
   5570	064F  45 52 52 4F 52 4C	45+	     db	     'ERRORLEVEL'
   5571	      56 45 4C
   5572	0659  00			     db	     0
   5573	065A  30			     db	     '0'
   5574	065B  00			     db	     0
   5575	065C  45 52 52 4F 52 4C	45+	     db	     'ERRORLEVEL'
   5576	      56 45 4C
   5577	0666  00			     db	     0
   5578	0667  45 72 72 6F 3A 20	63+	     db	     'Erro: comando desconhecido!'
   5579	      6F 6D 61 6E 64 6F	20+
   5580	      64 65 73 63 6F 6E	68+
   5581	      65 63 69 64 6F 21
   5582	0682  0A			     db	     10
   5583	0683  00			     db	     0
   5584	0684  50 52 4F 4D 50 54		     db	     'PROMPT'
   5585	068A  00			     db	     0
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 99
command.ASM



   5586	068B  43 6F 6D 61 6E 64	6F+	     db	     'Comandos do minisSistema Operacional:'
   5587	      73 20 64 6F 20 6D	69+
   5588	      6E 69 73 53 69 73	74+
   5589	      65 6D 61 20 4F 70	65+
   5590	      72 61 63 69 6F 6E	61+
   5591	      6C 3A
   5592	06B0  0A			     db	     10
   5593	06B1  00			     db	     0
   5594	06B2  6D 69 6E 69 73 53	69+	     db	     'minisSistema Operacional - Vs '
   5595	      73 74 65 6D 61 20	4F+
   5596	      70 65 72 61 63 69	6F+
   5597	      6E 61 6C 20 2D 20	56+
   5598	      73 20
   5599	06D0  00			     db	     0
   5600	06D1  32 30 31 35		     db	     '2015'
   5601	06D5  00			     db	     0
   5602	06D6  20 42 43 50 20 20	20+	     db	     ' BCP   PID   PPID	 STATUS	  WAIT	 ZLIST	PREV   NEXT'
   5603	      50 49 44 20 20 20	50+
   5604	      50 49 44 20 20 53	54+
   5605	      41 54 55 53 20 20	20+
   5606	      57 41 49 54 20 20	20+
   5607	      5A 4C 49 53 54 20	20+
   5608	      50 52 45 56 20 20	20+
   5609	      4E 45 58 54
   5610	070B  0A			     db	     10
   5611	070C  00			     db	     0
   5612	070D  20 20			     db	     '	'
   5613	070F  00			     db	     0
   5614	0710  20 20			     db	     '	'
   5615	0712  00			     db	     0
   5616	0713  20 20			     db	     '	'
   5617	0715  00			     db	     0
   5618	0716  46 52 45 45 20 20	20	     db	     'FREE   '
   5619	071D  00			     db	     0
   5620	071E  52 45 41 44 59 20	20	     db	     'READY  '
   5621	0725  00			     db	     0
   5622	0726  52 55 4E 4E 49 4E	47	     db	     'RUNNING'
   5623	072D  00			     db	     0
   5624	072E  5A 4F 4D 42 49 45	20	     db	     'ZOMBIE '
   5625	0735  00			     db	     0
   5626	0736  57 41 49 54 20 20	20	     db	     'WAIT   '
   5627	073D  00			     db	     0
   5628	073E  57 41 49 54 53 49	47	     db	     'WAITSIG'
   5629	0745  00			     db	     0
   5630	0746  57 41 49 54 53 45	4D	     db	     'WAITSEM'
   5631	074D  00			     db	     0
   5632	074E  53 54 4F 50 50 45	44	     db	     'STOPPED'
   5633	0755  00			     db	     0
   5634	0756  20 20			     db	     '	'
   5635	0758  00			     db	     0
   5636	0759  20 20			     db	     '	'
   5637	075B  00			     db	     0
   5638	075C  20			     db	     ' '
   5639	075D  00			     db	     0
   5640	075E  20 20			     db	     '	'
   5641	0760  00			     db	     0
   5642	0761  45 72 72 6F 20 65	6D+	     db	     'Erro em kill: parametro nao fornecido!'
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 100
command.ASM



   5643	      20 6B 69 6C 6C 3A	20+
   5644	      70 61 72 61 6D 65	74+
   5645	      72 6F 20 6E 61 6F	20+
   5646	      66 6F 72 6E 65 63	69+
   5647	      64 6F 21
   5648	0787  0A			     db	     10
   5649	0788  00			     db	     0
   5650	0789  6B 69 6C 6C 3A 20	69+	     db	     'kill: impossivel matar o processo/thread'
   5651	      6D 70 6F 73 73 69	76+
   5652	      65 6C 20 6D 61 74	61+
   5653	      72 20 6F 20 70 72	6F+
   5654	      63 65 73 73 6F 2F	74+
   5655	      68 72 65 61 64
   5656	07B1  0A			     db	     10
   5657	07B2  00			     db	     0
   5658	07B3  00			     db	     0
   5659	07B4  45 72 72 6F 20 65	6D+	     db	     'Erro em set: nao ha espaco para novas variaveis!'
   5660	      20 73 65 74 3A 20	6E+
   5661	      61 6F 20 68 61 20	65+
   5662	      73 70 61 63 6F 20	70+
   5663	      61 72 61 20 6E 6F	76+
   5664	      61 73 20 76 61 72	69+
   5665	      61 76 65 69 73 21
   5666	07E4  0A			     db	     10
   5667	07E5  00			     db	     0
   5668	07E6  45 72 72 6F 20 65	6D+	     db	     'Erro em set: o tamanho do	nome da	variavel e muito grande!'
   5669	      20 73 65 74 3A 20	6F+
   5670	      20 74 61 6D 61 6E	68+
   5671	      6F 20 64 6F 20 6E	6F+
   5672	      6D 65 20 64 61 20	76+
   5673	      61 72 69 61 76 65	6C+
   5674	      20 65 20 6D 75 69	74+
   5675	      6F 20 67 72 61 6E	64+
   5676	      65 21
   5677	0820  0A			     db	     10
   5678	0821  00			     db	     0
   5679	0822  45 72 72 6F 20 65	6D+	     db	     'Erro em set: o tamanho do	conteudo da variavel e muito grande'
   5680	      20 73 65 74 3A 20	6F+
   5681	      20 74 61 6D 61 6E	68+
   5682	      6F 20 64 6F 20 63	6F+
   5683	      6E 74 65 75 64 6F	20+
   5684	      64 61 20 76 61 72	69+
   5685	      61 76 65 6C 20 65	20+
   5686	      6D 75 69 74 6F 20	67+
   5687	      72 61 6E 64 65
   5688	085F  21			     db	     '!'
   5689	0860  0A			     db	     10
   5690	0861  00			     db	     0
   5691	0862  45 72 72 6F 20 65	6D+	     db	     'Erro em set: argumentos demais na	linha de comando!'
   5692	      20 73 65 74 3A 20	61+
   5693	      72 67 75 6D 65 6E	74+
   5694	      6F 73 20 64 65 6D	61+
   5695	      69 73 20 6E 61 20	6C+
   5696	      69 6E 68 61 20 64	65+
   5697	      20 63 6F 6D 61 6E	64+
   5698	      6F 21
   5699	0895  0A			     db	     10
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 101
command.ASM



   5700	0896  00			     db	     0
   5701	0897  45 72 72 6F 20 65	6D+	     db	     'Erro em unset: numero invalido de	argumentos!'
   5702	      20 75 6E 73 65 74	3A+
   5703	      20 6E 75 6D 65 72	6F+
   5704	      20 69 6E 76 61 6C	69+
   5705	      64 6F 20 64 65 20	61+
   5706	      72 67 75 6D 65 6E	74+
   5707	      6F 73 21
   5708	08C4  0A			     db	     10
   5709	08C5  00			     db	     0
   5710	08C6  45 72 72 6F 20 65	6D+	     db	     'Erro em unset: variavel inexistente!'
   5711	      20 75 6E 73 65 74	3A+
   5712	      20 76 61 72 69 61	76+
   5713	      65 6C 20 69 6E 65	78+
   5714	      69 73 74 65 6E 74	65+
   5715	      21
   5716	08EA  0A			     db	     10
   5717	08EB  00			     db	     0
   5718	08EC  2D 6E			     db	     '-n'
   5719	08EE  00			     db	     0
   5720	08EF  DA			     db	     -38
   5721	08F0  C4			     db	     -60
   5722	08F1  C4			     db	     -60
   5723	08F2  20 54 68 72 65 61	64+	     db	     ' Thread '
   5724	      20
   5725	08FA  C4			     db	     -60
   5726	08FB  C4			     db	     -60
   5727	08FC  C4			     db	     -60
   5728	08FD  C4			     db	     -60
   5729	08FE  BF			     db	     -65
   5730	08FF  00			     db	     0
   5731	0900  B3			     db	     -77
   5732	0901  20 50 49 44 20 20	3D+	     db	     ' PID  =	    '
   5733	      20 20 20 20 20 20	20
   5734	090F  B3			     db	     -77
   5735	0910  00			     db	     0
   5736	0911  B3			     db	     -77
   5737	0912  20 45 78 65 63 75	63+	     db	     ' Execucao:    '
   5738	      61 6F 3A 20 20 20	20
   5739	0920  B3			     db	     -77
   5740	0921  00			     db	     0
   5741	0922  B3			     db	     -77
   5742	0923  20 20 20 20 20 20	20+	     db	     '		    '
   5743	      20 20 20 20 20 20	20
   5744	0931  B3			     db	     -77
   5745	0932  00			     db	     0
   5746	0933  C0			     db	     -64
   5747	0934  C4			     db	     -60
   5748	0935  C4			     db	     -60
   5749	0936  C4			     db	     -60
   5750	0937  C4			     db	     -60
   5751	0938  C4			     db	     -60
   5752	0939  C4			     db	     -60
   5753	093A  C4			     db	     -60
   5754	093B  C4			     db	     -60
   5755	093C  C4			     db	     -60
   5756	093D  C4			     db	     -60
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 102
command.ASM



   5757	093E  C4			     db	     -60
   5758	093F  C4			     db	     -60
   5759	0940  C4			     db	     -60
   5760	0941  C4			     db	     -60
   5761	0942  D9			     db	     -39
   5762	0943  00			     db	     0
   5763	0944  45 72 72 6F 20 65	6D+	     db	     'Erro em demo: numero invalido de argumentos!'
   5764	      20 64 65 6D 6F 3A	20+
   5765	      6E 75 6D 65 72 6F	20+
   5766	      69 6E 76 61 6C 69	64+
   5767	      6F 20 64 65 20 61	72+
   5768	      67 75 6D 65 6E 74	6F+
   5769	      73 21
   5770	0970  0A			     db	     10
   5771	0971  00			     db	     0
   5772	0972  45 72 72 6F 20 65	6D+	     db	     'Erro em demo: fork() nao conseguiu criar thread!'
   5773	      20 64 65 6D 6F 3A	20+
   5774	      66 6F 72 6B 28 29	20+
   5775	      6E 61 6F 20 63 6F	6E+
   5776	      73 65 67 75 69 75	20+
   5777	      63 72 69 61 72 20	74+
   5778	      68 72 65 61 64 21
   5779	09A2  0A			     db	     10
   5780	09A3  00			     db	     0
   5781	09A4  45 72 72 6F 20 65	6D+	     db	     'Erro em waitpid: numero invalido de argumentos!'
   5782	      20 77 61 69 74 70	69+
   5783	      64 3A 20 6E 75 6D	65+
   5784	      72 6F 20 69 6E 76	61+
   5785	      6C 69 64 6F 20 64	65+
   5786	      20 61 72 67 75 6D	65+
   5787	      6E 74 6F 73 21
   5788	09D3  0A			     db	     10
   5789	09D4  00			     db	     0
   5790	09D5  50 72 6F 63 65 73	73+	     db	     'Processo '
   5791	      6F 20
   5792	09DE  00			     db	     0
   5793	09DF  20 65 6E 63 65 72	72+	     db	     ' encerrado com codigo de fim '
   5794	      61 64 6F 20 63 6F	6D+
   5795	      20 63 6F 64 69 67	6F+
   5796	      20 64 65 20 66 69	6D+
   5797	      20
   5798	09FC  00			     db	     0
   5799	09FD  21			     db	     '!'
   5800	09FE  0A			     db	     10
   5801	09FF  00			     db	     0
   5802	0A00  50 72 6F 63 65 73	73+	     db	     'Processo '
   5803	      6F 20
   5804	0A09  00			     db	     0
   5805	0A0A  20 65 6E 63 65 72	72+	     db	     ' encerrado com codigo de fim '
   5806	      61 64 6F 20 63 6F	6D+
   5807	      20 63 6F 64 69 67	6F+
   5808	      20 64 65 20 66 69	6D+
   5809	      20
   5810	0A27  00			     db	     0
   5811	0A28  21			     db	     '!'
   5812	0A29  0A			     db	     10
   5813	0A2A  00			     db	     0
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 103
command.ASM



   5814	0A2B  53 65 6D 61 70 68	6F+	     db	     'Semaphores:'
   5815	      72 65 73 3A
   5816	0A36  0A			     db	     10
   5817	0A37  00			     db	     0
   5818	0A38  2D 20 69 64 3D		     db	     '-	id='
   5819	0A3D  00			     db	     0
   5820	0A3E  20 76 61 6C 75 65	3D	     db	     ' value='
   5821	0A45  00			     db	     0
   5822	0A46  20 71 75 65 75 65	3D	     db	     ' queue='
   5823	0A4D  00			     db	     0
   5824	0A4E  54 4F 54 41 4C 3D		     db	     'TOTAL='
   5825	0A54  00			     db	     0
   5826	0A55  0A			     db	     10
   5827	0A56  0A			     db	     10
   5828	0A57  00			     db	     0
   5829	0A58  45 72 72 6F 20 65	6D+	     db	     'Erro em semcreate: numero	invalido de argumentos!'
   5830	      20 73 65 6D 63 72	65+
   5831	      61 74 65 3A 20 6E	75+
   5832	      6D 65 72 6F 20 69	6E+
   5833	      76 61 6C 69 64 6F	20+
   5834	      64 65 20 61 72 67	75+
   5835	      6D 65 6E 74 6F 73	21
   5836	0A89  0A			     db	     10
   5837	0A8A  00			     db	     0
   5838	0A8B  53 65 6D 61 66 6F	72+	     db	     'Semaforo id='
   5839	      6F 20 69 64 3D
   5840	0A97  00			     db	     0
   5841	0A98  20 63 72 69 61 64	6F+	     db	     ' criado (value='
   5842	      20 28 76 61 6C 75	65+
   5843	      3D
   5844	0AA7  00			     db	     0
   5845	0AA8  29			     db	     ')'
   5846	0AA9  0A			     db	     10
   5847	0AAA  00			     db	     0
   5848	0AAB  DA			     db	     -38
   5849	0AAC  C4			     db	     -60
   5850	0AAD  C4			     db	     -60
   5851	0AAE  20 54 68 72 65 61	64+	     db	     ' Thread '
   5852	      20
   5853	0AB6  C4			     db	     -60
   5854	0AB7  C4			     db	     -60
   5855	0AB8  C4			     db	     -60
   5856	0AB9  C4			     db	     -60
   5857	0ABA  BF			     db	     -65
   5858	0ABB  00			     db	     0
   5859	0ABC  B3			     db	     -77
   5860	0ABD  20 50 49 44 20 20	3D+	     db	     ' PID  =	    '
   5861	      20 20 20 20 20 20	20
   5862	0ACB  B3			     db	     -77
   5863	0ACC  00			     db	     0
   5864	0ACD  B3			     db	     -77
   5865	0ACE  20 45 78 65 63 75	63+	     db	     ' Execucao:    '
   5866	      61 6F 3A 20 20 20	20
   5867	0ADC  B3			     db	     -77
   5868	0ADD  00			     db	     0
   5869	0ADE  B3			     db	     -77
   5870	0ADF  20 20 20 20 20 20	20+	     db	     '		    '
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 104
command.ASM



   5871	      20 20 20 20 20 20	20
   5872	0AED  B3			     db	     -77
   5873	0AEE  00			     db	     0
   5874	0AEF  C0			     db	     -64
   5875	0AF0  C4			     db	     -60
   5876	0AF1  C4			     db	     -60
   5877	0AF2  C4			     db	     -60
   5878	0AF3  C4			     db	     -60
   5879	0AF4  C4			     db	     -60
   5880	0AF5  C4			     db	     -60
   5881	0AF6  C4			     db	     -60
   5882	0AF7  C4			     db	     -60
   5883	0AF8  C4			     db	     -60
   5884	0AF9  C4			     db	     -60
   5885	0AFA  C4			     db	     -60
   5886	0AFB  C4			     db	     -60
   5887	0AFC  C4			     db	     -60
   5888	0AFD  C4			     db	     -60
   5889	0AFE  D9			     db	     -39
   5890	0AFF  00			     db	     0
   5891	0B00  45 72 72 6F 20 65	6D+	     db	     'Erro em semtest: numero invalido de argumentos!'
   5892	      20 73 65 6D 74 65	73+
   5893	      74 3A 20 6E 75 6D	65+
   5894	      72 6F 20 69 6E 76	61+
   5895	      6C 69 64 6F 20 64	65+
   5896	      20 61 72 67 75 6D	65+
   5897	      6E 74 6F 73 21
   5898	0B2F  0A			     db	     10
   5899	0B30  00			     db	     0
   5900	0B31  45 72 72 6F 20 65	6D+	     db	     'Erro em demo: fork() nao conseguiu criar thread!'
   5901	      20 64 65 6D 6F 3A	20+
   5902	      66 6F 72 6B 28 29	20+
   5903	      6E 61 6F 20 63 6F	6E+
   5904	      73 65 67 75 69 75	20+
   5905	      63 72 69 61 72 20	74+
   5906	      68 72 65 61 64 21
   5907	0B61  0A			     db	     10
   5908	0B62  00			     db	     0
   5909	0B63  45 72 72 6F 20 65	6D+	     db	     'Erro em semtest: numero invalido de argumentos!'
   5910	      20 73 65 6D 74 65	73+
   5911	      74 3A 20 6E 75 6D	65+
   5912	      72 6F 20 69 6E 76	61+
   5913	      6C 69 64 6F 20 64	65+
   5914	      20 61 72 67 75 6D	65+
   5915	      6E 74 6F 73 21
   5916	0B92  0A			     db	     10
   5917	0B93  00			     db	     0
   5918	0B94  45 72 72 6F 20 65	6D+	     db	     'Erro em semtest: numero invalido de argumentos!'
   5919	      20 73 65 6D 74 65	73+
   5920	      74 3A 20 6E 75 6D	65+
   5921	      72 6F 20 69 6E 76	61+
   5922	      6C 69 64 6F 20 64	65+
   5923	      20 61 72 67 75 6D	65+
   5924	      6E 74 6F 73 21
   5925	0BC3  0A			     db	     10
   5926	0BC4  00			     db	     0
   5927	0BC5  73 74 6F 70 3A 20	6E+	     db	     'stop: nenhum parametro foi fornecido'
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 105
command.ASM



   5928	      65 6E 68 75 6D 20	70+
   5929	      61 72 61 6D 65 74	72+
   5930	      6F 20 66 6F 69 20	66+
   5931	      6F 72 6E 65 63 69	64+
   5932	      6F
   5933	0BE9  0A			     db	     10
   5934	0BEA  00			     db	     0
   5935	0BEB  73 74 6F 70 3A 20	69+	     db	     'stop: impossivel suspender a thread'
   5936	      6D 70 6F 73 73 69	76+
   5937	      65 6C 20 73 75 73	70+
   5938	      65 6E 64 65 72 20	61+
   5939	      20 74 68 72 65 61	64
   5940	0C0E  0A			     db	     10
   5941	0C0F  00			     db	     0
   5942	0C10  72 65 73 75 6D 65	3A+	     db	     'resume: nenhum parametro foi fornecido'
   5943	      20 6E 65 6E 68 75	6D+
   5944	      20 70 61 72 61 6D	65+
   5945	      74 72 6F 20 66 6F	69+
   5946	      20 66 6F 72 6E 65	63+
   5947	      69 64 6F
   5948	0C36  0A			     db	     10
   5949	0C37  00			     db	     0
   5950	0C38  72 65 73 75 6D 65	3A+	     db	     'resume: impossivel reiniciar a thread'
   5951	      20 69 6D 70 6F 73	73+
   5952	      69 76 65 6C 20 72	65+
   5953	      69 6E 69 63 69 61	72+
   5954	      20 61 20 74 68 72	65+
   5955	      61 64
   5956	0C5D  0A			     db	     10
   5957	0C5E  00			     db	     0
   5958	0C5F  54 45 53 54 45		     db	     'TESTE'
   5959	0C64  00			     db	     0
   5960	0C65  45 72 72 6F 20 65	6D+	     db	     'Erro em prodcons:	numero invalido	de argumentos!'
   5961	      20 70 72 6F 64 63	6F+
   5962	      6E 73 3A 20 6E 75	6D+
   5963	      65 72 6F 20 69 6E	76+
   5964	      61 6C 69 64 6F 20	64+
   5965	      65 20 61 72 67 75	6D+
   5966	      65 6E 74 6F 73 21
   5967	0C95  0A			     db	     10
   5968	0C96  00			     db	     0
   5969	0C97  45 72 72 6F 20 65	6D+	     db	     'Erro em prodcons:	fork() nao conseguiu criar thread!'
   5970	      20 70 72 6F 64 63	6F+
   5971	      6E 73 3A 20 66 6F	72+
   5972	      6B 28 29 20 6E 61	6F+
   5973	      20 63 6F 6E 73 65	67+
   5974	      75 69 75 20 63 72	69+
   5975	      61 72 20 74 68 72	65+
   5976	      61 64 21
   5977	0CCB  0A			     db	     10
   5978	0CCC  00			     db	     0
   5979	0CCD			     _DATA   ends
   5980	156B			     _TEXT   segment byte public 'CODE'
   5981	156B			     _TEXT   ends
   5982					     public  _produtor
   5983					     public  _sem_aplic
   5984					     public  _semid
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 106
command.ASM



   5985					     extrn   _miniSO_sem:word
   5986				     _exitcode	     equ     exitcode
   5987				     _demo_linha     equ     demo_linha
   5988				     _demo   equ     demo
   5989					     extrn   _miniSO_thread:word
   5990				     _commands	     equ     commands
   5991				     _var    equ     var
   5992				     _num_var	     equ     num_var
   5993				     _history_pos    equ     history_pos
   5994				     _history_nxt    equ     history_nxt
   5995				     _history_ini    equ     history_ini
   5996				     _history_len    equ     history_len
   5997				     _history	     equ     history
   5998				     _argv   equ     argv
   5999				     _argline	     equ     argline
   6000				     _palavra	     equ     palavra
   6001				     _cmdline	     equ     cmdline
   6002				     _end_command    equ     end_command
   6003					     extrn   _resume:near
   6004					     extrn   _stop:near
   6005					     extrn   _semdestroy:near
   6006					     extrn   _semdown:near
   6007					     extrn   _semup:near
   6008					     extrn   _semcreate:near
   6009					     extrn   _getpid:near
   6010					     extrn   _exit:near
   6011					     extrn   _waitpid:near
   6012					     extrn   _wait:near
   6013					     extrn   _kill:near
   6014					     extrn   _fork:near
   6015					     extrn   _reboot:near
   6016					     extrn   _inttostr:near
   6017					     extrn   _unsignedtostr:near
   6018					     extrn   _atoi:near
   6019					     extrn   _strlen:near
   6020					     extrn   _strcmp:near
   6021					     extrn   _strcpy:near
   6022					     extrn   _gettime:near
   6023					     extrn   _getdate:near
   6024					     extrn   _gotoxy:near
   6025					     extrn   _wherey:near
   6026					     extrn   _wherex:near
   6027					     extrn   _setcolor:near
   6028					     extrn   _getcolor:near
   6029					     extrn   _putstrxy:near
   6030					     extrn   _putstr:near
   6031					     extrn   _clrscr:near
   6032					     extrn   _getch:near
   6033					     extrn   _putch:near
   6034					     public  _cmd_prodcons
   6035					     public  _cmd_resume
   6036					     public  _cmd_stop
   6037					     public  _cmd_semdestroy
   6038					     public  _cmd_semup
   6039					     public  _cmd_semtest
   6040					     public  _cmd_semcreate
   6041					     public  _cmd_semls
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 107
command.ASM



   6042					     public  _cmd_waitpid
   6043					     public  _cmd_wait
   6044					     public  _cmd_echo
   6045					     public  _cmd_unset
   6046					     public  _cmd_set
   6047					     public  _cmd_demo
   6048					     public  _cmd_kill
   6049					     public  _cmd_ps
   6050					     public  _cmd_ver
   6051					     public  _cmd_cls
   6052					     public  _cmd_time
   6053					     public  _cmd_date
   6054					     public  _cmd_help
   6055					     public  _cmd_reboot
   6056					     public  _cmd_exit
   6057				     _command_var_set	     equ     command_var_set
   6058				     _command_var_value	     equ     command_var_value
   6059				     _command_var_unset	     equ     command_var_unset
   6060				     _command_var_search     equ     command_var_search
   6061				     _command_var_list	     equ     command_var_list
   6062				     _command_var_nextfree   equ     command_var_nextfree
   6063				     _command_var_init	     equ     command_var_init
   6064				     _command_showprompt     equ     command_showprompt
   6065				     _command_backspace	     equ     command_backspace
   6066					     public  _command
   6067				     _s@     equ     s@
   6068					     end
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 108
Symbol Table




Symbol Name		Type   Value			   Cref	(defined at #)

??DATE			Text   "11/22/17"
??FILENAME		Text   "command	"
??TIME			Text   "21:19:12"
??VERSION		Number 030A
@10@114			Near   _TEXT:0755		   1822	 #1829
@10@170			Near   _TEXT:076A		   1839	 #1845
@10@254			Near   _TEXT:078B		   1869	 #1875
@10@282			Near   _TEXT:07A3		   1859	 #1889
@10@310			Near   _TEXT:07BF		   1828	 #1909
@10@86			Near   _TEXT:0753		   #1827  1844	1874  1908
@11@58			Near   _TEXT:07D4		   1943	 #1944
@12@58			Near   _TEXT:07EB		   1977	 #1978
@13@114			Near   _TEXT:0838		   2019	 #2053
@13@170			Near   _TEXT:0841		   2061	 #2062
@13@58			Near   _TEXT:0809		   #2020  2055
@14@58			Near   _TEXT:08DA		   2200	 #2201
@15@58			Near   _TEXT:097A		   2341	 #2342
@16@58			Near   _TEXT:0992		   2378	 #2379
@17@58			Near   _TEXT:09C1		   2435	 #2436
@18@1010		Near   _TEXT:0C30		   2943	 #2953
@18@1066		Near   _TEXT:0C4A		   2498	 #2974
@18@1094		Near   _TEXT:0C4B		   2487	 #2976
@18@114			Near   _TEXT:0A12		   #2520  2533
@18@1150		Near   _TEXT:0C57		   2987	 #2988
@18@142			Near   _TEXT:0A1A		   2519	 #2529
@18@198			Near   _TEXT:0A5C		   #2576  2589
@18@226			Near   _TEXT:0A64		   2575	 #2585
@18@282			Near   _TEXT:0AA6		   #2632  2645
@18@310			Near   _TEXT:0AAE		   2631	 #2641
@18@450			Near   _TEXT:0AE4		   #2677  2998
@18@478			Near   _TEXT:0AE8		   #2683  2695	2702  2709  2716  2723	2730  2737
@18@506			Near   _TEXT:0AF0		   #2689  2999
@18@534			Near   _TEXT:0AF6		   #2696  3000
@18@562			Near   _TEXT:0AFC		   #2703  3001
@18@58			Near   _TEXT:09E5		   #2488  2979
@18@590			Near   _TEXT:0B02		   #2710  3002
@18@618			Near   _TEXT:0B08		   #2717  3003
@18@646			Near   _TEXT:0B0E		   #2724  3004
@18@674			Near   _TEXT:0B14		   #2731  3005
@18@702			Near   _TEXT:0B1A		   2674	 2688  #2738
@18@730			Near   _TEXT:0B4A		   #2773  2786
@18@758			Near   _TEXT:0B52		   2772	 #2782
@18@814			Near   _TEXT:0B94		   #2830  2843
@18@842			Near   _TEXT:0B9C		   2829	 #2839
@18@898			Near   _TEXT:0BDE		   #2887  2900
@18@926			Near   _TEXT:0BE6		   2886	 #2896
@18@982			Near   _TEXT:0C28		   #2944  2957
@18@C1266		Word   _TEXT:0C5B		   2676	 #2997
@19@114			Near   _TEXT:0C87		   #3045  3084
@19@142			Near   _TEXT:0C89		   3030	 #3047
@19@198			Near   _TEXT:0CAB		   3070	 #3077
@19@226			Near   _TEXT:0CAF		   3046	 #3085
@19@86			Near   _TEXT:0C7E		   #3036  3076
@1@1094			Near   _TEXT:01D6		   510	#525
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 109
Symbol Table



@1@1150			Near   _TEXT:01E6		   524	531  #540
@1@1178			Near   _TEXT:01E8		   505	#547
@1@1262			Near   _TEXT:0203		   564	#569
@1@1290			Near   _TEXT:020A		   553	#578
@1@1374			Near   _TEXT:0227		   595	#601
@1@142			Near   _TEXT:00FD		   #312	 317
@1@1430			Near   _TEXT:0234		   607	#613
@1@1458			Near   _TEXT:023A		   546	577  585  600  612  #619
@1@1514			Near   _TEXT:0242		   #630	 643
@1@1542			Near   _TEXT:0246		   629	#641
@1@1598			Near   _TEXT:0278		   495	628  #678
@1@1626			Near   _TEXT:027B		   #685	 1268
@1@1766			Near   _TEXT:02A6		   709	#715
@1@1794			Near   _TEXT:02AC		   714	#721
@1@1822			Near   _TEXT:02AE		   702	#726
@1@1878			Near   _TEXT:02BF		   736	#741
@1@1934			Near   _TEXT:02CE		   725	747  #752
@1@1962			Near   _TEXT:02D0		   #754	 768
@1@1990			Near   _TEXT:02D4		   753	#766
@1@2074			Near   _TEXT:030D		   692	696  774  #808
@1@2102			Near   _TEXT:030F		   391	466  487  684  814  #815
@1@2130			Near   _TEXT:0312		   #821	 1283
@1@2158			Near   _TEXT:0337		   #852	 1017
@1@2186			Near   _TEXT:0339		   #854	 867  870
@1@2214			Near   _TEXT:033C		   853	#861
@1@226			Near   _TEXT:010D		   315	#319
@1@2298			Near   _TEXT:0357		   864	#871
@1@2354			Near   _TEXT:0363		   877	#882
@1@2382			Near   _TEXT:0367		   #888	 910
@1@2410			Near   _TEXT:0375		   887	#901
@1@2494			Near   _TEXT:0390		   904	907  #911
@1@254			Near   _TEXT:0111		   #321	 1282
@1@2578			Near   _TEXT:03D3		   938	#963
@1@2606			Near   _TEXT:03D5		   921	962  #969
@1@2662			Near   _TEXT:0411		   1006	 #1011
@1@2690			Near   _TEXT:0414		   968	#1016
@1@2718			Near   _TEXT:0417		   881	1010  #1018
@1@2774			Near   _TEXT:0423		   1025	 #1034
@1@282			Near   _TEXT:0114		   #327	 1281
@1@2830			Near   _TEXT:0448		   1055	 #1061
@1@2886			Near   _TEXT:0457		   1067	 #1073
@1@2914			Near   _TEXT:045B		   1060	 1072  #1079
@1@2970			Near   _TEXT:046A		   1085	 #1091
@1@2998			Near   _TEXT:046E		   1090	 #1097
@1@3026			Near   _TEXT:0477		   #1108  1136
@1@3082			Near   _TEXT:049E		   1123	 #1132
@1@3110			Near   _TEXT:049F		   1107	 #1134
@1@3138			Near   _TEXT:04A4		   1131	 #1137
@1@3194			Near   _TEXT:04E3		   1146	 #1185
@1@3222			Near   _TEXT:04ED		   1184	 #1196
@1@3278			Near   _TEXT:04F7		   1202	 #1207
@1@3306			Near   _TEXT:04FB		   318	#1217
@1@3362			Near   _TEXT:0511		   295	326  347  369  820  1033  1216	1223  #1238
@1@338			Near   _TEXT:011C		   333	#342
@1@366			Near   _TEXT:011F		   #348	 1284
@1@394			Near   _TEXT:0121		   #350	 364
@1@422			Near   _TEXT:0125		   349	#362
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 110
Symbol Table



@1@478			Near   _TEXT:012C		   #370	 1280
@1@562			Near   _TEXT:013F		   #385	 390
@1@58			Near   _TEXT:00EA		   #296	 1241
@1@646			Near   _TEXT:014F		   388	#392
@1@674			Near   _TEXT:0153		   #394	 1265
@1@702			Near   _TEXT:015B		   #401	 414
@1@730			Near   _TEXT:015F		   400	#412
@1@786			Near   _TEXT:016F		   #429	 457
@1@842			Near   _TEXT:0194		   428	#455
@1@898			Near   _TEXT:01A0		   #467	 1267
@1@954			Near   _TEXT:01A8		   473	#482
@1@982			Near   _TEXT:01AB		   #488	 1266
@1@C3234		Word   _TEXT:0531		   311	#1269
@1@C3330		Word   _TEXT:0521		   384	#1256
@20@114			Near   _TEXT:0CCB		   #3123  3221
@20@142			Near   _TEXT:0CCD		   3113	 #3125
@20@198			Near   _TEXT:0CE8		   3131	 #3144
@20@254			Near   _TEXT:0D04		   3149	 #3161
@20@282			Near   _TEXT:0D09		   3143	 3160  #3167
@20@366			Near   _TEXT:0D1B		   #3177  3240
@20@394			Near   _TEXT:0D21		   #3185  3239
@20@422			Near   _TEXT:0D27		   #3194  3238
@20@450			Near   _TEXT:0D2D		   #3204  3237
@20@478			Near   _TEXT:0D31		   3184	 3193  3203  #3212
@20@506			Near   _TEXT:0D3C		   3174	 #3222
@20@534			Near   _TEXT:0D3E		   3124	 #3224
@20@86			Near   _TEXT:0CC9		   #3121  3223
@20@C482		Word   _TEXT:0D44		   3176	 #3236
@21@114			Near   _TEXT:0D65		   #3271  3303
@21@142			Near   _TEXT:0D67		   3256	 #3273
@21@198			Near   _TEXT:0D84		   3289	 #3296
@21@226			Near   _TEXT:0D88		   3272	 #3304
@21@86			Near   _TEXT:0D5C		   #3262  3295
@22@114			Near   _TEXT:0DBE		   3345	 #3351
@22@142			Near   _TEXT:0DC9		   3350	 #3361
@22@170			Near   _TEXT:0DCE		   #3367  3398
@22@226			Near   _TEXT:0DD9		   3372	 #3375
@22@254			Near   _TEXT:0DE1		   3374	 #3383
@22@310			Near   _TEXT:0DF2		   3366	 #3396
@22@338			Near   _TEXT:0DF7		   3333	 #3399
@22@394			Near   _TEXT:0E05		   3406	 #3414
@22@422			Near   _TEXT:0E09		   3419	 #3420
@23@114			Near   _TEXT:0ED2		   3557	 #3586
@23@170			Near   _TEXT:0EDC		   #3595  3625
@23@226			Near   _TEXT:0F05		   3594	 #3623
@23@282			Near   _TEXT:0F0F		   #3632  3662
@23@338			Near   _TEXT:0F38		   3631	 #3660
@23@394			Near   _TEXT:0F42		   #3669  3699
@23@450			Near   _TEXT:0F6B		   3668	 #3697
@23@506			Near   _TEXT:0F75		   #3706  3736
@23@562			Near   _TEXT:0F9E		   3705	 #3734
@23@58			Near   _TEXT:0EA9		   #3558  3588
@23@618			Near   _TEXT:0FA8		   #3743  3773
@23@674			Near   _TEXT:0FD1		   3742	 #3771
@24@114			Near   _TEXT:0FFA		   #3819  3869
@24@142			Near   _TEXT:0FFC		   3804	 #3821
@24@198			Near   _TEXT:100E		   3831	 #3836
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 111
Symbol Table



@24@254			Near   _TEXT:1032		   3855	 #3862
@24@282			Near   _TEXT:1036		   3820	 #3870
@24@86			Near   _TEXT:0FF1		   #3810  3861
@25@114			Near   _TEXT:1054		   3895	 #3911
@25@142			Near   _TEXT:10C2		   3910	 #4001
@25@86			Near   _TEXT:1052		   #3909  4000
@26@58			Near   _TEXT:1139		   4113	 #4114
@27@114			Near   _TEXT:11F8		   4175	 #4278
@27@142			Near   _TEXT:11F9		   4165	 #4280
@27@198			Near   _TEXT:122F		   4326	 #4327
@27@58			Near   _TEXT:1164		   #4166  4283
@28@114			Near   _TEXT:1250		   #4371  4467
@28@142			Near   _TEXT:1252		   4356	 #4373
@28@198			Near   _TEXT:1270		   4396	 #4398
@28@226			Near   _TEXT:12BE		   4372	 #4468
@28@86			Near   _TEXT:124D		   #4369  4397
@29@114			Near   _TEXT:1381		   4589	 #4618
@29@170			Near   _TEXT:1391		   #4629  4660
@29@226			Near   _TEXT:13BA		   4628	 #4658
@29@58			Near   _TEXT:1358		   #4590  4620
@30@114			Near   _TEXT:13E3		   #4708  4758
@30@142			Near   _TEXT:13E5		   4693	 #4710
@30@198			Near   _TEXT:1408		   4730	 #4735
@30@254			Near   _TEXT:141B		   4744	 #4751
@30@282			Near   _TEXT:141F		   4709	 #4759
@30@86			Near   _TEXT:13DA		   #4699  4750
@31@114			Near   _TEXT:143C		   4781	 #4797
@31@142			Near   _TEXT:1456		   4796	 #4816
@31@86			Near   _TEXT:143A		   #4795  4815
@32@114			Near   _TEXT:1475		   4839	 #4855
@32@142			Near   _TEXT:148F		   4854	 #4874
@32@86			Near   _TEXT:1473		   #4853  4873
@33@114			Near   _TEXT:14B1		   4905	 #4921
@33@170			Near   _TEXT:14D7		   4944	 #4954
@33@198			Near   _TEXT:14DB		   4920	 #4960
@33@86			Near   _TEXT:14AF		   #4919  4959
@34@114			Near   _TEXT:14FD		   4992	 #5008
@34@170			Near   _TEXT:1523		   5031	 #5041
@34@198			Near   _TEXT:1527		   5007	 #5047
@34@86			Near   _TEXT:14FB		   #5006  5046
@36@114			Near   _TEXT:1550		   #5107  5142
@36@142			Near   _TEXT:1552		   5092	 #5109
@36@198			Near   _TEXT:1565		   5127	 #5134
@36@226			Near   _TEXT:1569		   5108	 #5143
@36@86			Near   _TEXT:1547		   #5098  5133
@3@86			Near   _TEXT:05AF		   1370	 #1399
@4@114			Near   _TEXT:05DF		   1429	 #1448
@4@58			Near   _TEXT:05C2		   #1430  1450
@5@114			Near   _TEXT:05FB		   1476	 #1484
@5@142			Near   _TEXT:05FF		   #1490  1509
@5@198			Near   _TEXT:0613		   1499	 #1505
@5@226			Near   _TEXT:0614		   1489	 #1507
@5@282			Near   _TEXT:061B		   1483	 #1511
@5@58			Near   _TEXT:05F6		   #1477  1510
@5@86			Near   _TEXT:05F9		   #1482  1504
@6@114			Near   _TEXT:0681		   1551	 #1605
@6@142			Near   _TEXT:0682		   1541	 #1607
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 112
Symbol Table



@6@58			Near   _TEXT:062E		   #1542  1609
@7@114			Near   _TEXT:069E		   1636	 #1644
@7@142			Near   _TEXT:06A2		   #1650  1675
@7@198			Near   _TEXT:06C2		   1665	 #1671
@7@226			Near   _TEXT:06C3		   1649	 #1673
@7@282			Near   _TEXT:06CA		   1643	 #1677
@7@58			Near   _TEXT:0699		   #1637  1676
@7@86			Near   _TEXT:069C		   #1642  1670
@8@114			Near   _TEXT:06E8		   1711	 #1718
@8@142			Near   _TEXT:070C		   1717	 #1744
@8@86			Near   _TEXT:06E6		   #1716  1743
@9@114			Near   _TEXT:072B		   1776	 #1784
@9@142			Near   _TEXT:0739		   1783	 #1794
@9@86			Near   _TEXT:0729		   #1782  1793
@@0			Near   _TEXT:01B5		   494	#496
@@1			Near   _TEXT:0285		   691	#693
@@2			Near   _TEXT:028F		   695	#697
@@3			Near   _TEXT:051B		   1240	 #1242
@@4			Near   _TEXT:09F8		   2497	 #2499
@@5			Near   _TEXT:0C53		   2978	 #2980
@@6			Near   _TEXT:1174		   4174	 #4176
@@7			Near   _TEXT:1201		   4282	 #4284
@CPU			Text   0101H
@CURSEG			Text   _TEXT			   #10	#14  #18  #22  #106  #2446  #2449  #3431  #3439	 #5151	#5179	  +
							   #5980
@FILENAME		Text   COMMAND
@WORDSIZE		Text   2			   #10	#14  #18  #22  #106  #2446  #2449  #3431  #3439	 #5151	#5179	  +
							   #5980
ARGLINE			Byte   _BSS:0388		   980	988  #5168
ARGV			Dword  _BSS:0348		   992	993  1118  1119	 1150  #5166
B@			Byte   _BSS:0000		   #19
B@W			Word   _BSS:0000		   #20	2505  2513  2538  2561	2569  2594  2617  2625	2650  2758  2766  +
							   2791	 2815  2823  2848  2872	 2880  2905  2929  2937	 2962
CMDLINE			Byte   _BSS:0606		   655	663  672  785  793  802	 837  843  1041	 1236  #5172
COMMANDS		Word   _DATA:0002		   #26	1117  1157  2029  2041
COMMAND_BACKSPACE	Near   _TEXT:0545		   341	361  411  481  640  765	 #1289
COMMAND_SHOWPROMPT	Near   _TEXT:056F		   294	462  1029  1206	 #1346
COMMAND_VAR_INIT	Near   _TEXT:05BB		   267	#1419
COMMAND_VAR_LIST	Near   _TEXT:061D		   #1523  3117
COMMAND_VAR_NEXTFREE	Near   _TEXT:05EC		   #1466  1863
COMMAND_VAR_SEARCH	Near   _TEXT:068C		   #1624  1703	1768  1851
COMMAND_VAR_SET		Near   _TEXT:073C		   277	288  1179  #1806  3140	3157
COMMAND_VAR_UNSET	Near   _TEXT:06CD		   #1691  3281
COMMAND_VAR_VALUE	Near   _TEXT:070F		   928	1360  #1756
D@			Byte   _DATA:0000		   #15
D@W			Word   _DATA:0000		   #16
DEMO			Near   _TEXT:0E0F		   #3444  3850
DEMO_LINHA		Word   _DATA:009E		   #3432  3457	3826  3830  3835  4495	4725  4729  4734
END_COMMAND		Word   _BSS:0625		   132	1201  1239  1972  #5174
EXITCODE		Word   _DATA:00A0		   #3435  3462	3846
HISTORY			Byte   _BSS:0212		   442	652  782  1047	#5164
HISTORY_INI		Word   _BSS:020E		   136	434  584  594  1066  1071  1078	 #5160
HISTORY_LEN		Word   _BSS:0210		   456	493  504  690  701  706	 1054  1059  #5162
HISTORY_NXT		Word   _BSS:020C		   140	514  557  746  1044  1084  1089	 1096  #5158
HISTORY_POS		Word   _BSS:020A		   144	399  509  516  530  535	 552  559  563	568  583  593  599  606	  +
							   611	618  649  694  708  713	 720  731  735	740  745  751  773  779	  +
							   826	#5156
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 113
Symbol Table



NUM_VAR			Word   _DATA:0000		   #23	1455  1475  1738
PALAVRA			Byte   _BSS:05E7		   895	916  920  926  945  953	 976  #5170
S@			Byte   _DATA:00A2		   27  28  30  31  33  34  36  37  39  40  42  43  45  46  48  49  51  52 +
							   54  55  57  58  60  61  63  64  66  67  69  70  72  73  75  76  78  79 +
							   81  82  84  85  87  88  90  91  93  94  96  97  99  100  102	 103  168 +
							   178	188  202  212  218  224	 238  248  258	272  275  283  286  1177  +
							   1191	 1358  2010  2410  2419	 2478  2547  2603  2659	 2682  2694  2701 +
							   2708	 2715  2722  2729  2736	 2744  2801  2858  2915	 3035  3075  3136 +
							   3183	 3192  3202  3211  3261	 3294  3338  3469  3480	 3493  3506  3519 +
							   3809	 3860  3900  3937  3964	 3991  4050  4077  4104	 4156  4181  4211 +
							   4241	 4290  4317  4361  4404	 4431  4458  4502  4513	 4526  4539  4552 +
							   4698	 4749  4786  4844  4910	 4949  4997  5036  5068	 5097  5132  #5180
VAR			Word   _BSS:0016		   1438	 1446  1498  1550  1559	 1585  1658  1726  1734	 1791  1885  1900 +
							   #5154
_ARGLINE		Alias  ARGLINE			   #5999
_ARGV			Alias  ARGV			   #5998
_ATOI			Near   ----:---- Extern		   3055	 3843  3919  4381  4718	 4805  4863  4929  5016	 #6018
_CLRSCR			Near   ----:---- Extern		   156	2373  #6031
_CMDLINE		Alias  CMDLINE			   #6001
_CMD_CLS		Near   _TEXT:0980		   44  47  #2356  6051
_CMD_DATE		Near   _TEXT:0845		   38  #2075  6053
_CMD_DEMO		Near   _TEXT:0FE4		   65  #3794  6047
_CMD_ECHO		Near   _TEXT:0D8C		   74  #3316  6044
_CMD_EXIT		Near   _TEXT:07D8		   53  56  #1957  6056
_CMD_HELP		Near   _TEXT:07ED		   29  32  #1989  6054
_CMD_KILL		Near   _TEXT:0C6B		   62  #3010  6048
_CMD_PRODCONS		Near   _TEXT:153A		   104	#5083  6034
_CMD_PS			Near   _TEXT:09C5		   59  #2454  6049
_CMD_REBOOT		Near   _TEXT:07C2		   50  #1921  6055
_CMD_RESUME		Near   _TEXT:14DF		   101	#4973  6035
_CMD_SEMCREATE		Near   _TEXT:1235		   86  #4341  6040
_CMD_SEMDESTROY		Near   _TEXT:145A		   95  #4828  6037
_CMD_SEMLS		Near   _TEXT:113F		   83  #4128  6041
_CMD_SEMTEST		Near   _TEXT:13CD		   89  #4682  6039
_CMD_SEMUP		Near   _TEXT:1421		   92  #4770  6038
_CMD_SET		Near   _TEXT:0CB3		   68  #3098  6046
_CMD_STOP		Near   _TEXT:1493		   98  #4886  6036
_CMD_TIME		Near   _TEXT:08E0		   41  #2215  6052
_CMD_UNSET		Near   _TEXT:0D4C		   71  #3245  6045
_CMD_VER		Near   _TEXT:0996		   35  #2392  6050
_CMD_WAIT		Near   _TEXT:10C7		   80  #4014  6043
_CMD_WAITPID		Near   _TEXT:1038		   77  #3881  6042
_COMMAND		Near   _TEXT:0000		   #111	 6066
_COMMANDS		Alias  COMMANDS			   #5990
_COMMAND_BACKSPACE	Alias  COMMAND_BACKSPACE	   #6065
_COMMAND_SHOWPROMPT	Alias  COMMAND_SHOWPROMPT	   #6064
_COMMAND_VAR_INIT	Alias  COMMAND_VAR_INIT		   #6063
_COMMAND_VAR_LIST	Alias  COMMAND_VAR_LIST		   #6061
_COMMAND_VAR_NEXTFREE	Alias  COMMAND_VAR_NEXTFREE	   #6062
_COMMAND_VAR_SEARCH	Alias  COMMAND_VAR_SEARCH	   #6060
_COMMAND_VAR_SET	Alias  COMMAND_VAR_SET		   #6057
_COMMAND_VAR_UNSET	Alias  COMMAND_VAR_UNSET	   #6059
_COMMAND_VAR_VALUE	Alias  COMMAND_VAR_VALUE	   #6058
_DEMO			Alias  DEMO			   #5988
_DEMO_LINHA		Alias  DEMO_LINHA		   #5987
_END_COMMAND		Alias  END_COMMAND		   #6002
_EXIT			Near   ----:---- Extern		   3779	 4667  #6010
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 114
Symbol Table



_EXITCODE		Alias  EXITCODE			   #5986
_FORK			Near   ----:---- Extern		   3852	 4741  5124  #6014
_GETCH			Near   ----:---- Extern		   302	375  #6032
_GETCOLOR		Near   ----:---- Extern		   1374	 1535  #6028
_GETDATE		Near   ----:---- Extern		   2102	 #6023
_GETPID			Near   ----:---- Extern		   3532	 4565  #6009
_GETTIME		Near   ----:---- Extern		   2239	 #6022
_GOTOXY			Near   ----:---- Extern		   1316	 1331  #6024
_HISTORY		Alias  HISTORY			   #5997
_HISTORY_INI		Alias  HISTORY_INI		   #5995
_HISTORY_LEN		Alias  HISTORY_LEN		   #5996
_HISTORY_NXT		Alias  HISTORY_NXT		   #5994
_HISTORY_POS		Alias  HISTORY_POS		   #5993
_INTTOSTR		Near   ----:---- Extern		   1168	 2507  2563  2619  2760	 2817  2874  2931  3537	 3949  3976  4062 +
							   4089	 4196  4226  4256  4302	 4416  4443  4570  #6016
_KILL			Near   ----:---- Extern		   3063	 #6013
_MINISO_SEM		Word   ----:---- Extern		   4173	 4192  4222  4252  #5985
_MINISO_THREAD		Word   ----:---- Extern		   2496	 2559  2615  2671  2756	 2813  2870  2927  #5989
_NUM_VAR		Alias  NUM_VAR			   #5992
_PALAVRA		Alias  PALAVRA			   #6000
_PRODUTOR		Near   _TEXT:152B		   #5060  5122	5982
_PUTCH			Near   ----:---- Extern		   421	452  832  1230	1324  1406  1569  1603	2050  2134  2165  2194	  +
							   2271	 2304  2335  2429  2527	 2583  2639  2780  2837	 2894  2951  2972 +
							   3381	 3412  4272  #6033
_PUTSTR			Near   ----:---- Extern		   170	180  190  204  214  220	 226  240  250	260  444  665  795  1193  +
							   1388	 1561  1587  2012  2030	 2042  2126  2157  2186	 2263  2296  2327 +
							   2412	 2421  2480  2540  2549	 2596  2605  2652  2661	 2685  2746  2793 +
							   2803	 2850  2860  2907  2917	 2964  3038  3214  3264	 3358  3392  3812 +
							   3902	 3939  3957  3966  3984	 3993  4052  4070  4079	 4097  4106  4158 +
							   4183	 4204  4213  4234  4243	 4264  4292  4310  4319	 4363  4406  4424 +
							   4433	 4451  4460  4701  4788	 4846  4912  4951  4999	 5038  5070  5100 +
							   #6030
_PUTSTRXY		Near   ----:---- Extern		   3474	 3487  3500  3513  3526	 3550  3583  3620  3657	 3694  3731  3768 +
							   4507	 4520  4533  4546  4559	 4583  4615  4655  #6029
_REBOOT			Near   ----:---- Extern		   1938	 #6015
_RESUME			Near   ----:---- Extern		   5024	 #6003
_S@			Alias  S@			   #6067
_SEMCREATE		Near   ----:---- Extern		   4389	 #6008
_SEMDESTROY		Near   ----:---- Extern		   4871	 #6005
_SEMDOWN		Near   ----:---- Extern		   4626	 #6006
_SEMID			Word   _BSS:0014		   4625	 4721  #5152  5984
_SEMUP			Near   ----:---- Extern		   4813	 #6007
_SEM_APLIC		Near   _TEXT:12C4		   #4482  4739	5983
_SETCOLOR		Near   ----:---- Extern		   151	162  185  195  209  231	 245  1381  1397  1576	1596  #6027
_STOP			Near   ----:---- Extern		   4937	 #6004
_STRCMP			Near   ----:---- Extern		   1120	 1662  3342  #6020
_STRCPY			Near   ----:---- Extern		   657	787  947  982  1049  1887  1902	 #6021
_STRLEN			Near   ----:---- Extern		   674	804  955  1818	1835  2515  2571  2627	2768  2825  2882  2939	  +
							   #6019
_UNSIGNEDTOSTR		Near   ----:---- Extern		   2118	 2149  2178  2255  2288	 2319  3570  3607  3644	 3681  3718  3755 +
							   4602	 4642  #6017
_VAR			Alias  VAR			   #5991
_WAIT			Near   ----:---- Extern		   4042	 #6012
_WAITPID		Near   ----:---- Extern		   3930	 #6011
_WHEREX			Near   ----:---- Extern		   1300	 #6026
_WHEREY			Near   ----:---- Extern		   1305	 #6025
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 115
Symbol Table




Macro Name						   Cref	(defined at #)

$COMM							   #1

Groups & Segments	Bit Size Align	Combine	Class	   Cref	(defined at #)

DGROUP			Group				   #12	13  27	28  30	31  33	34  36	37  39	40  42	43  45	46  48	49+
							   51  52  54  55  57  58  60  61  63  64  66  67  69  70  72  73  75  76 +
							   78  79  81  82  84  85  87  88  90  91  93  94  96  97  99  100  102	  +
							   103	132  136  140  144  168	 178  188  202	212  218  224  238  248	  +
							   258	272  275  283  286  399	 434  442  456	493  504  509  514  516	  +
							   530	535  552  557  559  563	 568  583  584	593  594  599  606  611	  +
							   618	649  652  655  663  672	 690  694  701	706  708  713  720  731	  +
							   735	740  745  746  751  773	 779  782  785	793  802  826  837  843	  +
							   895	916  920  926  945  953	 976  980  988	992  993  1041	1044  1047+
							   1054	 1059  1066  1071  1078	 1084  1089  1096  1117	 1118  1119  1150 +
							   1157	 1177  1191  1201  1236	 1239  1358  1438  1446	 1455  1475  1498 +
							   1550	 1559  1585  1658  1726	 1734  1738  1791  1885	 1900  1972  2010 +
							   2029	 2041  2410  2419  2478	 2496  2505  2513  2538	 2547  2559  2561 +
							   2569	 2594  2603  2615  2617	 2625  2650  2659  2671	 2682  2694  2701 +
							   2708	 2715  2722  2729
  _BSS			16  0627 Word	Public	BSS	   12  #18  #2446  #5151
  _DATA			16  0CCD Word	Public	DATA	   12  #14  #22	 #3431	#5179
_TEXT			16  156B Byte	Public	CODE	   #10	13  #106  110  1288  1345  1418	 1465  1522  1623  1690	 1755	  +
							   1805	 1920  1956  1988  2074	 2214  2355  2391  #2449  2453	3009  3097+
							   3244	 3315  #3439  3443  3793  3880	4013  4127  4340  4481	4681  4769+
							   4827	 4885  4972  5059  5082	 #5980
Turbo Assembler	 Version 3.1	    11/22/17 21:19:13	    Page 116
Error Summary



*Warning* command.ASM(3442) Reserved word used as symbol: EXITCODE
