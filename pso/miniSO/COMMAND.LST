Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 1
command.ASM



      1				     $comm   macro   name,dist,size,count
      2					     comm    dist name[size]:BYTE:count
      3					     endm
      4					     ?debug  V 300h
      5					     ?debug  S "command.c"
      6					     ?debug  C E994A3834B09636F6D6D616E642E63
      7					     ?debug  C E94FAE6C4B086D696E69534F2E68
      8					     ?debug  C E96AA3834B09636F6D6D616E642E68
      9					     ?debug  C E9E2A3834B056C69622E68
     10	0000			     _TEXT   segment byte public 'CODE'
     11	0000			     _TEXT   ends
     12				     DGROUP  group   _DATA,_BSS
     13					     assume  cs:_TEXT,ds:DGROUP
     14	0000			     _DATA   segment word public 'DATA'
     15	0000			     d@	     label   byte
     16	0000			     d@w     label   word
     17	0000			     _DATA   ends
     18	0000			     _BSS    segment word public 'BSS'
     19	0000			     b@	     label   byte
     20	0000			     b@w     label   word
     21	0000			     _BSS    ends
     22	0000			     _DATA   segment word public 'DATA'
     23	0000			     num_var label   word
     24	0000  00			     db	     0
     25	0001  00			     db	     0
     26	0002			     commands	     label   word
     27	0002  00B4r			     dw	     DGROUP:s@
     28	0004  00B6r			     dw	     DGROUP:s@+2
     29	0006  07EDr			     dw	     _cmd_help
     30	0008  00E1r			     dw	     DGROUP:s@+45
     31	000A  00E6r			     dw	     DGROUP:s@+50
     32	000C  07EDr			     dw	     _cmd_help
     33	000E  010Er			     dw	     DGROUP:s@+90
     34	0010  0112r			     dw	     DGROUP:s@+94
     35	0012  0996r			     dw	     _cmd_ver
     36	0014  013Ar			     dw	     DGROUP:s@+134
     37	0016  013Fr			     dw	     DGROUP:s@+139
     38	0018  0845r			     dw	     _cmd_date
     39	001A  015Dr			     dw	     DGROUP:s@+169
     40	001C  0162r			     dw	     DGROUP:s@+174
     41	001E  08E0r			     dw	     _cmd_time
     42	0020  0180r			     dw	     DGROUP:s@+204
     43	0022  0184r			     dw	     DGROUP:s@+208
     44	0024  0980r			     dw	     _cmd_cls
     45	0026  01A2r			     dw	     DGROUP:s@+238
     46	0028  01A8r			     dw	     DGROUP:s@+244
     47	002A  0980r			     dw	     _cmd_cls
     48	002C  01C4r			     dw	     DGROUP:s@+272
     49	002E  01CBr			     dw	     DGROUP:s@+279
     50	0030  07C2r			     dw	     _cmd_reboot
     51	0032  01F0r			     dw	     DGROUP:s@+316
     52	0034  01F5r			     dw	     DGROUP:s@+321
     53	0036  07D8r			     dw	     _cmd_exit
     54	0038  0218r			     dw	     DGROUP:s@+356
     55	003A  021Dr			     dw	     DGROUP:s@+361
     56	003C  07D8r			     dw	     _cmd_exit
     57	003E  0240r			     dw	     DGROUP:s@+396
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 2
command.ASM



     58	0040  0243r			     dw	     DGROUP:s@+399
     59	0042  09C5r			     dw	     _cmd_ps
     60	0044  0279r			     dw	     DGROUP:s@+453
     61	0046  027Er			     dw	     DGROUP:s@+458
     62	0048  0C6Br			     dw	     _cmd_kill
     63	004A  02A9r			     dw	     DGROUP:s@+501
     64	004C  02AEr			     dw	     DGROUP:s@+506
     65	004E  0FE4r			     dw	     _cmd_demo
     66	0050  02E7r			     dw	     DGROUP:s@+563
     67	0052  02EBr			     dw	     DGROUP:s@+567
     68	0054  0CB3r			     dw	     _cmd_set
     69	0056  032Ar			     dw	     DGROUP:s@+630
     70	0058  0330r			     dw	     DGROUP:s@+636
     71	005A  0D4Cr			     dw	     _cmd_unset
     72	005C  0350r			     dw	     DGROUP:s@+668
     73	005E  0355r			     dw	     DGROUP:s@+673
     74	0060  0D8Cr			     dw	     _cmd_echo
     75	0062  0378r			     dw	     DGROUP:s@+708
     76	0064  0380r			     dw	     DGROUP:s@+716
     77	0066  1038r			     dw	     _cmd_waitpid
     78	0068  03B1r			     dw	     DGROUP:s@+765
     79	006A  03B6r			     dw	     DGROUP:s@+770
     80	006C  10C7r			     dw	     _cmd_wait
     81	006E  03E3r			     dw	     DGROUP:s@+815
     82	0070  03E9r			     dw	     DGROUP:s@+821
     83	0072  113Fr			     dw	     _cmd_semls
     84	0074  0412r			     dw	     DGROUP:s@+862
     85	0076  041Cr			     dw	     DGROUP:s@+872
     86	0078  1235r			     dw	     _cmd_semcreate
     87	007A  0438r			     dw	     DGROUP:s@+900
     88	007C  0440r			     dw	     DGROUP:s@+908
     89	007E  13CDr			     dw	     _cmd_semtest
     90	0080  046Fr			     dw	     DGROUP:s@+955
     91	0082  0475r			     dw	     DGROUP:s@+961
     92	0084  1421r			     dw	     _cmd_semup
     93	0086  04A6r			     dw	     DGROUP:s@+1010
     94	0088  04B1r			     dw	     DGROUP:s@+1021
     95	008A  145Ar			     dw	     _cmd_semdestroy
     96	008C  04CFr			     dw	     DGROUP:s@+1051
     97	008E  04D4r			     dw	     DGROUP:s@+1056
     98	0090  1493r			     dw	     _cmd_stop
     99	0092  04FFr			     dw	     DGROUP:s@+1099
    100	0094  0506r			     dw	     DGROUP:s@+1106
    101	0096  14DFr			     dw	     _cmd_resume
    102	0098  052Fr			     dw	     DGROUP:s@+1147
    103	009A  0538r			     dw	     DGROUP:s@+1156
    104	009C  17E6r			     dw	     _cmd_prodcons
    105	009E  055Er			     dw	     DGROUP:s@+1194
    106	00A0  0564r			     dw	     DGROUP:s@+1200
    107	00A2  1790r			     dw	     _cmd_tprod
    108	00A4  058Br			     dw	     DGROUP:s@+1239
    109	00A6  0591r			     dw	     DGROUP:s@+1245
    110	00A8  17BBr			     dw	     _cmd_tcons
    111	00AA			     _DATA   ends
    112	0000			     _TEXT   segment byte public 'CODE'
    113					;
    114					;    void command()
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 3
command.ASM



    115					;
    116					     assume  cs:_TEXT
    117	0000			     _command	     proc    near
    118	0000  55			     push    bp
    119	0001  8B EC			     mov     bp,sp
    120	0003  83 EC 22			     sub     sp,34
    121	0006  56			     push    si
    122	0007  57			     push    di
    123					;
    124					;    {
    125					;      char car,str[10];
    126					;      int numcar;
    127					;      int i,achou,pos;
    128					;      int novalinha,res,argc;
    129					;      char far	*ptrline,far *var;
    130					;
    131					;      /* InicializaÁıes... */
    132					;      numcar =	0;
    133					;
    134	0008  33 F6			     xor     si,si
    135					;
    136					;      end_command = 0;
    137					;
    138	000A  C7 06 0657r 0000		     mov     word ptr DGROUP:end_command,0
    139					;
    140					;      history_ini = 0;
    141					;
    142	0010  C7 06 0240r 0000		     mov     word ptr DGROUP:history_ini,0
    143					;
    144					;      history_nxt = 0;
    145					;
    146	0016  C7 06 023Er 0000		     mov     word ptr DGROUP:history_nxt,0
    147					;
    148					;      history_pos = -1;
    149					;
    150	001C  C7 06 023Cr FFFF		     mov     word ptr DGROUP:history_pos,-1
    151					;
    152					;      /* Mensagem inicial */
    153					;      setcolor(7);
    154					;
    155	0022  B8 0007			     mov     ax,7
    156	0025  50			     push    ax
    157	0026  E8 0000e			     call    near ptr _setcolor
    158	0029  59			     pop     cx
    159					;
    160					;      clrscr();
    161					;
    162	002A  E8 0000e			     call    near ptr _clrscr
    163					;
    164					;      setcolor(LOGOCOLOR);
    165					;
    166	002D  B8 0001			     mov     ax,1
    167	0030  50			     push    ax
    168	0031  E8 0000e			     call    near ptr _setcolor
    169	0034  59			     pop     cx
    170					;
    171					;      putstr("			 ‹‹‹‹‹‹‹  ‹‹‹‹‹‹\n");
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 4
command.ASM



    172					;
    173	0035  1E			     push    ds
    174	0036  B8 05BAr			     mov     ax,offset DGROUP:s@+1286
    175	0039  50			     push    ax
    176	003A  E8 0000e			     call    near ptr _putstr
    177	003D  59			     pop     cx
    178	003E  59			     pop     cx
    179					;
    180					;      putstr("	‹‹‹‹‹  ‹  ‹‹‹  ‹ €€   ﬂﬂ  €€  €€  "); setcolor(7); putstr("MinisSistema	    +
    181				     Operacional\n"); setcolor(LOGOCOLOR);
    182					;
    183	003F  1E			     push    ds
    184	0040  B8 05DDr			     mov     ax,offset DGROUP:s@+1321
    185	0043  50			     push    ax
    186	0044  E8 0000e			     call    near ptr _putstr
    187	0047  59			     pop     cx
    188	0048  59			     pop     cx
    189	0049  B8 0007			     mov     ax,7
    190	004C  50			     push    ax
    191	004D  E8 0000e			     call    near ptr _setcolor
    192	0050  59			     pop     cx
    193	0051  1E			     push    ds
    194	0052  B8 0601r			     mov     ax,offset DGROUP:s@+1357
    195	0055  50			     push    ax
    196	0056  E8 0000e			     call    near ptr _putstr
    197	0059  59			     pop     cx
    198	005A  59			     pop     cx
    199	005B  B8 0001			     mov     ax,1
    200	005E  50			     push    ax
    201	005F  E8 0000e			     call    near ptr _setcolor
    202	0062  59			     pop     cx
    203					;
    204					;      putstr("‹€ € € ‹€ ‹€ € ‹€ ﬂﬂﬂﬂ€€€ €€€  €€  "); setcolor(7); putstr("Vs "); putstr    +
    205				     (miniSO_VERSION); putstr("\n"); setcolor(LOGO
    206					;
    207	0063  1E			     push    ds
    208	0064  B8 061Br			     mov     ax,offset DGROUP:s@+1383
    209	0067  50			     push    ax
    210	0068  E8 0000e			     call    near ptr _putstr
    211	006B  59			     pop     cx
    212	006C  59			     pop     cx
    213	006D  B8 0007			     mov     ax,7
    214	0070  50			     push    ax
    215	0071  E8 0000e			     call    near ptr _setcolor
    216	0074  59			     pop     cx
    217	0075  1E			     push    ds
    218	0076  B8 063Fr			     mov     ax,offset DGROUP:s@+1419
    219	0079  50			     push    ax
    220	007A  E8 0000e			     call    near ptr _putstr
    221	007D  59			     pop     cx
    222	007E  59			     pop     cx
    223	007F  1E			     push    ds
    224	0080  B8 0643r			     mov     ax,offset DGROUP:s@+1423
    225	0083  50			     push    ax
    226	0084  E8 0000e			     call    near ptr _putstr
    227	0087  59			     pop     cx
    228	0088  59			     pop     cx
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 5
command.ASM



    229	0089  1E			     push    ds
    230	008A  B8 0648r			     mov     ax,offset DGROUP:s@+1428
    231	008D  50			     push    ax
    232	008E  E8 0000e			     call    near ptr _putstr
    233	0091  59			     pop     cx
    234	0092  59			     pop     cx
    235	0093  B8 0001			     mov     ax,1
    236	0096  50			     push    ax
    237	0097  E8 0000e			     call    near ptr _setcolor
    238	009A  59			     pop     cx
    239					;
    240					;      putstr("€€ € € €€ €€ € €€ €€‹‹€€€ €€€‹‹€€  "); setcolor(7); putstr("por Roland	    +
    241				     Teodorowitsch\n");
    242					;
    243	009B  1E			     push    ds
    244	009C  B8 064Ar			     mov     ax,offset DGROUP:s@+1430
    245	009F  50			     push    ax
    246	00A0  E8 0000e			     call    near ptr _putstr
    247	00A3  59			     pop     cx
    248	00A4  59			     pop     cx
    249	00A5  B8 0007			     mov     ax,7
    250	00A8  50			     push    ax
    251	00A9  E8 0000e			     call    near ptr _setcolor
    252	00AC  59			     pop     cx
    253	00AD  1E			     push    ds
    254	00AE  B8 066Er			     mov     ax,offset DGROUP:s@+1466
    255	00B1  50			     push    ax
    256	00B2  E8 0000e			     call    near ptr _putstr
    257	00B5  59			     pop     cx
    258	00B6  59			     pop     cx
    259					;
    260					;
    261					;      putstr("\nDigite	'help' ou '?' para ajuda...\n\n");
    262					;
    263	00B7  1E			     push    ds
    264	00B8  B8 0688r			     mov     ax,offset DGROUP:s@+1492
    265	00BB  50			     push    ax
    266	00BC  E8 0000e			     call    near ptr _putstr
    267	00BF  59			     pop     cx
    268	00C0  59			     pop     cx
    269					;
    270					;      /* Inicializa vari·veis de ambiente */
    271					;      command_var_init();
    272					;
    273	00C1  E8 04F7			     call    near ptr command_var_init
    274					;
    275					;      command_var_set("PROMPT","miniSO>");
    276					;
    277	00C4  1E			     push    ds
    278	00C5  B8 06B5r			     mov     ax,offset DGROUP:s@+1537
    279	00C8  50			     push    ax
    280	00C9  1E			     push    ds
    281	00CA  B8 06AEr			     mov     ax,offset DGROUP:s@+1530
    282	00CD  50			     push    ax
    283	00CE  E8 066B			     call    near ptr command_var_set
    284	00D1  83 C4 08			     add     sp,8
    285					;
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 6
command.ASM



    286					;      command_var_set("ERRORLEVEL","0");
    287					;
    288	00D4  1E			     push    ds
    289	00D5  B8 06C8r			     mov     ax,offset DGROUP:s@+1556
    290	00D8  50			     push    ax
    291	00D9  1E			     push    ds
    292	00DA  B8 06BDr			     mov     ax,offset DGROUP:s@+1545
    293	00DD  50			     push    ax
    294	00DE  E8 065B			     call    near ptr command_var_set
    295	00E1  83 C4 08			     add     sp,8
    296					;
    297					;      /* Imprime sinal	de pronto */
    298					;      command_showprompt();
    299					;
    300	00E4  E8 0488			     call    near ptr command_showprompt
    301	00E7  E9 0427			     jmp     @1@3362
    302	00EA			     @1@58:
    303					;
    304					;      /* LaÁo para interpretaÁ„o de comandos */
    305					;      while ( !end_command )  {
    306					;	     car=getch();
    307					;
    308	00EA  E8 0000e			     call    near ptr _getch
    309	00ED  88 46 FF			     mov     byte ptr [bp-1],al
    310					;
    311					;	     switch (car)  {
    312					;
    313	00F0  8A 46 FF			     mov     al,byte ptr [bp-1]
    314	00F3  98			     cbw
    315	00F4  89 46 E0			     mov     word ptr [bp-32],ax
    316	00F7  B9 0005			     mov     cx,5
    317	00FA  BB 0531r			     mov     bx,offset @1@C3234
    318	00FD			     @1@142:
    319	00FD  2E: 8B 07			     mov     ax,word ptr cs:[bx]
    320	0100  3B 46 E0			     cmp     ax,word ptr [bp-32]
    321	0103  74 08			     je	     short @1@226
    322	0105  83 C3 02			     add     bx,2
    323	0108  E2 F3			     loop    short @1@142
    324	010A  E9 03EE			     jmp     @1@3306
    325	010D			     @1@226:
    326	010D  2E: FF 67	0A		     jmp     word ptr cs:[bx+10]
    327	0111			     @1@254:
    328					;
    329					;		    case 9:
    330					;			 break;
    331					;
    332	0111  E9 03FD			     jmp     @1@3362
    333	0114			     @1@282:
    334					;
    335					;		    case 8:
    336					;			 if (numcar>0)	{
    337					;
    338	0114  0B F6			     or	     si,si
    339	0116  7E 04			     jle     short @1@338
    340					;
    341					;			    --numcar;
    342					;
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 7
command.ASM



    343	0118  4E			     dec     si
    344					;
    345					;			    command_backspace();
    346					;
    347	0119  E8 0429			     call    near ptr command_backspace
    348	011C			     @1@338:
    349					;
    350					;			 }
    351					;			 break;
    352					;
    353	011C  E9 03F2			     jmp     @1@3362
    354	011F			     @1@366:
    355	011F  EB 04			     jmp     short @1@422
    356	0121			     @1@394:
    357					;
    358					;		    case 27:
    359					;			 /* Limpa a linha de comandos */
    360					;			 while (numcar>0)  {
    361					;			       --numcar;
    362					;
    363	0121  4E			     dec     si
    364					;
    365					;			       command_backspace();
    366					;
    367	0122  E8 0420			     call    near ptr command_backspace
    368	0125			     @1@422:
    369	0125  0B F6			     or	     si,si
    370	0127  7F F8			     jg	     short @1@394
    371					;
    372					;			 }
    373					;			 break;
    374					;
    375	0129  E9 03E5			     jmp     @1@3362
    376	012C			     @1@478:
    377					;
    378					;		    case 0:
    379					;			 car=getch();
    380					;
    381	012C  E8 0000e			     call    near ptr _getch
    382	012F  88 46 FF			     mov     byte ptr [bp-1],al
    383					;
    384					;			 switch	(car)  {
    385					;
    386	0132  8A 46 FF			     mov     al,byte ptr [bp-1]
    387	0135  98			     cbw
    388	0136  89 46 DE			     mov     word ptr [bp-34],ax
    389	0139  B9 0004			     mov     cx,4
    390	013C  BB 0521r			     mov     bx,offset @1@C3330
    391	013F			     @1@562:
    392	013F  2E: 8B 07			     mov     ax,word ptr cs:[bx]
    393	0142  3B 46 DE			     cmp     ax,word ptr [bp-34]
    394	0145  74 08			     je	     short @1@646
    395	0147  83 C3 02			     add     bx,2
    396	014A  E2 F3			     loop    short @1@562
    397	014C  E9 01C0			     jmp     @1@2102
    398	014F			     @1@646:
    399	014F  2E: FF 67	08		     jmp     word ptr cs:[bx+8]
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 8
command.ASM



    400	0153			     @1@674:
    401					;
    402					;				case 65: /* F7 */
    403					;				     history_pos = -1;
    404					;
    405	0153  C7 06 023Cr FFFF		     mov     word ptr DGROUP:history_pos,-1
    406	0159  EB 04			     jmp     short @1@730
    407	015B			     @1@702:
    408					;
    409					;				     /*	Limpa a	linha de comandos */
    410					;				     while (numcar>0)  {
    411					;					   --numcar;
    412					;
    413	015B  4E			     dec     si
    414					;
    415					;					   command_backspace();
    416					;
    417	015C  E8 03E6			     call    near ptr command_backspace
    418	015F			     @1@730:
    419	015F  0B F6			     or	     si,si
    420	0161  7F F8			     jg	     short @1@702
    421					;
    422					;				     }
    423					;				     putch('\n');
    424					;
    425	0163  B8 000A			     mov     ax,10
    426	0166  50			     push    ax
    427	0167  E8 0000e			     call    near ptr _putch
    428	016A  59			     pop     cx
    429					;
    430					;				     /*	Imprime	o histÛrico */
    431					;				     for (i=0;i<history_len;++i)  {
    432					;
    433	016B  33 FF			     xor     di,di
    434	016D  EB 25			     jmp     short @1@842
    435	016F			     @1@786:
    436					;
    437					;					 putstr(history[(history_ini+i)%MAXHISTORY]);
    438					;
    439	016F  1E			     push    ds
    440	0170  A1 0240r			     mov     ax,word ptr DGROUP:history_ini
    441	0173  03 C7			     add     ax,di
    442	0175  BB 000A			     mov     bx,10
    443	0178  99			     cwd
    444	0179  F7 FB			     idiv    bx
    445	017B  BB 001F			     mov     bx,31
    446	017E  8B C2			     mov     ax,dx
    447	0180  F7 EB			     imul    bx
    448	0182  05 0244r			     add     ax,offset DGROUP:history
    449	0185  50			     push    ax
    450	0186  E8 0000e			     call    near ptr _putstr
    451	0189  59			     pop     cx
    452	018A  59			     pop     cx
    453					;
    454					;					 putch('\n');
    455					;
    456	018B  B8 000A			     mov     ax,10
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 9
command.ASM



    457	018E  50			     push    ax
    458	018F  E8 0000e			     call    near ptr _putch
    459	0192  59			     pop     cx
    460	0193  47			     inc     di
    461	0194			     @1@842:
    462	0194  3B 3E 0242r		     cmp     di,word ptr DGROUP:history_len
    463	0198  7C D5			     jl	     short @1@786
    464					;
    465					;				     }
    466					;				     command_showprompt();
    467					;
    468	019A  E8 03D2			     call    near ptr command_showprompt
    469					;
    470					;				     break;
    471					;
    472	019D  E9 016F			     jmp     @1@2102
    473	01A0			     @1@898:
    474					;
    475					;				case 75: /* Seta para esquerda */
    476					;				     if	(numcar>0)  {
    477					;
    478	01A0  0B F6			     or	     si,si
    479	01A2  7E 04			     jle     short @1@954
    480					;
    481					;					--numcar;
    482					;
    483	01A4  4E			     dec     si
    484					;
    485					;					command_backspace();
    486					;
    487	01A5  E8 039D			     call    near ptr command_backspace
    488	01A8			     @1@954:
    489					;
    490					;				     }
    491					;				     break;
    492					;
    493	01A8  E9 0164			     jmp     @1@2102
    494	01AB			     @1@982:
    495					;
    496					;				case 72: /* Seta para cima */
    497					;				     if	(history_len>0)	 {
    498					;
    499	01AB  83 3E 0242r 00		     cmp     word ptr DGROUP:history_len,0
    500	01B0  7F 03			     jg	     @@0
    501	01B2  E9 00C3			     jmp     @1@1598
    502	01B5			     @@0:
    503					;
    504					;					novalinha=0;
    505					;
    506	01B5  C7 46 EE 0000		     mov     word ptr [bp-18],0
    507					;
    508					;					if (history_len<MAXHISTORY)  {
    509					;
    510	01BA  83 3E 0242r 0A		     cmp     word ptr DGROUP:history_len,10
    511	01BF  7D 27			     jge     short @1@1178
    512					;
    513					;					   if (history_pos==-1)	 {
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 10
command.ASM



    514					;
    515	01C1  83 3E 023Cr FF		     cmp     word ptr DGROUP:history_pos,-1
    516	01C6  75 0E			     jne     short @1@1094
    517					;
    518					;					      history_pos=history_nxt-1;
    519					;
    520	01C8  A1 023Er			     mov     ax,word ptr DGROUP:history_nxt
    521	01CB  48			     dec     ax
    522	01CC  A3 023Cr			     mov     word ptr DGROUP:history_pos,ax
    523					;
    524					;					      novalinha=1;
    525					;
    526	01CF  C7 46 EE 0001		     mov     word ptr [bp-18],1
    527					;
    528					;					   }
    529					;
    530	01D4  EB 10			     jmp     short @1@1150
    531	01D6			     @1@1094:
    532					;
    533					;					   else	 {
    534					;					      if (history_pos>0)  {
    535					;
    536	01D6  83 3E 023Cr 00		     cmp     word ptr DGROUP:history_pos,0
    537	01DB  7E 09			     jle     short @1@1150
    538					;
    539					;						 history_pos--;
    540					;
    541	01DD  FF 0E 023Cr		     dec     word ptr DGROUP:history_pos
    542					;
    543					;						 novalinha=1;
    544					;
    545	01E1  C7 46 EE 0001		     mov     word ptr [bp-18],1
    546	01E6			     @1@1150:
    547					;
    548					;					      }
    549					;					   }
    550					;					}
    551					;
    552	01E6  EB 52			     jmp     short @1@1458
    553	01E8			     @1@1178:
    554					;
    555					;					else  {
    556					;					   if (history_pos==-1)	 {
    557					;
    558	01E8  83 3E 023Cr FF		     cmp     word ptr DGROUP:history_pos,-1
    559	01ED  75 1B			     jne     short @1@1290
    560					;
    561					;					      history_pos=history_nxt-1;
    562					;
    563	01EF  A1 023Er			     mov     ax,word ptr DGROUP:history_nxt
    564	01F2  48			     dec     ax
    565	01F3  A3 023Cr			     mov     word ptr DGROUP:history_pos,ax
    566					;
    567					;					      if (history_pos<0)
    568					;
    569	01F6  83 3E 023Cr 00		     cmp     word ptr DGROUP:history_pos,0
    570	01FB  7D 06			     jge     short @1@1262
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 11
command.ASM



    571					;
    572					;						 history_pos=MAXHISTORY-1;
    573					;
    574	01FD  C7 06 023Cr 0009		     mov     word ptr DGROUP:history_pos,9
    575	0203			     @1@1262:
    576					;
    577					;					      novalinha=1;
    578					;
    579	0203  C7 46 EE 0001		     mov     word ptr [bp-18],1
    580					;
    581					;					   }
    582					;
    583	0208  EB 30			     jmp     short @1@1458
    584	020A			     @1@1290:
    585					;
    586					;					   else	 {
    587					;					      if (history_pos!=history_ini)  {
    588					;
    589	020A  A1 023Cr			     mov     ax,word ptr DGROUP:history_pos
    590	020D  3B 06 0240r		     cmp     ax,word ptr DGROUP:history_ini
    591	0211  74 27			     je	     short @1@1458
    592					;
    593					;						 novalinha=1;
    594					;
    595	0213  C7 46 EE 0001		     mov     word ptr [bp-18],1
    596					;
    597					;						 if (history_pos>history_ini)
    598					;
    599	0218  A1 023Cr			     mov     ax,word ptr DGROUP:history_pos
    600	021B  3B 06 0240r		     cmp     ax,word ptr DGROUP:history_ini
    601	021F  7E 06			     jle     short @1@1374
    602					;
    603					;						    --history_pos;
    604					;
    605	0221  FF 0E 023Cr		     dec     word ptr DGROUP:history_pos
    606	0225  EB 13			     jmp     short @1@1458
    607	0227			     @1@1374:
    608					;
    609					;						 else  {  /* history_pos<history_ini */
    610					;						    if (history_pos>0)
    611					;
    612	0227  83 3E 023Cr 00		     cmp     word ptr DGROUP:history_pos,0
    613	022C  7E 06			     jle     short @1@1430
    614					;
    615					;						       history_pos--;
    616					;
    617	022E  FF 0E 023Cr		     dec     word ptr DGROUP:history_pos
    618	0232  EB 06			     jmp     short @1@1458
    619	0234			     @1@1430:
    620					;
    621					;						    else
    622					;						       history_pos=MAXHISTORY-1;
    623					;
    624	0234  C7 06 023Cr 0009		     mov     word ptr DGROUP:history_pos,9
    625	023A			     @1@1458:
    626					;
    627					;						  }
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 12
command.ASM



    628					;					      }
    629					;					   }
    630					;					}
    631					;					if (novalinha)	{
    632					;
    633	023A  83 7E EE 00		     cmp     word ptr [bp-18],0
    634	023E  74 38			     je	     short @1@1598
    635	0240  EB 04			     jmp     short @1@1542
    636	0242			     @1@1514:
    637					;
    638					;					   /* Limpa a linha de comandos	*/
    639					;					   while (numcar>0)  {
    640					;						 --numcar;
    641					;
    642	0242  4E			     dec     si
    643					;
    644					;						 command_backspace();
    645					;
    646	0243  E8 02FF			     call    near ptr command_backspace
    647	0246			     @1@1542:
    648	0246  0B F6			     or	     si,si
    649	0248  7F F8			     jg	     short @1@1514
    650					;
    651					;					   }
    652					;					   strcpy(cmdline,history[history_pos]);
    653					;
    654	024A  1E			     push    ds
    655	024B  A1 023Cr			     mov     ax,word ptr DGROUP:history_pos
    656	024E  BA 001F			     mov     dx,31
    657	0251  F7 EA			     imul    dx
    658	0253  05 0244r			     add     ax,offset DGROUP:history
    659	0256  50			     push    ax
    660	0257  1E			     push    ds
    661	0258  B8 0638r			     mov     ax,offset DGROUP:cmdline
    662	025B  50			     push    ax
    663	025C  E8 0000e			     call    near ptr _strcpy
    664	025F  83 C4 08			     add     sp,8
    665					;
    666					;					   putstr(cmdline);
    667					;
    668	0262  1E			     push    ds
    669	0263  B8 0638r			     mov     ax,offset DGROUP:cmdline
    670	0266  50			     push    ax
    671	0267  E8 0000e			     call    near ptr _putstr
    672	026A  59			     pop     cx
    673	026B  59			     pop     cx
    674					;
    675					;					   numcar=strlen(cmdline);
    676					;
    677	026C  1E			     push    ds
    678	026D  B8 0638r			     mov     ax,offset DGROUP:cmdline
    679	0270  50			     push    ax
    680	0271  E8 0000e			     call    near ptr _strlen
    681	0274  59			     pop     cx
    682	0275  59			     pop     cx
    683	0276  8B F0			     mov     si,ax
    684	0278			     @1@1598:
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 13
command.ASM



    685					;
    686					;					}
    687					;				     }
    688					;				     break;
    689					;
    690	0278  E9 0094			     jmp     @1@2102
    691	027B			     @1@1626:
    692					;
    693					;				case 80: /* Seta para baixo */
    694					;				     if	(history_len>0 && history_pos!=-1)  {
    695					;
    696	027B  83 3E 0242r 00		     cmp     word ptr DGROUP:history_len,0
    697	0280  7F 03			     jg	     @@1
    698	0282  E9 0088			     jmp     @1@2074
    699	0285			     @@1:
    700	0285  83 3E 023Cr FF		     cmp     word ptr DGROUP:history_pos,-1
    701	028A  75 03			     jne     @@2
    702	028C  EB 7F 90			     jmp     @1@2074
    703	028F			     @@2:
    704					;
    705					;					if (history_len<MAXHISTORY)  {
    706					;
    707	028F  83 3E 0242r 0A		     cmp     word ptr DGROUP:history_len,10
    708	0294  7D 18			     jge     short @1@1822
    709					;
    710					;					   if (history_pos<history_len-1)
    711					;
    712	0296  A1 0242r			     mov     ax,word ptr DGROUP:history_len
    713	0299  48			     dec     ax
    714	029A  3B 06 023Cr		     cmp     ax,word ptr DGROUP:history_pos
    715	029E  7E 06			     jle     short @1@1766
    716					;
    717					;					      history_pos++;
    718					;
    719	02A0  FF 06 023Cr		     inc     word ptr DGROUP:history_pos
    720	02A4  EB 06			     jmp     short @1@1794
    721	02A6			     @1@1766:
    722					;
    723					;					   else
    724					;					      history_pos = -1;
    725					;
    726	02A6  C7 06 023Cr FFFF		     mov     word ptr DGROUP:history_pos,-1
    727	02AC			     @1@1794:
    728					;
    729					;					}
    730					;
    731	02AC  EB 20			     jmp     short @1@1934
    732	02AE			     @1@1822:
    733					;
    734					;					else  {
    735					;					   history_pos++;
    736					;
    737	02AE  FF 06 023Cr		     inc     word ptr DGROUP:history_pos
    738					;
    739					;					   if (history_pos>=MAXHISTORY)
    740					;
    741	02B2  83 3E 023Cr 0A		     cmp     word ptr DGROUP:history_pos,10
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 14
command.ASM



    742	02B7  7C 06			     jl	     short @1@1878
    743					;
    744					;					      history_pos = 0;
    745					;
    746	02B9  C7 06 023Cr 0000		     mov     word ptr DGROUP:history_pos,0
    747	02BF			     @1@1878:
    748					;
    749					;					   if (history_pos==history_nxt)
    750					;
    751	02BF  A1 023Cr			     mov     ax,word ptr DGROUP:history_pos
    752	02C2  3B 06 023Er		     cmp     ax,word ptr DGROUP:history_nxt
    753	02C6  75 06			     jne     short @1@1934
    754					;
    755					;					      history_pos = -1;
    756					;
    757	02C8  C7 06 023Cr FFFF		     mov     word ptr DGROUP:history_pos,-1
    758	02CE			     @1@1934:
    759	02CE  EB 04			     jmp     short @1@1990
    760	02D0			     @1@1962:
    761					;
    762					;					}
    763					;					/* Limpa a linha de comandos */
    764					;					while (numcar>0)  {
    765					;					      --numcar;
    766					;
    767	02D0  4E			     dec     si
    768					;
    769					;					      command_backspace();
    770					;
    771	02D1  E8 0271			     call    near ptr command_backspace
    772	02D4			     @1@1990:
    773	02D4  0B F6			     or	     si,si
    774	02D6  7F F8			     jg	     short @1@1962
    775					;
    776					;					}
    777					;					if (history_pos!=-1)  {
    778					;
    779	02D8  83 3E 023Cr FF		     cmp     word ptr DGROUP:history_pos,-1
    780	02DD  74 2E			     je	     short @1@2074
    781					;
    782					;					   strcpy(cmdline,history[history_pos]);
    783					;
    784	02DF  1E			     push    ds
    785	02E0  A1 023Cr			     mov     ax,word ptr DGROUP:history_pos
    786	02E3  BA 001F			     mov     dx,31
    787	02E6  F7 EA			     imul    dx
    788	02E8  05 0244r			     add     ax,offset DGROUP:history
    789	02EB  50			     push    ax
    790	02EC  1E			     push    ds
    791	02ED  B8 0638r			     mov     ax,offset DGROUP:cmdline
    792	02F0  50			     push    ax
    793	02F1  E8 0000e			     call    near ptr _strcpy
    794	02F4  83 C4 08			     add     sp,8
    795					;
    796					;					   putstr(cmdline);
    797					;
    798	02F7  1E			     push    ds
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 15
command.ASM



    799	02F8  B8 0638r			     mov     ax,offset DGROUP:cmdline
    800	02FB  50			     push    ax
    801	02FC  E8 0000e			     call    near ptr _putstr
    802	02FF  59			     pop     cx
    803	0300  59			     pop     cx
    804					;
    805					;					   numcar=strlen(cmdline);
    806					;
    807	0301  1E			     push    ds
    808	0302  B8 0638r			     mov     ax,offset DGROUP:cmdline
    809	0305  50			     push    ax
    810	0306  E8 0000e			     call    near ptr _strlen
    811	0309  59			     pop     cx
    812	030A  59			     pop     cx
    813	030B  8B F0			     mov     si,ax
    814	030D			     @1@2074:
    815					;
    816					;					}
    817					;				     }
    818					;				     break;
    819					;
    820	030D  EB 00			     jmp     short @1@2102
    821	030F			     @1@2102:
    822					;
    823					;			 }
    824					;			 break;
    825					;
    826	030F  E9 01FF			     jmp     @1@3362
    827	0312			     @1@2130:
    828					;
    829					;		    case 13:
    830					;			 history_pos = -1;
    831					;
    832	0312  C7 06 023Cr FFFF		     mov     word ptr DGROUP:history_pos,-1
    833					;
    834					;			 putch('\n');
    835					;
    836	0318  B8 000A			     mov     ax,10
    837	031B  50			     push    ax
    838	031C  E8 0000e			     call    near ptr _putch
    839	031F  59			     pop     cx
    840					;
    841					;			 cmdline[numcar]='\0';
    842					;
    843	0320  C6 84 0638r 00		     mov     byte ptr DGROUP:cmdline[si],0
    844					;
    845					;			 /* Divide a linha de comandos em comando e opÁıes */
    846					;			 ptrline = cmdline;
    847					;
    848	0325  8C 5E E8			     mov     word ptr [bp-24],ds
    849	0328  C7 46 E6 0638r		     mov     word ptr [bp-26],offset DGROUP:cmdline
    850					;
    851					;			 argc =	0;
    852					;
    853	032D  C7 46 EA 0000		     mov     word ptr [bp-22],0
    854					;
    855					;			 pos = 0;
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 16
command.ASM



    856					;
    857	0332  C7 46 F0 0000		     mov     word ptr [bp-16],0
    858	0337			     @1@2158:
    859	0337  EB 03			     jmp     short @1@2214
    860	0339			     @1@2186:
    861					;
    862					;			 while (1) {
    863					;			       while (*ptrline!='\0' &&	(*ptrline==' ' || *ptrline=='\t'))
    864					;				     ++ptrline;
    865					;
    866	0339  FF 46 E6			     inc     word ptr [bp-26]
    867	033C			     @1@2214:
    868	033C  C4 5E E6			     les     bx,dword ptr [bp-26]
    869	033F  26: 80 3F	00		     cmp     byte ptr es:[bx],0
    870	0343  74 12			     je	     short @1@2298
    871	0345  C4 5E E6			     les     bx,dword ptr [bp-26]
    872	0348  26: 80 3F	20		     cmp     byte ptr es:[bx],32
    873	034C  74 EB			     je	     short @1@2186
    874	034E  C4 5E E6			     les     bx,dword ptr [bp-26]
    875	0351  26: 80 3F	09		     cmp     byte ptr es:[bx],9
    876	0355  74 E2			     je	     short @1@2186
    877	0357			     @1@2298:
    878					;
    879					;			       if (*ptrline=='\0')
    880					;
    881	0357  C4 5E E6			     les     bx,dword ptr [bp-26]
    882	035A  26: 80 3F	00		     cmp     byte ptr es:[bx],0
    883	035E  75 03			     jne     short @1@2354
    884					;
    885					;				  break;
    886					;
    887	0360  E9 00B4			     jmp     @1@2718
    888	0363			     @1@2354:
    889					;
    890					;			       i = 0;
    891					;
    892	0363  33 FF			     xor     di,di
    893	0365  EB 0E			     jmp     short @1@2410
    894	0367			     @1@2382:
    895					;
    896					;			       while (*ptrline!='\0' &&	*ptrline!=' ' && *ptrline!='\t')  {
    897					;				     palavra[i++] = *ptrline;
    898					;
    899	0367  C4 5E E6			     les     bx,dword ptr [bp-26]
    900	036A  26: 8A 07			     mov     al,byte ptr es:[bx]
    901	036D  88 85 0619r		     mov     byte ptr DGROUP:palavra[di],al
    902	0371  47			     inc     di
    903					;
    904					;				     ++ptrline;
    905					;
    906	0372  FF 46 E6			     inc     word ptr [bp-26]
    907	0375			     @1@2410:
    908	0375  C4 5E E6			     les     bx,dword ptr [bp-26]
    909	0378  26: 80 3F	00		     cmp     byte ptr es:[bx],0
    910	037C  74 12			     je	     short @1@2494
    911	037E  C4 5E E6			     les     bx,dword ptr [bp-26]
    912	0381  26: 80 3F	20		     cmp     byte ptr es:[bx],32
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 17
command.ASM



    913	0385  74 09			     je	     short @1@2494
    914	0387  C4 5E E6			     les     bx,dword ptr [bp-26]
    915	038A  26: 80 3F	09		     cmp     byte ptr es:[bx],9
    916	038E  75 D7			     jne     short @1@2382
    917	0390			     @1@2494:
    918					;
    919					;			       }
    920					;			       palavra[i] = '\0';
    921					;
    922	0390  C6 85 0619r 00		     mov     byte ptr DGROUP:palavra[di],0
    923					;
    924					;			       if (palavra[0]=='$')  {
    925					;
    926	0395  80 3E 0619r 24		     cmp     byte ptr DGROUP:palavra,36
    927	039A  75 39			     jne     short @1@2606
    928					;
    929					;				  var =	command_var_value(&palavra[1]);
    930					;
    931	039C  1E			     push    ds
    932	039D  B8 061Ar			     mov     ax,offset DGROUP:palavra+1
    933	03A0  50			     push    ax
    934	03A1  E8 036B			     call    near ptr command_var_value
    935	03A4  59			     pop     cx
    936	03A5  59			     pop     cx
    937	03A6  89 56 E4			     mov     word ptr [bp-28],dx
    938	03A9  89 46 E2			     mov     word ptr [bp-30],ax
    939					;
    940					;				  if (var!=NULL)  {
    941					;
    942	03AC  8B 46 E2			     mov     ax,word ptr [bp-30]
    943	03AF  0B 46 E4			     or	     ax,word ptr [bp-28]
    944	03B2  74 1F			     je	     short @1@2578
    945					;
    946					;				     strcpy(palavra,var);
    947					;
    948	03B4  FF 76 E4			     push    word ptr [bp-28]
    949	03B7  FF 76 E2			     push    word ptr [bp-30]
    950	03BA  1E			     push    ds
    951	03BB  B8 0619r			     mov     ax,offset DGROUP:palavra
    952	03BE  50			     push    ax
    953	03BF  E8 0000e			     call    near ptr _strcpy
    954	03C2  83 C4 08			     add     sp,8
    955					;
    956					;				     i = strlen(palavra);
    957					;
    958	03C5  1E			     push    ds
    959	03C6  B8 0619r			     mov     ax,offset DGROUP:palavra
    960	03C9  50			     push    ax
    961	03CA  E8 0000e			     call    near ptr _strlen
    962	03CD  59			     pop     cx
    963	03CE  59			     pop     cx
    964	03CF  8B F8			     mov     di,ax
    965					;
    966					;				  }
    967					;
    968	03D1  EB 02			     jmp     short @1@2606
    969	03D3			     @1@2578:
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 18
command.ASM



    970					;
    971					;				  else
    972					;				     continue;
    973					;
    974	03D3  EB 3F			     jmp     short @1@2690
    975	03D5			     @1@2606:
    976					;
    977					;
    978					;			       }
    979					;			       strcpy(&argline[pos],palavra);
    980					;
    981	03D5  1E			     push    ds
    982	03D6  B8 0619r			     mov     ax,offset DGROUP:palavra
    983	03D9  50			     push    ax
    984	03DA  1E			     push    ds
    985	03DB  8B 46 F0			     mov     ax,word ptr [bp-16]
    986	03DE  05 03BAr			     add     ax,offset DGROUP:argline
    987	03E1  50			     push    ax
    988	03E2  E8 0000e			     call    near ptr _strcpy
    989	03E5  83 C4 08			     add     sp,8
    990					;
    991					;			       argv[argc++] = &argline[pos];
    992					;
    993	03E8  8B 46 F0			     mov     ax,word ptr [bp-16]
    994	03EB  05 03BAr			     add     ax,offset DGROUP:argline
    995	03EE  8B 5E EA			     mov     bx,word ptr [bp-22]
    996	03F1  B1 02			     mov     cl,2
    997	03F3  D3 E3			     shl     bx,cl
    998	03F5  8C 9F 037Cr		     mov     word ptr DGROUP:argv[bx+2],ds
    999	03F9  89 87 037Ar		     mov     word ptr DGROUP:argv[bx],ax
   1000	03FD  FF 46 EA			     inc     word ptr [bp-22]
   1001					;
   1002					;			       pos+= (i+1);
   1003					;
   1004	0400  8B C7			     mov     ax,di
   1005	0402  40			     inc     ax
   1006	0403  01 46 F0			     add     word ptr [bp-16],ax
   1007					;
   1008					;			       if (*ptrline=='\0')
   1009					;
   1010	0406  C4 5E E6			     les     bx,dword ptr [bp-26]
   1011	0409  26: 80 3F	00		     cmp     byte ptr es:[bx],0
   1012	040D  75 02			     jne     short @1@2662
   1013					;
   1014					;				  break;
   1015					;
   1016	040F  EB 06			     jmp     short @1@2718
   1017	0411			     @1@2662:
   1018					;
   1019					;			       ++ptrline;
   1020					;
   1021	0411  FF 46 E6			     inc     word ptr [bp-26]
   1022	0414			     @1@2690:
   1023	0414  E9 FF20			     jmp     @1@2158
   1024	0417			     @1@2718:
   1025					;
   1026					;			 }
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 19
command.ASM



   1027					;			 /* Se È comando vazio n„o faz nada */
   1028					;			 if (argc==0)  {
   1029					;
   1030	0417  83 7E EA 00		     cmp     word ptr [bp-22],0
   1031	041B  75 06			     jne     short @1@2774
   1032					;
   1033					;			    command_showprompt();
   1034					;
   1035	041D  E8 014F			     call    near ptr command_showprompt
   1036					;
   1037					;			    break;
   1038					;
   1039	0420  E9 00EE			     jmp     @1@3362
   1040	0423			     @1@2774:
   1041					;
   1042					;			 }
   1043					;			 /* Salva linha	de comando no histÛrico	*/
   1044					;			 strcpy	(history[history_nxt],cmdline);
   1045					;
   1046	0423  1E			     push    ds
   1047	0424  B8 0638r			     mov     ax,offset DGROUP:cmdline
   1048	0427  50			     push    ax
   1049	0428  1E			     push    ds
   1050	0429  A1 023Er			     mov     ax,word ptr DGROUP:history_nxt
   1051	042C  BA 001F			     mov     dx,31
   1052	042F  F7 EA			     imul    dx
   1053	0431  05 0244r			     add     ax,offset DGROUP:history
   1054	0434  50			     push    ax
   1055	0435  E8 0000e			     call    near ptr _strcpy
   1056	0438  83 C4 08			     add     sp,8
   1057					;
   1058					;			 if (history_len<MAXHISTORY)
   1059					;
   1060	043B  83 3E 0242r 0A		     cmp     word ptr DGROUP:history_len,10
   1061	0440  7D 06			     jge     short @1@2830
   1062					;
   1063					;			    ++history_len;
   1064					;
   1065	0442  FF 06 0242r		     inc     word ptr DGROUP:history_len
   1066	0446  EB 13			     jmp     short @1@2914
   1067	0448			     @1@2830:
   1068					;
   1069					;			 else  {
   1070					;			    if (history_ini==MAXHISTORY-1)
   1071					;
   1072	0448  83 3E 0240r 09		     cmp     word ptr DGROUP:history_ini,9
   1073	044D  75 08			     jne     short @1@2886
   1074					;
   1075					;			       history_ini = 0;
   1076					;
   1077	044F  C7 06 0240r 0000		     mov     word ptr DGROUP:history_ini,0
   1078	0455  EB 04			     jmp     short @1@2914
   1079	0457			     @1@2886:
   1080					;
   1081					;			    else
   1082					;			       ++history_ini;
   1083					;
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 20
command.ASM



   1084	0457  FF 06 0240r		     inc     word ptr DGROUP:history_ini
   1085	045B			     @1@2914:
   1086					;
   1087					;			 }
   1088					;			 if (history_nxt==MAXHISTORY-1)
   1089					;
   1090	045B  83 3E 023Er 09		     cmp     word ptr DGROUP:history_nxt,9
   1091	0460  75 08			     jne     short @1@2970
   1092					;
   1093					;			    history_nxt	= 0;
   1094					;
   1095	0462  C7 06 023Er 0000		     mov     word ptr DGROUP:history_nxt,0
   1096	0468  EB 04			     jmp     short @1@2998
   1097	046A			     @1@2970:
   1098					;
   1099					;			 else
   1100					;			    ++history_nxt;
   1101					;
   1102	046A  FF 06 023Er		     inc     word ptr DGROUP:history_nxt
   1103	046E			     @1@2998:
   1104					;
   1105					;			 /* Verifica qual È o comando ... */
   1106					;			 achou = 0;
   1107					;
   1108	046E  C7 46 F2 0000		     mov     word ptr [bp-14],0
   1109					;
   1110					;			 for (i=0;i<MAXCOMMANDS;++i)  {
   1111					;
   1112	0473  33 FF			     xor     di,di
   1113	0475  EB 28			     jmp     short @1@3110
   1114	0477			     @1@3026:
   1115					;
   1116					;			     if	(strcmp(argv[0],commands[i].name)==0)  {
   1117					;
   1118	0477  1E			     push    ds
   1119	0478  8B C7			     mov     ax,di
   1120	047A  BA 0006			     mov     dx,6
   1121	047D  F7 EA			     imul    dx
   1122	047F  8B D8			     mov     bx,ax
   1123	0481  FF B7 0002r		     push    word ptr DGROUP:commands[bx]
   1124	0485  FF 36 037Cr		     push    word ptr DGROUP:argv+2
   1125	0489  FF 36 037Ar		     push    word ptr DGROUP:argv
   1126	048D  E8 0000e			     call    near ptr _strcmp
   1127	0490  83 C4 08			     add     sp,8
   1128	0493  0B C0			     or	     ax,ax
   1129	0495  75 07			     jne     short @1@3082
   1130					;
   1131					;				achou=1;
   1132					;
   1133	0497  C7 46 F2 0001		     mov     word ptr [bp-14],1
   1134					;
   1135					;				break;
   1136					;
   1137	049C  EB 06			     jmp     short @1@3138
   1138	049E			     @1@3082:
   1139	049E  47			     inc     di
   1140	049F			     @1@3110:
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 21
command.ASM



   1141	049F  83 FF 1C			     cmp     di,28
   1142	04A2  7C D3			     jl	     short @1@3026
   1143	04A4			     @1@3138:
   1144					;
   1145					;			     }
   1146					;			 }
   1147					;
   1148					;			 /* Executa o comando */
   1149					;			 if (achou)  {
   1150					;
   1151	04A4  83 7E F2 00		     cmp     word ptr [bp-14],0
   1152	04A8  74 39			     je	     short @1@3194
   1153					;
   1154					;			    res	= commands[i].code(argc,argv);
   1155					;
   1156	04AA  B8 037Ar			     mov     ax,offset DGROUP:argv
   1157	04AD  50			     push    ax
   1158	04AE  FF 76 EA			     push    word ptr [bp-22]
   1159	04B1  8B C7			     mov     ax,di
   1160	04B3  BA 0006			     mov     dx,6
   1161	04B6  F7 EA			     imul    dx
   1162	04B8  8B D8			     mov     bx,ax
   1163	04BA  FF 97 0006r		     call    word ptr DGROUP:commands[bx+4]
   1164	04BE  59			     pop     cx
   1165	04BF  59			     pop     cx
   1166	04C0  89 46 EC			     mov     word ptr [bp-20],ax
   1167					;
   1168					;			    inttostr(str,res);
   1169					;
   1170	04C3  FF 76 EC			     push    word ptr [bp-20]
   1171	04C6  16			     push    ss
   1172	04C7  8D 46 F4			     lea     ax,word ptr [bp-12]
   1173	04CA  50			     push    ax
   1174	04CB  E8 0000e			     call    near ptr _inttostr
   1175	04CE  83 C4 06			     add     sp,6
   1176					;
   1177					;			    command_var_set("ERRORLEVEL",str);
   1178					;
   1179	04D1  16			     push    ss
   1180	04D2  8D 46 F4			     lea     ax,word ptr [bp-12]
   1181	04D5  50			     push    ax
   1182	04D6  1E			     push    ds
   1183	04D7  B8 06CAr			     mov     ax,offset DGROUP:s@+1558
   1184	04DA  50			     push    ax
   1185	04DB  E8 025E			     call    near ptr command_var_set
   1186	04DE  83 C4 08			     add     sp,8
   1187					;
   1188					;			 }
   1189					;
   1190	04E1  EB 0A			     jmp     short @1@3222
   1191	04E3			     @1@3194:
   1192					;
   1193					;			 else
   1194					;			    putstr("Erro: comando desconhecido!\n");
   1195					;
   1196	04E3  1E			     push    ds
   1197	04E4  B8 06D5r			     mov     ax,offset DGROUP:s@+1569
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 22
command.ASM



   1198	04E7  50			     push    ax
   1199	04E8  E8 0000e			     call    near ptr _putstr
   1200	04EB  59			     pop     cx
   1201	04EC  59			     pop     cx
   1202	04ED			     @1@3222:
   1203					;
   1204					;
   1205					;			 if (!end_command)
   1206					;
   1207	04ED  83 3E 0657r 00		     cmp     word ptr DGROUP:end_command,0
   1208	04F2  75 03			     jne     short @1@3278
   1209					;
   1210					;			    command_showprompt();
   1211					;
   1212	04F4  E8 0078			     call    near ptr command_showprompt
   1213	04F7			     @1@3278:
   1214					;
   1215					;
   1216					;			 numcar=0;
   1217					;
   1218	04F7  33 F6			     xor     si,si
   1219					;
   1220					;			 break;
   1221					;
   1222	04F9  EB 16			     jmp     short @1@3362
   1223	04FB			     @1@3306:
   1224					;
   1225					;		    default:
   1226					;			 if (numcar<MAXLINE)  {
   1227					;
   1228	04FB  83 FE 1E			     cmp     si,30
   1229	04FE  7D 11			     jge     short @1@3362
   1230					;
   1231					;			    putch(car);
   1232					;
   1233	0500  8A 46 FF			     mov     al,byte ptr [bp-1]
   1234	0503  98			     cbw
   1235	0504  50			     push    ax
   1236	0505  E8 0000e			     call    near ptr _putch
   1237	0508  59			     pop     cx
   1238					;
   1239					;			    cmdline[numcar++]=car;
   1240					;
   1241	0509  8A 46 FF			     mov     al,byte ptr [bp-1]
   1242	050C  88 84 0638r		     mov     byte ptr DGROUP:cmdline[si],al
   1243	0510  46			     inc     si
   1244	0511			     @1@3362:
   1245	0511  83 3E 0657r 00		     cmp     word ptr DGROUP:end_command,0
   1246	0516  75 03			     jne     @@3
   1247	0518  E9 FBCF			     jmp     @1@58
   1248	051B			     @@3:
   1249					;
   1250					;			 }
   1251					;	     }
   1252					;      }
   1253					;
   1254					;    }
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 23
command.ASM



   1255					;
   1256	051B  5F			     pop     di
   1257	051C  5E			     pop     si
   1258	051D  8B E5			     mov     sp,bp
   1259	051F  5D			     pop     bp
   1260	0520  C3			     ret
   1261	0521			     _command	     endp
   1262	0521			     @1@C3330	     label   word
   1263	0521  41			     db	     65
   1264	0522  00			     db	     0
   1265	0523  48			     db	     72
   1266	0524  00			     db	     0
   1267	0525  4B			     db	     75
   1268	0526  00			     db	     0
   1269	0527  50			     db	     80
   1270	0528  00			     db	     0
   1271	0529  0153r			     dw	     @1@674
   1272	052B  01ABr			     dw	     @1@982
   1273	052D  01A0r			     dw	     @1@898
   1274	052F  027Br			     dw	     @1@1626
   1275	0531			     @1@C3234	     label   word
   1276	0531  00			     db	     0
   1277	0532  00			     db	     0
   1278	0533  08			     db	     8
   1279	0534  00			     db	     0
   1280	0535  09			     db	     9
   1281	0536  00			     db	     0
   1282	0537  0D			     db	     13
   1283	0538  00			     db	     0
   1284	0539  1B			     db	     27
   1285	053A  00			     db	     0
   1286	053B  012Cr			     dw	     @1@478
   1287	053D  0114r			     dw	     @1@282
   1288	053F  0111r			     dw	     @1@254
   1289	0541  0312r			     dw	     @1@2130
   1290	0543  011Fr			     dw	     @1@366
   1291					;
   1292					;    static void command_backspace()
   1293					;
   1294					     assume  cs:_TEXT
   1295	0545			     command_backspace	     proc    near
   1296	0545  55			     push    bp
   1297	0546  8B EC			     mov     bp,sp
   1298	0548  56			     push    si
   1299	0549  57			     push    di
   1300					;
   1301					;    {
   1302					;      int x,y;
   1303					;
   1304					;      x = wherex();
   1305					;
   1306	054A  E8 0000e			     call    near ptr _wherex
   1307	054D  8B F0			     mov     si,ax
   1308					;
   1309					;      y = wherey();
   1310					;
   1311	054F  E8 0000e			     call    near ptr _wherey
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 24
command.ASM



   1312	0552  8B F8			     mov     di,ax
   1313					;
   1314					;      --x;
   1315					;
   1316	0554  4E			     dec     si
   1317					;
   1318					;      gotoxy(x,y);
   1319					;
   1320	0555  57			     push    di
   1321	0556  56			     push    si
   1322	0557  E8 0000e			     call    near ptr _gotoxy
   1323	055A  59			     pop     cx
   1324	055B  59			     pop     cx
   1325					;
   1326					;      putch(' ');
   1327					;
   1328	055C  B8 0020			     mov     ax,32
   1329	055F  50			     push    ax
   1330	0560  E8 0000e			     call    near ptr _putch
   1331	0563  59			     pop     cx
   1332					;
   1333					;      gotoxy(x,y);
   1334					;
   1335	0564  57			     push    di
   1336	0565  56			     push    si
   1337	0566  E8 0000e			     call    near ptr _gotoxy
   1338	0569  59			     pop     cx
   1339	056A  59			     pop     cx
   1340					;
   1341					;    }
   1342					;
   1343	056B  5F			     pop     di
   1344	056C  5E			     pop     si
   1345	056D  5D			     pop     bp
   1346	056E  C3			     ret
   1347	056F			     command_backspace	     endp
   1348					;
   1349					;    static void command_showprompt()
   1350					;
   1351					     assume  cs:_TEXT
   1352	056F			     command_showprompt	     proc    near
   1353	056F  55			     push    bp
   1354	0570  8B EC			     mov     bp,sp
   1355	0572  83 EC 06			     sub     sp,6
   1356					;
   1357					;    {
   1358					;      char cor;
   1359					;      char far	*prompt;
   1360					;
   1361					;      prompt =	command_var_value("PROMPT");
   1362					;
   1363	0575  1E			     push    ds
   1364	0576  B8 06F2r			     mov     ax,offset DGROUP:s@+1598
   1365	0579  50			     push    ax
   1366	057A  E8 0192			     call    near ptr command_var_value
   1367	057D  59			     pop     cx
   1368	057E  59			     pop     cx
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 25
command.ASM



   1369	057F  89 56 FC			     mov     word ptr [bp-4],dx
   1370	0582  89 46 FA			     mov     word ptr [bp-6],ax
   1371					;
   1372					;      if (prompt!=NULL)  {
   1373					;
   1374	0585  8B 46 FA			     mov     ax,word ptr [bp-6]
   1375	0588  0B 46 FC			     or	     ax,word ptr [bp-4]
   1376	058B  74 22			     je	     short @3@86
   1377					;
   1378					;	  cor =	getcolor();
   1379					;
   1380	058D  E8 0000e			     call    near ptr _getcolor
   1381	0590  88 46 FF			     mov     byte ptr [bp-1],al
   1382					;
   1383					;	  setcolor(PROMPTCOLOR);
   1384					;
   1385	0593  B8 0009			     mov     ax,9
   1386	0596  50			     push    ax
   1387	0597  E8 0000e			     call    near ptr _setcolor
   1388	059A  59			     pop     cx
   1389					;
   1390					;	  putstr(prompt);
   1391					;
   1392	059B  FF 76 FC			     push    word ptr [bp-4]
   1393	059E  FF 76 FA			     push    word ptr [bp-6]
   1394	05A1  E8 0000e			     call    near ptr _putstr
   1395	05A4  59			     pop     cx
   1396	05A5  59			     pop     cx
   1397					;
   1398					;	  setcolor(cor);
   1399					;
   1400	05A6  8A 46 FF			     mov     al,byte ptr [bp-1]
   1401	05A9  98			     cbw
   1402	05AA  50			     push    ax
   1403	05AB  E8 0000e			     call    near ptr _setcolor
   1404	05AE  59			     pop     cx
   1405	05AF			     @3@86:
   1406					;
   1407					;      }
   1408					;      putch(' ');
   1409					;
   1410	05AF  B8 0020			     mov     ax,32
   1411	05B2  50			     push    ax
   1412	05B3  E8 0000e			     call    near ptr _putch
   1413	05B6  59			     pop     cx
   1414					;
   1415					;    }
   1416					;
   1417	05B7  8B E5			     mov     sp,bp
   1418	05B9  5D			     pop     bp
   1419	05BA  C3			     ret
   1420	05BB			     command_showprompt	     endp
   1421					;
   1422					;    static void command_var_init()
   1423					;
   1424					     assume  cs:_TEXT
   1425	05BB			     command_var_init	     proc    near
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 26
command.ASM



   1426	05BB  55			     push    bp
   1427	05BC  8B EC			     mov     bp,sp
   1428					;
   1429					;    {
   1430					;      int i;
   1431					;
   1432					;      for (i=0;i<VAR_MAX;++i)	{
   1433					;
   1434	05BE  33 C9			     xor     cx,cx
   1435	05C0  EB 1D			     jmp     short @4@114
   1436	05C2			     @4@58:
   1437					;
   1438					;	   var[i].name[0]='\0';
   1439					;
   1440	05C2  8B C1			     mov     ax,cx
   1441	05C4  BA 0032			     mov     dx,50
   1442	05C7  F7 EA			     imul    dx
   1443	05C9  8B D8			     mov     bx,ax
   1444	05CB  C6 87 0048r 00		     mov     byte ptr DGROUP:var[bx],0
   1445					;
   1446					;	   var[i].value[0]='\0';
   1447					;
   1448	05D0  8B C1			     mov     ax,cx
   1449	05D2  BA 0032			     mov     dx,50
   1450	05D5  F7 EA			     imul    dx
   1451	05D7  8B D8			     mov     bx,ax
   1452	05D9  C6 87 0055r 00		     mov     byte ptr DGROUP:var[bx+13],0
   1453	05DE  41			     inc     cx
   1454	05DF			     @4@114:
   1455	05DF  83 F9 0A			     cmp     cx,10
   1456	05E2  7C DE			     jl	     short @4@58
   1457					;
   1458					;      }
   1459					;      num_var = 0;
   1460					;
   1461	05E4  C7 06 0000r 0000		     mov     word ptr DGROUP:num_var,0
   1462					;
   1463					;    }
   1464					;
   1465	05EA  5D			     pop     bp
   1466	05EB  C3			     ret
   1467	05EC			     command_var_init	     endp
   1468					;
   1469					;    static int	command_var_nextfree()
   1470					;
   1471					     assume  cs:_TEXT
   1472	05EC			     command_var_nextfree    proc    near
   1473	05EC  55			     push    bp
   1474	05ED  8B EC			     mov     bp,sp
   1475					;
   1476					;    {
   1477					;      int i;
   1478					;
   1479					;      if (num_var>=VAR_MAX)
   1480					;
   1481	05EF  83 3E 0000r 0A		     cmp     word ptr DGROUP:num_var,10
   1482	05F4  7C 05			     jl	     short @5@114
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 27
command.ASM



   1483	05F6			     @5@58:
   1484					;
   1485					;	  return -1;
   1486					;
   1487	05F6  B8 FFFF			     mov     ax,-1
   1488	05F9			     @5@86:
   1489	05F9  EB 20			     jmp     short @5@282
   1490	05FB			     @5@114:
   1491					;
   1492					;      for (i=0;i<VAR_MAX;++i)
   1493					;
   1494	05FB  33 C9			     xor     cx,cx
   1495	05FD  EB 15			     jmp     short @5@226
   1496	05FF			     @5@142:
   1497					;
   1498					;	   if (var[i].name[0]=='\0')
   1499					;
   1500	05FF  8B C1			     mov     ax,cx
   1501	0601  BA 0032			     mov     dx,50
   1502	0604  F7 EA			     imul    dx
   1503	0606  8B D8			     mov     bx,ax
   1504	0608  80 BF 0048r 00		     cmp     byte ptr DGROUP:var[bx],0
   1505	060D  75 04			     jne     short @5@198
   1506					;
   1507					;	      return i;
   1508					;
   1509	060F  8B C1			     mov     ax,cx
   1510	0611  EB E6			     jmp     short @5@86
   1511	0613			     @5@198:
   1512	0613  41			     inc     cx
   1513	0614			     @5@226:
   1514	0614  83 F9 0A			     cmp     cx,10
   1515	0617  7C E6			     jl	     short @5@142
   1516	0619  EB DB			     jmp     short @5@58
   1517	061B			     @5@282:
   1518					;
   1519					;      return -1;
   1520					;    }
   1521					;
   1522	061B  5D			     pop     bp
   1523	061C  C3			     ret
   1524	061D			     command_var_nextfree    endp
   1525					;
   1526					;    static void command_var_list()
   1527					;
   1528					     assume  cs:_TEXT
   1529	061D			     command_var_list	     proc    near
   1530	061D  55			     push    bp
   1531	061E  8B EC			     mov     bp,sp
   1532	0620  83 EC 02			     sub     sp,2
   1533	0623  56			     push    si
   1534					;
   1535					;    {
   1536					;      int i;
   1537					;      char cor;
   1538					;
   1539					;      cor = getcolor();
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 28
command.ASM



   1540					;
   1541	0624  E8 0000e			     call    near ptr _getcolor
   1542	0627  88 46 FF			     mov     byte ptr [bp-1],al
   1543					;
   1544					;      for (i=0;i<VAR_MAX;++i)	{
   1545					;
   1546	062A  33 F6			     xor     si,si
   1547	062C  EB 54			     jmp     short @6@142
   1548	062E			     @6@58:
   1549					;
   1550					;	   if (var[i].name[0]!='\0')  {
   1551					;
   1552	062E  8B C6			     mov     ax,si
   1553	0630  BA 0032			     mov     dx,50
   1554	0633  F7 EA			     imul    dx
   1555	0635  8B D8			     mov     bx,ax
   1556	0637  80 BF 0048r 00		     cmp     byte ptr DGROUP:var[bx],0
   1557	063C  74 43			     je	     short @6@114
   1558					;
   1559					;	      putstr(var[i].name);
   1560					;
   1561	063E  1E			     push    ds
   1562	063F  8B C6			     mov     ax,si
   1563	0641  BA 0032			     mov     dx,50
   1564	0644  F7 EA			     imul    dx
   1565	0646  05 0048r			     add     ax,offset DGROUP:var
   1566	0649  50			     push    ax
   1567	064A  E8 0000e			     call    near ptr _putstr
   1568	064D  59			     pop     cx
   1569	064E  59			     pop     cx
   1570					;
   1571					;	      putch('=');
   1572					;
   1573	064F  B8 003D			     mov     ax,61
   1574	0652  50			     push    ax
   1575	0653  E8 0000e			     call    near ptr _putch
   1576	0656  59			     pop     cx
   1577					;
   1578					;	      setcolor(VARCOLOR);
   1579					;
   1580	0657  B8 000E			     mov     ax,14
   1581	065A  50			     push    ax
   1582	065B  E8 0000e			     call    near ptr _setcolor
   1583	065E  59			     pop     cx
   1584					;
   1585					;	      putstr(var[i].value);
   1586					;
   1587	065F  1E			     push    ds
   1588	0660  8B C6			     mov     ax,si
   1589	0662  BA 0032			     mov     dx,50
   1590	0665  F7 EA			     imul    dx
   1591	0667  05 0055r			     add     ax,offset DGROUP:var+13
   1592	066A  50			     push    ax
   1593	066B  E8 0000e			     call    near ptr _putstr
   1594	066E  59			     pop     cx
   1595	066F  59			     pop     cx
   1596					;
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 29
command.ASM



   1597					;	      setcolor(cor);
   1598					;
   1599	0670  8A 46 FF			     mov     al,byte ptr [bp-1]
   1600	0673  98			     cbw
   1601	0674  50			     push    ax
   1602	0675  E8 0000e			     call    near ptr _setcolor
   1603	0678  59			     pop     cx
   1604					;
   1605					;	      putch('\n');
   1606					;
   1607	0679  B8 000A			     mov     ax,10
   1608	067C  50			     push    ax
   1609	067D  E8 0000e			     call    near ptr _putch
   1610	0680  59			     pop     cx
   1611	0681			     @6@114:
   1612	0681  46			     inc     si
   1613	0682			     @6@142:
   1614	0682  83 FE 0A			     cmp     si,10
   1615	0685  7C A7			     jl	     short @6@58
   1616					;
   1617					;	   }
   1618					;      }
   1619					;    }
   1620					;
   1621	0687  5E			     pop     si
   1622	0688  8B E5			     mov     sp,bp
   1623	068A  5D			     pop     bp
   1624	068B  C3			     ret
   1625	068C			     command_var_list	     endp
   1626					;
   1627					;    static int	 command_var_search(char far *nome)
   1628					;
   1629					     assume  cs:_TEXT
   1630	068C			     command_var_search	     proc    near
   1631	068C  55			     push    bp
   1632	068D  8B EC			     mov     bp,sp
   1633	068F  56			     push    si
   1634					;
   1635					;    {
   1636					;      int i;
   1637					;
   1638					;      if (nome[0] == '\0')
   1639					;
   1640	0690  C4 5E 04			     les     bx,dword ptr [bp+4]
   1641	0693  26: 80 3F	00		     cmp     byte ptr es:[bx],0
   1642	0697  75 05			     jne     short @7@114
   1643	0699			     @7@58:
   1644					;
   1645					;	  return -1;
   1646					;
   1647	0699  B8 FFFF			     mov     ax,-1
   1648	069C			     @7@86:
   1649	069C  EB 2C			     jmp     short @7@282
   1650	069E			     @7@114:
   1651					;
   1652					;      for (i=0;i<VAR_MAX;++i)	{
   1653					;
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 30
command.ASM



   1654	069E  33 F6			     xor     si,si
   1655	06A0  EB 21			     jmp     short @7@226
   1656	06A2			     @7@142:
   1657					;
   1658					;	   if (strcmp(nome,var[i].name)==0)
   1659					;
   1660	06A2  1E			     push    ds
   1661	06A3  8B C6			     mov     ax,si
   1662	06A5  BA 0032			     mov     dx,50
   1663	06A8  F7 EA			     imul    dx
   1664	06AA  05 0048r			     add     ax,offset DGROUP:var
   1665	06AD  50			     push    ax
   1666	06AE  FF 76 06			     push    word ptr [bp+6]
   1667	06B1  FF 76 04			     push    word ptr [bp+4]
   1668	06B4  E8 0000e			     call    near ptr _strcmp
   1669	06B7  83 C4 08			     add     sp,8
   1670	06BA  0B C0			     or	     ax,ax
   1671	06BC  75 04			     jne     short @7@198
   1672					;
   1673					;	      return i;
   1674					;
   1675	06BE  8B C6			     mov     ax,si
   1676	06C0  EB DA			     jmp     short @7@86
   1677	06C2			     @7@198:
   1678	06C2  46			     inc     si
   1679	06C3			     @7@226:
   1680	06C3  83 FE 0A			     cmp     si,10
   1681	06C6  7C DA			     jl	     short @7@142
   1682	06C8  EB CF			     jmp     short @7@58
   1683	06CA			     @7@282:
   1684					;
   1685					;      }
   1686					;      return -1;
   1687					;    }
   1688					;
   1689	06CA  5E			     pop     si
   1690	06CB  5D			     pop     bp
   1691	06CC  C3			     ret
   1692	06CD			     command_var_search	     endp
   1693					;
   1694					;    static int	 command_var_unset(char	far *nome)
   1695					;
   1696					     assume  cs:_TEXT
   1697	06CD			     command_var_unset	     proc    near
   1698	06CD  55			     push    bp
   1699	06CE  8B EC			     mov     bp,sp
   1700	06D0  56			     push    si
   1701					;
   1702					;    {
   1703					;      int i;
   1704					;
   1705					;      i = command_var_search(nome);
   1706					;
   1707	06D1  FF 76 06			     push    word ptr [bp+6]
   1708	06D4  FF 76 04			     push    word ptr [bp+4]
   1709	06D7  E8 FFB2			     call    near ptr command_var_search
   1710	06DA  59			     pop     cx
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 31
command.ASM



   1711	06DB  59			     pop     cx
   1712	06DC  8B F0			     mov     si,ax
   1713					;
   1714					;      if (i==-1)
   1715					;
   1716	06DE  83 FE FF			     cmp     si,-1
   1717	06E1  75 05			     jne     short @8@114
   1718					;
   1719					;	  return -1;
   1720					;
   1721	06E3  B8 FFFF			     mov     ax,-1
   1722	06E6			     @8@86:
   1723	06E6  EB 24			     jmp     short @8@142
   1724	06E8			     @8@114:
   1725					;
   1726					;      var[i].name[0]='\0';
   1727					;
   1728	06E8  8B C6			     mov     ax,si
   1729	06EA  BA 0032			     mov     dx,50
   1730	06ED  F7 EA			     imul    dx
   1731	06EF  8B D8			     mov     bx,ax
   1732	06F1  C6 87 0048r 00		     mov     byte ptr DGROUP:var[bx],0
   1733					;
   1734					;      var[i].value[0]='\0';
   1735					;
   1736	06F6  8B C6			     mov     ax,si
   1737	06F8  BA 0032			     mov     dx,50
   1738	06FB  F7 EA			     imul    dx
   1739	06FD  8B D8			     mov     bx,ax
   1740	06FF  C6 87 0055r 00		     mov     byte ptr DGROUP:var[bx+13],0
   1741					;
   1742					;      --num_var;
   1743					;
   1744	0704  FF 0E 0000r		     dec     word ptr DGROUP:num_var
   1745					;
   1746					;      return 0;
   1747					;
   1748	0708  33 C0			     xor     ax,ax
   1749	070A  EB DA			     jmp     short @8@86
   1750	070C			     @8@142:
   1751					;
   1752					;    }
   1753					;
   1754	070C  5E			     pop     si
   1755	070D  5D			     pop     bp
   1756	070E  C3			     ret
   1757	070F			     command_var_unset	     endp
   1758					;
   1759					;    static char far *command_var_value(char far *nome)
   1760					;
   1761					     assume  cs:_TEXT
   1762	070F			     command_var_value	     proc    near
   1763	070F  55			     push    bp
   1764	0710  8B EC			     mov     bp,sp
   1765	0712  56			     push    si
   1766					;
   1767					;    {
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 32
command.ASM



   1768					;      int i;
   1769					;
   1770					;      i = command_var_search(nome);
   1771					;
   1772	0713  FF 76 06			     push    word ptr [bp+6]
   1773	0716  FF 76 04			     push    word ptr [bp+4]
   1774	0719  E8 FF70			     call    near ptr command_var_search
   1775	071C  59			     pop     cx
   1776	071D  59			     pop     cx
   1777	071E  8B F0			     mov     si,ax
   1778					;
   1779					;      if (i==-1)
   1780					;
   1781	0720  83 FE FF			     cmp     si,-1
   1782	0723  75 06			     jne     short @9@114
   1783					;
   1784					;	  return NULL;
   1785					;
   1786	0725  33 D2			     xor     dx,dx
   1787	0727  33 C0			     xor     ax,ax
   1788	0729			     @9@86:
   1789	0729  EB 0E			     jmp     short @9@142
   1790	072B			     @9@114:
   1791					;
   1792					;      return var[i].value;
   1793					;
   1794	072B  8B C6			     mov     ax,si
   1795	072D  BA 0032			     mov     dx,50
   1796	0730  F7 EA			     imul    dx
   1797	0732  05 0055r			     add     ax,offset DGROUP:var+13
   1798	0735  8C DA			     mov     dx,ds
   1799	0737  EB F0			     jmp     short @9@86
   1800	0739			     @9@142:
   1801					;
   1802					;    }
   1803					;
   1804	0739  5E			     pop     si
   1805	073A  5D			     pop     bp
   1806	073B  C3			     ret
   1807	073C			     command_var_value	     endp
   1808					;
   1809					;    static int	command_var_set(char far *nome,char far	*valor)
   1810					;
   1811					     assume  cs:_TEXT
   1812	073C			     command_var_set proc    near
   1813	073C  55			     push    bp
   1814	073D  8B EC			     mov     bp,sp
   1815	073F  56			     push    si
   1816					;
   1817					;    {
   1818					;      int i;
   1819					;
   1820					;      if (strlen(nome)>VAR_NOME_TAM)
   1821					;
   1822	0740  FF 76 06			     push    word ptr [bp+6]
   1823	0743  FF 76 04			     push    word ptr [bp+4]
   1824	0746  E8 0000e			     call    near ptr _strlen
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 33
command.ASM



   1825	0749  59			     pop     cx
   1826	074A  59			     pop     cx
   1827	074B  3D 000C			     cmp     ax,12
   1828	074E  76 05			     jbe     short @10@114
   1829					;
   1830					;	  return -3;
   1831					;
   1832	0750  B8 FFFD			     mov     ax,-3
   1833	0753			     @10@86:
   1834	0753  EB 6A			     jmp     short @10@310
   1835	0755			     @10@114:
   1836					;
   1837					;      if (strlen(valor)>VAR_VALOR_TAM)
   1838					;
   1839	0755  FF 76 0A			     push    word ptr [bp+10]
   1840	0758  FF 76 08			     push    word ptr [bp+8]
   1841	075B  E8 0000e			     call    near ptr _strlen
   1842	075E  59			     pop     cx
   1843	075F  59			     pop     cx
   1844	0760  3D 0024			     cmp     ax,36
   1845	0763  76 05			     jbe     short @10@170
   1846					;
   1847					;	  return -4;
   1848					;
   1849	0765  B8 FFFC			     mov     ax,-4
   1850	0768  EB E9			     jmp     short @10@86
   1851	076A			     @10@170:
   1852					;
   1853					;      i = command_var_search(nome);
   1854					;
   1855	076A  FF 76 06			     push    word ptr [bp+6]
   1856	076D  FF 76 04			     push    word ptr [bp+4]
   1857	0770  E8 FF19			     call    near ptr command_var_search
   1858	0773  59			     pop     cx
   1859	0774  59			     pop     cx
   1860	0775  8B F0			     mov     si,ax
   1861					;
   1862					;      if (i==-1)  {
   1863					;
   1864	0777  83 FE FF			     cmp     si,-1
   1865	077A  75 27			     jne     short @10@282
   1866					;
   1867					;	  i = command_var_nextfree();
   1868					;
   1869	077C  E8 FE6D			     call    near ptr command_var_nextfree
   1870	077F  8B F0			     mov     si,ax
   1871					;
   1872					;	  if (i==-1)
   1873					;
   1874	0781  83 FE FF			     cmp     si,-1
   1875	0784  75 05			     jne     short @10@254
   1876					;
   1877					;	     return -2;
   1878					;
   1879	0786  B8 FFFE			     mov     ax,-2
   1880	0789  EB C8			     jmp     short @10@86
   1881	078B			     @10@254:
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 34
command.ASM



   1882					;
   1883					;	  strcpy(var[i].name,nome);
   1884					;
   1885	078B  FF 76 06			     push    word ptr [bp+6]
   1886	078E  FF 76 04			     push    word ptr [bp+4]
   1887	0791  1E			     push    ds
   1888	0792  8B C6			     mov     ax,si
   1889	0794  BA 0032			     mov     dx,50
   1890	0797  F7 EA			     imul    dx
   1891	0799  05 0048r			     add     ax,offset DGROUP:var
   1892	079C  50			     push    ax
   1893	079D  E8 0000e			     call    near ptr _strcpy
   1894	07A0  83 C4 08			     add     sp,8
   1895	07A3			     @10@282:
   1896					;
   1897					;      }
   1898					;      strcpy(var[i].value,valor);
   1899					;
   1900	07A3  FF 76 0A			     push    word ptr [bp+10]
   1901	07A6  FF 76 08			     push    word ptr [bp+8]
   1902	07A9  1E			     push    ds
   1903	07AA  8B C6			     mov     ax,si
   1904	07AC  BA 0032			     mov     dx,50
   1905	07AF  F7 EA			     imul    dx
   1906	07B1  05 0055r			     add     ax,offset DGROUP:var+13
   1907	07B4  50			     push    ax
   1908	07B5  E8 0000e			     call    near ptr _strcpy
   1909	07B8  83 C4 08			     add     sp,8
   1910					;
   1911					;      return 0;
   1912					;
   1913	07BB  33 C0			     xor     ax,ax
   1914	07BD  EB 94			     jmp     short @10@86
   1915	07BF			     @10@310:
   1916					;
   1917					;    }
   1918					;
   1919	07BF  5E			     pop     si
   1920	07C0  5D			     pop     bp
   1921	07C1  C3			     ret
   1922	07C2			     command_var_set endp
   1923					;
   1924					;    int cmd_reboot(int	argc, char far *argv[])
   1925					;
   1926					     assume  cs:_TEXT
   1927	07C2			     _cmd_reboot     proc    near
   1928	07C2  55			     push    bp
   1929	07C3  8B EC			     mov     bp,sp
   1930	07C5  56			     push    si
   1931	07C6  57			     push    di
   1932	07C7  8B 76 04			     mov     si,word ptr [bp+4]
   1933	07CA  8B 7E 06			     mov     di,word ptr [bp+6]
   1934					;
   1935					;    {
   1936					;      argc=argc;
   1937					;
   1938					;
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 35
command.ASM



   1939					;      argv=argv;
   1940					;
   1941					;
   1942					;      reboot();
   1943					;
   1944	07CD  E8 0000e			     call    near ptr _reboot
   1945					;
   1946					;      return 0;
   1947					;
   1948	07D0  33 C0			     xor     ax,ax
   1949	07D2  EB 00			     jmp     short @11@58
   1950	07D4			     @11@58:
   1951					;
   1952					;    }
   1953					;
   1954	07D4  5F			     pop     di
   1955	07D5  5E			     pop     si
   1956	07D6  5D			     pop     bp
   1957	07D7  C3			     ret
   1958	07D8			     _cmd_reboot     endp
   1959					;
   1960					;    int cmd_exit(int argc, char far *argv[])
   1961					;
   1962					     assume  cs:_TEXT
   1963	07D8			     _cmd_exit	     proc    near
   1964	07D8  55			     push    bp
   1965	07D9  8B EC			     mov     bp,sp
   1966	07DB  8B 56 04			     mov     dx,word ptr [bp+4]
   1967	07DE  8B 5E 06			     mov     bx,word ptr [bp+6]
   1968					;
   1969					;    {
   1970					;      argc=argc;
   1971					;
   1972					;
   1973					;      argv=argv;
   1974					;
   1975					;
   1976					;      end_command = 1;
   1977					;
   1978	07E1  C7 06 0657r 0001		     mov     word ptr DGROUP:end_command,1
   1979					;
   1980					;      return 0;
   1981					;
   1982	07E7  33 C0			     xor     ax,ax
   1983	07E9  EB 00			     jmp     short @12@58
   1984	07EB			     @12@58:
   1985					;
   1986					;    }
   1987					;
   1988	07EB  5D			     pop     bp
   1989	07EC  C3			     ret
   1990	07ED			     _cmd_exit	     endp
   1991					;
   1992					;    int cmd_help(int argc, char far *argv[])
   1993					;
   1994					     assume  cs:_TEXT
   1995	07ED			     _cmd_help	     proc    near
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 36
command.ASM



   1996	07ED  55			     push    bp
   1997	07EE  8B EC			     mov     bp,sp
   1998	07F0  56			     push    si
   1999	07F1  57			     push    di
   2000	07F2  8B 7E 04			     mov     di,word ptr [bp+4]
   2001					;
   2002					;    {
   2003					;      int i;
   2004					;
   2005					;      argc=argc;
   2006					;
   2007					;
   2008					;      argv=argv;
   2009					;
   2010	07F5  8B 46 06			     mov     ax,word ptr [bp+6]
   2011	07F8  89 46 06			     mov     word ptr [bp+6],ax
   2012					;
   2013					;      putstr("Comandos	do minisSistema	Operacional:\n");
   2014					;
   2015	07FB  1E			     push    ds
   2016	07FC  B8 06F9r			     mov     ax,offset DGROUP:s@+1605
   2017	07FF  50			     push    ax
   2018	0800  E8 0000e			     call    near ptr _putstr
   2019	0803  59			     pop     cx
   2020	0804  59			     pop     cx
   2021					;
   2022					;      for (i=0;i<MAXCOMMANDS;++i)  {
   2023					;
   2024	0805  33 F6			     xor     si,si
   2025	0807  EB 2F			     jmp     short @13@114
   2026	0809			     @13@58:
   2027					;
   2028					;	   putstr(commands[i].name);
   2029					;
   2030	0809  1E			     push    ds
   2031	080A  8B C6			     mov     ax,si
   2032	080C  BA 0006			     mov     dx,6
   2033	080F  F7 EA			     imul    dx
   2034	0811  8B D8			     mov     bx,ax
   2035	0813  FF B7 0002r		     push    word ptr DGROUP:commands[bx]
   2036	0817  E8 0000e			     call    near ptr _putstr
   2037	081A  59			     pop     cx
   2038	081B  59			     pop     cx
   2039					;
   2040					;	   putstr(commands[i].help);
   2041					;
   2042	081C  1E			     push    ds
   2043	081D  8B C6			     mov     ax,si
   2044	081F  BA 0006			     mov     dx,6
   2045	0822  F7 EA			     imul    dx
   2046	0824  8B D8			     mov     bx,ax
   2047	0826  FF B7 0004r		     push    word ptr DGROUP:commands[bx+2]
   2048	082A  E8 0000e			     call    near ptr _putstr
   2049	082D  59			     pop     cx
   2050	082E  59			     pop     cx
   2051					;
   2052					;	   putch('\n');
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 37
command.ASM



   2053					;
   2054	082F  B8 000A			     mov     ax,10
   2055	0832  50			     push    ax
   2056	0833  E8 0000e			     call    near ptr _putch
   2057	0836  59			     pop     cx
   2058	0837  46			     inc     si
   2059	0838			     @13@114:
   2060	0838  83 FE 1C			     cmp     si,28
   2061	083B  7C CC			     jl	     short @13@58
   2062					;
   2063					;      }
   2064					;      return 0;
   2065					;
   2066	083D  33 C0			     xor     ax,ax
   2067	083F  EB 00			     jmp     short @13@170
   2068	0841			     @13@170:
   2069					;
   2070					;    }
   2071					;
   2072	0841  5F			     pop     di
   2073	0842  5E			     pop     si
   2074	0843  5D			     pop     bp
   2075	0844  C3			     ret
   2076	0845			     _cmd_help	     endp
   2077					;
   2078					;    int cmd_date(int argc, char far *argv[])
   2079					;
   2080					     assume  cs:_TEXT
   2081	0845			     _cmd_date	     proc    near
   2082	0845  55			     push    bp
   2083	0846  8B EC			     mov     bp,sp
   2084	0848  83 EC 18			     sub     sp,24
   2085	084B  56			     push    si
   2086	084C  57			     push    di
   2087	084D  8B 76 04			     mov     si,word ptr [bp+4]
   2088	0850  8B 7E 06			     mov     di,word ptr [bp+6]
   2089					;
   2090					;    {
   2091					;      struct date d;
   2092					;      char str[20];
   2093					;
   2094					;      argc=argc;
   2095					;
   2096					;
   2097					;      argv=argv;
   2098					;
   2099					;
   2100					;
   2101					;
   2102					;
   2103					;      getdate(&d);
   2104					;
   2105	0853  16			     push    ss
   2106	0854  8D 46 FC			     lea     ax,word ptr [bp-4]
   2107	0857  50			     push    ax
   2108	0858  E8 0000e			     call    near ptr _getdate
   2109	085B  59			     pop     cx
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 38
command.ASM



   2110	085C  59			     pop     cx
   2111					;
   2112					;      unsignedtostr(str,d.da_day,2,'0');
   2113					;
   2114	085D  B0 30			     mov     al,48
   2115	085F  50			     push    ax
   2116	0860  B8 0002			     mov     ax,2
   2117	0863  50			     push    ax
   2118	0864  8A 46 FE			     mov     al,byte ptr [bp-2]
   2119	0867  98			     cbw
   2120	0868  50			     push    ax
   2121	0869  16			     push    ss
   2122	086A  8D 46 E8			     lea     ax,word ptr [bp-24]
   2123	086D  50			     push    ax
   2124	086E  E8 0000e			     call    near ptr _unsignedtostr
   2125	0871  83 C4 0A			     add     sp,10
   2126					;
   2127					;      putstr(str);
   2128					;
   2129	0874  16			     push    ss
   2130	0875  8D 46 E8			     lea     ax,word ptr [bp-24]
   2131	0878  50			     push    ax
   2132	0879  E8 0000e			     call    near ptr _putstr
   2133	087C  59			     pop     cx
   2134	087D  59			     pop     cx
   2135					;
   2136					;      putch('/');
   2137					;
   2138	087E  B8 002F			     mov     ax,47
   2139	0881  50			     push    ax
   2140	0882  E8 0000e			     call    near ptr _putch
   2141	0885  59			     pop     cx
   2142					;
   2143					;      unsignedtostr(str,d.da_mon,2,'0');
   2144					;
   2145	0886  B0 30			     mov     al,48
   2146	0888  50			     push    ax
   2147	0889  B8 0002			     mov     ax,2
   2148	088C  50			     push    ax
   2149	088D  8A 46 FF			     mov     al,byte ptr [bp-1]
   2150	0890  98			     cbw
   2151	0891  50			     push    ax
   2152	0892  16			     push    ss
   2153	0893  8D 46 E8			     lea     ax,word ptr [bp-24]
   2154	0896  50			     push    ax
   2155	0897  E8 0000e			     call    near ptr _unsignedtostr
   2156	089A  83 C4 0A			     add     sp,10
   2157					;
   2158					;      putstr(str);
   2159					;
   2160	089D  16			     push    ss
   2161	089E  8D 46 E8			     lea     ax,word ptr [bp-24]
   2162	08A1  50			     push    ax
   2163	08A2  E8 0000e			     call    near ptr _putstr
   2164	08A5  59			     pop     cx
   2165	08A6  59			     pop     cx
   2166					;
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 39
command.ASM



   2167					;      putch('/');
   2168					;
   2169	08A7  B8 002F			     mov     ax,47
   2170	08AA  50			     push    ax
   2171	08AB  E8 0000e			     call    near ptr _putch
   2172	08AE  59			     pop     cx
   2173					;
   2174					;      unsignedtostr(str,d.da_year,4,'0');
   2175					;
   2176	08AF  B0 30			     mov     al,48
   2177	08B1  50			     push    ax
   2178	08B2  B8 0004			     mov     ax,4
   2179	08B5  50			     push    ax
   2180	08B6  FF 76 FC			     push    word ptr [bp-4]
   2181	08B9  16			     push    ss
   2182	08BA  8D 46 E8			     lea     ax,word ptr [bp-24]
   2183	08BD  50			     push    ax
   2184	08BE  E8 0000e			     call    near ptr _unsignedtostr
   2185	08C1  83 C4 0A			     add     sp,10
   2186					;
   2187					;      putstr(str);
   2188					;
   2189	08C4  16			     push    ss
   2190	08C5  8D 46 E8			     lea     ax,word ptr [bp-24]
   2191	08C8  50			     push    ax
   2192	08C9  E8 0000e			     call    near ptr _putstr
   2193	08CC  59			     pop     cx
   2194	08CD  59			     pop     cx
   2195					;
   2196					;      putch('\n');
   2197					;
   2198	08CE  B8 000A			     mov     ax,10
   2199	08D1  50			     push    ax
   2200	08D2  E8 0000e			     call    near ptr _putch
   2201	08D5  59			     pop     cx
   2202					;
   2203					;      return 0;
   2204					;
   2205	08D6  33 C0			     xor     ax,ax
   2206	08D8  EB 00			     jmp     short @14@58
   2207	08DA			     @14@58:
   2208					;
   2209					;    }
   2210					;
   2211	08DA  5F			     pop     di
   2212	08DB  5E			     pop     si
   2213	08DC  8B E5			     mov     sp,bp
   2214	08DE  5D			     pop     bp
   2215	08DF  C3			     ret
   2216	08E0			     _cmd_date	     endp
   2217					;
   2218					;    int cmd_time(int argc, char far *argv[])
   2219					;
   2220					     assume  cs:_TEXT
   2221	08E0			     _cmd_time	     proc    near
   2222	08E0  55			     push    bp
   2223	08E1  8B EC			     mov     bp,sp
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 40
command.ASM



   2224	08E3  83 EC 18			     sub     sp,24
   2225	08E6  56			     push    si
   2226	08E7  57			     push    di
   2227	08E8  8B 76 04			     mov     si,word ptr [bp+4]
   2228	08EB  8B 7E 06			     mov     di,word ptr [bp+6]
   2229					;
   2230					;    {
   2231					;      struct time t;
   2232					;      char str[20];
   2233					;
   2234					;      argc=argc;
   2235					;
   2236					;
   2237					;      argv=argv;
   2238					;
   2239					;
   2240					;      gettime(&t);
   2241					;
   2242	08EE  16			     push    ss
   2243	08EF  8D 46 FC			     lea     ax,word ptr [bp-4]
   2244	08F2  50			     push    ax
   2245	08F3  E8 0000e			     call    near ptr _gettime
   2246	08F6  59			     pop     cx
   2247	08F7  59			     pop     cx
   2248					;
   2249					;      unsignedtostr(str,t.ti_hour,2,'0');
   2250					;
   2251	08F8  B0 30			     mov     al,48
   2252	08FA  50			     push    ax
   2253	08FB  B8 0002			     mov     ax,2
   2254	08FE  50			     push    ax
   2255	08FF  8A 46 FD			     mov     al,byte ptr [bp-3]
   2256	0902  B4 00			     mov     ah,0
   2257	0904  50			     push    ax
   2258	0905  16			     push    ss
   2259	0906  8D 46 E8			     lea     ax,word ptr [bp-24]
   2260	0909  50			     push    ax
   2261	090A  E8 0000e			     call    near ptr _unsignedtostr
   2262	090D  83 C4 0A			     add     sp,10
   2263					;
   2264					;      putstr(str);
   2265					;
   2266	0910  16			     push    ss
   2267	0911  8D 46 E8			     lea     ax,word ptr [bp-24]
   2268	0914  50			     push    ax
   2269	0915  E8 0000e			     call    near ptr _putstr
   2270	0918  59			     pop     cx
   2271	0919  59			     pop     cx
   2272					;
   2273					;      putch(':');
   2274					;
   2275	091A  B8 003A			     mov     ax,58
   2276	091D  50			     push    ax
   2277	091E  E8 0000e			     call    near ptr _putch
   2278	0921  59			     pop     cx
   2279					;
   2280					;
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 41
command.ASM



   2281					;
   2282					;      unsignedtostr(str,t.ti_min,2,'0');
   2283					;
   2284	0922  B0 30			     mov     al,48
   2285	0924  50			     push    ax
   2286	0925  B8 0002			     mov     ax,2
   2287	0928  50			     push    ax
   2288	0929  8A 46 FC			     mov     al,byte ptr [bp-4]
   2289	092C  B4 00			     mov     ah,0
   2290	092E  50			     push    ax
   2291	092F  16			     push    ss
   2292	0930  8D 46 E8			     lea     ax,word ptr [bp-24]
   2293	0933  50			     push    ax
   2294	0934  E8 0000e			     call    near ptr _unsignedtostr
   2295	0937  83 C4 0A			     add     sp,10
   2296					;
   2297					;      putstr(str);
   2298					;
   2299	093A  16			     push    ss
   2300	093B  8D 46 E8			     lea     ax,word ptr [bp-24]
   2301	093E  50			     push    ax
   2302	093F  E8 0000e			     call    near ptr _putstr
   2303	0942  59			     pop     cx
   2304	0943  59			     pop     cx
   2305					;
   2306					;      putch(':');
   2307					;
   2308	0944  B8 003A			     mov     ax,58
   2309	0947  50			     push    ax
   2310	0948  E8 0000e			     call    near ptr _putch
   2311	094B  59			     pop     cx
   2312					;
   2313					;      unsignedtostr(str,t.ti_sec,2,'0');
   2314					;
   2315	094C  B0 30			     mov     al,48
   2316	094E  50			     push    ax
   2317	094F  B8 0002			     mov     ax,2
   2318	0952  50			     push    ax
   2319	0953  8A 46 FF			     mov     al,byte ptr [bp-1]
   2320	0956  B4 00			     mov     ah,0
   2321	0958  50			     push    ax
   2322	0959  16			     push    ss
   2323	095A  8D 46 E8			     lea     ax,word ptr [bp-24]
   2324	095D  50			     push    ax
   2325	095E  E8 0000e			     call    near ptr _unsignedtostr
   2326	0961  83 C4 0A			     add     sp,10
   2327					;
   2328					;      putstr(str);
   2329					;
   2330	0964  16			     push    ss
   2331	0965  8D 46 E8			     lea     ax,word ptr [bp-24]
   2332	0968  50			     push    ax
   2333	0969  E8 0000e			     call    near ptr _putstr
   2334	096C  59			     pop     cx
   2335	096D  59			     pop     cx
   2336					;
   2337					;      putch('\n');
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 42
command.ASM



   2338					;
   2339	096E  B8 000A			     mov     ax,10
   2340	0971  50			     push    ax
   2341	0972  E8 0000e			     call    near ptr _putch
   2342	0975  59			     pop     cx
   2343					;
   2344					;      return 0;
   2345					;
   2346	0976  33 C0			     xor     ax,ax
   2347	0978  EB 00			     jmp     short @15@58
   2348	097A			     @15@58:
   2349					;
   2350					;    }
   2351					;
   2352	097A  5F			     pop     di
   2353	097B  5E			     pop     si
   2354	097C  8B E5			     mov     sp,bp
   2355	097E  5D			     pop     bp
   2356	097F  C3			     ret
   2357	0980			     _cmd_time	     endp
   2358					;
   2359					;    int cmd_cls(int argc, char	far *argv[])
   2360					;
   2361					     assume  cs:_TEXT
   2362	0980			     _cmd_cls	     proc    near
   2363	0980  55			     push    bp
   2364	0981  8B EC			     mov     bp,sp
   2365	0983  56			     push    si
   2366	0984  57			     push    di
   2367	0985  8B 76 04			     mov     si,word ptr [bp+4]
   2368	0988  8B 7E 06			     mov     di,word ptr [bp+6]
   2369					;
   2370					;    {
   2371					;      argc=argc;
   2372					;
   2373					;
   2374					;      argv=argv;
   2375					;
   2376					;
   2377					;      clrscr();
   2378					;
   2379	098B  E8 0000e			     call    near ptr _clrscr
   2380					;
   2381					;      return 0;
   2382					;
   2383	098E  33 C0			     xor     ax,ax
   2384	0990  EB 00			     jmp     short @16@58
   2385	0992			     @16@58:
   2386					;
   2387					;    }
   2388					;
   2389	0992  5F			     pop     di
   2390	0993  5E			     pop     si
   2391	0994  5D			     pop     bp
   2392	0995  C3			     ret
   2393	0996			     _cmd_cls	     endp
   2394					;
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 43
command.ASM



   2395					;    int cmd_ver(int argc, char	far *argv[])
   2396					;
   2397					     assume  cs:_TEXT
   2398	0996			     _cmd_ver	     proc    near
   2399	0996  55			     push    bp
   2400	0997  8B EC			     mov     bp,sp
   2401	0999  56			     push    si
   2402	099A  57			     push    di
   2403	099B  8B 76 04			     mov     si,word ptr [bp+4]
   2404	099E  8B 7E 06			     mov     di,word ptr [bp+6]
   2405					;
   2406					;    {
   2407					;      argc=argc;
   2408					;
   2409					;
   2410					;      argv=argv;
   2411					;
   2412					;
   2413					;      putstr("minisSistema Operacional	- Vs ");
   2414					;
   2415	09A1  1E			     push    ds
   2416	09A2  B8 0720r			     mov     ax,offset DGROUP:s@+1644
   2417	09A5  50			     push    ax
   2418	09A6  E8 0000e			     call    near ptr _putstr
   2419	09A9  59			     pop     cx
   2420	09AA  59			     pop     cx
   2421					;
   2422					;      putstr(miniSO_VERSION);
   2423					;
   2424	09AB  1E			     push    ds
   2425	09AC  B8 073Fr			     mov     ax,offset DGROUP:s@+1675
   2426	09AF  50			     push    ax
   2427	09B0  E8 0000e			     call    near ptr _putstr
   2428	09B3  59			     pop     cx
   2429	09B4  59			     pop     cx
   2430					;
   2431					;      putch('\n');
   2432					;
   2433	09B5  B8 000A			     mov     ax,10
   2434	09B8  50			     push    ax
   2435	09B9  E8 0000e			     call    near ptr _putch
   2436	09BC  59			     pop     cx
   2437					;
   2438					;      return 0;
   2439					;
   2440	09BD  33 C0			     xor     ax,ax
   2441	09BF  EB 00			     jmp     short @17@58
   2442	09C1			     @17@58:
   2443					;
   2444					;    }
   2445					;
   2446	09C1  5F			     pop     di
   2447	09C2  5E			     pop     si
   2448	09C3  5D			     pop     bp
   2449	09C4  C3			     ret
   2450	09C5			     _cmd_ver	     endp
   2451	09C5			     _TEXT   ends
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 44
command.ASM



   2452	0000			     _BSS    segment word public 'BSS'
   2453	0000  14*(??)			     db	     20	dup (?)
   2454	0014			     _BSS    ends
   2455	09C5			     _TEXT   segment byte public 'CODE'
   2456					;
   2457					;    int cmd_ps(int argc, char far *argv[])
   2458					;
   2459					     assume  cs:_TEXT
   2460	09C5			     _cmd_ps proc    near
   2461	09C5  55			     push    bp
   2462	09C6  8B EC			     mov     bp,sp
   2463	09C8  56			     push    si
   2464	09C9  57			     push    di
   2465					;
   2466					;    {
   2467					;      int i,l;
   2468					;      static char str[20];
   2469					;      extern miniSO_PCB miniSO_thread[];
   2470					;
   2471					;      argc=argc;
   2472					;
   2473	09CA  8B 46 04			     mov     ax,word ptr [bp+4]
   2474	09CD  89 46 04			     mov     word ptr [bp+4],ax
   2475					;
   2476					;      argv=argv;
   2477					;
   2478	09D0  8B 46 06			     mov     ax,word ptr [bp+6]
   2479	09D3  89 46 06			     mov     word ptr [bp+6],ax
   2480					;
   2481					;      putstr("	BCP   PID   PPID  STATUS   WAIT	  ZLIST	 PREV	NEXT\n");
   2482					;
   2483	09D6  1E			     push    ds
   2484	09D7  B8 0744r			     mov     ax,offset DGROUP:s@+1680
   2485	09DA  50			     push    ax
   2486	09DB  E8 0000e			     call    near ptr _putstr
   2487	09DE  59			     pop     cx
   2488	09DF  59			     pop     cx
   2489					;
   2490					;      for (i=0;i<miniSO_MAXTHREADS;++i)  {
   2491					;
   2492	09E0  33 FF			     xor     di,di
   2493	09E2  E9 0266			     jmp     @18@1094
   2494	09E5			     @18@58:
   2495					;
   2496					;	   if (miniSO_thread[i].status!=FREE)  {
   2497					;
   2498	09E5  8B C7			     mov     ax,di
   2499	09E7  BA 001A			     mov     dx,26
   2500	09EA  F7 EA			     imul    dx
   2501	09EC  8B D8			     mov     bx,ax
   2502	09EE  83 BF 0004e FF		     cmp     word ptr DGROUP:_miniSO_thread[bx+4],-1
   2503	09F3  75 03			     jne     @@4
   2504	09F5  E9 0252			     jmp     @18@1066
   2505	09F8			     @@4:
   2506					;
   2507					;	      inttostr(str,i);
   2508					;
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 45
command.ASM



   2509	09F8  57			     push    di
   2510	09F9  1E			     push    ds
   2511	09FA  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2512	09FD  50			     push    ax
   2513	09FE  E8 0000e			     call    near ptr _inttostr
   2514	0A01  83 C4 06			     add     sp,6
   2515					;
   2516					;	      l=strlen(str);
   2517					;
   2518	0A04  1E			     push    ds
   2519	0A05  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2520	0A08  50			     push    ax
   2521	0A09  E8 0000e			     call    near ptr _strlen
   2522	0A0C  59			     pop     cx
   2523	0A0D  59			     pop     cx
   2524	0A0E  8B F0			     mov     si,ax
   2525	0A10  EB 08			     jmp     short @18@142
   2526	0A12			     @18@114:
   2527					;
   2528					;	      while (l++<3)
   2529					;		    putch(' ');
   2530					;
   2531	0A12  B8 0020			     mov     ax,32
   2532	0A15  50			     push    ax
   2533	0A16  E8 0000e			     call    near ptr _putch
   2534	0A19  59			     pop     cx
   2535	0A1A			     @18@142:
   2536	0A1A  8B C6			     mov     ax,si
   2537	0A1C  46			     inc     si
   2538	0A1D  3D 0003			     cmp     ax,3
   2539	0A20  7C F0			     jl	     short @18@114
   2540					;
   2541					;	      putstr(str);
   2542					;
   2543	0A22  1E			     push    ds
   2544	0A23  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2545	0A26  50			     push    ax
   2546	0A27  E8 0000e			     call    near ptr _putstr
   2547	0A2A  59			     pop     cx
   2548	0A2B  59			     pop     cx
   2549					;
   2550					;	      putstr("	");
   2551					;
   2552	0A2C  1E			     push    ds
   2553	0A2D  B8 077Br			     mov     ax,offset DGROUP:s@+1735
   2554	0A30  50			     push    ax
   2555	0A31  E8 0000e			     call    near ptr _putstr
   2556	0A34  59			     pop     cx
   2557	0A35  59			     pop     cx
   2558					;
   2559					;	      inttostr(str,miniSO_thread[i].pid);
   2560					;
   2561	0A36  8B C7			     mov     ax,di
   2562	0A38  BA 001A			     mov     dx,26
   2563	0A3B  F7 EA			     imul    dx
   2564	0A3D  8B D8			     mov     bx,ax
   2565	0A3F  FF B7 0000e		     push    word ptr DGROUP:_miniSO_thread[bx]
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 46
command.ASM



   2566	0A43  1E			     push    ds
   2567	0A44  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2568	0A47  50			     push    ax
   2569	0A48  E8 0000e			     call    near ptr _inttostr
   2570	0A4B  83 C4 06			     add     sp,6
   2571					;
   2572					;	      l=strlen(str);
   2573					;
   2574	0A4E  1E			     push    ds
   2575	0A4F  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2576	0A52  50			     push    ax
   2577	0A53  E8 0000e			     call    near ptr _strlen
   2578	0A56  59			     pop     cx
   2579	0A57  59			     pop     cx
   2580	0A58  8B F0			     mov     si,ax
   2581	0A5A  EB 08			     jmp     short @18@226
   2582	0A5C			     @18@198:
   2583					;
   2584					;	      while (l++<5)
   2585					;		    putch(' ');
   2586					;
   2587	0A5C  B8 0020			     mov     ax,32
   2588	0A5F  50			     push    ax
   2589	0A60  E8 0000e			     call    near ptr _putch
   2590	0A63  59			     pop     cx
   2591	0A64			     @18@226:
   2592	0A64  8B C6			     mov     ax,si
   2593	0A66  46			     inc     si
   2594	0A67  3D 0005			     cmp     ax,5
   2595	0A6A  7C F0			     jl	     short @18@198
   2596					;
   2597					;	      putstr(str);
   2598					;
   2599	0A6C  1E			     push    ds
   2600	0A6D  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2601	0A70  50			     push    ax
   2602	0A71  E8 0000e			     call    near ptr _putstr
   2603	0A74  59			     pop     cx
   2604	0A75  59			     pop     cx
   2605					;
   2606					;	      putstr("	");
   2607					;
   2608	0A76  1E			     push    ds
   2609	0A77  B8 077Er			     mov     ax,offset DGROUP:s@+1738
   2610	0A7A  50			     push    ax
   2611	0A7B  E8 0000e			     call    near ptr _putstr
   2612	0A7E  59			     pop     cx
   2613	0A7F  59			     pop     cx
   2614					;
   2615					;	      inttostr(str,miniSO_thread[i].ppid);
   2616					;
   2617	0A80  8B C7			     mov     ax,di
   2618	0A82  BA 001A			     mov     dx,26
   2619	0A85  F7 EA			     imul    dx
   2620	0A87  8B D8			     mov     bx,ax
   2621	0A89  FF B7 0002e		     push    word ptr DGROUP:_miniSO_thread[bx+2]
   2622	0A8D  1E			     push    ds
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 47
command.ASM



   2623	0A8E  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2624	0A91  50			     push    ax
   2625	0A92  E8 0000e			     call    near ptr _inttostr
   2626	0A95  83 C4 06			     add     sp,6
   2627					;
   2628					;	      l=strlen(str);
   2629					;
   2630	0A98  1E			     push    ds
   2631	0A99  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2632	0A9C  50			     push    ax
   2633	0A9D  E8 0000e			     call    near ptr _strlen
   2634	0AA0  59			     pop     cx
   2635	0AA1  59			     pop     cx
   2636	0AA2  8B F0			     mov     si,ax
   2637	0AA4  EB 08			     jmp     short @18@310
   2638	0AA6			     @18@282:
   2639					;
   2640					;	      while (l++<5)
   2641					;		    putch(' ');
   2642					;
   2643	0AA6  B8 0020			     mov     ax,32
   2644	0AA9  50			     push    ax
   2645	0AAA  E8 0000e			     call    near ptr _putch
   2646	0AAD  59			     pop     cx
   2647	0AAE			     @18@310:
   2648	0AAE  8B C6			     mov     ax,si
   2649	0AB0  46			     inc     si
   2650	0AB1  3D 0005			     cmp     ax,5
   2651	0AB4  7C F0			     jl	     short @18@282
   2652					;
   2653					;	      putstr(str);
   2654					;
   2655	0AB6  1E			     push    ds
   2656	0AB7  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2657	0ABA  50			     push    ax
   2658	0ABB  E8 0000e			     call    near ptr _putstr
   2659	0ABE  59			     pop     cx
   2660	0ABF  59			     pop     cx
   2661					;
   2662					;	      putstr("	");
   2663					;
   2664	0AC0  1E			     push    ds
   2665	0AC1  B8 0781r			     mov     ax,offset DGROUP:s@+1741
   2666	0AC4  50			     push    ax
   2667	0AC5  E8 0000e			     call    near ptr _putstr
   2668	0AC8  59			     pop     cx
   2669	0AC9  59			     pop     cx
   2670					;
   2671					;	      switch(miniSO_thread[i].status)  {
   2672					;
   2673	0ACA  8B C7			     mov     ax,di
   2674	0ACC  BA 001A			     mov     dx,26
   2675	0ACF  F7 EA			     imul    dx
   2676	0AD1  8B D8			     mov     bx,ax
   2677	0AD3  8B 9F 0004e		     mov     bx,word ptr DGROUP:_miniSO_thread[bx+4]
   2678	0AD7  43			     inc     bx
   2679	0AD8  83 FB 07			     cmp     bx,7
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 48
command.ASM



   2680	0ADB  77 3D			     ja	     short @18@702
   2681	0ADD  D1 E3			     shl     bx,1
   2682	0ADF  2E: FF A7	0C5Br		     jmp     word ptr cs:@18@C1266[bx]
   2683	0AE4			     @18@450:
   2684					;
   2685					;		    case FREE:	  putstr(strFREE);    break;
   2686					;
   2687	0AE4  1E			     push    ds
   2688	0AE5  B8 0784r			     mov     ax,offset DGROUP:s@+1744
   2689	0AE8			     @18@478:
   2690	0AE8  50			     push    ax
   2691	0AE9  E8 0000e			     call    near ptr _putstr
   2692	0AEC  59			     pop     cx
   2693	0AED  59			     pop     cx
   2694	0AEE  EB 2A			     jmp     short @18@702
   2695	0AF0			     @18@506:
   2696					;
   2697					;		    case READY:	  putstr(strREADY);   break;
   2698					;
   2699	0AF0  1E			     push    ds
   2700	0AF1  B8 078Cr			     mov     ax,offset DGROUP:s@+1752
   2701	0AF4  EB F2			     jmp     short @18@478
   2702	0AF6			     @18@534:
   2703					;
   2704					;		    case RUNNING: putstr(strRUNNING); break;
   2705					;
   2706	0AF6  1E			     push    ds
   2707	0AF7  B8 0794r			     mov     ax,offset DGROUP:s@+1760
   2708	0AFA  EB EC			     jmp     short @18@478
   2709	0AFC			     @18@562:
   2710					;
   2711					;		    case ZOMBIE:  putstr(strZOMBIE);  break;
   2712					;
   2713	0AFC  1E			     push    ds
   2714	0AFD  B8 079Cr			     mov     ax,offset DGROUP:s@+1768
   2715	0B00  EB E6			     jmp     short @18@478
   2716	0B02			     @18@590:
   2717					;
   2718					;		    case WAIT:	  putstr(strWAIT);    break;
   2719					;
   2720	0B02  1E			     push    ds
   2721	0B03  B8 07A4r			     mov     ax,offset DGROUP:s@+1776
   2722	0B06  EB E0			     jmp     short @18@478
   2723	0B08			     @18@618:
   2724					;
   2725					;		    case WAITSIG: putstr(strWAITSIG); break;
   2726					;
   2727	0B08  1E			     push    ds
   2728	0B09  B8 07ACr			     mov     ax,offset DGROUP:s@+1784
   2729	0B0C  EB DA			     jmp     short @18@478
   2730	0B0E			     @18@646:
   2731					;
   2732					;		    case WAITSEM: putstr(strWAITSEM); break;
   2733					;
   2734	0B0E  1E			     push    ds
   2735	0B0F  B8 07B4r			     mov     ax,offset DGROUP:s@+1792
   2736	0B12  EB D4			     jmp     short @18@478
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 49
command.ASM



   2737	0B14			     @18@674:
   2738					;
   2739					;		    case STOPPED: putstr(strSTOPPED); break;
   2740					;
   2741	0B14  1E			     push    ds
   2742	0B15  B8 07BCr			     mov     ax,offset DGROUP:s@+1800
   2743	0B18  EB CE			     jmp     short @18@478
   2744	0B1A			     @18@702:
   2745					;
   2746					;	      }
   2747					;	      putstr("	");
   2748					;
   2749	0B1A  1E			     push    ds
   2750	0B1B  B8 07C4r			     mov     ax,offset DGROUP:s@+1808
   2751	0B1E  50			     push    ax
   2752	0B1F  E8 0000e			     call    near ptr _putstr
   2753	0B22  59			     pop     cx
   2754	0B23  59			     pop     cx
   2755					;
   2756					;	      inttostr(str,miniSO_thread[i].wait);
   2757					;
   2758	0B24  8B C7			     mov     ax,di
   2759	0B26  BA 001A			     mov     dx,26
   2760	0B29  F7 EA			     imul    dx
   2761	0B2B  8B D8			     mov     bx,ax
   2762	0B2D  FF B7 000Ee		     push    word ptr DGROUP:_miniSO_thread[bx+14]
   2763	0B31  1E			     push    ds
   2764	0B32  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2765	0B35  50			     push    ax
   2766	0B36  E8 0000e			     call    near ptr _inttostr
   2767	0B39  83 C4 06			     add     sp,6
   2768					;
   2769					;	      l=strlen(str);
   2770					;
   2771	0B3C  1E			     push    ds
   2772	0B3D  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2773	0B40  50			     push    ax
   2774	0B41  E8 0000e			     call    near ptr _strlen
   2775	0B44  59			     pop     cx
   2776	0B45  59			     pop     cx
   2777	0B46  8B F0			     mov     si,ax
   2778	0B48  EB 08			     jmp     short @18@758
   2779	0B4A			     @18@730:
   2780					;
   2781					;	      while (l++<5)
   2782					;		    putch(' ');
   2783					;
   2784	0B4A  B8 0020			     mov     ax,32
   2785	0B4D  50			     push    ax
   2786	0B4E  E8 0000e			     call    near ptr _putch
   2787	0B51  59			     pop     cx
   2788	0B52			     @18@758:
   2789	0B52  8B C6			     mov     ax,si
   2790	0B54  46			     inc     si
   2791	0B55  3D 0005			     cmp     ax,5
   2792	0B58  7C F0			     jl	     short @18@730
   2793					;
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 50
command.ASM



   2794					;	      putstr(str);
   2795					;
   2796	0B5A  1E			     push    ds
   2797	0B5B  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2798	0B5E  50			     push    ax
   2799	0B5F  E8 0000e			     call    near ptr _putstr
   2800	0B62  59			     pop     cx
   2801	0B63  59			     pop     cx
   2802					;
   2803					;
   2804					;	      putstr("	");
   2805					;
   2806	0B64  1E			     push    ds
   2807	0B65  B8 07C7r			     mov     ax,offset DGROUP:s@+1811
   2808	0B68  50			     push    ax
   2809	0B69  E8 0000e			     call    near ptr _putstr
   2810	0B6C  59			     pop     cx
   2811	0B6D  59			     pop     cx
   2812					;
   2813					;	      inttostr(str,miniSO_thread[i].zombies);
   2814					;
   2815	0B6E  8B C7			     mov     ax,di
   2816	0B70  BA 001A			     mov     dx,26
   2817	0B73  F7 EA			     imul    dx
   2818	0B75  8B D8			     mov     bx,ax
   2819	0B77  FF B7 0014e		     push    word ptr DGROUP:_miniSO_thread[bx+20]
   2820	0B7B  1E			     push    ds
   2821	0B7C  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2822	0B7F  50			     push    ax
   2823	0B80  E8 0000e			     call    near ptr _inttostr
   2824	0B83  83 C4 06			     add     sp,6
   2825					;
   2826					;	      l=strlen(str);
   2827					;
   2828	0B86  1E			     push    ds
   2829	0B87  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2830	0B8A  50			     push    ax
   2831	0B8B  E8 0000e			     call    near ptr _strlen
   2832	0B8E  59			     pop     cx
   2833	0B8F  59			     pop     cx
   2834	0B90  8B F0			     mov     si,ax
   2835	0B92  EB 08			     jmp     short @18@842
   2836	0B94			     @18@814:
   2837					;
   2838					;	      while (l++<5)
   2839					;		    putch(' ');
   2840					;
   2841	0B94  B8 0020			     mov     ax,32
   2842	0B97  50			     push    ax
   2843	0B98  E8 0000e			     call    near ptr _putch
   2844	0B9B  59			     pop     cx
   2845	0B9C			     @18@842:
   2846	0B9C  8B C6			     mov     ax,si
   2847	0B9E  46			     inc     si
   2848	0B9F  3D 0005			     cmp     ax,5
   2849	0BA2  7C F0			     jl	     short @18@814
   2850					;
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 51
command.ASM



   2851					;	      putstr(str);
   2852					;
   2853	0BA4  1E			     push    ds
   2854	0BA5  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2855	0BA8  50			     push    ax
   2856	0BA9  E8 0000e			     call    near ptr _putstr
   2857	0BAC  59			     pop     cx
   2858	0BAD  59			     pop     cx
   2859					;
   2860					;
   2861					;	      putstr(" ");
   2862					;
   2863	0BAE  1E			     push    ds
   2864	0BAF  B8 07CAr			     mov     ax,offset DGROUP:s@+1814
   2865	0BB2  50			     push    ax
   2866	0BB3  E8 0000e			     call    near ptr _putstr
   2867	0BB6  59			     pop     cx
   2868	0BB7  59			     pop     cx
   2869					;
   2870					;	      inttostr(str,miniSO_thread[i].prev);
   2871					;
   2872	0BB8  8B C7			     mov     ax,di
   2873	0BBA  BA 001A			     mov     dx,26
   2874	0BBD  F7 EA			     imul    dx
   2875	0BBF  8B D8			     mov     bx,ax
   2876	0BC1  FF B7 0016e		     push    word ptr DGROUP:_miniSO_thread[bx+22]
   2877	0BC5  1E			     push    ds
   2878	0BC6  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2879	0BC9  50			     push    ax
   2880	0BCA  E8 0000e			     call    near ptr _inttostr
   2881	0BCD  83 C4 06			     add     sp,6
   2882					;
   2883					;	      l=strlen(str);
   2884					;
   2885	0BD0  1E			     push    ds
   2886	0BD1  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2887	0BD4  50			     push    ax
   2888	0BD5  E8 0000e			     call    near ptr _strlen
   2889	0BD8  59			     pop     cx
   2890	0BD9  59			     pop     cx
   2891	0BDA  8B F0			     mov     si,ax
   2892	0BDC  EB 08			     jmp     short @18@926
   2893	0BDE			     @18@898:
   2894					;
   2895					;	      while (l++<5)
   2896					;		    putch(' ');
   2897					;
   2898	0BDE  B8 0020			     mov     ax,32
   2899	0BE1  50			     push    ax
   2900	0BE2  E8 0000e			     call    near ptr _putch
   2901	0BE5  59			     pop     cx
   2902	0BE6			     @18@926:
   2903	0BE6  8B C6			     mov     ax,si
   2904	0BE8  46			     inc     si
   2905	0BE9  3D 0005			     cmp     ax,5
   2906	0BEC  7C F0			     jl	     short @18@898
   2907					;
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 52
command.ASM



   2908					;	      putstr(str);
   2909					;
   2910	0BEE  1E			     push    ds
   2911	0BEF  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2912	0BF2  50			     push    ax
   2913	0BF3  E8 0000e			     call    near ptr _putstr
   2914	0BF6  59			     pop     cx
   2915	0BF7  59			     pop     cx
   2916					;
   2917					;
   2918					;	      putstr("	");
   2919					;
   2920	0BF8  1E			     push    ds
   2921	0BF9  B8 07CCr			     mov     ax,offset DGROUP:s@+1816
   2922	0BFC  50			     push    ax
   2923	0BFD  E8 0000e			     call    near ptr _putstr
   2924	0C00  59			     pop     cx
   2925	0C01  59			     pop     cx
   2926					;
   2927					;	      inttostr(str,miniSO_thread[i].next);
   2928					;
   2929	0C02  8B C7			     mov     ax,di
   2930	0C04  BA 001A			     mov     dx,26
   2931	0C07  F7 EA			     imul    dx
   2932	0C09  8B D8			     mov     bx,ax
   2933	0C0B  FF B7 0018e		     push    word ptr DGROUP:_miniSO_thread[bx+24]
   2934	0C0F  1E			     push    ds
   2935	0C10  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2936	0C13  50			     push    ax
   2937	0C14  E8 0000e			     call    near ptr _inttostr
   2938	0C17  83 C4 06			     add     sp,6
   2939					;
   2940					;	      l=strlen(str);
   2941					;
   2942	0C1A  1E			     push    ds
   2943	0C1B  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2944	0C1E  50			     push    ax
   2945	0C1F  E8 0000e			     call    near ptr _strlen
   2946	0C22  59			     pop     cx
   2947	0C23  59			     pop     cx
   2948	0C24  8B F0			     mov     si,ax
   2949	0C26  EB 08			     jmp     short @18@1010
   2950	0C28			     @18@982:
   2951					;
   2952					;	      while (l++<5)
   2953					;		    putch(' ');
   2954					;
   2955	0C28  B8 0020			     mov     ax,32
   2956	0C2B  50			     push    ax
   2957	0C2C  E8 0000e			     call    near ptr _putch
   2958	0C2F  59			     pop     cx
   2959	0C30			     @18@1010:
   2960	0C30  8B C6			     mov     ax,si
   2961	0C32  46			     inc     si
   2962	0C33  3D 0005			     cmp     ax,5
   2963	0C36  7C F0			     jl	     short @18@982
   2964					;
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 53
command.ASM



   2965					;	      putstr(str);
   2966					;
   2967	0C38  1E			     push    ds
   2968	0C39  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2969	0C3C  50			     push    ax
   2970	0C3D  E8 0000e			     call    near ptr _putstr
   2971	0C40  59			     pop     cx
   2972	0C41  59			     pop     cx
   2973					;
   2974					;	      putch('\n');
   2975					;
   2976	0C42  B8 000A			     mov     ax,10
   2977	0C45  50			     push    ax
   2978	0C46  E8 0000e			     call    near ptr _putch
   2979	0C49  59			     pop     cx
   2980	0C4A			     @18@1066:
   2981	0C4A  47			     inc     di
   2982	0C4B			     @18@1094:
   2983	0C4B  83 FF 10			     cmp     di,16
   2984	0C4E  7D 03			     jge     @@5
   2985	0C50  E9 FD92			     jmp     @18@58
   2986	0C53			     @@5:
   2987					;
   2988					;	   }
   2989					;      }
   2990					;      return 0;
   2991					;
   2992	0C53  33 C0			     xor     ax,ax
   2993	0C55  EB 00			     jmp     short @18@1150
   2994	0C57			     @18@1150:
   2995					;
   2996					;    }
   2997					;
   2998	0C57  5F			     pop     di
   2999	0C58  5E			     pop     si
   3000	0C59  5D			     pop     bp
   3001	0C5A  C3			     ret
   3002	0C5B			     _cmd_ps endp
   3003	0C5B			     @18@C1266	     label   word
   3004	0C5B  0AE4r			     dw	     @18@450
   3005	0C5D  0AF0r			     dw	     @18@506
   3006	0C5F  0AF6r			     dw	     @18@534
   3007	0C61  0AFCr			     dw	     @18@562
   3008	0C63  0B02r			     dw	     @18@590
   3009	0C65  0B08r			     dw	     @18@618
   3010	0C67  0B0Er			     dw	     @18@646
   3011	0C69  0B14r			     dw	     @18@674
   3012					;
   3013					;    int cmd_kill(int argc, char far *argv[])
   3014					;
   3015					     assume  cs:_TEXT
   3016	0C6B			     _cmd_kill	     proc    near
   3017	0C6B  55			     push    bp
   3018	0C6C  8B EC			     mov     bp,sp
   3019	0C6E  56			     push    si
   3020	0C6F  57			     push    di
   3021					;
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 54
command.ASM



   3022					;    {
   3023					;      int t=0;
   3024					;
   3025	0C70  33 F6			     xor     si,si
   3026					;
   3027					;      pid_t pid=0;
   3028					;
   3029	0C72  33 FF			     xor     di,di
   3030					;
   3031					;      char str[10];
   3032					;
   3033					;      if (argc<=1)  {
   3034					;
   3035	0C74  83 7E 04 01		     cmp     word ptr [bp+4],1
   3036	0C78  7F 0F			     jg	     short @19@142
   3037					;
   3038					;	  putstr("Erro em kill:	parametro nao fornecido!\n");
   3039					;
   3040	0C7A  1E			     push    ds
   3041	0C7B  B8 07CFr			     mov     ax,offset DGROUP:s@+1819
   3042	0C7E			     @19@86:
   3043	0C7E  50			     push    ax
   3044	0C7F  E8 0000e			     call    near ptr _putstr
   3045	0C82  59			     pop     cx
   3046	0C83  59			     pop     cx
   3047					;
   3048					;	  return 1;
   3049					;
   3050	0C84  B8 0001			     mov     ax,1
   3051	0C87			     @19@114:
   3052	0C87  EB 26			     jmp     short @19@226
   3053	0C89			     @19@142:
   3054					;
   3055					;      }
   3056					;      pid = atoi(argv[1]);
   3057					;
   3058	0C89  8B 5E 06			     mov     bx,word ptr [bp+6]
   3059	0C8C  FF 77 06			     push    word ptr [bx+6]
   3060	0C8F  FF 77 04			     push    word ptr [bx+4]
   3061	0C92  E8 0000e			     call    near ptr _atoi
   3062	0C95  59			     pop     cx
   3063	0C96  59			     pop     cx
   3064	0C97  8B F8			     mov     di,ax
   3065					;
   3066					;      t = kill(pid);
   3067					;
   3068	0C99  57			     push    di
   3069	0C9A  E8 0000e			     call    near ptr _kill
   3070	0C9D  59			     pop     cx
   3071	0C9E  8B F0			     mov     si,ax
   3072					;
   3073					;      if (t==miniSO_ERROR)  {
   3074					;
   3075	0CA0  83 FE FF			     cmp     si,-1
   3076	0CA3  75 06			     jne     short @19@198
   3077					;
   3078					;	  putstr("kill:	impossivel matar o processo/thread\n");
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 55
command.ASM



   3079					;
   3080	0CA5  1E			     push    ds
   3081	0CA6  B8 07F7r			     mov     ax,offset DGROUP:s@+1859
   3082	0CA9  EB D3			     jmp     short @19@86
   3083	0CAB			     @19@198:
   3084					;
   3085					;	  return 1;
   3086					;      }
   3087					;      return 0;
   3088					;
   3089	0CAB  33 C0			     xor     ax,ax
   3090	0CAD  EB D8			     jmp     short @19@114
   3091	0CAF			     @19@226:
   3092					;
   3093					;    }
   3094					;
   3095	0CAF  5F			     pop     di
   3096	0CB0  5E			     pop     si
   3097	0CB1  5D			     pop     bp
   3098	0CB2  C3			     ret
   3099	0CB3			     _cmd_kill	     endp
   3100					;
   3101					;    int cmd_set(int argc, char	far *argv[])
   3102					;
   3103					     assume  cs:_TEXT
   3104	0CB3			     _cmd_set	     proc    near
   3105	0CB3  55			     push    bp
   3106	0CB4  8B EC			     mov     bp,sp
   3107	0CB6  83 EC 02			     sub     sp,2
   3108	0CB9  56			     push    si
   3109	0CBA  57			     push    di
   3110	0CBB  8B 76 04			     mov     si,word ptr [bp+4]
   3111	0CBE  8B 7E 06			     mov     di,word ptr [bp+6]
   3112					;
   3113					;    {
   3114					;      int res;
   3115					;
   3116					;      if (argc	== 1)  {
   3117					;
   3118	0CC1  83 FE 01			     cmp     si,1
   3119	0CC4  75 07			     jne     short @20@142
   3120					;
   3121					;	  command_var_list();
   3122					;
   3123	0CC6  E8 F954			     call    near ptr command_var_list
   3124					;
   3125					;	  return 0;
   3126					;
   3127	0CC9			     @20@86:
   3128	0CC9  33 C0			     xor     ax,ax
   3129	0CCB			     @20@114:
   3130	0CCB  EB 71			     jmp     short @20@534
   3131	0CCD			     @20@142:
   3132					;
   3133					;      }
   3134					;      if (argc	== 2)
   3135					;
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 56
command.ASM



   3136	0CCD  83 FE 02			     cmp     si,2
   3137	0CD0  75 16			     jne     short @20@198
   3138					;
   3139					;	  res =	command_var_set(argv[1],"");
   3140					;
   3141	0CD2  1E			     push    ds
   3142	0CD3  B8 0821r			     mov     ax,offset DGROUP:s@+1901
   3143	0CD6  50			     push    ax
   3144	0CD7  FF 75 06			     push    word ptr [di+6]
   3145	0CDA  FF 75 04			     push    word ptr [di+4]
   3146	0CDD  E8 FA5C			     call    near ptr command_var_set
   3147	0CE0  83 C4 08			     add     sp,8
   3148	0CE3  89 46 FE			     mov     word ptr [bp-2],ax
   3149	0CE6  EB 21			     jmp     short @20@282
   3150	0CE8			     @20@198:
   3151					;
   3152					;      else if (argc ==	3)
   3153					;
   3154	0CE8  83 FE 03			     cmp     si,3
   3155	0CEB  75 17			     jne     short @20@254
   3156					;
   3157					;	    res	= command_var_set(argv[1],argv[2]);
   3158					;
   3159	0CED  FF 75 0A			     push    word ptr [di+10]
   3160	0CF0  FF 75 08			     push    word ptr [di+8]
   3161	0CF3  FF 75 06			     push    word ptr [di+6]
   3162	0CF6  FF 75 04			     push    word ptr [di+4]
   3163	0CF9  E8 FA40			     call    near ptr command_var_set
   3164	0CFC  83 C4 08			     add     sp,8
   3165	0CFF  89 46 FE			     mov     word ptr [bp-2],ax
   3166	0D02  EB 05			     jmp     short @20@282
   3167	0D04			     @20@254:
   3168					;
   3169					;      else
   3170					;	  res =	-5;
   3171					;
   3172	0D04  C7 46 FE FFFB		     mov     word ptr [bp-2],-5
   3173	0D09			     @20@282:
   3174					;
   3175					;      switch (res)  {
   3176					;
   3177	0D09  8B 5E FE			     mov     bx,word ptr [bp-2]
   3178	0D0C  83 EB FB			     sub     bx,-5
   3179	0D0F  83 FB 03			     cmp     bx,3
   3180	0D12  77 28			     ja	     short @20@506
   3181	0D14  D1 E3			     shl     bx,1
   3182	0D16  2E: FF A7	0D44r		     jmp     word ptr cs:@20@C482[bx]
   3183	0D1B			     @20@366:
   3184					;
   3185					;	      case -2:
   3186					;		   putstr("Erro	em set:	nao ha espaco para novas variaveis!\n");
   3187					;
   3188	0D1B  1E			     push    ds
   3189	0D1C  B8 0822r			     mov     ax,offset DGROUP:s@+1902
   3190	0D1F  EB 10			     jmp     short @20@478
   3191	0D21			     @20@394:
   3192					;
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 57
command.ASM



   3193					;		   return 1;
   3194					;	      case -3:
   3195					;		   putstr("Erro	em set:	o tamanho do nome da variavel e	muito grande!\n");
   3196					;
   3197	0D21  1E			     push    ds
   3198	0D22  B8 0854r			     mov     ax,offset DGROUP:s@+1952
   3199	0D25  EB 0A			     jmp     short @20@478
   3200	0D27			     @20@422:
   3201					;
   3202					;		   return 1;
   3203					;	      case -4:
   3204					;		   putstr("Erro	em set:	o tamanho do conteudo da variavel e muito	    +
   3205				     grande!\n");
   3206					;
   3207	0D27  1E			     push    ds
   3208	0D28  B8 0890r			     mov     ax,offset DGROUP:s@+2012
   3209	0D2B  EB 04			     jmp     short @20@478
   3210	0D2D			     @20@450:
   3211					;
   3212					;		   return 1;
   3213					;	      case -5:
   3214					;		   putstr("Erro	em set:	argumentos demais na linha de comando!\n");
   3215					;
   3216	0D2D  1E			     push    ds
   3217	0D2E  B8 08D0r			     mov     ax,offset DGROUP:s@+2076
   3218	0D31			     @20@478:
   3219	0D31  50			     push    ax
   3220	0D32  E8 0000e			     call    near ptr _putstr
   3221	0D35  59			     pop     cx
   3222	0D36  59			     pop     cx
   3223					;
   3224					;		   return 1;
   3225					;
   3226	0D37  B8 0001			     mov     ax,1
   3227	0D3A  EB 8F			     jmp     short @20@114
   3228	0D3C			     @20@506:
   3229	0D3C  EB 8B			     jmp     short @20@86
   3230	0D3E			     @20@534:
   3231					;
   3232					;      }
   3233					;      return 0;
   3234					;    }
   3235					;
   3236	0D3E  5F			     pop     di
   3237	0D3F  5E			     pop     si
   3238	0D40  8B E5			     mov     sp,bp
   3239	0D42  5D			     pop     bp
   3240	0D43  C3			     ret
   3241	0D44			     _cmd_set	     endp
   3242	0D44			     @20@C482	     label   word
   3243	0D44  0D2Dr			     dw	     @20@450
   3244	0D46  0D27r			     dw	     @20@422
   3245	0D48  0D21r			     dw	     @20@394
   3246	0D4A  0D1Br			     dw	     @20@366
   3247					;
   3248					;    int cmd_unset(int argc, char far *argv[])
   3249					;
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 58
command.ASM



   3250					     assume  cs:_TEXT
   3251	0D4C			     _cmd_unset	     proc    near
   3252	0D4C  55			     push    bp
   3253	0D4D  8B EC			     mov     bp,sp
   3254	0D4F  83 EC 02			     sub     sp,2
   3255					;
   3256					;    {
   3257					;      int res;
   3258					;
   3259					;      if (argc	!= 2)  {
   3260					;
   3261	0D52  83 7E 04 02		     cmp     word ptr [bp+4],2
   3262	0D56  74 0F			     je	     short @21@142
   3263					;
   3264					;	  putstr("Erro em unset: numero	invalido de argumentos!\n");
   3265					;
   3266	0D58  1E			     push    ds
   3267	0D59  B8 0905r			     mov     ax,offset DGROUP:s@+2129
   3268	0D5C			     @21@86:
   3269	0D5C  50			     push    ax
   3270	0D5D  E8 0000e			     call    near ptr _putstr
   3271	0D60  59			     pop     cx
   3272	0D61  59			     pop     cx
   3273					;
   3274					;	  return 1;
   3275					;
   3276	0D62  B8 0001			     mov     ax,1
   3277	0D65			     @21@114:
   3278	0D65  EB 21			     jmp     short @21@226
   3279	0D67			     @21@142:
   3280					;
   3281					;      }
   3282					;      res = command_var_unset(argv[1]);
   3283					;
   3284	0D67  8B 5E 06			     mov     bx,word ptr [bp+6]
   3285	0D6A  FF 77 06			     push    word ptr [bx+6]
   3286	0D6D  FF 77 04			     push    word ptr [bx+4]
   3287	0D70  E8 F95A			     call    near ptr command_var_unset
   3288	0D73  59			     pop     cx
   3289	0D74  59			     pop     cx
   3290	0D75  89 46 FE			     mov     word ptr [bp-2],ax
   3291					;
   3292					;      if (res == -1)  {
   3293					;
   3294	0D78  83 7E FE FF		     cmp     word ptr [bp-2],-1
   3295	0D7C  75 06			     jne     short @21@198
   3296					;
   3297					;	  putstr("Erro em unset: variavel inexistente!\n");
   3298					;
   3299	0D7E  1E			     push    ds
   3300	0D7F  B8 0934r			     mov     ax,offset DGROUP:s@+2176
   3301	0D82  EB D8			     jmp     short @21@86
   3302	0D84			     @21@198:
   3303					;
   3304					;	  return 1;
   3305					;      }
   3306					;      return 0;
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 59
command.ASM



   3307					;
   3308	0D84  33 C0			     xor     ax,ax
   3309	0D86  EB DD			     jmp     short @21@114
   3310	0D88			     @21@226:
   3311					;
   3312					;    }
   3313					;
   3314	0D88  8B E5			     mov     sp,bp
   3315	0D8A  5D			     pop     bp
   3316	0D8B  C3			     ret
   3317	0D8C			     _cmd_unset	     endp
   3318					;
   3319					;    int cmd_echo(int argc, char far *argv[])
   3320					;
   3321					     assume  cs:_TEXT
   3322	0D8C			     _cmd_echo	     proc    near
   3323	0D8C  55			     push    bp
   3324	0D8D  8B EC			     mov     bp,sp
   3325	0D8F  83 EC 02			     sub     sp,2
   3326	0D92  56			     push    si
   3327	0D93  57			     push    di
   3328	0D94  8B 7E 06			     mov     di,word ptr [bp+6]
   3329					;
   3330					;    {
   3331					;      int i,control_n=1;
   3332					;
   3333	0D97  C7 46 FE 0001		     mov     word ptr [bp-2],1
   3334					;
   3335					;
   3336					;      if (argc>1)  {
   3337					;
   3338	0D9C  83 7E 04 01		     cmp     word ptr [bp+4],1
   3339	0DA0  7E 55			     jle     short @22@338
   3340					;
   3341					;	  if (strcmp(argv[1],"-n")==0)
   3342					;
   3343	0DA2  1E			     push    ds
   3344	0DA3  B8 095Ar			     mov     ax,offset DGROUP:s@+2214
   3345	0DA6  50			     push    ax
   3346	0DA7  FF 75 06			     push    word ptr [di+6]
   3347	0DAA  FF 75 04			     push    word ptr [di+4]
   3348	0DAD  E8 0000e			     call    near ptr _strcmp
   3349	0DB0  83 C4 08			     add     sp,8
   3350	0DB3  0B C0			     or	     ax,ax
   3351	0DB5  75 07			     jne     short @22@114
   3352					;
   3353					;	     control_n = 0;
   3354					;
   3355	0DB7  C7 46 FE 0000		     mov     word ptr [bp-2],0
   3356	0DBC  EB 0B			     jmp     short @22@142
   3357	0DBE			     @22@114:
   3358					;
   3359					;	  else
   3360					;	     putstr(argv[1]);
   3361					;
   3362	0DBE  FF 75 06			     push    word ptr [di+6]
   3363	0DC1  FF 75 04			     push    word ptr [di+4]
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 60
command.ASM



   3364	0DC4  E8 0000e			     call    near ptr _putstr
   3365	0DC7  59			     pop     cx
   3366	0DC8  59			     pop     cx
   3367	0DC9			     @22@142:
   3368					;
   3369					;	  for (i=2;i<argc;++i)	{
   3370					;
   3371	0DC9  BE 0002			     mov     si,2
   3372	0DCC  EB 24			     jmp     short @22@310
   3373	0DCE			     @22@170:
   3374					;
   3375					;	      if (i!=2 || control_n)
   3376					;
   3377	0DCE  83 FE 02			     cmp     si,2
   3378	0DD1  75 06			     jne     short @22@226
   3379	0DD3  83 7E FE 00		     cmp     word ptr [bp-2],0
   3380	0DD7  74 08			     je	     short @22@254
   3381	0DD9			     @22@226:
   3382					;
   3383					;		 putch(' ');
   3384					;
   3385	0DD9  B8 0020			     mov     ax,32
   3386	0DDC  50			     push    ax
   3387	0DDD  E8 0000e			     call    near ptr _putch
   3388	0DE0  59			     pop     cx
   3389	0DE1			     @22@254:
   3390					;
   3391					;	      putstr(argv[i]);
   3392					;
   3393	0DE1  8B DE			     mov     bx,si
   3394	0DE3  B1 02			     mov     cl,2
   3395	0DE5  D3 E3			     shl     bx,cl
   3396	0DE7  FF 71 02			     push    word ptr [bx+di+2]
   3397	0DEA  FF 31			     push    word ptr [bx+di]
   3398	0DEC  E8 0000e			     call    near ptr _putstr
   3399	0DEF  59			     pop     cx
   3400	0DF0  59			     pop     cx
   3401	0DF1  46			     inc     si
   3402	0DF2			     @22@310:
   3403	0DF2  3B 76 04			     cmp     si,word ptr [bp+4]
   3404	0DF5  7C D7			     jl	     short @22@170
   3405	0DF7			     @22@338:
   3406					;
   3407					;	  }
   3408					;      }
   3409					;      if (control_n)
   3410					;
   3411	0DF7  83 7E FE 00		     cmp     word ptr [bp-2],0
   3412	0DFB  74 08			     je	     short @22@394
   3413					;
   3414					;	  putch('\n');
   3415					;
   3416	0DFD  B8 000A			     mov     ax,10
   3417	0E00  50			     push    ax
   3418	0E01  E8 0000e			     call    near ptr _putch
   3419	0E04  59			     pop     cx
   3420	0E05			     @22@394:
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 61
command.ASM



   3421					;
   3422					;      return 0;
   3423					;
   3424	0E05  33 C0			     xor     ax,ax
   3425	0E07  EB 00			     jmp     short @22@422
   3426	0E09			     @22@422:
   3427					;
   3428					;    }
   3429					;
   3430	0E09  5F			     pop     di
   3431	0E0A  5E			     pop     si
   3432	0E0B  8B E5			     mov     sp,bp
   3433	0E0D  5D			     pop     bp
   3434	0E0E  C3			     ret
   3435	0E0F			     _cmd_echo	     endp
   3436	0E0F			     _TEXT   ends
   3437	00AA			     _DATA   segment word public 'DATA'
   3438	00AA			     demo_linha	     label   word
   3439	00AA  FC			     db	     252
   3440	00AB  FF			     db	     255
   3441	00AC			     exitcode	     label   word
*Warning* command.ASM(3448) Reserved word used as symbol: EXITCODE
   3442	00AC  00			     db	     0
   3443	00AD  00			     db	     0
   3444	00AE			     _DATA   ends
   3445	0E0F			     _TEXT   segment byte public 'CODE'
   3446					;
   3447					;    void demo()
   3448					;
   3449					     assume  cs:_TEXT
   3450	0E0F			     demo    proc    near
   3451	0E0F  55			     push    bp
   3452	0E10  8B EC			     mov     bp,sp
   3453	0E12  83 EC 16			     sub     sp,22
   3454	0E15  56			     push    si
   3455	0E16  57			     push    di
   3456					;
   3457					;    {
   3458					;      extern int demo_linha;
   3459					;      extern int exitcode;
   3460					;      unsigned	i;
   3461					;      int ini = demo_linha;
   3462					;
   3463	0E17  8B 3E 00AAr		     mov     di,word ptr DGROUP:demo_linha
   3464					;
   3465					;      char str[20];
   3466					;      int ec =	exitcode;
   3467					;
   3468	0E1B  A1 00ACr			     mov     ax,word ptr DGROUP:exitcode
   3469	0E1E  89 46 FE			     mov     word ptr [bp-2],ax
   3470					;
   3471					;
   3472					;      putstrxy(65,ini+0,"⁄ƒƒ Thread ƒƒƒƒø");
   3473					;
   3474	0E21  1E			     push    ds
   3475	0E22  B8 095Dr			     mov     ax,offset DGROUP:s@+2217
   3476	0E25  50			     push    ax
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 62
command.ASM



   3477	0E26  57			     push    di
   3478	0E27  B8 0041			     mov     ax,65
   3479	0E2A  50			     push    ax
   3480	0E2B  E8 0000e			     call    near ptr _putstrxy
   3481	0E2E  83 C4 08			     add     sp,8
   3482					;
   3483					;      putstrxy(65,ini+1,"≥ PID	 =	 ≥");
   3484					;
   3485	0E31  1E			     push    ds
   3486	0E32  B8 096Er			     mov     ax,offset DGROUP:s@+2234
   3487	0E35  50			     push    ax
   3488	0E36  8B C7			     mov     ax,di
   3489	0E38  40			     inc     ax
   3490	0E39  50			     push    ax
   3491	0E3A  B8 0041			     mov     ax,65
   3492	0E3D  50			     push    ax
   3493	0E3E  E8 0000e			     call    near ptr _putstrxy
   3494	0E41  83 C4 08			     add     sp,8
   3495					;
   3496					;      putstrxy(65,ini+2,"≥ Execucao:	 ≥");
   3497					;
   3498	0E44  1E			     push    ds
   3499	0E45  B8 097Fr			     mov     ax,offset DGROUP:s@+2251
   3500	0E48  50			     push    ax
   3501	0E49  8B C7			     mov     ax,di
   3502	0E4B  05 0002			     add     ax,2
   3503	0E4E  50			     push    ax
   3504	0E4F  B8 0041			     mov     ax,65
   3505	0E52  50			     push    ax
   3506	0E53  E8 0000e			     call    near ptr _putstrxy
   3507	0E56  83 C4 08			     add     sp,8
   3508					;
   3509					;      putstrxy(65,ini+3,"≥		 ≥");
   3510					;
   3511	0E59  1E			     push    ds
   3512	0E5A  B8 0990r			     mov     ax,offset DGROUP:s@+2268
   3513	0E5D  50			     push    ax
   3514	0E5E  8B C7			     mov     ax,di
   3515	0E60  05 0003			     add     ax,3
   3516	0E63  50			     push    ax
   3517	0E64  B8 0041			     mov     ax,65
   3518	0E67  50			     push    ax
   3519	0E68  E8 0000e			     call    near ptr _putstrxy
   3520	0E6B  83 C4 08			     add     sp,8
   3521					;
   3522					;      putstrxy(65,ini+4,"¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ");
   3523					;
   3524	0E6E  1E			     push    ds
   3525	0E6F  B8 09A1r			     mov     ax,offset DGROUP:s@+2285
   3526	0E72  50			     push    ax
   3527	0E73  8B C7			     mov     ax,di
   3528	0E75  05 0004			     add     ax,4
   3529	0E78  50			     push    ax
   3530	0E79  B8 0041			     mov     ax,65
   3531	0E7C  50			     push    ax
   3532	0E7D  E8 0000e			     call    near ptr _putstrxy
   3533	0E80  83 C4 08			     add     sp,8
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 63
command.ASM



   3534					;
   3535					;
   3536					;      inttostr(str,getpid());
   3537					;
   3538	0E83  E8 0000e			     call    near ptr _getpid
   3539	0E86  50			     push    ax
   3540	0E87  16			     push    ss
   3541	0E88  8D 46 EA			     lea     ax,word ptr [bp-22]
   3542	0E8B  50			     push    ax
   3543	0E8C  E8 0000e			     call    near ptr _inttostr
   3544	0E8F  83 C4 06			     add     sp,6
   3545					;
   3546					;      putstrxy(74,ini+1,str);
   3547					;
   3548	0E92  16			     push    ss
   3549	0E93  8D 46 EA			     lea     ax,word ptr [bp-22]
   3550	0E96  50			     push    ax
   3551	0E97  8B C7			     mov     ax,di
   3552	0E99  40			     inc     ax
   3553	0E9A  50			     push    ax
   3554	0E9B  B8 004A			     mov     ax,74
   3555	0E9E  50			     push    ax
   3556	0E9F  E8 0000e			     call    near ptr _putstrxy
   3557	0EA2  83 C4 08			     add     sp,8
   3558					;
   3559					;
   3560					;      for (i=0;i<60000U;++i)  {
   3561					;
   3562	0EA5  33 F6			     xor     si,si
   3563	0EA7  EB 29			     jmp     short @23@114
   3564	0EA9			     @23@58:
   3565					;
   3566					;	   unsignedtostr(str,i,5,'0');
   3567					;
   3568	0EA9  B0 30			     mov     al,48
   3569	0EAB  50			     push    ax
   3570	0EAC  B8 0005			     mov     ax,5
   3571	0EAF  50			     push    ax
   3572	0EB0  56			     push    si
   3573	0EB1  16			     push    ss
   3574	0EB2  8D 46 EA			     lea     ax,word ptr [bp-22]
   3575	0EB5  50			     push    ax
   3576	0EB6  E8 0000e			     call    near ptr _unsignedtostr
   3577	0EB9  83 C4 0A			     add     sp,10
   3578					;
   3579					;	   putstrxy(70,ini+3,str);
   3580					;
   3581	0EBC  16			     push    ss
   3582	0EBD  8D 46 EA			     lea     ax,word ptr [bp-22]
   3583	0EC0  50			     push    ax
   3584	0EC1  8B C7			     mov     ax,di
   3585	0EC3  05 0003			     add     ax,3
   3586	0EC6  50			     push    ax
   3587	0EC7  B8 0046			     mov     ax,70
   3588	0ECA  50			     push    ax
   3589	0ECB  E8 0000e			     call    near ptr _putstrxy
   3590	0ECE  83 C4 08			     add     sp,8
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 64
command.ASM



   3591	0ED1  46			     inc     si
   3592	0ED2			     @23@114:
   3593	0ED2  81 FE EA60		     cmp     si,-5536
   3594	0ED6  72 D1			     jb	     short @23@58
   3595					;
   3596					;      }
   3597					;      for (i=0;i<60000U;++i)  {
   3598					;
   3599	0ED8  33 F6			     xor     si,si
   3600	0EDA  EB 29			     jmp     short @23@226
   3601	0EDC			     @23@170:
   3602					;
   3603					;	   unsignedtostr(str,i,5,'0');
   3604					;
   3605	0EDC  B0 30			     mov     al,48
   3606	0EDE  50			     push    ax
   3607	0EDF  B8 0005			     mov     ax,5
   3608	0EE2  50			     push    ax
   3609	0EE3  56			     push    si
   3610	0EE4  16			     push    ss
   3611	0EE5  8D 46 EA			     lea     ax,word ptr [bp-22]
   3612	0EE8  50			     push    ax
   3613	0EE9  E8 0000e			     call    near ptr _unsignedtostr
   3614	0EEC  83 C4 0A			     add     sp,10
   3615					;
   3616					;	   putstrxy(70,ini+3,str);
   3617					;
   3618	0EEF  16			     push    ss
   3619	0EF0  8D 46 EA			     lea     ax,word ptr [bp-22]
   3620	0EF3  50			     push    ax
   3621	0EF4  8B C7			     mov     ax,di
   3622	0EF6  05 0003			     add     ax,3
   3623	0EF9  50			     push    ax
   3624	0EFA  B8 0046			     mov     ax,70
   3625	0EFD  50			     push    ax
   3626	0EFE  E8 0000e			     call    near ptr _putstrxy
   3627	0F01  83 C4 08			     add     sp,8
   3628	0F04  46			     inc     si
   3629	0F05			     @23@226:
   3630	0F05  81 FE EA60		     cmp     si,-5536
   3631	0F09  72 D1			     jb	     short @23@170
   3632					;
   3633					;      }
   3634					;      for (i=0;i<60000U;++i)  {
   3635					;
   3636	0F0B  33 F6			     xor     si,si
   3637	0F0D  EB 29			     jmp     short @23@338
   3638	0F0F			     @23@282:
   3639					;
   3640					;	   unsignedtostr(str,i,5,'0');
   3641					;
   3642	0F0F  B0 30			     mov     al,48
   3643	0F11  50			     push    ax
   3644	0F12  B8 0005			     mov     ax,5
   3645	0F15  50			     push    ax
   3646	0F16  56			     push    si
   3647	0F17  16			     push    ss
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 65
command.ASM



   3648	0F18  8D 46 EA			     lea     ax,word ptr [bp-22]
   3649	0F1B  50			     push    ax
   3650	0F1C  E8 0000e			     call    near ptr _unsignedtostr
   3651	0F1F  83 C4 0A			     add     sp,10
   3652					;
   3653					;	   putstrxy(70,ini+3,str);
   3654					;
   3655	0F22  16			     push    ss
   3656	0F23  8D 46 EA			     lea     ax,word ptr [bp-22]
   3657	0F26  50			     push    ax
   3658	0F27  8B C7			     mov     ax,di
   3659	0F29  05 0003			     add     ax,3
   3660	0F2C  50			     push    ax
   3661	0F2D  B8 0046			     mov     ax,70
   3662	0F30  50			     push    ax
   3663	0F31  E8 0000e			     call    near ptr _putstrxy
   3664	0F34  83 C4 08			     add     sp,8
   3665	0F37  46			     inc     si
   3666	0F38			     @23@338:
   3667	0F38  81 FE EA60		     cmp     si,-5536
   3668	0F3C  72 D1			     jb	     short @23@282
   3669					;
   3670					;      }
   3671					;      for (i=0;i<60000U;++i)  {
   3672					;
   3673	0F3E  33 F6			     xor     si,si
   3674	0F40  EB 29			     jmp     short @23@450
   3675	0F42			     @23@394:
   3676					;
   3677					;	   unsignedtostr(str,i,5,'0');
   3678					;
   3679	0F42  B0 30			     mov     al,48
   3680	0F44  50			     push    ax
   3681	0F45  B8 0005			     mov     ax,5
   3682	0F48  50			     push    ax
   3683	0F49  56			     push    si
   3684	0F4A  16			     push    ss
   3685	0F4B  8D 46 EA			     lea     ax,word ptr [bp-22]
   3686	0F4E  50			     push    ax
   3687	0F4F  E8 0000e			     call    near ptr _unsignedtostr
   3688	0F52  83 C4 0A			     add     sp,10
   3689					;
   3690					;	   putstrxy(70,ini+3,str);
   3691					;
   3692	0F55  16			     push    ss
   3693	0F56  8D 46 EA			     lea     ax,word ptr [bp-22]
   3694	0F59  50			     push    ax
   3695	0F5A  8B C7			     mov     ax,di
   3696	0F5C  05 0003			     add     ax,3
   3697	0F5F  50			     push    ax
   3698	0F60  B8 0046			     mov     ax,70
   3699	0F63  50			     push    ax
   3700	0F64  E8 0000e			     call    near ptr _putstrxy
   3701	0F67  83 C4 08			     add     sp,8
   3702	0F6A  46			     inc     si
   3703	0F6B			     @23@450:
   3704	0F6B  81 FE EA60		     cmp     si,-5536
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 66
command.ASM



   3705	0F6F  72 D1			     jb	     short @23@394
   3706					;
   3707					;      }
   3708					;      for (i=0;i<60000U;++i)  {
   3709					;
   3710	0F71  33 F6			     xor     si,si
   3711	0F73  EB 29			     jmp     short @23@562
   3712	0F75			     @23@506:
   3713					;
   3714					;	   unsignedtostr(str,i,5,'0');
   3715					;
   3716	0F75  B0 30			     mov     al,48
   3717	0F77  50			     push    ax
   3718	0F78  B8 0005			     mov     ax,5
   3719	0F7B  50			     push    ax
   3720	0F7C  56			     push    si
   3721	0F7D  16			     push    ss
   3722	0F7E  8D 46 EA			     lea     ax,word ptr [bp-22]
   3723	0F81  50			     push    ax
   3724	0F82  E8 0000e			     call    near ptr _unsignedtostr
   3725	0F85  83 C4 0A			     add     sp,10
   3726					;
   3727					;	   putstrxy(70,ini+3,str);
   3728					;
   3729	0F88  16			     push    ss
   3730	0F89  8D 46 EA			     lea     ax,word ptr [bp-22]
   3731	0F8C  50			     push    ax
   3732	0F8D  8B C7			     mov     ax,di
   3733	0F8F  05 0003			     add     ax,3
   3734	0F92  50			     push    ax
   3735	0F93  B8 0046			     mov     ax,70
   3736	0F96  50			     push    ax
   3737	0F97  E8 0000e			     call    near ptr _putstrxy
   3738	0F9A  83 C4 08			     add     sp,8
   3739	0F9D  46			     inc     si
   3740	0F9E			     @23@562:
   3741	0F9E  81 FE EA60		     cmp     si,-5536
   3742	0FA2  72 D1			     jb	     short @23@506
   3743					;
   3744					;      }
   3745					;      for (i=0;i<60000U;++i)  {
   3746					;
   3747	0FA4  33 F6			     xor     si,si
   3748	0FA6  EB 29			     jmp     short @23@674
   3749	0FA8			     @23@618:
   3750					;
   3751					;	   unsignedtostr(str,i,5,'0');
   3752					;
   3753	0FA8  B0 30			     mov     al,48
   3754	0FAA  50			     push    ax
   3755	0FAB  B8 0005			     mov     ax,5
   3756	0FAE  50			     push    ax
   3757	0FAF  56			     push    si
   3758	0FB0  16			     push    ss
   3759	0FB1  8D 46 EA			     lea     ax,word ptr [bp-22]
   3760	0FB4  50			     push    ax
   3761	0FB5  E8 0000e			     call    near ptr _unsignedtostr
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 67
command.ASM



   3762	0FB8  83 C4 0A			     add     sp,10
   3763					;
   3764					;	   putstrxy(70,ini+3,str);
   3765					;
   3766	0FBB  16			     push    ss
   3767	0FBC  8D 46 EA			     lea     ax,word ptr [bp-22]
   3768	0FBF  50			     push    ax
   3769	0FC0  8B C7			     mov     ax,di
   3770	0FC2  05 0003			     add     ax,3
   3771	0FC5  50			     push    ax
   3772	0FC6  B8 0046			     mov     ax,70
   3773	0FC9  50			     push    ax
   3774	0FCA  E8 0000e			     call    near ptr _putstrxy
   3775	0FCD  83 C4 08			     add     sp,8
   3776	0FD0  46			     inc     si
   3777	0FD1			     @23@674:
   3778	0FD1  81 FE EA60		     cmp     si,-5536
   3779	0FD5  72 D1			     jb	     short @23@618
   3780					;
   3781					;      }
   3782					;      exit(ec);
   3783					;
   3784	0FD7  FF 76 FE			     push    word ptr [bp-2]
   3785	0FDA  E8 0000e			     call    near ptr _exit
   3786	0FDD  59			     pop     cx
   3787					;
   3788					;    }
   3789					;
   3790	0FDE  5F			     pop     di
   3791	0FDF  5E			     pop     si
   3792	0FE0  8B E5			     mov     sp,bp
   3793	0FE2  5D			     pop     bp
   3794	0FE3  C3			     ret
   3795	0FE4			     demo    endp
   3796					;
   3797					;    int cmd_demo(int argc, char far *argv[])
   3798					;
   3799					     assume  cs:_TEXT
   3800	0FE4			     _cmd_demo	     proc    near
   3801	0FE4  55			     push    bp
   3802	0FE5  8B EC			     mov     bp,sp
   3803					;
   3804					;    {
   3805					;	     extern int	demo_linha;
   3806					;
   3807					;	     if	     (argc != 2)  {
   3808					;
   3809	0FE7  83 7E 04 02		     cmp     word ptr [bp+4],2
   3810	0FEB  74 0F			     je	     short @24@142
   3811					;
   3812					;		     putstr("Erro em demo: numero invalido de argumentos!\n");
   3813					;
   3814	0FED  1E			     push    ds
   3815	0FEE  B8 09B2r			     mov     ax,offset DGROUP:s@+2302
   3816	0FF1			     @24@86:
   3817	0FF1  50			     push    ax
   3818	0FF2  E8 0000e			     call    near ptr _putstr
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 68
command.ASM



   3819	0FF5  59			     pop     cx
   3820	0FF6  59			     pop     cx
   3821					;
   3822					;		     return 1;
   3823					;
   3824	0FF7  B8 0001			     mov     ax,1
   3825	0FFA			     @24@114:
   3826	0FFA  EB 3A			     jmp     short @24@282
   3827	0FFC			     @24@142:
   3828					;
   3829					;	     }
   3830					;	     demo_linha	+= 5;
   3831					;
   3832	0FFC  83 06 00AAr 05		     add     word ptr DGROUP:demo_linha,5
   3833					;
   3834					;	     if	     (demo_linha >21)
   3835					;
   3836	1001  83 3E 00AAr 15		     cmp     word ptr DGROUP:demo_linha,21
   3837	1006  7E 06			     jle     short @24@198
   3838					;
   3839					;		     demo_linha	= 1;
   3840					;
   3841	1008  C7 06 00AAr 0001		     mov     word ptr DGROUP:demo_linha,1
   3842	100E			     @24@198:
   3843					;
   3844					;	     exitcode =	atoi(argv[1]);
   3845					;
   3846	100E  8B 5E 06			     mov     bx,word ptr [bp+6]
   3847	1011  FF 77 06			     push    word ptr [bx+6]
   3848	1014  FF 77 04			     push    word ptr [bx+4]
   3849	1017  E8 0000e			     call    near ptr _atoi
   3850	101A  59			     pop     cx
   3851	101B  59			     pop     cx
   3852	101C  A3 00ACr			     mov     word ptr DGROUP:exitcode,ax
   3853					;
   3854					;	     if	     (fork(demo)==miniSO_ERROR)	 {
   3855					;
   3856	101F  B8 0E0Fr			     mov     ax,offset demo
   3857	1022  50			     push    ax
   3858	1023  E8 0000e			     call    near ptr _fork
   3859	1026  59			     pop     cx
   3860	1027  3D FFFF			     cmp     ax,-1
   3861	102A  75 06			     jne     short @24@254
   3862					;
   3863					;		     putstr("Erro em demo: fork() nao conseguiu	criar thread!\n");
   3864					;
   3865	102C  1E			     push    ds
   3866	102D  B8 09E0r			     mov     ax,offset DGROUP:s@+2348
   3867	1030  EB BF			     jmp     short @24@86
   3868	1032			     @24@254:
   3869					;
   3870					;		     return 1;
   3871					;	     }
   3872					;	     return 0;
   3873					;
   3874	1032  33 C0			     xor     ax,ax
   3875	1034  EB C4			     jmp     short @24@114
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 69
command.ASM



   3876	1036			     @24@282:
   3877					;
   3878					;    }
   3879					;
   3880	1036  5D			     pop     bp
   3881	1037  C3			     ret
   3882	1038			     _cmd_demo	     endp
   3883					;
   3884					;    int cmd_waitpid(int argc, char far	*argv[])
   3885					;
   3886					     assume  cs:_TEXT
   3887	1038			     _cmd_waitpid    proc    near
   3888	1038  55			     push    bp
   3889	1039  8B EC			     mov     bp,sp
   3890	103B  83 EC 16			     sub     sp,22
   3891	103E  56			     push    si
   3892					;
   3893					;    {
   3894					;	     int     status;
   3895					;	     pid_t   pid;
   3896					;	     char    str[20];
   3897					;
   3898					;	     if	     (argc != 2)  {
   3899					;
   3900	103F  83 7E 04 02		     cmp     word ptr [bp+4],2
   3901	1043  74 0F			     je	     short @25@114
   3902					;
   3903					;		     putstr("Erro em waitpid: numero invalido de argumentos!\n");
   3904					;
   3905	1045  1E			     push    ds
   3906	1046  B8 0A12r			     mov     ax,offset DGROUP:s@+2398
   3907	1049  50			     push    ax
   3908	104A  E8 0000e			     call    near ptr _putstr
   3909	104D  59			     pop     cx
   3910	104E  59			     pop     cx
   3911					;
   3912					;		     return 1;
   3913					;
   3914	104F  B8 0001			     mov     ax,1
   3915	1052			     @25@86:
   3916	1052  EB 6E			     jmp     short @25@142
   3917	1054			     @25@114:
   3918					;
   3919					;	     }
   3920					;	     pid = atoi(argv[1]);
   3921					;
   3922	1054  8B 5E 06			     mov     bx,word ptr [bp+6]
   3923	1057  FF 77 06			     push    word ptr [bx+6]
   3924	105A  FF 77 04			     push    word ptr [bx+4]
   3925	105D  E8 0000e			     call    near ptr _atoi
   3926	1060  59			     pop     cx
   3927	1061  59			     pop     cx
   3928	1062  8B F0			     mov     si,ax
   3929					;
   3930					;	     pid = waitpid(pid,&status);
   3931					;
   3932	1064  16			     push    ss
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 70
command.ASM



   3933	1065  8D 46 FE			     lea     ax,word ptr [bp-2]
   3934	1068  50			     push    ax
   3935	1069  56			     push    si
   3936	106A  E8 0000e			     call    near ptr _waitpid
   3937	106D  83 C4 06			     add     sp,6
   3938	1070  8B F0			     mov     si,ax
   3939					;
   3940					;	     putstr("Processo ");
   3941					;
   3942	1072  1E			     push    ds
   3943	1073  B8 0A43r			     mov     ax,offset DGROUP:s@+2447
   3944	1076  50			     push    ax
   3945	1077  E8 0000e			     call    near ptr _putstr
   3946	107A  59			     pop     cx
   3947	107B  59			     pop     cx
   3948					;
   3949					;	     inttostr(str,pid);
   3950					;
   3951	107C  56			     push    si
   3952	107D  16			     push    ss
   3953	107E  8D 46 EA			     lea     ax,word ptr [bp-22]
   3954	1081  50			     push    ax
   3955	1082  E8 0000e			     call    near ptr _inttostr
   3956	1085  83 C4 06			     add     sp,6
   3957					;
   3958					;	     putstr(str);
   3959					;
   3960	1088  16			     push    ss
   3961	1089  8D 46 EA			     lea     ax,word ptr [bp-22]
   3962	108C  50			     push    ax
   3963	108D  E8 0000e			     call    near ptr _putstr
   3964	1090  59			     pop     cx
   3965	1091  59			     pop     cx
   3966					;
   3967					;	     putstr(" encerrado	com codigo de fim ");
   3968					;
   3969	1092  1E			     push    ds
   3970	1093  B8 0A4Dr			     mov     ax,offset DGROUP:s@+2457
   3971	1096  50			     push    ax
   3972	1097  E8 0000e			     call    near ptr _putstr
   3973	109A  59			     pop     cx
   3974	109B  59			     pop     cx
   3975					;
   3976					;	     inttostr(str,status);
   3977					;
   3978	109C  FF 76 FE			     push    word ptr [bp-2]
   3979	109F  16			     push    ss
   3980	10A0  8D 46 EA			     lea     ax,word ptr [bp-22]
   3981	10A3  50			     push    ax
   3982	10A4  E8 0000e			     call    near ptr _inttostr
   3983	10A7  83 C4 06			     add     sp,6
   3984					;
   3985					;	     putstr(str);
   3986					;
   3987	10AA  16			     push    ss
   3988	10AB  8D 46 EA			     lea     ax,word ptr [bp-22]
   3989	10AE  50			     push    ax
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 71
command.ASM



   3990	10AF  E8 0000e			     call    near ptr _putstr
   3991	10B2  59			     pop     cx
   3992	10B3  59			     pop     cx
   3993					;
   3994					;	     putstr("!\n");
   3995					;
   3996	10B4  1E			     push    ds
   3997	10B5  B8 0A6Br			     mov     ax,offset DGROUP:s@+2487
   3998	10B8  50			     push    ax
   3999	10B9  E8 0000e			     call    near ptr _putstr
   4000	10BC  59			     pop     cx
   4001	10BD  59			     pop     cx
   4002					;
   4003					;	     return 0;
   4004					;
   4005	10BE  33 C0			     xor     ax,ax
   4006	10C0  EB 90			     jmp     short @25@86
   4007	10C2			     @25@142:
   4008					;
   4009					;    }
   4010					;
   4011	10C2  5E			     pop     si
   4012	10C3  8B E5			     mov     sp,bp
   4013	10C5  5D			     pop     bp
   4014	10C6  C3			     ret
   4015	10C7			     _cmd_waitpid    endp
   4016					;
   4017					;    int cmd_wait(int argc, char far *argv[])
   4018					;
   4019					     assume  cs:_TEXT
   4020	10C7			     _cmd_wait	     proc    near
   4021	10C7  55			     push    bp
   4022	10C8  8B EC			     mov     bp,sp
   4023	10CA  83 EC 18			     sub     sp,24
   4024	10CD  56			     push    si
   4025	10CE  57			     push    di
   4026	10CF  8B 76 04			     mov     si,word ptr [bp+4]
   4027	10D2  8B 7E 06			     mov     di,word ptr [bp+6]
   4028					;
   4029					;    {
   4030					;	     int     status=123;
   4031					;
   4032	10D5  C7 46 FE 007B		     mov     word ptr [bp-2],123
   4033					;
   4034					;	     pid_t   pid;
   4035					;	     char    str[20];
   4036					;
   4037					;	     argc=argc;
   4038					;
   4039					;
   4040					;	     argv=argv;
   4041					;
   4042					;
   4043					;	     pid = wait(&status);
   4044					;
   4045	10DA  16			     push    ss
   4046	10DB  8D 46 FE			     lea     ax,word ptr [bp-2]
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 72
command.ASM



   4047	10DE  50			     push    ax
   4048	10DF  E8 0000e			     call    near ptr _wait
   4049	10E2  59			     pop     cx
   4050	10E3  59			     pop     cx
   4051	10E4  89 46 FC			     mov     word ptr [bp-4],ax
   4052					;
   4053					;	     putstr("Processo ");
   4054					;
   4055	10E7  1E			     push    ds
   4056	10E8  B8 0A6Er			     mov     ax,offset DGROUP:s@+2490
   4057	10EB  50			     push    ax
   4058	10EC  E8 0000e			     call    near ptr _putstr
   4059	10EF  59			     pop     cx
   4060	10F0  59			     pop     cx
   4061					;
   4062					;	     inttostr(str,pid);
   4063					;
   4064	10F1  FF 76 FC			     push    word ptr [bp-4]
   4065	10F4  16			     push    ss
   4066	10F5  8D 46 E8			     lea     ax,word ptr [bp-24]
   4067	10F8  50			     push    ax
   4068	10F9  E8 0000e			     call    near ptr _inttostr
   4069	10FC  83 C4 06			     add     sp,6
   4070					;
   4071					;	     putstr(str);
   4072					;
   4073	10FF  16			     push    ss
   4074	1100  8D 46 E8			     lea     ax,word ptr [bp-24]
   4075	1103  50			     push    ax
   4076	1104  E8 0000e			     call    near ptr _putstr
   4077	1107  59			     pop     cx
   4078	1108  59			     pop     cx
   4079					;
   4080					;	     putstr(" encerrado	com codigo de fim ");
   4081					;
   4082	1109  1E			     push    ds
   4083	110A  B8 0A78r			     mov     ax,offset DGROUP:s@+2500
   4084	110D  50			     push    ax
   4085	110E  E8 0000e			     call    near ptr _putstr
   4086	1111  59			     pop     cx
   4087	1112  59			     pop     cx
   4088					;
   4089					;	     inttostr(str,status);
   4090					;
   4091	1113  FF 76 FE			     push    word ptr [bp-2]
   4092	1116  16			     push    ss
   4093	1117  8D 46 E8			     lea     ax,word ptr [bp-24]
   4094	111A  50			     push    ax
   4095	111B  E8 0000e			     call    near ptr _inttostr
   4096	111E  83 C4 06			     add     sp,6
   4097					;
   4098					;	     putstr(str);
   4099					;
   4100	1121  16			     push    ss
   4101	1122  8D 46 E8			     lea     ax,word ptr [bp-24]
   4102	1125  50			     push    ax
   4103	1126  E8 0000e			     call    near ptr _putstr
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 73
command.ASM



   4104	1129  59			     pop     cx
   4105	112A  59			     pop     cx
   4106					;
   4107					;	     putstr("!\n");
   4108					;
   4109	112B  1E			     push    ds
   4110	112C  B8 0A96r			     mov     ax,offset DGROUP:s@+2530
   4111	112F  50			     push    ax
   4112	1130  E8 0000e			     call    near ptr _putstr
   4113	1133  59			     pop     cx
   4114	1134  59			     pop     cx
   4115					;
   4116					;	     return 0;
   4117					;
   4118	1135  33 C0			     xor     ax,ax
   4119	1137  EB 00			     jmp     short @26@58
   4120	1139			     @26@58:
   4121					;
   4122					;    }
   4123					;
   4124	1139  5F			     pop     di
   4125	113A  5E			     pop     si
   4126	113B  8B E5			     mov     sp,bp
   4127	113D  5D			     pop     bp
   4128	113E  C3			     ret
   4129	113F			     _cmd_wait	     endp
   4130					;
   4131					;    int cmd_semls(int argc, char far *argv[])
   4132					;
   4133					     assume  cs:_TEXT
   4134	113F			     _cmd_semls	     proc    near
   4135	113F  55			     push    bp
   4136	1140  8B EC			     mov     bp,sp
   4137	1142  83 EC 14			     sub     sp,20
   4138	1145  56			     push    si
   4139	1146  57			     push    di
   4140					;
   4141					;    {
   4142					;	     int i,n=0;
   4143					;
   4144	1147  33 FF			     xor     di,di
   4145					;
   4146					;	     char str[20];
   4147					;	     extern miniSO_SEM miniSO_sem[miniSO_MAXSEMAPHORES];
   4148					;
   4149					;	     argc=argc;
   4150					;
   4151	1149  8B 46 04			     mov     ax,word ptr [bp+4]
   4152	114C  89 46 04			     mov     word ptr [bp+4],ax
   4153					;
   4154					;	     argv=argv;
   4155					;
   4156	114F  8B 46 06			     mov     ax,word ptr [bp+6]
   4157	1152  89 46 06			     mov     word ptr [bp+6],ax
   4158					;
   4159					;	     putstr("Semaphores:\n");
   4160					;
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 74
command.ASM



   4161	1155  1E			     push    ds
   4162	1156  B8 0A99r			     mov     ax,offset DGROUP:s@+2533
   4163	1159  50			     push    ax
   4164	115A  E8 0000e			     call    near ptr _putstr
   4165	115D  59			     pop     cx
   4166	115E  59			     pop     cx
   4167					;
   4168					;	     for     (i=0;i<miniSO_MAXSEMAPHORES;++i)
   4169					;
   4170	115F  33 F6			     xor     si,si
   4171	1161  E9 0095			     jmp     @27@142
   4172	1164			     @27@58:
   4173					;
   4174					;		     if	     (miniSO_sem[i].status!=FREE) {
   4175					;
   4176	1164  8B DE			     mov     bx,si
   4177	1166  B1 03			     mov     cl,3
   4178	1168  D3 E3			     shl     bx,cl
   4179	116A  83 BF 0000e FF		     cmp     word ptr DGROUP:_miniSO_sem[bx],-1
   4180	116F  75 03			     jne     @@6
   4181	1171  E9 0084			     jmp     @27@114
   4182	1174			     @@6:
   4183					;
   4184					;			     putstr("- id=");
   4185					;
   4186	1174  1E			     push    ds
   4187	1175  B8 0AA6r			     mov     ax,offset DGROUP:s@+2546
   4188	1178  50			     push    ax
   4189	1179  E8 0000e			     call    near ptr _putstr
   4190	117C  59			     pop     cx
   4191	117D  59			     pop     cx
   4192					;
   4193					;			     inttostr(str,miniSO_sem[i].semid);
   4194					;
   4195	117E  8B DE			     mov     bx,si
   4196	1180  B1 03			     mov     cl,3
   4197	1182  D3 E3			     shl     bx,cl
   4198	1184  FF B7 0002e		     push    word ptr DGROUP:_miniSO_sem[bx+2]
   4199	1188  16			     push    ss
   4200	1189  8D 46 EC			     lea     ax,word ptr [bp-20]
   4201	118C  50			     push    ax
   4202	118D  E8 0000e			     call    near ptr _inttostr
   4203	1190  83 C4 06			     add     sp,6
   4204					;
   4205					;			     putstr(str);
   4206					;
   4207	1193  16			     push    ss
   4208	1194  8D 46 EC			     lea     ax,word ptr [bp-20]
   4209	1197  50			     push    ax
   4210	1198  E8 0000e			     call    near ptr _putstr
   4211	119B  59			     pop     cx
   4212	119C  59			     pop     cx
   4213					;
   4214					;			     putstr(" value=");
   4215					;
   4216	119D  1E			     push    ds
   4217	119E  B8 0AACr			     mov     ax,offset DGROUP:s@+2552
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 75
command.ASM



   4218	11A1  50			     push    ax
   4219	11A2  E8 0000e			     call    near ptr _putstr
   4220	11A5  59			     pop     cx
   4221	11A6  59			     pop     cx
   4222					;
   4223					;			     inttostr(str,miniSO_sem[i].value);
   4224					;
   4225	11A7  8B DE			     mov     bx,si
   4226	11A9  B1 03			     mov     cl,3
   4227	11AB  D3 E3			     shl     bx,cl
   4228	11AD  FF B7 0004e		     push    word ptr DGROUP:_miniSO_sem[bx+4]
   4229	11B1  16			     push    ss
   4230	11B2  8D 46 EC			     lea     ax,word ptr [bp-20]
   4231	11B5  50			     push    ax
   4232	11B6  E8 0000e			     call    near ptr _inttostr
   4233	11B9  83 C4 06			     add     sp,6
   4234					;
   4235					;			     putstr(str);
   4236					;
   4237	11BC  16			     push    ss
   4238	11BD  8D 46 EC			     lea     ax,word ptr [bp-20]
   4239	11C0  50			     push    ax
   4240	11C1  E8 0000e			     call    near ptr _putstr
   4241	11C4  59			     pop     cx
   4242	11C5  59			     pop     cx
   4243					;
   4244					;			     putstr(" queue=");
   4245					;
   4246	11C6  1E			     push    ds
   4247	11C7  B8 0AB4r			     mov     ax,offset DGROUP:s@+2560
   4248	11CA  50			     push    ax
   4249	11CB  E8 0000e			     call    near ptr _putstr
   4250	11CE  59			     pop     cx
   4251	11CF  59			     pop     cx
   4252					;
   4253					;			     inttostr(str,miniSO_sem[i].queue);
   4254					;
   4255	11D0  8B DE			     mov     bx,si
   4256	11D2  B1 03			     mov     cl,3
   4257	11D4  D3 E3			     shl     bx,cl
   4258	11D6  FF B7 0006e		     push    word ptr DGROUP:_miniSO_sem[bx+6]
   4259	11DA  16			     push    ss
   4260	11DB  8D 46 EC			     lea     ax,word ptr [bp-20]
   4261	11DE  50			     push    ax
   4262	11DF  E8 0000e			     call    near ptr _inttostr
   4263	11E2  83 C4 06			     add     sp,6
   4264					;
   4265					;			     putstr(str);
   4266					;
   4267	11E5  16			     push    ss
   4268	11E6  8D 46 EC			     lea     ax,word ptr [bp-20]
   4269	11E9  50			     push    ax
   4270	11EA  E8 0000e			     call    near ptr _putstr
   4271	11ED  59			     pop     cx
   4272	11EE  59			     pop     cx
   4273					;
   4274					;			     putch('\n');
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 76
command.ASM



   4275					;
   4276	11EF  B8 000A			     mov     ax,10
   4277	11F2  50			     push    ax
   4278	11F3  E8 0000e			     call    near ptr _putch
   4279	11F6  59			     pop     cx
   4280					;
   4281					;			     ++n;
   4282					;
   4283	11F7  47			     inc     di
   4284	11F8			     @27@114:
   4285	11F8  46			     inc     si
   4286	11F9			     @27@142:
   4287	11F9  83 FE 0A			     cmp     si,10
   4288	11FC  7D 03			     jge     @@7
   4289	11FE  E9 FF63			     jmp     @27@58
   4290	1201			     @@7:
   4291					;
   4292					;		     }
   4293					;	     putstr("TOTAL=");
   4294					;
   4295	1201  1E			     push    ds
   4296	1202  B8 0ABCr			     mov     ax,offset DGROUP:s@+2568
   4297	1205  50			     push    ax
   4298	1206  E8 0000e			     call    near ptr _putstr
   4299	1209  59			     pop     cx
   4300	120A  59			     pop     cx
   4301					;
   4302					;	     inttostr(str,n);
   4303					;
   4304	120B  57			     push    di
   4305	120C  16			     push    ss
   4306	120D  8D 46 EC			     lea     ax,word ptr [bp-20]
   4307	1210  50			     push    ax
   4308	1211  E8 0000e			     call    near ptr _inttostr
   4309	1214  83 C4 06			     add     sp,6
   4310					;
   4311					;	     putstr(str);
   4312					;
   4313	1217  16			     push    ss
   4314	1218  8D 46 EC			     lea     ax,word ptr [bp-20]
   4315	121B  50			     push    ax
   4316	121C  E8 0000e			     call    near ptr _putstr
   4317	121F  59			     pop     cx
   4318	1220  59			     pop     cx
   4319					;
   4320					;	     putstr("\n\n");
   4321					;
   4322	1221  1E			     push    ds
   4323	1222  B8 0AC3r			     mov     ax,offset DGROUP:s@+2575
   4324	1225  50			     push    ax
   4325	1226  E8 0000e			     call    near ptr _putstr
   4326	1229  59			     pop     cx
   4327	122A  59			     pop     cx
   4328					;
   4329					;	     return 0;
   4330					;
   4331	122B  33 C0			     xor     ax,ax
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 77
command.ASM



   4332	122D  EB 00			     jmp     short @27@198
   4333	122F			     @27@198:
   4334					;
   4335					;    }
   4336					;
   4337	122F  5F			     pop     di
   4338	1230  5E			     pop     si
   4339	1231  8B E5			     mov     sp,bp
   4340	1233  5D			     pop     bp
   4341	1234  C3			     ret
   4342	1235			     _cmd_semls	     endp
   4343					;
   4344					;    int cmd_semcreate(int argc, char far *argv[])
   4345					;
   4346					     assume  cs:_TEXT
   4347	1235			     _cmd_semcreate  proc    near
   4348	1235  55			     push    bp
   4349	1236  8B EC			     mov     bp,sp
   4350	1238  83 EC 14			     sub     sp,20
   4351	123B  56			     push    si
   4352	123C  57			     push    di
   4353					;
   4354					;    {
   4355					;	     int     res,value;
   4356					;	     semid_t semid;
   4357					;	     char    str[20];
   4358					;
   4359					;	     if	     (argc != 2)     {
   4360					;
   4361	123D  83 7E 04 02		     cmp     word ptr [bp+4],2
   4362	1241  74 0F			     je	     short @28@142
   4363					;
   4364					;		     putstr("Erro em semcreate:	numero invalido	de argumentos!\n");
   4365					;
   4366	1243  1E			     push    ds
   4367	1244  B8 0AC6r			     mov     ax,offset DGROUP:s@+2578
   4368	1247  50			     push    ax
   4369	1248  E8 0000e			     call    near ptr _putstr
   4370	124B  59			     pop     cx
   4371	124C  59			     pop     cx
   4372					;
   4373					;		     return 1;
   4374					;
   4375	124D			     @28@86:
   4376	124D  B8 0001			     mov     ax,1
   4377	1250			     @28@114:
   4378	1250  EB 6C			     jmp     short @28@226
   4379	1252			     @28@142:
   4380					;
   4381					;	     }
   4382					;	     value = atoi(argv[1]);
   4383					;
   4384	1252  8B 5E 06			     mov     bx,word ptr [bp+6]
   4385	1255  FF 77 06			     push    word ptr [bx+6]
   4386	1258  FF 77 04			     push    word ptr [bx+4]
   4387	125B  E8 0000e			     call    near ptr _atoi
   4388	125E  59			     pop     cx
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 78
command.ASM



   4389	125F  59			     pop     cx
   4390	1260  8B F0			     mov     si,ax
   4391					;
   4392					;	     semid = semcreate(value);
   4393					;
   4394	1262  56			     push    si
   4395	1263  E8 0000e			     call    near ptr _semcreate
   4396	1266  59			     pop     cx
   4397	1267  8B F8			     mov     di,ax
   4398					;
   4399					;	     if	     (semid==miniSO_ERROR)
   4400					;
   4401	1269  83 FF FF			     cmp     di,-1
   4402	126C  75 02			     jne     short @28@198
   4403	126E  EB DD			     jmp     short @28@86
   4404	1270			     @28@198:
   4405					;
   4406					;		     return 1;
   4407					;	     putstr("Semaforo id=");
   4408					;
   4409	1270  1E			     push    ds
   4410	1271  B8 0AF9r			     mov     ax,offset DGROUP:s@+2629
   4411	1274  50			     push    ax
   4412	1275  E8 0000e			     call    near ptr _putstr
   4413	1278  59			     pop     cx
   4414	1279  59			     pop     cx
   4415					;
   4416					;	     inttostr(str,semid);
   4417					;
   4418	127A  57			     push    di
   4419	127B  16			     push    ss
   4420	127C  8D 46 EC			     lea     ax,word ptr [bp-20]
   4421	127F  50			     push    ax
   4422	1280  E8 0000e			     call    near ptr _inttostr
   4423	1283  83 C4 06			     add     sp,6
   4424					;
   4425					;	     putstr(str);
   4426					;
   4427	1286  16			     push    ss
   4428	1287  8D 46 EC			     lea     ax,word ptr [bp-20]
   4429	128A  50			     push    ax
   4430	128B  E8 0000e			     call    near ptr _putstr
   4431	128E  59			     pop     cx
   4432	128F  59			     pop     cx
   4433					;
   4434					;	     putstr(" criado (value=");
   4435					;
   4436	1290  1E			     push    ds
   4437	1291  B8 0B06r			     mov     ax,offset DGROUP:s@+2642
   4438	1294  50			     push    ax
   4439	1295  E8 0000e			     call    near ptr _putstr
   4440	1298  59			     pop     cx
   4441	1299  59			     pop     cx
   4442					;
   4443					;	     inttostr(str,value);
   4444					;
   4445	129A  56			     push    si
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 79
command.ASM



   4446	129B  16			     push    ss
   4447	129C  8D 46 EC			     lea     ax,word ptr [bp-20]
   4448	129F  50			     push    ax
   4449	12A0  E8 0000e			     call    near ptr _inttostr
   4450	12A3  83 C4 06			     add     sp,6
   4451					;
   4452					;	     putstr(str);
   4453					;
   4454	12A6  16			     push    ss
   4455	12A7  8D 46 EC			     lea     ax,word ptr [bp-20]
   4456	12AA  50			     push    ax
   4457	12AB  E8 0000e			     call    near ptr _putstr
   4458	12AE  59			     pop     cx
   4459	12AF  59			     pop     cx
   4460					;
   4461					;	     putstr(")\n");
   4462					;
   4463	12B0  1E			     push    ds
   4464	12B1  B8 0B16r			     mov     ax,offset DGROUP:s@+2658
   4465	12B4  50			     push    ax
   4466	12B5  E8 0000e			     call    near ptr _putstr
   4467	12B8  59			     pop     cx
   4468	12B9  59			     pop     cx
   4469					;
   4470					;	     return 0;
   4471					;
   4472	12BA  33 C0			     xor     ax,ax
   4473	12BC  EB 92			     jmp     short @28@114
   4474	12BE			     @28@226:
   4475					;
   4476					;    }
   4477					;
   4478	12BE  5F			     pop     di
   4479	12BF  5E			     pop     si
   4480	12C0  8B E5			     mov     sp,bp
   4481	12C2  5D			     pop     bp
   4482	12C3  C3			     ret
   4483	12C4			     _cmd_semcreate  endp
   4484					;
   4485					;    void sem_aplic()
   4486					;
   4487					     assume  cs:_TEXT
   4488	12C4			     _sem_aplic	     proc    near
   4489	12C4  55			     push    bp
   4490	12C5  8B EC			     mov     bp,sp
   4491	12C7  83 EC 14			     sub     sp,20
   4492	12CA  56			     push    si
   4493	12CB  57			     push    di
   4494					;
   4495					;    {
   4496					;	     extern int	demo_linha;
   4497					;	     extern semid_t semid;
   4498					;	     unsigned i;
   4499					;	     int ini = demo_linha;
   4500					;
   4501	12CC  8B 3E 00AAr		     mov     di,word ptr DGROUP:demo_linha
   4502					;
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 80
command.ASM



   4503					;	     char str[20];
   4504					;
   4505					;	     putstrxy(65,ini+0,"⁄ƒƒ Thread ƒƒƒƒø");
   4506					;
   4507	12D0  1E			     push    ds
   4508	12D1  B8 0B19r			     mov     ax,offset DGROUP:s@+2661
   4509	12D4  50			     push    ax
   4510	12D5  57			     push    di
   4511	12D6  B8 0041			     mov     ax,65
   4512	12D9  50			     push    ax
   4513	12DA  E8 0000e			     call    near ptr _putstrxy
   4514	12DD  83 C4 08			     add     sp,8
   4515					;
   4516					;	     putstrxy(65,ini+1,"≥ PID  =       ≥");
   4517					;
   4518	12E0  1E			     push    ds
   4519	12E1  B8 0B2Ar			     mov     ax,offset DGROUP:s@+2678
   4520	12E4  50			     push    ax
   4521	12E5  8B C7			     mov     ax,di
   4522	12E7  40			     inc     ax
   4523	12E8  50			     push    ax
   4524	12E9  B8 0041			     mov     ax,65
   4525	12EC  50			     push    ax
   4526	12ED  E8 0000e			     call    near ptr _putstrxy
   4527	12F0  83 C4 08			     add     sp,8
   4528					;
   4529					;	     putstrxy(65,ini+2,"≥ Execucao:    ≥");
   4530					;
   4531	12F3  1E			     push    ds
   4532	12F4  B8 0B3Br			     mov     ax,offset DGROUP:s@+2695
   4533	12F7  50			     push    ax
   4534	12F8  8B C7			     mov     ax,di
   4535	12FA  05 0002			     add     ax,2
   4536	12FD  50			     push    ax
   4537	12FE  B8 0041			     mov     ax,65
   4538	1301  50			     push    ax
   4539	1302  E8 0000e			     call    near ptr _putstrxy
   4540	1305  83 C4 08			     add     sp,8
   4541					;
   4542					;	     putstrxy(65,ini+3,"≥	       ≥");
   4543					;
   4544	1308  1E			     push    ds
   4545	1309  B8 0B4Cr			     mov     ax,offset DGROUP:s@+2712
   4546	130C  50			     push    ax
   4547	130D  8B C7			     mov     ax,di
   4548	130F  05 0003			     add     ax,3
   4549	1312  50			     push    ax
   4550	1313  B8 0041			     mov     ax,65
   4551	1316  50			     push    ax
   4552	1317  E8 0000e			     call    near ptr _putstrxy
   4553	131A  83 C4 08			     add     sp,8
   4554					;
   4555					;	     putstrxy(65,ini+4,"¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ");
   4556					;
   4557	131D  1E			     push    ds
   4558	131E  B8 0B5Dr			     mov     ax,offset DGROUP:s@+2729
   4559	1321  50			     push    ax
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 81
command.ASM



   4560	1322  8B C7			     mov     ax,di
   4561	1324  05 0004			     add     ax,4
   4562	1327  50			     push    ax
   4563	1328  B8 0041			     mov     ax,65
   4564	132B  50			     push    ax
   4565	132C  E8 0000e			     call    near ptr _putstrxy
   4566	132F  83 C4 08			     add     sp,8
   4567					;
   4568					;
   4569					;	     inttostr(str,getpid());
   4570					;
   4571	1332  E8 0000e			     call    near ptr _getpid
   4572	1335  50			     push    ax
   4573	1336  16			     push    ss
   4574	1337  8D 46 EC			     lea     ax,word ptr [bp-20]
   4575	133A  50			     push    ax
   4576	133B  E8 0000e			     call    near ptr _inttostr
   4577	133E  83 C4 06			     add     sp,6
   4578					;
   4579					;	     putstrxy(74,ini+1,str);
   4580					;
   4581	1341  16			     push    ss
   4582	1342  8D 46 EC			     lea     ax,word ptr [bp-20]
   4583	1345  50			     push    ax
   4584	1346  8B C7			     mov     ax,di
   4585	1348  40			     inc     ax
   4586	1349  50			     push    ax
   4587	134A  B8 004A			     mov     ax,74
   4588	134D  50			     push    ax
   4589	134E  E8 0000e			     call    near ptr _putstrxy
   4590	1351  83 C4 08			     add     sp,8
   4591					;
   4592					;	     for     (i=0;i<30000U;++i)	 {
   4593					;
   4594	1354  33 F6			     xor     si,si
   4595	1356  EB 29			     jmp     short @29@114
   4596	1358			     @29@58:
   4597					;
   4598					;		     unsignedtostr(str,i,5,'0');
   4599					;
   4600	1358  B0 30			     mov     al,48
   4601	135A  50			     push    ax
   4602	135B  B8 0005			     mov     ax,5
   4603	135E  50			     push    ax
   4604	135F  56			     push    si
   4605	1360  16			     push    ss
   4606	1361  8D 46 EC			     lea     ax,word ptr [bp-20]
   4607	1364  50			     push    ax
   4608	1365  E8 0000e			     call    near ptr _unsignedtostr
   4609	1368  83 C4 0A			     add     sp,10
   4610					;
   4611					;		     putstrxy(70,ini+3,str);
   4612					;
   4613	136B  16			     push    ss
   4614	136C  8D 46 EC			     lea     ax,word ptr [bp-20]
   4615	136F  50			     push    ax
   4616	1370  8B C7			     mov     ax,di
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 82
command.ASM



   4617	1372  05 0003			     add     ax,3
   4618	1375  50			     push    ax
   4619	1376  B8 0046			     mov     ax,70
   4620	1379  50			     push    ax
   4621	137A  E8 0000e			     call    near ptr _putstrxy
   4622	137D  83 C4 08			     add     sp,8
   4623	1380  46			     inc     si
   4624	1381			     @29@114:
   4625	1381  81 FE 7530		     cmp     si,30000
   4626	1385  72 D1			     jb	     short @29@58
   4627					;
   4628					;	     }
   4629					;	     semdown(semid);
   4630					;
   4631	1387  FF 36 0046r		     push    word ptr DGROUP:_semid
   4632	138B  E8 0000e			     call    near ptr _semdown
   4633	138E  59			     pop     cx
   4634	138F  EB 29			     jmp     short @29@226
   4635	1391			     @29@170:
   4636					;
   4637					;	     for     (;i<60000U;++i)  {
   4638					;		     unsignedtostr(str,i,5,'0');
   4639					;
   4640	1391  B0 30			     mov     al,48
   4641	1393  50			     push    ax
   4642	1394  B8 0005			     mov     ax,5
   4643	1397  50			     push    ax
   4644	1398  56			     push    si
   4645	1399  16			     push    ss
   4646	139A  8D 46 EC			     lea     ax,word ptr [bp-20]
   4647	139D  50			     push    ax
   4648	139E  E8 0000e			     call    near ptr _unsignedtostr
   4649	13A1  83 C4 0A			     add     sp,10
   4650					;
   4651					;		     putstrxy(70,ini+3,str);
   4652					;
   4653	13A4  16			     push    ss
   4654	13A5  8D 46 EC			     lea     ax,word ptr [bp-20]
   4655	13A8  50			     push    ax
   4656	13A9  8B C7			     mov     ax,di
   4657	13AB  05 0003			     add     ax,3
   4658	13AE  50			     push    ax
   4659	13AF  B8 0046			     mov     ax,70
   4660	13B2  50			     push    ax
   4661	13B3  E8 0000e			     call    near ptr _putstrxy
   4662	13B6  83 C4 08			     add     sp,8
   4663	13B9  46			     inc     si
   4664	13BA			     @29@226:
   4665	13BA  81 FE EA60		     cmp     si,-5536
   4666	13BE  72 D1			     jb	     short @29@170
   4667					;
   4668					;	     }
   4669					;	     exit(0);
   4670					;
   4671	13C0  33 C0			     xor     ax,ax
   4672	13C2  50			     push    ax
   4673	13C3  E8 0000e			     call    near ptr _exit
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 83
command.ASM



   4674	13C6  59			     pop     cx
   4675					;
   4676					;    }
   4677					;
   4678	13C7  5F			     pop     di
   4679	13C8  5E			     pop     si
   4680	13C9  8B E5			     mov     sp,bp
   4681	13CB  5D			     pop     bp
   4682	13CC  C3			     ret
   4683	13CD			     _sem_aplic	     endp
   4684					;
   4685					;    int cmd_semtest(int argc, char far	*argv[])
   4686					;
   4687					     assume  cs:_TEXT
   4688	13CD			     _cmd_semtest    proc    near
   4689	13CD  55			     push    bp
   4690	13CE  8B EC			     mov     bp,sp
   4691					;
   4692					;    {
   4693					;	     extern int	demo_linha;
   4694					;	     extern semid_t semid;
   4695					;
   4696					;	     if	     (argc != 2)     {
   4697					;
   4698	13D0  83 7E 04 02		     cmp     word ptr [bp+4],2
   4699	13D4  74 0F			     je	     short @30@142
   4700					;
   4701					;		     putstr("Erro em semtest: numero invalido de argumentos!\n");
   4702					;
   4703	13D6  1E			     push    ds
   4704	13D7  B8 0B6Er			     mov     ax,offset DGROUP:s@+2746
   4705	13DA			     @30@86:
   4706	13DA  50			     push    ax
   4707	13DB  E8 0000e			     call    near ptr _putstr
   4708	13DE  59			     pop     cx
   4709	13DF  59			     pop     cx
   4710					;
   4711					;		     return 1;
   4712					;
   4713	13E0  B8 0001			     mov     ax,1
   4714	13E3			     @30@114:
   4715	13E3  EB 3A			     jmp     short @30@282
   4716	13E5			     @30@142:
   4717					;
   4718					;	     }
   4719					;	     semid = atoi(argv[1]);
   4720					;
   4721	13E5  8B 5E 06			     mov     bx,word ptr [bp+6]
   4722	13E8  FF 77 06			     push    word ptr [bx+6]
   4723	13EB  FF 77 04			     push    word ptr [bx+4]
   4724	13EE  E8 0000e			     call    near ptr _atoi
   4725	13F1  59			     pop     cx
   4726	13F2  59			     pop     cx
   4727	13F3  A3 0046r			     mov     word ptr DGROUP:_semid,ax
   4728					;
   4729					;	     demo_linha	+= 5;
   4730					;
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 84
command.ASM



   4731	13F6  83 06 00AAr 05		     add     word ptr DGROUP:demo_linha,5
   4732					;
   4733					;	     if	     (demo_linha >21)
   4734					;
   4735	13FB  83 3E 00AAr 15		     cmp     word ptr DGROUP:demo_linha,21
   4736	1400  7E 06			     jle     short @30@198
   4737					;
   4738					;		     demo_linha	= 1;
   4739					;
   4740	1402  C7 06 00AAr 0001		     mov     word ptr DGROUP:demo_linha,1
   4741	1408			     @30@198:
   4742					;
   4743					;	     if	     (fork(sem_aplic)==miniSO_ERROR)  {
   4744					;
   4745	1408  B8 12C4r			     mov     ax,offset _sem_aplic
   4746	140B  50			     push    ax
   4747	140C  E8 0000e			     call    near ptr _fork
   4748	140F  59			     pop     cx
   4749	1410  3D FFFF			     cmp     ax,-1
   4750	1413  75 06			     jne     short @30@254
   4751					;
   4752					;		     putstr("Erro em demo: fork() nao conseguiu	criar thread!\n");
   4753					;
   4754	1415  1E			     push    ds
   4755	1416  B8 0B9Fr			     mov     ax,offset DGROUP:s@+2795
   4756	1419  EB BF			     jmp     short @30@86
   4757	141B			     @30@254:
   4758					;
   4759					;		     return 1;
   4760					;	     }
   4761					;	     return 0;
   4762					;
   4763	141B  33 C0			     xor     ax,ax
   4764	141D  EB C4			     jmp     short @30@114
   4765	141F			     @30@282:
   4766					;
   4767					;    }
   4768					;
   4769	141F  5D			     pop     bp
   4770	1420  C3			     ret
   4771	1421			     _cmd_semtest    endp
   4772					;
   4773					;    int cmd_semup(int argc, char far *argv[])
   4774					;
   4775					     assume  cs:_TEXT
   4776	1421			     _cmd_semup	     proc    near
   4777	1421  55			     push    bp
   4778	1422  8B EC			     mov     bp,sp
   4779	1424  83 EC 02			     sub     sp,2
   4780					;
   4781					;    {
   4782					;	     semid_t semid;
   4783					;
   4784					;	     if	     (argc != 2)     {
   4785					;
   4786	1427  83 7E 04 02		     cmp     word ptr [bp+4],2
   4787	142B  74 0F			     je	     short @31@114
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 85
command.ASM



   4788					;
   4789					;		     putstr("Erro em semtest: numero invalido de argumentos!\n");
   4790					;
   4791	142D  1E			     push    ds
   4792	142E  B8 0BD1r			     mov     ax,offset DGROUP:s@+2845
   4793	1431  50			     push    ax
   4794	1432  E8 0000e			     call    near ptr _putstr
   4795	1435  59			     pop     cx
   4796	1436  59			     pop     cx
   4797					;
   4798					;		     return 1;
   4799					;
   4800	1437  B8 0001			     mov     ax,1
   4801	143A			     @31@86:
   4802	143A  EB 1A			     jmp     short @31@142
   4803	143C			     @31@114:
   4804					;
   4805					;	     }
   4806					;	     semid = atoi(argv[1]);
   4807					;
   4808	143C  8B 5E 06			     mov     bx,word ptr [bp+6]
   4809	143F  FF 77 06			     push    word ptr [bx+6]
   4810	1442  FF 77 04			     push    word ptr [bx+4]
   4811	1445  E8 0000e			     call    near ptr _atoi
   4812	1448  59			     pop     cx
   4813	1449  59			     pop     cx
   4814	144A  89 46 FE			     mov     word ptr [bp-2],ax
   4815					;
   4816					;	     return semup(semid);
   4817					;
   4818	144D  FF 76 FE			     push    word ptr [bp-2]
   4819	1450  E8 0000e			     call    near ptr _semup
   4820	1453  59			     pop     cx
   4821	1454  EB E4			     jmp     short @31@86
   4822	1456			     @31@142:
   4823					;
   4824					;    }
   4825					;
   4826	1456  8B E5			     mov     sp,bp
   4827	1458  5D			     pop     bp
   4828	1459  C3			     ret
   4829	145A			     _cmd_semup	     endp
   4830					;
   4831					;    int cmd_semdestroy(int argc, char far *argv[])
   4832					;
   4833					     assume  cs:_TEXT
   4834	145A			     _cmd_semdestroy proc    near
   4835	145A  55			     push    bp
   4836	145B  8B EC			     mov     bp,sp
   4837	145D  83 EC 02			     sub     sp,2
   4838					;
   4839					;    {
   4840					;	     semid_t semid;
   4841					;
   4842					;	     if	     (argc != 2)     {
   4843					;
   4844	1460  83 7E 04 02		     cmp     word ptr [bp+4],2
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 86
command.ASM



   4845	1464  74 0F			     je	     short @32@114
   4846					;
   4847					;		     putstr("Erro em semtest: numero invalido de argumentos!\n");
   4848					;
   4849	1466  1E			     push    ds
   4850	1467  B8 0C02r			     mov     ax,offset DGROUP:s@+2894
   4851	146A  50			     push    ax
   4852	146B  E8 0000e			     call    near ptr _putstr
   4853	146E  59			     pop     cx
   4854	146F  59			     pop     cx
   4855					;
   4856					;		     return 1;
   4857					;
   4858	1470  B8 0001			     mov     ax,1
   4859	1473			     @32@86:
   4860	1473  EB 1A			     jmp     short @32@142
   4861	1475			     @32@114:
   4862					;
   4863					;	     }
   4864					;	     semid = atoi(argv[1]);
   4865					;
   4866	1475  8B 5E 06			     mov     bx,word ptr [bp+6]
   4867	1478  FF 77 06			     push    word ptr [bx+6]
   4868	147B  FF 77 04			     push    word ptr [bx+4]
   4869	147E  E8 0000e			     call    near ptr _atoi
   4870	1481  59			     pop     cx
   4871	1482  59			     pop     cx
   4872	1483  89 46 FE			     mov     word ptr [bp-2],ax
   4873					;
   4874					;	     return semdestroy(semid);
   4875					;
   4876	1486  FF 76 FE			     push    word ptr [bp-2]
   4877	1489  E8 0000e			     call    near ptr _semdestroy
   4878	148C  59			     pop     cx
   4879	148D  EB E4			     jmp     short @32@86
   4880	148F			     @32@142:
   4881					;
   4882					;    }
   4883					;
   4884	148F  8B E5			     mov     sp,bp
   4885	1491  5D			     pop     bp
   4886	1492  C3			     ret
   4887	1493			     _cmd_semdestroy endp
   4888					;
   4889					;    int cmd_stop(int argc, char far *argv[])
   4890					;
   4891					     assume  cs:_TEXT
   4892	1493			     _cmd_stop	     proc    near
   4893	1493  55			     push    bp
   4894	1494  8B EC			     mov     bp,sp
   4895	1496  56			     push    si
   4896	1497  57			     push    di
   4897					;
   4898					;    {
   4899					;	 int t=0;
   4900					;
   4901	1498  33 F6			     xor     si,si
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 87
command.ASM



   4902					;
   4903					;	 pid_t pid=0;
   4904					;
   4905	149A  33 FF			     xor     di,di
   4906					;
   4907					;
   4908					;	 if (argc<2) {
   4909					;
   4910	149C  83 7E 04 02		     cmp     word ptr [bp+4],2
   4911	14A0  7D 0F			     jge     short @33@114
   4912					;
   4913					;	     putstr("stop: nenhum parametro foi	fornecido\n");
   4914					;
   4915	14A2  1E			     push    ds
   4916	14A3  B8 0C33r			     mov     ax,offset DGROUP:s@+2943
   4917	14A6  50			     push    ax
   4918	14A7  E8 0000e			     call    near ptr _putstr
   4919	14AA  59			     pop     cx
   4920	14AB  59			     pop     cx
   4921					;
   4922					;	     return miniSO_ERROR;
   4923					;
   4924	14AC  B8 FFFF			     mov     ax,-1
   4925	14AF			     @33@86:
   4926	14AF  EB 2A			     jmp     short @33@198
   4927	14B1			     @33@114:
   4928					;
   4929					;	 }
   4930					;	 pid = atoi(argv[1]);
   4931					;
   4932	14B1  8B 5E 06			     mov     bx,word ptr [bp+6]
   4933	14B4  FF 77 06			     push    word ptr [bx+6]
   4934	14B7  FF 77 04			     push    word ptr [bx+4]
   4935	14BA  E8 0000e			     call    near ptr _atoi
   4936	14BD  59			     pop     cx
   4937	14BE  59			     pop     cx
   4938	14BF  8B F8			     mov     di,ax
   4939					;
   4940					;	 t = stop(pid);
   4941					;
   4942	14C1  57			     push    di
   4943	14C2  E8 0000e			     call    near ptr _stop
   4944	14C5  59			     pop     cx
   4945	14C6  8B F0			     mov     si,ax
   4946					;
   4947					;	 if (t==miniSO_ERROR)
   4948					;
   4949	14C8  83 FE FF			     cmp     si,-1
   4950	14CB  75 0A			     jne     short @33@170
   4951					;
   4952					;	     putstr("stop: impossivel suspender	a thread\n");
   4953					;
   4954	14CD  1E			     push    ds
   4955	14CE  B8 0C59r			     mov     ax,offset DGROUP:s@+2981
   4956	14D1  50			     push    ax
   4957	14D2  E8 0000e			     call    near ptr _putstr
   4958	14D5  59			     pop     cx
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 88
command.ASM



   4959	14D6  59			     pop     cx
   4960	14D7			     @33@170:
   4961					;
   4962					;	 return	t;
   4963					;
   4964	14D7  8B C6			     mov     ax,si
   4965	14D9  EB D4			     jmp     short @33@86
   4966	14DB			     @33@198:
   4967					;
   4968					;    }
   4969					;
   4970	14DB  5F			     pop     di
   4971	14DC  5E			     pop     si
   4972	14DD  5D			     pop     bp
   4973	14DE  C3			     ret
   4974	14DF			     _cmd_stop	     endp
   4975					;
   4976					;    int cmd_resume(int	argc, char far *argv[])
   4977					;
   4978					     assume  cs:_TEXT
   4979	14DF			     _cmd_resume     proc    near
   4980	14DF  55			     push    bp
   4981	14E0  8B EC			     mov     bp,sp
   4982	14E2  56			     push    si
   4983	14E3  57			     push    di
   4984					;
   4985					;    {
   4986					;	 int t=0;
   4987					;
   4988	14E4  33 F6			     xor     si,si
   4989					;
   4990					;	 pid_t pid=0;
   4991					;
   4992	14E6  33 FF			     xor     di,di
   4993					;
   4994					;
   4995					;	 if (argc<2) {
   4996					;
   4997	14E8  83 7E 04 02		     cmp     word ptr [bp+4],2
   4998	14EC  7D 0F			     jge     short @34@114
   4999					;
   5000					;	     putstr("resume: nenhum parametro foi fornecido\n");
   5001					;
   5002	14EE  1E			     push    ds
   5003	14EF  B8 0C7Er			     mov     ax,offset DGROUP:s@+3018
   5004	14F2  50			     push    ax
   5005	14F3  E8 0000e			     call    near ptr _putstr
   5006	14F6  59			     pop     cx
   5007	14F7  59			     pop     cx
   5008					;
   5009					;	     return miniSO_ERROR;
   5010					;
   5011	14F8  B8 FFFF			     mov     ax,-1
   5012	14FB			     @34@86:
   5013	14FB  EB 2A			     jmp     short @34@198
   5014	14FD			     @34@114:
   5015					;
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 89
command.ASM



   5016					;	 }
   5017					;	 pid = atoi(argv[1]);
   5018					;
   5019	14FD  8B 5E 06			     mov     bx,word ptr [bp+6]
   5020	1500  FF 77 06			     push    word ptr [bx+6]
   5021	1503  FF 77 04			     push    word ptr [bx+4]
   5022	1506  E8 0000e			     call    near ptr _atoi
   5023	1509  59			     pop     cx
   5024	150A  59			     pop     cx
   5025	150B  8B F8			     mov     di,ax
   5026					;
   5027					;	 t = resume(pid);
   5028					;
   5029	150D  57			     push    di
   5030	150E  E8 0000e			     call    near ptr _resume
   5031	1511  59			     pop     cx
   5032	1512  8B F0			     mov     si,ax
   5033					;
   5034					;	 if (t==miniSO_ERROR)
   5035					;
   5036	1514  83 FE FF			     cmp     si,-1
   5037	1517  75 0A			     jne     short @34@170
   5038					;
   5039					;	     putstr("resume: impossivel	reiniciar a thread\n");
   5040					;
   5041	1519  1E			     push    ds
   5042	151A  B8 0CA6r			     mov     ax,offset DGROUP:s@+3058
   5043	151D  50			     push    ax
   5044	151E  E8 0000e			     call    near ptr _putstr
   5045	1521  59			     pop     cx
   5046	1522  59			     pop     cx
   5047	1523			     @34@170:
   5048					;
   5049					;	 return	t;
   5050					;
   5051	1523  8B C6			     mov     ax,si
   5052	1525  EB D4			     jmp     short @34@86
   5053	1527			     @34@198:
   5054					;
   5055					;    }
   5056					;
   5057	1527  5F			     pop     di
   5058	1528  5E			     pop     si
   5059	1529  5D			     pop     bp
   5060	152A  C3			     ret
   5061	152B			     _cmd_resume     endp
   5062	152B			     _TEXT   ends
   5063	00AE			     _DATA   segment word public 'DATA'
   5064	00AE			     tamanho_buffer  label   word
   5065	00AE  00			     db	     0
   5066	00AF  00			     db	     0
   5067	00B0			     posicaoProdutor label   word
   5068	00B0  00			     db	     0
   5069	00B1  00			     db	     0
   5070	00B2			     posicaoConsumidor	     label   word
   5071	00B2  00			     db	     0
   5072	00B3  00			     db	     0
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 90
command.ASM



   5073	00B4			     _DATA   ends
   5074	152B			     _TEXT   segment byte public 'CODE'
   5075					;
   5076					;    void imprimeLista () {
   5077					;
   5078					     assume  cs:_TEXT
   5079	152B			     _imprimeLista   proc    near
   5080	152B  55			     push    bp
   5081	152C  8B EC			     mov     bp,sp
   5082	152E  83 EC 06			     sub     sp,6
   5083	1531  56			     push    si
   5084					;
   5085					;      int i;
   5086					;      char str[1];
   5087					;      int x = 56, y = demo_linha + 10;
   5088					;
   5089	1532  C7 46 FC 0038		     mov     word ptr [bp-4],56
   5090	1537  A1 00AAr			     mov     ax,word ptr DGROUP:demo_linha
   5091	153A  05 000A			     add     ax,10
   5092	153D  89 46 FA			     mov     word ptr [bp-6],ax
   5093					;
   5094					;
   5095					;      for (i =	0; i < tamanho_buffer; i++) {
   5096					;
   5097	1540  33 F6			     xor     si,si
   5098	1542  EB 2F			     jmp     short @35@114
   5099	1544			     @35@58:
   5100					;
   5101					;	 inttostr(str, vetor[i]);
   5102					;
   5103	1544  8B DE			     mov     bx,si
   5104	1546  D1 E3			     shl     bx,1
   5105	1548  FF B7 001Er		     push    word ptr DGROUP:vetor[bx]
   5106	154C  16			     push    ss
   5107	154D  8D 46 FE			     lea     ax,word ptr [bp-2]
   5108	1550  50			     push    ax
   5109	1551  E8 0000e			     call    near ptr _inttostr
   5110	1554  83 C4 06			     add     sp,6
   5111					;
   5112					;	 putstrxy(x+2+i,  y+8, str);
   5113					;
   5114	1557  16			     push    ss
   5115	1558  8D 46 FE			     lea     ax,word ptr [bp-2]
   5116	155B  50			     push    ax
   5117	155C  8B 46 FA			     mov     ax,word ptr [bp-6]
   5118	155F  05 0008			     add     ax,8
   5119	1562  50			     push    ax
   5120	1563  8B 46 FC			     mov     ax,word ptr [bp-4]
   5121	1566  03 C6			     add     ax,si
   5122	1568  05 0002			     add     ax,2
   5123	156B  50			     push    ax
   5124	156C  E8 0000e			     call    near ptr _putstrxy
   5125	156F  83 C4 08			     add     sp,8
   5126	1572  46			     inc     si
   5127	1573			     @35@114:
   5128	1573  3B 36 00AEr		     cmp     si,word ptr DGROUP:tamanho_buffer
   5129	1577  7C CB			     jl	     short @35@58
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 91
command.ASM



   5130					;
   5131					;      }
   5132					;    }
   5133					;
   5134	1579  5E			     pop     si
   5135	157A  8B E5			     mov     sp,bp
   5136	157C  5D			     pop     bp
   5137	157D  C3			     ret
   5138	157E			     _imprimeLista   endp
   5139					;
   5140					;    void imprimeBuffer() {
   5141					;
   5142					     assume  cs:_TEXT
   5143	157E			     _imprimeBuffer  proc    near
   5144	157E  55			     push    bp
   5145	157F  8B EC			     mov     bp,sp
   5146	1581  83 EC 14			     sub     sp,20
   5147	1584  56			     push    si
   5148	1585  57			     push    di
   5149					;
   5150					;      extern int demo_linha;
   5151					;      int x = 56, y = demo_linha + 10;
   5152					;
   5153	1586  BE 0038			     mov     si,56
   5154	1589  A1 00AAr			     mov     ax,word ptr DGROUP:demo_linha
   5155	158C  05 000A			     add     ax,10
   5156	158F  8B F8			     mov     di,ax
   5157					;
   5158					;      char str[20];
   5159					;
   5160					;      /* titulo */
   5161					;      putstrxy(x, y+4,	"			");
   5162					;
   5163	1591  1E			     push    ds
   5164	1592  B8 0CCDr			     mov     ax,offset DGROUP:s@+3097
   5165	1595  50			     push    ax
   5166	1596  8B C7			     mov     ax,di
   5167	1598  05 0004			     add     ax,4
   5168	159B  50			     push    ax
   5169	159C  56			     push    si
   5170	159D  E8 0000e			     call    near ptr _putstrxy
   5171	15A0  83 C4 08			     add     sp,8
   5172					;
   5173					;      putstrxy(x, y+5,	"			");
   5174					;
   5175	15A3  1E			     push    ds
   5176	15A4  B8 0CE5r			     mov     ax,offset DGROUP:s@+3121
   5177	15A7  50			     push    ax
   5178	15A8  8B C7			     mov     ax,di
   5179	15AA  05 0005			     add     ax,5
   5180	15AD  50			     push    ax
   5181	15AE  56			     push    si
   5182	15AF  E8 0000e			     call    near ptr _putstrxy
   5183	15B2  83 C4 08			     add     sp,8
   5184					;
   5185					;      putstrxy(x, y+6,	"⁄ƒƒƒƒ	ProdCons   ƒƒƒƒø");
   5186					;
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 92
command.ASM



   5187	15B5  1E			     push    ds
   5188	15B6  B8 0CFDr			     mov     ax,offset DGROUP:s@+3145
   5189	15B9  50			     push    ax
   5190	15BA  8B C7			     mov     ax,di
   5191	15BC  05 0006			     add     ax,6
   5192	15BF  50			     push    ax
   5193	15C0  56			     push    si
   5194	15C1  E8 0000e			     call    near ptr _putstrxy
   5195	15C4  83 C4 08			     add     sp,8
   5196					;
   5197					;
   5198					;      /* tamanho do buffer */
   5199					;      putstrxy(x,    y+7, "≥ Tamanho Buffer:	  ≥");
   5200					;
   5201	15C7  1E			     push    ds
   5202	15C8  B8 0D15r			     mov     ax,offset DGROUP:s@+3169
   5203	15CB  50			     push    ax
   5204	15CC  8B C7			     mov     ax,di
   5205	15CE  05 0007			     add     ax,7
   5206	15D1  50			     push    ax
   5207	15D2  56			     push    si
   5208	15D3  E8 0000e			     call    near ptr _putstrxy
   5209	15D6  83 C4 08			     add     sp,8
   5210					;
   5211					;      inttostr(str,  tamanho_buffer);
   5212					;
   5213	15D9  FF 36 00AEr		     push    word ptr DGROUP:tamanho_buffer
   5214	15DD  16			     push    ss
   5215	15DE  8D 46 EC			     lea     ax,word ptr [bp-20]
   5216	15E1  50			     push    ax
   5217	15E2  E8 0000e			     call    near ptr _inttostr
   5218	15E5  83 C4 06			     add     sp,6
   5219					;
   5220					;      putstrxy(x+17, y+7, str);
   5221					;
   5222	15E8  16			     push    ss
   5223	15E9  8D 46 EC			     lea     ax,word ptr [bp-20]
   5224	15EC  50			     push    ax
   5225	15ED  8B C7			     mov     ax,di
   5226	15EF  05 0007			     add     ax,7
   5227	15F2  50			     push    ax
   5228	15F3  8B C6			     mov     ax,si
   5229	15F5  05 0011			     add     ax,17
   5230	15F8  50			     push    ax
   5231	15F9  E8 0000e			     call    near ptr _putstrxy
   5232	15FC  83 C4 08			     add     sp,8
   5233					;
   5234					;
   5235					;      /* representacao	do buffer */
   5236					;      putstrxy(x,    y+8, "≥ ");
   5237					;
   5238	15FF  1E			     push    ds
   5239	1600  B8 0D2Dr			     mov     ax,offset DGROUP:s@+3193
   5240	1603  50			     push    ax
   5241	1604  8B C7			     mov     ax,di
   5242	1606  05 0008			     add     ax,8
   5243	1609  50			     push    ax
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 93
command.ASM



   5244	160A  56			     push    si
   5245	160B  E8 0000e			     call    near ptr _putstrxy
   5246	160E  83 C4 08			     add     sp,8
   5247					;
   5248					;      imprimeLista();
   5249					;
   5250	1611  E8 FF17			     call    near ptr _imprimeLista
   5251					;
   5252					;      putstrxy(x+20, y+8, "  ≥");
   5253					;
   5254	1614  1E			     push    ds
   5255	1615  B8 0D30r			     mov     ax,offset DGROUP:s@+3196
   5256	1618  50			     push    ax
   5257	1619  8B C7			     mov     ax,di
   5258	161B  05 0008			     add     ax,8
   5259	161E  50			     push    ax
   5260	161F  8B C6			     mov     ax,si
   5261	1621  05 0014			     add     ax,20
   5262	1624  50			     push    ax
   5263	1625  E8 0000e			     call    near ptr _putstrxy
   5264	1628  83 C4 08			     add     sp,8
   5265					;
   5266					;
   5267					;      /* Produtor e Consumidor*/
   5268					;      inttostr(str,  tempoProdutor);
   5269					;
   5270	162B  FF 36 001Cr		     push    word ptr DGROUP:tempoProdutor
   5271	162F  16			     push    ss
   5272	1630  8D 46 EC			     lea     ax,word ptr [bp-20]
   5273	1633  50			     push    ax
   5274	1634  E8 0000e			     call    near ptr _inttostr
   5275	1637  83 C4 06			     add     sp,6
   5276					;
   5277					;      putstrxy(x,    y+9 , "≥ Produtor:	   ≥");
   5278					;
   5279	163A  1E			     push    ds
   5280	163B  B8 0D34r			     mov     ax,offset DGROUP:s@+3200
   5281	163E  50			     push    ax
   5282	163F  8B C7			     mov     ax,di
   5283	1641  05 0009			     add     ax,9
   5284	1644  50			     push    ax
   5285	1645  56			     push    si
   5286	1646  E8 0000e			     call    near ptr _putstrxy
   5287	1649  83 C4 08			     add     sp,8
   5288					;
   5289					;      putstrxy(x+12, y+9, str);
   5290					;
   5291	164C  16			     push    ss
   5292	164D  8D 46 EC			     lea     ax,word ptr [bp-20]
   5293	1650  50			     push    ax
   5294	1651  8B C7			     mov     ax,di
   5295	1653  05 0009			     add     ax,9
   5296	1656  50			     push    ax
   5297	1657  8B C6			     mov     ax,si
   5298	1659  05 000C			     add     ax,12
   5299	165C  50			     push    ax
   5300	165D  E8 0000e			     call    near ptr _putstrxy
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 94
command.ASM



   5301	1660  83 C4 08			     add     sp,8
   5302					;
   5303					;
   5304					;      inttostr(str,  tempoConsumidor);
   5305					;
   5306	1663  FF 36 001Ar		     push    word ptr DGROUP:tempoConsumidor
   5307	1667  16			     push    ss
   5308	1668  8D 46 EC			     lea     ax,word ptr [bp-20]
   5309	166B  50			     push    ax
   5310	166C  E8 0000e			     call    near ptr _inttostr
   5311	166F  83 C4 06			     add     sp,6
   5312					;
   5313					;      putstrxy(x,    y+10, "≥ Consumidor:	   ≥");
   5314					;
   5315	1672  1E			     push    ds
   5316	1673  B8 0D4Cr			     mov     ax,offset DGROUP:s@+3224
   5317	1676  50			     push    ax
   5318	1677  8B C7			     mov     ax,di
   5319	1679  05 000A			     add     ax,10
   5320	167C  50			     push    ax
   5321	167D  56			     push    si
   5322	167E  E8 0000e			     call    near ptr _putstrxy
   5323	1681  83 C4 08			     add     sp,8
   5324					;
   5325					;      putstrxy(x+14, y+10, str);
   5326					;
   5327	1684  16			     push    ss
   5328	1685  8D 46 EC			     lea     ax,word ptr [bp-20]
   5329	1688  50			     push    ax
   5330	1689  8B C7			     mov     ax,di
   5331	168B  05 000A			     add     ax,10
   5332	168E  50			     push    ax
   5333	168F  8B C6			     mov     ax,si
   5334	1691  05 000E			     add     ax,14
   5335	1694  50			     push    ax
   5336	1695  E8 0000e			     call    near ptr _putstrxy
   5337	1698  83 C4 08			     add     sp,8
   5338					;
   5339					;
   5340					;      putstrxy(x, y+11,"¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ");
   5341					;
   5342	169B  1E			     push    ds
   5343	169C  B8 0D64r			     mov     ax,offset DGROUP:s@+3248
   5344	169F  50			     push    ax
   5345	16A0  8B C7			     mov     ax,di
   5346	16A2  05 000B			     add     ax,11
   5347	16A5  50			     push    ax
   5348	16A6  56			     push    si
   5349	16A7  E8 0000e			     call    near ptr _putstrxy
   5350	16AA  83 C4 08			     add     sp,8
   5351					;
   5352					;    }
   5353					;
   5354	16AD  5F			     pop     di
   5355	16AE  5E			     pop     si
   5356	16AF  8B E5			     mov     sp,bp
   5357	16B1  5D			     pop     bp
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 95
command.ASM



   5358	16B2  C3			     ret
   5359	16B3			     _imprimeBuffer  endp
   5360					;
   5361					;    void inicializaLista () {
   5362					;
   5363					     assume  cs:_TEXT
   5364	16B3			     _inicializaLista	     proc    near
   5365	16B3  55			     push    bp
   5366	16B4  8B EC			     mov     bp,sp
   5367					;
   5368					;      int i;
   5369					;
   5370					;      for (i =	0; i < tamanho_buffer; i++) {
   5371					;
   5372	16B6  33 D2			     xor     dx,dx
   5373	16B8  EB 0B			     jmp     short @37@114
   5374	16BA			     @37@58:
   5375					;
   5376					;	 vetor[i] = 0;
   5377					;
   5378	16BA  8B DA			     mov     bx,dx
   5379	16BC  D1 E3			     shl     bx,1
   5380	16BE  C7 87 001Er 0000		     mov     word ptr DGROUP:vetor[bx],0
   5381	16C4  42			     inc     dx
   5382	16C5			     @37@114:
   5383	16C5  3B 16 00AEr		     cmp     dx,word ptr DGROUP:tamanho_buffer
   5384	16C9  7C EF			     jl	     short @37@58
   5385					;
   5386					;      }
   5387					;
   5388					;    }
   5389					;
   5390	16CB  5D			     pop     bp
   5391	16CC  C3			     ret
   5392	16CD			     _inicializaLista	     endp
   5393					;
   5394					;    int avanca(int posicaoAtual) {
   5395					;
   5396					     assume  cs:_TEXT
   5397	16CD			     _avanca proc    near
   5398	16CD  55			     push    bp
   5399	16CE  8B EC			     mov     bp,sp
   5400	16D0  8B 56 04			     mov     dx,word ptr [bp+4]
   5401					;
   5402					;      if (posicaoAtual	== tamanho_buffer - 1) {
   5403					;
   5404	16D3  A1 00AEr			     mov     ax,word ptr DGROUP:tamanho_buffer
   5405	16D6  48			     dec     ax
   5406	16D7  3B C2			     cmp     ax,dx
   5407	16D9  75 06			     jne     short @38@142
   5408					;
   5409					;	 return	0;
   5410					;
   5411	16DB  33 C0			     xor     ax,ax
   5412	16DD			     @38@86:
   5413	16DD  EB 07			     jmp     short @38@170
   5414					;
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 96
command.ASM



   5415					;      } else {
   5416					;
   5417	16DF  EB 05			     jmp     short @38@170
   5418	16E1			     @38@142:
   5419					;
   5420					;	 return	posicaoAtual + 1;
   5421					;
   5422	16E1  8B C2			     mov     ax,dx
   5423	16E3  40			     inc     ax
   5424	16E4  EB F7			     jmp     short @38@86
   5425	16E6			     @38@170:
   5426					;
   5427					;      }
   5428					;    }
   5429					;
   5430	16E6  5D			     pop     bp
   5431	16E7  C3			     ret
   5432	16E8			     _avanca endp
   5433					;
   5434					;    void produz () {
   5435					;
   5436					     assume  cs:_TEXT
   5437	16E8			     _produz proc    near
   5438	16E8  55			     push    bp
   5439	16E9  8B EC			     mov     bp,sp
   5440					;
   5441					;      minisleep();
   5442					;
   5443	16EB  E8 0000e			     call    near ptr _minisleep
   5444					;
   5445					;      vetor[posicaoProdutor] =	1;
   5446					;
   5447	16EE  8B 1E 00B0r		     mov     bx,word ptr DGROUP:posicaoProdutor
   5448	16F2  D1 E3			     shl     bx,1
   5449	16F4  C7 87 001Er 0001		     mov     word ptr DGROUP:vetor[bx],1
   5450					;
   5451					;      posicaoProdutor = avanca(posicaoProdutor);
   5452					;
   5453	16FA  FF 36 00B0r		     push    word ptr DGROUP:posicaoProdutor
   5454	16FE  E8 FFCC			     call    near ptr _avanca
   5455	1701  59			     pop     cx
   5456	1702  A3 00B0r			     mov     word ptr DGROUP:posicaoProdutor,ax
   5457					;
   5458					;      imprimeBuffer();
   5459					;
   5460	1705  E8 FE76			     call    near ptr _imprimeBuffer
   5461					;
   5462					;    }
   5463					;
   5464	1708  5D			     pop     bp
   5465	1709  C3			     ret
   5466	170A			     _produz endp
   5467					;
   5468					;    void consome () {
   5469					;
   5470					     assume  cs:_TEXT
   5471	170A			     _consome	     proc    near
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 97
command.ASM



   5472	170A  55			     push    bp
   5473	170B  8B EC			     mov     bp,sp
   5474					;
   5475					;      minisleep();
   5476					;
   5477	170D  E8 0000e			     call    near ptr _minisleep
   5478					;
   5479					;      vetor[posicaoConsumidor]	= 0;
   5480					;
   5481	1710  8B 1E 00B2r		     mov     bx,word ptr DGROUP:posicaoConsumidor
   5482	1714  D1 E3			     shl     bx,1
   5483	1716  C7 87 001Er 0000		     mov     word ptr DGROUP:vetor[bx],0
   5484					;
   5485					;      posicaoConsumidor = avanca(posicaoConsumidor);
   5486					;
   5487	171C  FF 36 00B2r		     push    word ptr DGROUP:posicaoConsumidor
   5488	1720  E8 FFAA			     call    near ptr _avanca
   5489	1723  59			     pop     cx
   5490	1724  A3 00B2r			     mov     word ptr DGROUP:posicaoConsumidor,ax
   5491					;
   5492					;      imprimeBuffer();
   5493					;
   5494	1727  E8 FE54			     call    near ptr _imprimeBuffer
   5495					;
   5496					;    }
   5497					;
   5498	172A  5D			     pop     bp
   5499	172B  C3			     ret
   5500	172C			     _consome	     endp
   5501					;
   5502					;    void produtor()
   5503					;
   5504					     assume  cs:_TEXT
   5505	172C			     _produtor	     proc    near
   5506	172C  55			     push    bp
   5507	172D  8B EC			     mov     bp,sp
   5508	172F			     @41@30:
   5509					;
   5510					;    {
   5511					;      while(1)	{
   5512					;	 semdown(vazio);
   5513					;
   5514	172F  FF 36 0016r		     push    word ptr DGROUP:vazio
   5515	1733  E8 0000e			     call    near ptr _semdown
   5516	1736  59			     pop     cx
   5517					;
   5518					;	 semdown(mutex);
   5519					;
   5520	1737  FF 36 0018r		     push    word ptr DGROUP:mutex
   5521	173B  E8 0000e			     call    near ptr _semdown
   5522	173E  59			     pop     cx
   5523					;
   5524					;	 produz();
   5525					;
   5526	173F  E8 FFA6			     call    near ptr _produz
   5527					;
   5528					;	 semup(mutex);
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 98
command.ASM



   5529					;
   5530	1742  FF 36 0018r		     push    word ptr DGROUP:mutex
   5531	1746  E8 0000e			     call    near ptr _semup
   5532	1749  59			     pop     cx
   5533					;
   5534					;	 semup(cheio);
   5535					;
   5536	174A  FF 36 0014r		     push    word ptr DGROUP:cheio
   5537	174E  E8 0000e			     call    near ptr _semup
   5538	1751  59			     pop     cx
   5539					;
   5540					;
   5541					;	 sleep(tempoProdutor);
   5542					;
   5543	1752  FF 36 001Cr		     push    word ptr DGROUP:tempoProdutor
   5544	1756  E8 0000e			     call    near ptr _sleep
   5545	1759  59			     pop     cx
   5546	175A  EB D3			     jmp     short @41@30
   5547					;
   5548					;      }
   5549					;    }
   5550					;
   5551	175C  5D			     pop     bp
   5552	175D  C3			     ret
   5553	175E			     _produtor	     endp
   5554					;
   5555					;    void consumidor()
   5556					;
   5557					     assume  cs:_TEXT
   5558	175E			     _consumidor     proc    near
   5559	175E  55			     push    bp
   5560	175F  8B EC			     mov     bp,sp
   5561	1761			     @42@30:
   5562					;
   5563					;    {
   5564					;      while(1)	{
   5565					;	 semdown(cheio);
   5566					;
   5567	1761  FF 36 0014r		     push    word ptr DGROUP:cheio
   5568	1765  E8 0000e			     call    near ptr _semdown
   5569	1768  59			     pop     cx
   5570					;
   5571					;	 semdown(mutex);
   5572					;
   5573	1769  FF 36 0018r		     push    word ptr DGROUP:mutex
   5574	176D  E8 0000e			     call    near ptr _semdown
   5575	1770  59			     pop     cx
   5576					;
   5577					;	 consome();
   5578					;
   5579	1771  E8 FF96			     call    near ptr _consome
   5580					;
   5581					;	 semup(mutex);
   5582					;
   5583	1774  FF 36 0018r		     push    word ptr DGROUP:mutex
   5584	1778  E8 0000e			     call    near ptr _semup
   5585	177B  59			     pop     cx
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 99
command.ASM



   5586					;
   5587					;	 semup(vazio);
   5588					;
   5589	177C  FF 36 0016r		     push    word ptr DGROUP:vazio
   5590	1780  E8 0000e			     call    near ptr _semup
   5591	1783  59			     pop     cx
   5592					;
   5593					;
   5594					;	 sleep(tempoConsumidor);
   5595					;
   5596	1784  FF 36 001Ar		     push    word ptr DGROUP:tempoConsumidor
   5597	1788  E8 0000e			     call    near ptr _sleep
   5598	178B  59			     pop     cx
   5599	178C  EB D3			     jmp     short @42@30
   5600					;
   5601					;      }
   5602					;    }
   5603					;
   5604	178E  5D			     pop     bp
   5605	178F  C3			     ret
   5606	1790			     _consumidor     endp
   5607					;
   5608					;    int cmd_tprod(int argc, char far *argv[]) {
   5609					;
   5610					     assume  cs:_TEXT
   5611	1790			     _cmd_tprod	     proc    near
   5612	1790  55			     push    bp
   5613	1791  8B EC			     mov     bp,sp
   5614					;
   5615					;
   5616					;	 if  (argc != 2)  {
   5617					;
   5618	1793  83 7E 04 02		     cmp     word ptr [bp+4],2
   5619	1797  74 0F			     je	     short @43@86
   5620					;
   5621					;		     putstr("Erro em prodcons: numero invalido de argumentos!\n");
   5622					;
   5623	1799  1E			     push    ds
   5624	179A  B8 0D7Cr			     mov     ax,offset DGROUP:s@+3272
   5625	179D  50			     push    ax
   5626	179E  E8 0000e			     call    near ptr _putstr
   5627	17A1  59			     pop     cx
   5628	17A2  59			     pop     cx
   5629					;
   5630					;		     return 1;
   5631					;
   5632	17A3  B8 0001			     mov     ax,1
   5633	17A6  EB 11			     jmp     short @43@114
   5634	17A8			     @43@86:
   5635					;
   5636					;	     }
   5637					;
   5638					;	     tempoProdutor   = atoi(argv[1]);
   5639					;
   5640	17A8  8B 5E 06			     mov     bx,word ptr [bp+6]
   5641	17AB  FF 77 06			     push    word ptr [bx+6]
   5642	17AE  FF 77 04			     push    word ptr [bx+4]
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 100
command.ASM



   5643	17B1  E8 0000e			     call    near ptr _atoi
   5644	17B4  59			     pop     cx
   5645	17B5  59			     pop     cx
   5646	17B6  A3 001Cr			     mov     word ptr DGROUP:tempoProdutor,ax
   5647	17B9			     @43@114:
   5648					;
   5649					;    }
   5650					;
   5651	17B9  5D			     pop     bp
   5652	17BA  C3			     ret
   5653	17BB			     _cmd_tprod	     endp
   5654					;
   5655					;    int cmd_tcons(int argc, char far *argv[]) {
   5656					;
   5657					     assume  cs:_TEXT
   5658	17BB			     _cmd_tcons	     proc    near
   5659	17BB  55			     push    bp
   5660	17BC  8B EC			     mov     bp,sp
   5661					;
   5662					;
   5663					;	 if  (argc != 2)  {
   5664					;
   5665	17BE  83 7E 04 02		     cmp     word ptr [bp+4],2
   5666	17C2  74 0F			     je	     short @44@86
   5667					;
   5668					;		     putstr("Erro em prodcons: numero invalido de argumentos!\n");
   5669					;
   5670	17C4  1E			     push    ds
   5671	17C5  B8 0DAEr			     mov     ax,offset DGROUP:s@+3322
   5672	17C8  50			     push    ax
   5673	17C9  E8 0000e			     call    near ptr _putstr
   5674	17CC  59			     pop     cx
   5675	17CD  59			     pop     cx
   5676					;
   5677					;		     return 1;
   5678					;
   5679	17CE  B8 0001			     mov     ax,1
   5680	17D1  EB 11			     jmp     short @44@114
   5681	17D3			     @44@86:
   5682					;
   5683					;	     }
   5684					;
   5685					;	     tempoConsumidor = atoi(argv[1]);
   5686					;
   5687	17D3  8B 5E 06			     mov     bx,word ptr [bp+6]
   5688	17D6  FF 77 06			     push    word ptr [bx+6]
   5689	17D9  FF 77 04			     push    word ptr [bx+4]
   5690	17DC  E8 0000e			     call    near ptr _atoi
   5691	17DF  59			     pop     cx
   5692	17E0  59			     pop     cx
   5693	17E1  A3 001Ar			     mov     word ptr DGROUP:tempoConsumidor,ax
   5694	17E4			     @44@114:
   5695					;
   5696					;    }
   5697					;
   5698	17E4  5D			     pop     bp
   5699	17E5  C3			     ret
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 101
command.ASM



   5700	17E6			     _cmd_tcons	     endp
   5701					;
   5702					;    int cmd_prodcons(int argc,	char far *argv[])
   5703					;
   5704					     assume  cs:_TEXT
   5705	17E6			     _cmd_prodcons   proc    near
   5706	17E6  55			     push    bp
   5707	17E7  8B EC			     mov     bp,sp
   5708	17E9  56			     push    si
   5709	17EA  8B 76 06			     mov     si,word ptr [bp+6]
   5710					;
   5711					;    {
   5712					;
   5713					;	     if	     (argc != 4)  {
   5714					;
   5715	17ED  83 7E 04 04		     cmp     word ptr [bp+4],4
   5716	17F1  74 10			     je	     short @45@142
   5717					;
   5718					;		     putstr("Erro em prodcons: numero invalido de argumentos!\n");
   5719					;
   5720	17F3  1E			     push    ds
   5721	17F4  B8 0DE0r			     mov     ax,offset DGROUP:s@+3372
   5722	17F7			     @45@86:
   5723	17F7  50			     push    ax
   5724	17F8  E8 0000e			     call    near ptr _putstr
   5725	17FB  59			     pop     cx
   5726	17FC  59			     pop     cx
   5727					;
   5728					;		     return 1;
   5729					;
   5730	17FD  B8 0001			     mov     ax,1
   5731	1800			     @45@114:
   5732	1800  EB 7C 90			     jmp     @45@282
   5733	1803			     @45@142:
   5734					;
   5735					;	     }
   5736					;
   5737					;	     /*	Get arguments	  */
   5738					;	     tempoProdutor   = atoi(argv[1]);
   5739					;
   5740	1803  FF 74 06			     push    word ptr [si+6]
   5741	1806  FF 74 04			     push    word ptr [si+4]
   5742	1809  E8 0000e			     call    near ptr _atoi
   5743	180C  59			     pop     cx
   5744	180D  59			     pop     cx
   5745	180E  A3 001Cr			     mov     word ptr DGROUP:tempoProdutor,ax
   5746					;
   5747					;	     tempoConsumidor = atoi(argv[2]);
   5748					;
   5749	1811  FF 74 0A			     push    word ptr [si+10]
   5750	1814  FF 74 08			     push    word ptr [si+8]
   5751	1817  E8 0000e			     call    near ptr _atoi
   5752	181A  59			     pop     cx
   5753	181B  59			     pop     cx
   5754	181C  A3 001Ar			     mov     word ptr DGROUP:tempoConsumidor,ax
   5755					;
   5756					;	     tamanho_buffer  = atoi(argv[3]);
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 102
command.ASM



   5757					;
   5758	181F  FF 74 0E			     push    word ptr [si+14]
   5759	1822  FF 74 0C			     push    word ptr [si+12]
   5760	1825  E8 0000e			     call    near ptr _atoi
   5761	1828  59			     pop     cx
   5762	1829  59			     pop     cx
   5763	182A  A3 00AEr			     mov     word ptr DGROUP:tamanho_buffer,ax
   5764					;
   5765					;
   5766					;	 mutex = semcreate(1);
   5767					;
   5768	182D  B8 0001			     mov     ax,1
   5769	1830  50			     push    ax
   5770	1831  E8 0000e			     call    near ptr _semcreate
   5771	1834  59			     pop     cx
   5772	1835  A3 0018r			     mov     word ptr DGROUP:mutex,ax
   5773					;
   5774					;	 vazio = semcreate(tamanho_buffer);
   5775					;
   5776	1838  FF 36 00AEr		     push    word ptr DGROUP:tamanho_buffer
   5777	183C  E8 0000e			     call    near ptr _semcreate
   5778	183F  59			     pop     cx
   5779	1840  A3 0016r			     mov     word ptr DGROUP:vazio,ax
   5780					;
   5781					;	 cheio = semcreate(0);
   5782					;
   5783	1843  33 C0			     xor     ax,ax
   5784	1845  50			     push    ax
   5785	1846  E8 0000e			     call    near ptr _semcreate
   5786	1849  59			     pop     cx
   5787	184A  A3 0014r			     mov     word ptr DGROUP:cheio,ax
   5788					;
   5789					;
   5790					;
   5791					;	 // Inicializa Vetor
   5792					;	 inicializaLista();
   5793					;
   5794	184D  E8 FE63			     call    near ptr _inicializaLista
   5795					;
   5796					;
   5797					;	 // Printa Buffer
   5798					;	 imprimeBuffer();
   5799					;
   5800	1850  E8 FD2B			     call    near ptr _imprimeBuffer
   5801					;
   5802					;
   5803					;	 /* Criar consumidor e produtor*/
   5804					;	 if  (fork(produtor)==miniSO_ERROR)  {
   5805					;
   5806	1853  B8 172Cr			     mov     ax,offset _produtor
   5807	1856  50			     push    ax
   5808	1857  E8 0000e			     call    near ptr _fork
   5809	185A  59			     pop     cx
   5810	185B  3D FFFF			     cmp     ax,-1
   5811	185E  75 06			     jne     short @45@198
   5812					;
   5813					;		 putstr("Erro em prodcons: fork() nao conseguiu	criar thread!\n");
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 103
command.ASM



   5814					;
   5815	1860  1E			     push    ds
   5816	1861  B8 0E12r			     mov     ax,offset DGROUP:s@+3422
   5817	1864  EB 91			     jmp     short @45@86
   5818	1866			     @45@198:
   5819					;
   5820					;		 return	1;
   5821					;	 }
   5822					;	 if  (fork(consumidor)==miniSO_ERROR)  {
   5823					;
   5824	1866  B8 175Er			     mov     ax,offset _consumidor
   5825	1869  50			     push    ax
   5826	186A  E8 0000e			     call    near ptr _fork
   5827	186D  59			     pop     cx
   5828	186E  3D FFFF			     cmp     ax,-1
   5829	1871  75 07			     jne     short @45@254
   5830					;
   5831					;		 putstr("Erro em prodcons: fork() nao conseguiu	criar thread!\n");
   5832					;
   5833	1873  1E			     push    ds
   5834	1874  B8 0E48r			     mov     ax,offset DGROUP:s@+3476
   5835	1877  E9 FF7D			     jmp     @45@86
   5836	187A			     @45@254:
   5837					;
   5838					;		 return	1;
   5839					;	 }
   5840					;
   5841					;	     return 0;
   5842					;
   5843	187A  33 C0			     xor     ax,ax
   5844	187C  EB 82			     jmp     @45@114
   5845	187E			     @45@282:
   5846					;
   5847					;    }
   5848					;
   5849	187E  5E			     pop     si
   5850	187F  5D			     pop     bp
   5851	1880  C3			     ret
   5852	1881			     _cmd_prodcons   endp
   5853	1881			     _TEXT   ends
   5854	0014			     _BSS    segment word public 'BSS'
   5855	0014			     cheio   label   word
   5856	0014  02*(??)			     db	     2 dup (?)
   5857	0016			     vazio   label   word
   5858	0016  02*(??)			     db	     2 dup (?)
   5859	0018			     mutex   label   word
   5860	0018  02*(??)			     db	     2 dup (?)
   5861	001A			     tempoConsumidor label   word
   5862	001A  02*(??)			     db	     2 dup (?)
   5863	001C			     tempoProdutor   label   word
   5864	001C  02*(??)			     db	     2 dup (?)
   5865	001E			     vetor   label   word
   5866	001E  28*(??)			     db	     40	dup (?)
   5867	0046			     _semid  label   word
   5868	0046  02*(??)			     db	     2 dup (?)
   5869	0048			     var     label   word
   5870	0048  01F4*(??)			     db	     500 dup (?)
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 104
command.ASM



   5871	023C			     history_pos     label   word
   5872	023C  02*(??)			     db	     2 dup (?)
   5873	023E			     history_nxt     label   word
   5874	023E  02*(??)			     db	     2 dup (?)
   5875	0240			     history_ini     label   word
   5876	0240  02*(??)			     db	     2 dup (?)
   5877	0242			     history_len     label   word
   5878	0242  02*(??)			     db	     2 dup (?)
   5879	0244			     history label   byte
   5880	0244  0136*(??)			     db	     310 dup (?)
   5881	037A			     argv    label   dword
   5882	037A  40*(??)			     db	     64	dup (?)
   5883	03BA			     argline label   byte
   5884	03BA  025F*(??)			     db	     607 dup (?)
   5885	0619			     palavra label   byte
   5886	0619  1F*(??)			     db	     31	dup (?)
   5887	0638			     cmdline label   byte
   5888	0638  1F*(??)			     db	     31	dup (?)
   5889	0657			     end_command     label   word
   5890	0657  02*(??)			     db	     2 dup (?)
   5891					     ?debug  C E9
   5892					     ?debug  C FA00000000
   5893	0659			     _BSS    ends
   5894	00B4			     _DATA   segment word public 'DATA'
   5895	00B4			     s@	     label   byte
   5896	00B4  3F			     db	     '?'
   5897	00B5  00			     db	     0
   5898	00B6  20 20 20 20 20 20	20+	     db	     '			 exibe estas informacoes'
   5899	      20 20 20 20 20 20	20+
   5900	      20 20 20 20 20 65	78+
   5901	      69 62 65 20 65 73	74+
   5902	      61 73 20 69 6E 66	6F+
   5903	      72 6D 61 63 6F 65	73
   5904	00E0  00			     db	     0
   5905	00E1  68 65 6C 70		     db	     'help'
   5906	00E5  00			     db	     0
   5907	00E6  20 20 20 20 20 20	20+	     db	     '		      exibe estas informacoes'
   5908	      20 20 20 20 20 20	20+
   5909	      20 20 65 78 69 62	65+
   5910	      20 65 73 74 61 73	20+
   5911	      69 6E 66 6F 72 6D	61+
   5912	      63 6F 65 73
   5913	010D  00			     db	     0
   5914	010E  76 65 72			     db	     'ver'
   5915	0111  00			     db	     0
   5916	0112  20 20 20 20 20 20	20+	     db	     '		       mostra a	versao do MSO'
   5917	      20 20 20 20 20 20	20+
   5918	      20 20 20 6D 6F 73	74+
   5919	      72 61 20 61 20 76	65+
   5920	      72 73 61 6F 20 64	6F+
   5921	      20 4D 53 4F
   5922	0139  00			     db	     0
   5923	013A  64 61 74 65		     db	     'date'
   5924	013E  00			     db	     0
   5925	013F  20 20 20 20 20 20	20+	     db	     '		      mostra a data'
   5926	      20 20 20 20 20 20	20+
   5927	      20 20 6D 6F 73 74	72+
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 105
command.ASM



   5928	      61 20 61 20 64 61	74+
   5929	      61
   5930	015C  00			     db	     0
   5931	015D  74 69 6D 65		     db	     'time'
   5932	0161  00			     db	     0
   5933	0162  20 20 20 20 20 20	20+	     db	     '		      mostra a hora'
   5934	      20 20 20 20 20 20	20+
   5935	      20 20 6D 6F 73 74	72+
   5936	      61 20 61 20 68 6F	72+
   5937	      61
   5938	017F  00			     db	     0
   5939	0180  63 6C 73			     db	     'cls'
   5940	0183  00			     db	     0
   5941	0184  20 20 20 20 20 20	20+	     db	     '		       limpa a tela'
   5942	      20 20 20 20 20 20	20+
   5943	      20 20 20 6C 69 6D	70+
   5944	      61 20 61 20 74 65	6C+
   5945	      61
   5946	01A1  00			     db	     0
   5947	01A2  63 6C 65 61 72		     db	     'clear'
   5948	01A7  00			     db	     0
   5949	01A8  20 20 20 20 20 20	20+	     db	     '		     limpa a tela'
   5950	      20 20 20 20 20 20	20+
   5951	      20 6C 69 6D 70 61	20+
   5952	      61 20 74 65 6C 61
   5953	01C3  00			     db	     0
   5954	01C4  72 65 62 6F 6F 74		     db	     'reboot'
   5955	01CA  00			     db	     0
   5956	01CB  20 20 20 20 20 20	20+	     db	     '		    reinicializa o sistema'
   5957	      20 20 20 20 20 20	20+
   5958	      72 65 69 6E 69 63	69+
   5959	      61 6C 69 7A 61 20	6F+
   5960	      20 73 69 73 74 65	6D+
   5961	      61
   5962	01EF  00			     db	     0
   5963	01F0  65 78 69 74		     db	     'exit'
   5964	01F4  00			     db	     0
   5965	01F5  20 20 20 20 20 20	20+	     db	     '		      abandona o sistema'
   5966	      20 20 20 20 20 20	20+
   5967	      20 20 61 62 61 6E	64+
   5968	      6F 6E 61 20 6F 20	73+
   5969	      69 73 74 65 6D 61
   5970	0217  00			     db	     0
   5971	0218  71 75 69 74		     db	     'quit'
   5972	021C  00			     db	     0
   5973	021D  20 20 20 20 20 20	20+	     db	     '		      abandona o sistema'
   5974	      20 20 20 20 20 20	20+
   5975	      20 20 61 62 61 6E	64+
   5976	      6F 6E 61 20 6F 20	73+
   5977	      69 73 74 65 6D 61
   5978	023F  00			     db	     0
   5979	0240  70 73			     db	     'ps'
   5980	0242  00			     db	     0
   5981	0243  20 20 20 20 20 20	20+	     db	     '			exibe processos/threads	em execucao'
   5982	      20 20 20 20 20 20	20+
   5983	      20 20 20 20 65 78	69+
   5984	      62 65 20 70 72 6F	63+
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 106
command.ASM



   5985	      65 73 73 6F 73 2F	74+
   5986	      68 72 65 61 64 73	20+
   5987	      65 6D 20 65 78 65	63+
   5988	      75 63 61 6F
   5989	0278  00			     db	     0
   5990	0279  6B 69 6C 6C		     db	     'kill'
   5991	027D  00			     db	     0
   5992	027E  20 3C 70 69 64 3E	20+	     db	     ' <pid>	      encerra um processo/thread'
   5993	      20 20 20 20 20 20	20+
   5994	      20 20 65 6E 63 65	72+
   5995	      72 61 20 75 6D 20	70+
   5996	      72 6F 63 65 73 73	6F+
   5997	      2F 74 68 72 65 61	64
   5998	02A8  00			     db	     0
   5999	02A9  64 65 6D 6F		     db	     'demo'
   6000	02AD  00			     db	     0
   6001	02AE  20 3C 65 78 69 74	63+	     db	     ' <exitcode>     inicia processos/threads de demonstracao'
   6002	      6F 64 65 3E 20 20	20+
   6003	      20 20 69 6E 69 63	69+
   6004	      61 20 70 72 6F 63	65+
   6005	      73 73 6F 73 2F 74	68+
   6006	      72 65 61 64 73 20	64+
   6007	      65 20 64 65 6D 6F	6E+
   6008	      73 74 72 61 63 61	6F
   6009	02E6  00			     db	     0
   6010	02E7  73 65 74			     db	     'set'
   6011	02EA  00			     db	     0
   6012	02EB  20 5B 3C 76 61 72	3E+	     db	     ' [<var> [<val>]] define o	valor da variavel ou exibe variavei'
   6013	      20 5B 3C 76 61 6C	3E+
   6014	      5D 5D 20 64 65 66	69+
   6015	      6E 65 20 6F 20 76	61+
   6016	      6C 6F 72 20 64 61	20+
   6017	      76 61 72 69 61 76	65+
   6018	      6C 20 6F 75 20 65	78+
   6019	      69 62 65 20 76 61	72+
   6020	      69 61 76 65 69
   6021	0328  73			     db	     's'
   6022	0329  00			     db	     0
   6023	032A  75 6E 73 65 74		     db	     'unset'
   6024	032F  00			     db	     0
   6025	0330  20 3C 76 61 72 3E	20+	     db	     ' <var>	     apaga a variavel'
   6026	      20 20 20 20 20 20	20+
   6027	      20 61 70 61 67 61	20+
   6028	      61 20 76 61 72 69	61+
   6029	      76 65 6C
   6030	034F  00			     db	     0
   6031	0350  65 63 68 6F		     db	     'echo'
   6032	0354  00			     db	     0
   6033	0355  20 5B 2D 6E 5D 20	3C+	     db	     ' [-n] <args>... imprime argumentos'
   6034	      61 72 67 73 3E 2E	2E+
   6035	      2E 20 69 6D 70 72	69+
   6036	      6D 65 20 61 72 67	75+
   6037	      6D 65 6E 74 6F 73
   6038	0377  00			     db	     0
   6039	0378  77 61 69 74 70 69	64	     db	     'waitpid'
   6040	037F  00			     db	     0
   6041	0380  20 3C 70 69 64 3E	20+	     db	     ' <pid>	   espera pelo processo-filho indicado'
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 107
command.ASM



   6042	      20 20 20 20 20 20	65+
   6043	      73 70 65 72 61 20	70+
   6044	      65 6C 6F 20 70 72	6F+
   6045	      63 65 73 73 6F 2D	66+
   6046	      69 6C 68 6F 20 69	6E+
   6047	      64 69 63 61 64 6F
   6048	03B0  00			     db	     0
   6049	03B1  77 61 69 74		     db	     'wait'
   6050	03B5  00			     db	     0
   6051	03B6  20 20 20 20 20 20	20+	     db	     '		      espera por um processo-filho'
   6052	      20 20 20 20 20 20	20+
   6053	      20 20 65 73 70 65	72+
   6054	      61 20 70 6F 72 20	75+
   6055	      6D 20 70 72 6F 63	65+
   6056	      73 73 6F 2D 66 69	6C+
   6057	      68 6F
   6058	03E2  00			     db	     0
   6059	03E3  73 65 6D 6C 73		     db	     'semls'
   6060	03E8  00			     db	     0
   6061	03E9  20 20 20 20 20 20	20+	     db	     '		     lista tabela de semaforos'
   6062	      20 20 20 20 20 20	20+
   6063	      20 6C 69 73 74 61	20+
   6064	      74 61 62 65 6C 61	20+
   6065	      64 65 20 73 65 6D	61+
   6066	      66 6F 72 6F 73
   6067	0411  00			     db	     0
   6068	0412  73 65 6D 63 72 65	61+	     db	     'semcreate'
   6069	      74 65
   6070	041B  00			     db	     0
   6071	041C  20 3C 76 61 6C 75	65+	     db	     ' <value>	 cria um semaforo'
   6072	      3E 20 20 20 63 72	69+
   6073	      61 20 75 6D 20 73	65+
   6074	      6D 61 66 6F 72 6F
   6075	0437  00			     db	     0
   6076	0438  73 65 6D 74 65 73	74	     db	     'semtest'
   6077	043F  00			     db	     0
   6078	0440  20 3C 73 65 6D 69	64+	     db	     ' <semid>	   aplicacao para teste	de semaforos'
   6079	      3E 20 20 20 20 20	61+
   6080	      70 6C 69 63 61 63	61+
   6081	      6F 20 70 61 72 61	20+
   6082	      74 65 73 74 65 20	64+
   6083	      65 20 73 65 6D 61	66+
   6084	      6F 72 6F 73
   6085	046E  00			     db	     0
   6086	046F  73 65 6D 75 70		     db	     'semup'
   6087	0474  00			     db	     0
   6088	0475  20 3C 73 65 6D 69	64+	     db	     ' <semid>	     incrementa	o valor	de um semaforo'
   6089	      3E 20 20 20 20 20	20+
   6090	      20 69 6E 63 72 65	6D+
   6091	      65 6E 74 61 20 6F	20+
   6092	      76 61 6C 6F 72 20	64+
   6093	      65 20 75 6D 20 73	65+
   6094	      6D 61 66 6F 72 6F
   6095	04A5  00			     db	     0
   6096	04A6  73 65 6D 64 65 73	74+	     db	     'semdestroy'
   6097	      72 6F 79
   6098	04B0  00			     db	     0
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 108
command.ASM



   6099	04B1  20 3C 73 65 6D 69	64+	     db	     ' <semid>	destroi	um semaforo'
   6100	      3E 20 20 64 65 73	74+
   6101	      72 6F 69 20 75 6D	20+
   6102	      73 65 6D 61 66 6F	72+
   6103	      6F
   6104	04CE  00			     db	     0
   6105	04CF  73 74 6F 70		     db	     'stop'
   6106	04D3  00			     db	     0
   6107	04D4  3C 70 69 64 3E 20	20+	     db	     '<pid>	     suspende um processo/thread'
   6108	      20 20 20 20 20 20	20+
   6109	      20 73 75 73 70 65	6E+
   6110	      64 65 20 75 6D 20	70+
   6111	      72 6F 63 65 73 73	6F+
   6112	      2F 74 68 72 65 61	64
   6113	04FE  00			     db	     0
   6114	04FF  72 65 73 75 6D 65		     db	     'resume'
   6115	0505  00			     db	     0
   6116	0506  3C 70 69 64 3E 20	20+	     db	     '<pid>	   reinicia um processo/thread'
   6117	      20 20 20 20 20 20	72+
   6118	      65 69 6E 69 63 69	61+
   6119	      20 75 6D 20 70 72	6F+
   6120	      63 65 73 73 6F 2F	74+
   6121	      68 72 65 61 64
   6122	052E  00			     db	     0
   6123	052F  70 72 6F 64 63 6F	6E+	     db	     'prodcons'
   6124	      73
   6125	0537  00			     db	     0
   6126	0538  3C 61 72 67 73 3E	20+	     db	     '<args>	 inicia	produtor consumidor'
   6127	      20 20 20 20 69 6E	69+
   6128	      63 69 61 20 70 72	6F+
   6129	      64 75 74 6F 72 20	63+
   6130	      6F 6E 73 75 6D 69	64+
   6131	      6F 72
   6132	055D  00			     db	     0
   6133	055E  74 70 72 6F 64		     db	     'tprod'
   6134	0563  00			     db	     0
   6135	0564  3C 61 72 67 73 3E	20+	     db	     '<args>	    altera tempo de producao'
   6136	      20 20 20 20 20 20	20+
   6137	      61 6C 74 65 72 61	20+
   6138	      74 65 6D 70 6F 20	64+
   6139	      65 20 70 72 6F 64	75+
   6140	      63 61 6F
   6141	058A  00			     db	     0
   6142	058B  74 63 6F 6E 73		     db	     'tcons'
   6143	0590  00			     db	     0
   6144	0591  3C 61 72 67 73 3E	20+	     db	     '<args>	    altera tempo de consumidor'
   6145	      20 20 20 20 20 20	20+
   6146	      61 6C 74 65 72 61	20+
   6147	      74 65 6D 70 6F 20	64+
   6148	      65 20 63 6F 6E 73	75+
   6149	      6D 69 64 6F 72
   6150	05B9  00			     db	     0
   6151	05BA  20 20 20 20 20 20	20+	     db	     '			'
   6152	      20 20 20 20 20 20	20+
   6153	      20 20 20 20
   6154	05CC  DC			     db	     -36
   6155	05CD  DC			     db	     -36
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 109
command.ASM



   6156	05CE  DC			     db	     -36
   6157	05CF  DC			     db	     -36
   6158	05D0  DC			     db	     -36
   6159	05D1  DC			     db	     -36
   6160	05D2  DC			     db	     -36
   6161	05D3  20 20			     db	     '	'
   6162	05D5  DC			     db	     -36
   6163	05D6  DC			     db	     -36
   6164	05D7  DC			     db	     -36
   6165	05D8  DC			     db	     -36
   6166	05D9  DC			     db	     -36
   6167	05DA  DC			     db	     -36
   6168	05DB  0A			     db	     10
   6169	05DC  00			     db	     0
   6170	05DD  20			     db	     ' '
   6171	05DE  DC			     db	     -36
   6172	05DF  DC			     db	     -36
   6173	05E0  DC			     db	     -36
   6174	05E1  DC			     db	     -36
   6175	05E2  DC			     db	     -36
   6176	05E3  20 20			     db	     '	'
   6177	05E5  DC			     db	     -36
   6178	05E6  20 20			     db	     '	'
   6179	05E8  DC			     db	     -36
   6180	05E9  DC			     db	     -36
   6181	05EA  DC			     db	     -36
   6182	05EB  20 20			     db	     '	'
   6183	05ED  DC			     db	     -36
   6184	05EE  20			     db	     ' '
   6185	05EF  DB			     db	     -37
   6186	05F0  DB			     db	     -37
   6187	05F1  20 20 20			     db	     '	 '
   6188	05F4  DF			     db	     -33
   6189	05F5  DF			     db	     -33
   6190	05F6  20 20			     db	     '	'
   6191	05F8  DB			     db	     -37
   6192	05F9  DB			     db	     -37
   6193	05FA  20 20			     db	     '	'
   6194	05FC  DB			     db	     -37
   6195	05FD  DB			     db	     -37
   6196	05FE  20 20			     db	     '	'
   6197	0600  00			     db	     0
   6198	0601  4D 69 6E 69 73 53	69+	     db	     'MinisSistema Operacional'
   6199	      73 74 65 6D 61 20	4F+
   6200	      70 65 72 61 63 69	6F+
   6201	      6E 61 6C
   6202	0619  0A			     db	     10
   6203	061A  00			     db	     0
   6204	061B  DC			     db	     -36
   6205	061C  DB			     db	     -37
   6206	061D  20			     db	     ' '
   6207	061E  DB			     db	     -37
   6208	061F  20			     db	     ' '
   6209	0620  DB			     db	     -37
   6210	0621  20			     db	     ' '
   6211	0622  DC			     db	     -36
   6212	0623  DB			     db	     -37
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 110
command.ASM



   6213	0624  20			     db	     ' '
   6214	0625  DC			     db	     -36
   6215	0626  DB			     db	     -37
   6216	0627  20			     db	     ' '
   6217	0628  DB			     db	     -37
   6218	0629  20			     db	     ' '
   6219	062A  DC			     db	     -36
   6220	062B  DB			     db	     -37
   6221	062C  20			     db	     ' '
   6222	062D  DF			     db	     -33
   6223	062E  DF			     db	     -33
   6224	062F  DF			     db	     -33
   6225	0630  DF			     db	     -33
   6226	0631  DB			     db	     -37
   6227	0632  DB			     db	     -37
   6228	0633  DB			     db	     -37
   6229	0634  20			     db	     ' '
   6230	0635  DB			     db	     -37
   6231	0636  DB			     db	     -37
   6232	0637  DB			     db	     -37
   6233	0638  20 20			     db	     '	'
   6234	063A  DB			     db	     -37
   6235	063B  DB			     db	     -37
   6236	063C  20 20			     db	     '	'
   6237	063E  00			     db	     0
   6238	063F  56 73 20			     db	     'Vs '
   6239	0642  00			     db	     0
   6240	0643  32 30 31 35		     db	     '2015'
   6241	0647  00			     db	     0
   6242	0648  0A			     db	     10
   6243	0649  00			     db	     0
   6244	064A  DB			     db	     -37
   6245	064B  DB			     db	     -37
   6246	064C  20			     db	     ' '
   6247	064D  DB			     db	     -37
   6248	064E  20			     db	     ' '
   6249	064F  DB			     db	     -37
   6250	0650  20			     db	     ' '
   6251	0651  DB			     db	     -37
   6252	0652  DB			     db	     -37
   6253	0653  20			     db	     ' '
   6254	0654  DB			     db	     -37
   6255	0655  DB			     db	     -37
   6256	0656  20			     db	     ' '
   6257	0657  DB			     db	     -37
   6258	0658  20			     db	     ' '
   6259	0659  DB			     db	     -37
   6260	065A  DB			     db	     -37
   6261	065B  20			     db	     ' '
   6262	065C  DB			     db	     -37
   6263	065D  DB			     db	     -37
   6264	065E  DC			     db	     -36
   6265	065F  DC			     db	     -36
   6266	0660  DB			     db	     -37
   6267	0661  DB			     db	     -37
   6268	0662  DB			     db	     -37
   6269	0663  20			     db	     ' '
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 111
command.ASM



   6270	0664  DB			     db	     -37
   6271	0665  DB			     db	     -37
   6272	0666  DB			     db	     -37
   6273	0667  DC			     db	     -36
   6274	0668  DC			     db	     -36
   6275	0669  DB			     db	     -37
   6276	066A  DB			     db	     -37
   6277	066B  20 20			     db	     '	'
   6278	066D  00			     db	     0
   6279	066E  70 6F 72 20 52 6F	6C+	     db	     'por Roland Teodorowitsch'
   6280	      61 6E 64 20 54 65	6F+
   6281	      64 6F 72 6F 77 69	74+
   6282	      73 63 68
   6283	0686  0A			     db	     10
   6284	0687  00			     db	     0
   6285	0688  0A			     db	     10
   6286	0689  44 69 67 69 74 65	20	     db	     'Digite '
   6287	0690  27			     db	     39
   6288	0691  68 65 6C 70		     db	     'help'
   6289	0695  27			     db	     39
   6290	0696  20 6F 75 20		     db	     ' ou '
   6291	069A  27			     db	     39
   6292	069B  3F			     db	     '?'
   6293	069C  27			     db	     39
   6294	069D  20 70 61 72 61 20	61+	     db	     ' para ajuda...'
   6295	      6A 75 64 61 2E 2E	2E
   6296	06AB  0A			     db	     10
   6297	06AC  0A			     db	     10
   6298	06AD  00			     db	     0
   6299	06AE  50 52 4F 4D 50 54		     db	     'PROMPT'
   6300	06B4  00			     db	     0
   6301	06B5  6D 69 6E 69 53 4F	3E	     db	     'miniSO>'
   6302	06BC  00			     db	     0
   6303	06BD  45 52 52 4F 52 4C	45+	     db	     'ERRORLEVEL'
   6304	      56 45 4C
   6305	06C7  00			     db	     0
   6306	06C8  30			     db	     '0'
   6307	06C9  00			     db	     0
   6308	06CA  45 52 52 4F 52 4C	45+	     db	     'ERRORLEVEL'
   6309	      56 45 4C
   6310	06D4  00			     db	     0
   6311	06D5  45 72 72 6F 3A 20	63+	     db	     'Erro: comando desconhecido!'
   6312	      6F 6D 61 6E 64 6F	20+
   6313	      64 65 73 63 6F 6E	68+
   6314	      65 63 69 64 6F 21
   6315	06F0  0A			     db	     10
   6316	06F1  00			     db	     0
   6317	06F2  50 52 4F 4D 50 54		     db	     'PROMPT'
   6318	06F8  00			     db	     0
   6319	06F9  43 6F 6D 61 6E 64	6F+	     db	     'Comandos do minisSistema Operacional:'
   6320	      73 20 64 6F 20 6D	69+
   6321	      6E 69 73 53 69 73	74+
   6322	      65 6D 61 20 4F 70	65+
   6323	      72 61 63 69 6F 6E	61+
   6324	      6C 3A
   6325	071E  0A			     db	     10
   6326	071F  00			     db	     0
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 112
command.ASM



   6327	0720  6D 69 6E 69 73 53	69+	     db	     'minisSistema Operacional - Vs '
   6328	      73 74 65 6D 61 20	4F+
   6329	      70 65 72 61 63 69	6F+
   6330	      6E 61 6C 20 2D 20	56+
   6331	      73 20
   6332	073E  00			     db	     0
   6333	073F  32 30 31 35		     db	     '2015'
   6334	0743  00			     db	     0
   6335	0744  20 42 43 50 20 20	20+	     db	     ' BCP   PID   PPID	 STATUS	  WAIT	 ZLIST	PREV   NEXT'
   6336	      50 49 44 20 20 20	50+
   6337	      50 49 44 20 20 53	54+
   6338	      41 54 55 53 20 20	20+
   6339	      57 41 49 54 20 20	20+
   6340	      5A 4C 49 53 54 20	20+
   6341	      50 52 45 56 20 20	20+
   6342	      4E 45 58 54
   6343	0779  0A			     db	     10
   6344	077A  00			     db	     0
   6345	077B  20 20			     db	     '	'
   6346	077D  00			     db	     0
   6347	077E  20 20			     db	     '	'
   6348	0780  00			     db	     0
   6349	0781  20 20			     db	     '	'
   6350	0783  00			     db	     0
   6351	0784  46 52 45 45 20 20	20	     db	     'FREE   '
   6352	078B  00			     db	     0
   6353	078C  52 45 41 44 59 20	20	     db	     'READY  '
   6354	0793  00			     db	     0
   6355	0794  52 55 4E 4E 49 4E	47	     db	     'RUNNING'
   6356	079B  00			     db	     0
   6357	079C  5A 4F 4D 42 49 45	20	     db	     'ZOMBIE '
   6358	07A3  00			     db	     0
   6359	07A4  57 41 49 54 20 20	20	     db	     'WAIT   '
   6360	07AB  00			     db	     0
   6361	07AC  57 41 49 54 53 49	47	     db	     'WAITSIG'
   6362	07B3  00			     db	     0
   6363	07B4  57 41 49 54 53 45	4D	     db	     'WAITSEM'
   6364	07BB  00			     db	     0
   6365	07BC  53 54 4F 50 50 45	44	     db	     'STOPPED'
   6366	07C3  00			     db	     0
   6367	07C4  20 20			     db	     '	'
   6368	07C6  00			     db	     0
   6369	07C7  20 20			     db	     '	'
   6370	07C9  00			     db	     0
   6371	07CA  20			     db	     ' '
   6372	07CB  00			     db	     0
   6373	07CC  20 20			     db	     '	'
   6374	07CE  00			     db	     0
   6375	07CF  45 72 72 6F 20 65	6D+	     db	     'Erro em kill: parametro nao fornecido!'
   6376	      20 6B 69 6C 6C 3A	20+
   6377	      70 61 72 61 6D 65	74+
   6378	      72 6F 20 6E 61 6F	20+
   6379	      66 6F 72 6E 65 63	69+
   6380	      64 6F 21
   6381	07F5  0A			     db	     10
   6382	07F6  00			     db	     0
   6383	07F7  6B 69 6C 6C 3A 20	69+	     db	     'kill: impossivel matar o processo/thread'
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 113
command.ASM



   6384	      6D 70 6F 73 73 69	76+
   6385	      65 6C 20 6D 61 74	61+
   6386	      72 20 6F 20 70 72	6F+
   6387	      63 65 73 73 6F 2F	74+
   6388	      68 72 65 61 64
   6389	081F  0A			     db	     10
   6390	0820  00			     db	     0
   6391	0821  00			     db	     0
   6392	0822  45 72 72 6F 20 65	6D+	     db	     'Erro em set: nao ha espaco para novas variaveis!'
   6393	      20 73 65 74 3A 20	6E+
   6394	      61 6F 20 68 61 20	65+
   6395	      73 70 61 63 6F 20	70+
   6396	      61 72 61 20 6E 6F	76+
   6397	      61 73 20 76 61 72	69+
   6398	      61 76 65 69 73 21
   6399	0852  0A			     db	     10
   6400	0853  00			     db	     0
   6401	0854  45 72 72 6F 20 65	6D+	     db	     'Erro em set: o tamanho do	nome da	variavel e muito grande!'
   6402	      20 73 65 74 3A 20	6F+
   6403	      20 74 61 6D 61 6E	68+
   6404	      6F 20 64 6F 20 6E	6F+
   6405	      6D 65 20 64 61 20	76+
   6406	      61 72 69 61 76 65	6C+
   6407	      20 65 20 6D 75 69	74+
   6408	      6F 20 67 72 61 6E	64+
   6409	      65 21
   6410	088E  0A			     db	     10
   6411	088F  00			     db	     0
   6412	0890  45 72 72 6F 20 65	6D+	     db	     'Erro em set: o tamanho do	conteudo da variavel e muito grande'
   6413	      20 73 65 74 3A 20	6F+
   6414	      20 74 61 6D 61 6E	68+
   6415	      6F 20 64 6F 20 63	6F+
   6416	      6E 74 65 75 64 6F	20+
   6417	      64 61 20 76 61 72	69+
   6418	      61 76 65 6C 20 65	20+
   6419	      6D 75 69 74 6F 20	67+
   6420	      72 61 6E 64 65
   6421	08CD  21			     db	     '!'
   6422	08CE  0A			     db	     10
   6423	08CF  00			     db	     0
   6424	08D0  45 72 72 6F 20 65	6D+	     db	     'Erro em set: argumentos demais na	linha de comando!'
   6425	      20 73 65 74 3A 20	61+
   6426	      72 67 75 6D 65 6E	74+
   6427	      6F 73 20 64 65 6D	61+
   6428	      69 73 20 6E 61 20	6C+
   6429	      69 6E 68 61 20 64	65+
   6430	      20 63 6F 6D 61 6E	64+
   6431	      6F 21
   6432	0903  0A			     db	     10
   6433	0904  00			     db	     0
   6434	0905  45 72 72 6F 20 65	6D+	     db	     'Erro em unset: numero invalido de	argumentos!'
   6435	      20 75 6E 73 65 74	3A+
   6436	      20 6E 75 6D 65 72	6F+
   6437	      20 69 6E 76 61 6C	69+
   6438	      64 6F 20 64 65 20	61+
   6439	      72 67 75 6D 65 6E	74+
   6440	      6F 73 21
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 114
command.ASM



   6441	0932  0A			     db	     10
   6442	0933  00			     db	     0
   6443	0934  45 72 72 6F 20 65	6D+	     db	     'Erro em unset: variavel inexistente!'
   6444	      20 75 6E 73 65 74	3A+
   6445	      20 76 61 72 69 61	76+
   6446	      65 6C 20 69 6E 65	78+
   6447	      69 73 74 65 6E 74	65+
   6448	      21
   6449	0958  0A			     db	     10
   6450	0959  00			     db	     0
   6451	095A  2D 6E			     db	     '-n'
   6452	095C  00			     db	     0
   6453	095D  DA			     db	     -38
   6454	095E  C4			     db	     -60
   6455	095F  C4			     db	     -60
   6456	0960  20 54 68 72 65 61	64+	     db	     ' Thread '
   6457	      20
   6458	0968  C4			     db	     -60
   6459	0969  C4			     db	     -60
   6460	096A  C4			     db	     -60
   6461	096B  C4			     db	     -60
   6462	096C  BF			     db	     -65
   6463	096D  00			     db	     0
   6464	096E  B3			     db	     -77
   6465	096F  20 50 49 44 20 20	3D+	     db	     ' PID  =	    '
   6466	      20 20 20 20 20 20	20
   6467	097D  B3			     db	     -77
   6468	097E  00			     db	     0
   6469	097F  B3			     db	     -77
   6470	0980  20 45 78 65 63 75	63+	     db	     ' Execucao:    '
   6471	      61 6F 3A 20 20 20	20
   6472	098E  B3			     db	     -77
   6473	098F  00			     db	     0
   6474	0990  B3			     db	     -77
   6475	0991  20 20 20 20 20 20	20+	     db	     '		    '
   6476	      20 20 20 20 20 20	20
   6477	099F  B3			     db	     -77
   6478	09A0  00			     db	     0
   6479	09A1  C0			     db	     -64
   6480	09A2  C4			     db	     -60
   6481	09A3  C4			     db	     -60
   6482	09A4  C4			     db	     -60
   6483	09A5  C4			     db	     -60
   6484	09A6  C4			     db	     -60
   6485	09A7  C4			     db	     -60
   6486	09A8  C4			     db	     -60
   6487	09A9  C4			     db	     -60
   6488	09AA  C4			     db	     -60
   6489	09AB  C4			     db	     -60
   6490	09AC  C4			     db	     -60
   6491	09AD  C4			     db	     -60
   6492	09AE  C4			     db	     -60
   6493	09AF  C4			     db	     -60
   6494	09B0  D9			     db	     -39
   6495	09B1  00			     db	     0
   6496	09B2  45 72 72 6F 20 65	6D+	     db	     'Erro em demo: numero invalido de argumentos!'
   6497	      20 64 65 6D 6F 3A	20+
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 115
command.ASM



   6498	      6E 75 6D 65 72 6F	20+
   6499	      69 6E 76 61 6C 69	64+
   6500	      6F 20 64 65 20 61	72+
   6501	      67 75 6D 65 6E 74	6F+
   6502	      73 21
   6503	09DE  0A			     db	     10
   6504	09DF  00			     db	     0
   6505	09E0  45 72 72 6F 20 65	6D+	     db	     'Erro em demo: fork() nao conseguiu criar thread!'
   6506	      20 64 65 6D 6F 3A	20+
   6507	      66 6F 72 6B 28 29	20+
   6508	      6E 61 6F 20 63 6F	6E+
   6509	      73 65 67 75 69 75	20+
   6510	      63 72 69 61 72 20	74+
   6511	      68 72 65 61 64 21
   6512	0A10  0A			     db	     10
   6513	0A11  00			     db	     0
   6514	0A12  45 72 72 6F 20 65	6D+	     db	     'Erro em waitpid: numero invalido de argumentos!'
   6515	      20 77 61 69 74 70	69+
   6516	      64 3A 20 6E 75 6D	65+
   6517	      72 6F 20 69 6E 76	61+
   6518	      6C 69 64 6F 20 64	65+
   6519	      20 61 72 67 75 6D	65+
   6520	      6E 74 6F 73 21
   6521	0A41  0A			     db	     10
   6522	0A42  00			     db	     0
   6523	0A43  50 72 6F 63 65 73	73+	     db	     'Processo '
   6524	      6F 20
   6525	0A4C  00			     db	     0
   6526	0A4D  20 65 6E 63 65 72	72+	     db	     ' encerrado com codigo de fim '
   6527	      61 64 6F 20 63 6F	6D+
   6528	      20 63 6F 64 69 67	6F+
   6529	      20 64 65 20 66 69	6D+
   6530	      20
   6531	0A6A  00			     db	     0
   6532	0A6B  21			     db	     '!'
   6533	0A6C  0A			     db	     10
   6534	0A6D  00			     db	     0
   6535	0A6E  50 72 6F 63 65 73	73+	     db	     'Processo '
   6536	      6F 20
   6537	0A77  00			     db	     0
   6538	0A78  20 65 6E 63 65 72	72+	     db	     ' encerrado com codigo de fim '
   6539	      61 64 6F 20 63 6F	6D+
   6540	      20 63 6F 64 69 67	6F+
   6541	      20 64 65 20 66 69	6D+
   6542	      20
   6543	0A95  00			     db	     0
   6544	0A96  21			     db	     '!'
   6545	0A97  0A			     db	     10
   6546	0A98  00			     db	     0
   6547	0A99  53 65 6D 61 70 68	6F+	     db	     'Semaphores:'
   6548	      72 65 73 3A
   6549	0AA4  0A			     db	     10
   6550	0AA5  00			     db	     0
   6551	0AA6  2D 20 69 64 3D		     db	     '-	id='
   6552	0AAB  00			     db	     0
   6553	0AAC  20 76 61 6C 75 65	3D	     db	     ' value='
   6554	0AB3  00			     db	     0
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 116
command.ASM



   6555	0AB4  20 71 75 65 75 65	3D	     db	     ' queue='
   6556	0ABB  00			     db	     0
   6557	0ABC  54 4F 54 41 4C 3D		     db	     'TOTAL='
   6558	0AC2  00			     db	     0
   6559	0AC3  0A			     db	     10
   6560	0AC4  0A			     db	     10
   6561	0AC5  00			     db	     0
   6562	0AC6  45 72 72 6F 20 65	6D+	     db	     'Erro em semcreate: numero	invalido de argumentos!'
   6563	      20 73 65 6D 63 72	65+
   6564	      61 74 65 3A 20 6E	75+
   6565	      6D 65 72 6F 20 69	6E+
   6566	      76 61 6C 69 64 6F	20+
   6567	      64 65 20 61 72 67	75+
   6568	      6D 65 6E 74 6F 73	21
   6569	0AF7  0A			     db	     10
   6570	0AF8  00			     db	     0
   6571	0AF9  53 65 6D 61 66 6F	72+	     db	     'Semaforo id='
   6572	      6F 20 69 64 3D
   6573	0B05  00			     db	     0
   6574	0B06  20 63 72 69 61 64	6F+	     db	     ' criado (value='
   6575	      20 28 76 61 6C 75	65+
   6576	      3D
   6577	0B15  00			     db	     0
   6578	0B16  29			     db	     ')'
   6579	0B17  0A			     db	     10
   6580	0B18  00			     db	     0
   6581	0B19  DA			     db	     -38
   6582	0B1A  C4			     db	     -60
   6583	0B1B  C4			     db	     -60
   6584	0B1C  20 54 68 72 65 61	64+	     db	     ' Thread '
   6585	      20
   6586	0B24  C4			     db	     -60
   6587	0B25  C4			     db	     -60
   6588	0B26  C4			     db	     -60
   6589	0B27  C4			     db	     -60
   6590	0B28  BF			     db	     -65
   6591	0B29  00			     db	     0
   6592	0B2A  B3			     db	     -77
   6593	0B2B  20 50 49 44 20 20	3D+	     db	     ' PID  =	    '
   6594	      20 20 20 20 20 20	20
   6595	0B39  B3			     db	     -77
   6596	0B3A  00			     db	     0
   6597	0B3B  B3			     db	     -77
   6598	0B3C  20 45 78 65 63 75	63+	     db	     ' Execucao:    '
   6599	      61 6F 3A 20 20 20	20
   6600	0B4A  B3			     db	     -77
   6601	0B4B  00			     db	     0
   6602	0B4C  B3			     db	     -77
   6603	0B4D  20 20 20 20 20 20	20+	     db	     '		    '
   6604	      20 20 20 20 20 20	20
   6605	0B5B  B3			     db	     -77
   6606	0B5C  00			     db	     0
   6607	0B5D  C0			     db	     -64
   6608	0B5E  C4			     db	     -60
   6609	0B5F  C4			     db	     -60
   6610	0B60  C4			     db	     -60
   6611	0B61  C4			     db	     -60
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 117
command.ASM



   6612	0B62  C4			     db	     -60
   6613	0B63  C4			     db	     -60
   6614	0B64  C4			     db	     -60
   6615	0B65  C4			     db	     -60
   6616	0B66  C4			     db	     -60
   6617	0B67  C4			     db	     -60
   6618	0B68  C4			     db	     -60
   6619	0B69  C4			     db	     -60
   6620	0B6A  C4			     db	     -60
   6621	0B6B  C4			     db	     -60
   6622	0B6C  D9			     db	     -39
   6623	0B6D  00			     db	     0
   6624	0B6E  45 72 72 6F 20 65	6D+	     db	     'Erro em semtest: numero invalido de argumentos!'
   6625	      20 73 65 6D 74 65	73+
   6626	      74 3A 20 6E 75 6D	65+
   6627	      72 6F 20 69 6E 76	61+
   6628	      6C 69 64 6F 20 64	65+
   6629	      20 61 72 67 75 6D	65+
   6630	      6E 74 6F 73 21
   6631	0B9D  0A			     db	     10
   6632	0B9E  00			     db	     0
   6633	0B9F  45 72 72 6F 20 65	6D+	     db	     'Erro em demo: fork() nao conseguiu criar thread!'
   6634	      20 64 65 6D 6F 3A	20+
   6635	      66 6F 72 6B 28 29	20+
   6636	      6E 61 6F 20 63 6F	6E+
   6637	      73 65 67 75 69 75	20+
   6638	      63 72 69 61 72 20	74+
   6639	      68 72 65 61 64 21
   6640	0BCF  0A			     db	     10
   6641	0BD0  00			     db	     0
   6642	0BD1  45 72 72 6F 20 65	6D+	     db	     'Erro em semtest: numero invalido de argumentos!'
   6643	      20 73 65 6D 74 65	73+
   6644	      74 3A 20 6E 75 6D	65+
   6645	      72 6F 20 69 6E 76	61+
   6646	      6C 69 64 6F 20 64	65+
   6647	      20 61 72 67 75 6D	65+
   6648	      6E 74 6F 73 21
   6649	0C00  0A			     db	     10
   6650	0C01  00			     db	     0
   6651	0C02  45 72 72 6F 20 65	6D+	     db	     'Erro em semtest: numero invalido de argumentos!'
   6652	      20 73 65 6D 74 65	73+
   6653	      74 3A 20 6E 75 6D	65+
   6654	      72 6F 20 69 6E 76	61+
   6655	      6C 69 64 6F 20 64	65+
   6656	      20 61 72 67 75 6D	65+
   6657	      6E 74 6F 73 21
   6658	0C31  0A			     db	     10
   6659	0C32  00			     db	     0
   6660	0C33  73 74 6F 70 3A 20	6E+	     db	     'stop: nenhum parametro foi fornecido'
   6661	      65 6E 68 75 6D 20	70+
   6662	      61 72 61 6D 65 74	72+
   6663	      6F 20 66 6F 69 20	66+
   6664	      6F 72 6E 65 63 69	64+
   6665	      6F
   6666	0C57  0A			     db	     10
   6667	0C58  00			     db	     0
   6668	0C59  73 74 6F 70 3A 20	69+	     db	     'stop: impossivel suspender a thread'
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 118
command.ASM



   6669	      6D 70 6F 73 73 69	76+
   6670	      65 6C 20 73 75 73	70+
   6671	      65 6E 64 65 72 20	61+
   6672	      20 74 68 72 65 61	64
   6673	0C7C  0A			     db	     10
   6674	0C7D  00			     db	     0
   6675	0C7E  72 65 73 75 6D 65	3A+	     db	     'resume: nenhum parametro foi fornecido'
   6676	      20 6E 65 6E 68 75	6D+
   6677	      20 70 61 72 61 6D	65+
   6678	      74 72 6F 20 66 6F	69+
   6679	      20 66 6F 72 6E 65	63+
   6680	      69 64 6F
   6681	0CA4  0A			     db	     10
   6682	0CA5  00			     db	     0
   6683	0CA6  72 65 73 75 6D 65	3A+	     db	     'resume: impossivel reiniciar a thread'
   6684	      20 69 6D 70 6F 73	73+
   6685	      69 76 65 6C 20 72	65+
   6686	      69 6E 69 63 69 61	72+
   6687	      20 61 20 74 68 72	65+
   6688	      61 64
   6689	0CCB  0A			     db	     10
   6690	0CCC  00			     db	     0
   6691	0CCD  20 20 20 20 20 20	20+	     db	     '			     '
   6692	      20 20 20 20 20 20	20+
   6693	      20 20 20 20 20 20	20+
   6694	      20 20
   6695	0CE4  00			     db	     0
   6696	0CE5  20 20 20 20 20 20	20+	     db	     '			     '
   6697	      20 20 20 20 20 20	20+
   6698	      20 20 20 20 20 20	20+
   6699	      20 20
   6700	0CFC  00			     db	     0
   6701	0CFD  DA			     db	     -38
   6702	0CFE  C4			     db	     -60
   6703	0CFF  C4			     db	     -60
   6704	0D00  C4			     db	     -60
   6705	0D01  C4			     db	     -60
   6706	0D02  20 20 50 72 6F 64	43+	     db	     '	ProdCons   '
   6707	      6F 6E 73 20 20 20
   6708	0D0F  C4			     db	     -60
   6709	0D10  C4			     db	     -60
   6710	0D11  C4			     db	     -60
   6711	0D12  C4			     db	     -60
   6712	0D13  BF			     db	     -65
   6713	0D14  00			     db	     0
   6714	0D15  B3			     db	     -77
   6715	0D16  20 54 61 6D 61 6E	68+	     db	     ' Tamanho Buffer:	   '
   6716	      6F 20 42 75 66 66	65+
   6717	      72 3A 20 20 20 20	20
   6718	0D2B  B3			     db	     -77
   6719	0D2C  00			     db	     0
   6720	0D2D  B3			     db	     -77
   6721	0D2E  20			     db	     ' '
   6722	0D2F  00			     db	     0
   6723	0D30  20 20			     db	     '	'
   6724	0D32  B3			     db	     -77
   6725	0D33  00			     db	     0
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 119
command.ASM



   6726	0D34  B3			     db	     -77
   6727	0D35  20 50 72 6F 64 75	74+	     db	     ' Produtor:	   '
   6728	      6F 72 3A 20 20 20	20+
   6729	      20 20 20 20 20 20	20
   6730	0D4A  B3			     db	     -77
   6731	0D4B  00			     db	     0
   6732	0D4C  B3			     db	     -77
   6733	0D4D  20 43 6F 6E 73 75	6D+	     db	     ' Consumidor:	   '
   6734	      69 64 6F 72 3A 20	20+
   6735	      20 20 20 20 20 20	20
   6736	0D62  B3			     db	     -77
   6737	0D63  00			     db	     0
   6738	0D64  C0			     db	     -64
   6739	0D65  C4			     db	     -60
   6740	0D66  C4			     db	     -60
   6741	0D67  C4			     db	     -60
   6742	0D68  C4			     db	     -60
   6743	0D69  C4			     db	     -60
   6744	0D6A  C4			     db	     -60
   6745	0D6B  C4			     db	     -60
   6746	0D6C  C4			     db	     -60
   6747	0D6D  C4			     db	     -60
   6748	0D6E  C4			     db	     -60
   6749	0D6F  C4			     db	     -60
   6750	0D70  C4			     db	     -60
   6751	0D71  C4			     db	     -60
   6752	0D72  C4			     db	     -60
   6753	0D73  C4			     db	     -60
   6754	0D74  C4			     db	     -60
   6755	0D75  C4			     db	     -60
   6756	0D76  C4			     db	     -60
   6757	0D77  C4			     db	     -60
   6758	0D78  C4			     db	     -60
   6759	0D79  C4			     db	     -60
   6760	0D7A  D9			     db	     -39
   6761	0D7B  00			     db	     0
   6762	0D7C  45 72 72 6F 20 65	6D+	     db	     'Erro em prodcons:	numero invalido	de argumentos!'
   6763	      20 70 72 6F 64 63	6F+
   6764	      6E 73 3A 20 6E 75	6D+
   6765	      65 72 6F 20 69 6E	76+
   6766	      61 6C 69 64 6F 20	64+
   6767	      65 20 61 72 67 75	6D+
   6768	      65 6E 74 6F 73 21
   6769	0DAC  0A			     db	     10
   6770	0DAD  00			     db	     0
   6771	0DAE  45 72 72 6F 20 65	6D+	     db	     'Erro em prodcons:	numero invalido	de argumentos!'
   6772	      20 70 72 6F 64 63	6F+
   6773	      6E 73 3A 20 6E 75	6D+
   6774	      65 72 6F 20 69 6E	76+
   6775	      61 6C 69 64 6F 20	64+
   6776	      65 20 61 72 67 75	6D+
   6777	      65 6E 74 6F 73 21
   6778	0DDE  0A			     db	     10
   6779	0DDF  00			     db	     0
   6780	0DE0  45 72 72 6F 20 65	6D+	     db	     'Erro em prodcons:	numero invalido	de argumentos!'
   6781	      20 70 72 6F 64 63	6F+
   6782	      6E 73 3A 20 6E 75	6D+
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 120
command.ASM



   6783	      65 72 6F 20 69 6E	76+
   6784	      61 6C 69 64 6F 20	64+
   6785	      65 20 61 72 67 75	6D+
   6786	      65 6E 74 6F 73 21
   6787	0E10  0A			     db	     10
   6788	0E11  00			     db	     0
   6789	0E12  45 72 72 6F 20 65	6D+	     db	     'Erro em prodcons:	fork() nao conseguiu criar thread!'
   6790	      20 70 72 6F 64 63	6F+
   6791	      6E 73 3A 20 66 6F	72+
   6792	      6B 28 29 20 6E 61	6F+
   6793	      20 63 6F 6E 73 65	67+
   6794	      75 69 75 20 63 72	69+
   6795	      61 72 20 74 68 72	65+
   6796	      61 64 21
   6797	0E46  0A			     db	     10
   6798	0E47  00			     db	     0
   6799	0E48  45 72 72 6F 20 65	6D+	     db	     'Erro em prodcons:	fork() nao conseguiu criar thread!'
   6800	      20 70 72 6F 64 63	6F+
   6801	      6E 73 3A 20 66 6F	72+
   6802	      6B 28 29 20 6E 61	6F+
   6803	      20 63 6F 6E 73 65	67+
   6804	      75 69 75 20 63 72	69+
   6805	      61 72 20 74 68 72	65+
   6806	      61 64 21
   6807	0E7C  0A			     db	     10
   6808	0E7D  00			     db	     0
   6809	0E7E			     _DATA   ends
   6810	1881			     _TEXT   segment byte public 'CODE'
   6811	1881			     _TEXT   ends
   6812					     public  _consumidor
   6813					     extrn   _sleep:near
   6814					     public  _produtor
   6815					     public  _consome
   6816					     public  _produz
   6817					     public  _avanca
   6818					     public  _inicializaLista
   6819					     public  _imprimeBuffer
   6820					     public  _imprimeLista
   6821				     _cheio  equ     cheio
   6822				     _vazio  equ     vazio
   6823				     _mutex  equ     mutex
   6824				     _tempoConsumidor	     equ     tempoConsumidor
   6825				     _tempoProdutor  equ     tempoProdutor
   6826				     _posicaoConsumidor	     equ     posicaoConsumidor
   6827				     _posicaoProdutor	     equ     posicaoProdutor
   6828				     _vetor  equ     vetor
   6829				     _tamanho_buffer equ     tamanho_buffer
   6830					     public  _sem_aplic
   6831					     public  _semid
   6832					     extrn   _miniSO_sem:word
   6833				     _exitcode	     equ     exitcode
   6834				     _demo_linha     equ     demo_linha
   6835				     _demo   equ     demo
   6836					     extrn   _miniSO_thread:word
   6837				     _commands	     equ     commands
   6838				     _var    equ     var
   6839				     _num_var	     equ     num_var
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 121
command.ASM



   6840				     _history_pos    equ     history_pos
   6841				     _history_nxt    equ     history_nxt
   6842				     _history_ini    equ     history_ini
   6843				     _history_len    equ     history_len
   6844				     _history	     equ     history
   6845				     _argv   equ     argv
   6846				     _argline	     equ     argline
   6847				     _palavra	     equ     palavra
   6848				     _cmdline	     equ     cmdline
   6849				     _end_command    equ     end_command
   6850					     extrn   _minisleep:near
   6851					     extrn   _resume:near
   6852					     extrn   _stop:near
   6853					     extrn   _semdestroy:near
   6854					     extrn   _semdown:near
   6855					     extrn   _semup:near
   6856					     extrn   _semcreate:near
   6857					     extrn   _getpid:near
   6858					     extrn   _exit:near
   6859					     extrn   _waitpid:near
   6860					     extrn   _wait:near
   6861					     extrn   _kill:near
   6862					     extrn   _fork:near
   6863					     extrn   _reboot:near
   6864					     extrn   _inttostr:near
   6865					     extrn   _unsignedtostr:near
   6866					     extrn   _atoi:near
   6867					     extrn   _strlen:near
   6868					     extrn   _strcmp:near
   6869					     extrn   _strcpy:near
   6870					     extrn   _gettime:near
   6871					     extrn   _getdate:near
   6872					     extrn   _gotoxy:near
   6873					     extrn   _wherey:near
   6874					     extrn   _wherex:near
   6875					     extrn   _setcolor:near
   6876					     extrn   _getcolor:near
   6877					     extrn   _putstrxy:near
   6878					     extrn   _putstr:near
   6879					     extrn   _clrscr:near
   6880					     extrn   _getch:near
   6881					     extrn   _putch:near
   6882					     public  _cmd_tcons
   6883					     public  _cmd_tprod
   6884					     public  _cmd_prodcons
   6885					     public  _cmd_resume
   6886					     public  _cmd_stop
   6887					     public  _cmd_semdestroy
   6888					     public  _cmd_semup
   6889					     public  _cmd_semtest
   6890					     public  _cmd_semcreate
   6891					     public  _cmd_semls
   6892					     public  _cmd_waitpid
   6893					     public  _cmd_wait
   6894					     public  _cmd_echo
   6895					     public  _cmd_unset
   6896					     public  _cmd_set
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 122
command.ASM



   6897					     public  _cmd_demo
   6898					     public  _cmd_kill
   6899					     public  _cmd_ps
   6900					     public  _cmd_ver
   6901					     public  _cmd_cls
   6902					     public  _cmd_time
   6903					     public  _cmd_date
   6904					     public  _cmd_help
   6905					     public  _cmd_reboot
   6906					     public  _cmd_exit
   6907				     _command_var_set	     equ     command_var_set
   6908				     _command_var_value	     equ     command_var_value
   6909				     _command_var_unset	     equ     command_var_unset
   6910				     _command_var_search     equ     command_var_search
   6911				     _command_var_list	     equ     command_var_list
   6912				     _command_var_nextfree   equ     command_var_nextfree
   6913				     _command_var_init	     equ     command_var_init
   6914				     _command_showprompt     equ     command_showprompt
   6915				     _command_backspace	     equ     command_backspace
   6916					     public  _command
   6917				     _s@     equ     s@
   6918					     end
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 123
Symbol Table




Symbol Name		Type   Value			   Cref	(defined at #)

??DATE			Text   "12/03/17"
??FILENAME		Text   "command	"
??TIME			Text   "20:31:10"
??VERSION		Number 030A
@10@114			Near   _TEXT:0755		   1828	 #1835
@10@170			Near   _TEXT:076A		   1845	 #1851
@10@254			Near   _TEXT:078B		   1875	 #1881
@10@282			Near   _TEXT:07A3		   1865	 #1895
@10@310			Near   _TEXT:07BF		   1834	 #1915
@10@86			Near   _TEXT:0753		   #1833  1850	1880  1914
@11@58			Near   _TEXT:07D4		   1949	 #1950
@12@58			Near   _TEXT:07EB		   1983	 #1984
@13@114			Near   _TEXT:0838		   2025	 #2059
@13@170			Near   _TEXT:0841		   2067	 #2068
@13@58			Near   _TEXT:0809		   #2026  2061
@14@58			Near   _TEXT:08DA		   2206	 #2207
@15@58			Near   _TEXT:097A		   2347	 #2348
@16@58			Near   _TEXT:0992		   2384	 #2385
@17@58			Near   _TEXT:09C1		   2441	 #2442
@18@1010		Near   _TEXT:0C30		   2949	 #2959
@18@1066		Near   _TEXT:0C4A		   2504	 #2980
@18@1094		Near   _TEXT:0C4B		   2493	 #2982
@18@114			Near   _TEXT:0A12		   #2526  2539
@18@1150		Near   _TEXT:0C57		   2993	 #2994
@18@142			Near   _TEXT:0A1A		   2525	 #2535
@18@198			Near   _TEXT:0A5C		   #2582  2595
@18@226			Near   _TEXT:0A64		   2581	 #2591
@18@282			Near   _TEXT:0AA6		   #2638  2651
@18@310			Near   _TEXT:0AAE		   2637	 #2647
@18@450			Near   _TEXT:0AE4		   #2683  3004
@18@478			Near   _TEXT:0AE8		   #2689  2701	2708  2715  2722  2729	2736  2743
@18@506			Near   _TEXT:0AF0		   #2695  3005
@18@534			Near   _TEXT:0AF6		   #2702  3006
@18@562			Near   _TEXT:0AFC		   #2709  3007
@18@58			Near   _TEXT:09E5		   #2494  2985
@18@590			Near   _TEXT:0B02		   #2716  3008
@18@618			Near   _TEXT:0B08		   #2723  3009
@18@646			Near   _TEXT:0B0E		   #2730  3010
@18@674			Near   _TEXT:0B14		   #2737  3011
@18@702			Near   _TEXT:0B1A		   2680	 2694  #2744
@18@730			Near   _TEXT:0B4A		   #2779  2792
@18@758			Near   _TEXT:0B52		   2778	 #2788
@18@814			Near   _TEXT:0B94		   #2836  2849
@18@842			Near   _TEXT:0B9C		   2835	 #2845
@18@898			Near   _TEXT:0BDE		   #2893  2906
@18@926			Near   _TEXT:0BE6		   2892	 #2902
@18@982			Near   _TEXT:0C28		   #2950  2963
@18@C1266		Word   _TEXT:0C5B		   2682	 #3003
@19@114			Near   _TEXT:0C87		   #3051  3090
@19@142			Near   _TEXT:0C89		   3036	 #3053
@19@198			Near   _TEXT:0CAB		   3076	 #3083
@19@226			Near   _TEXT:0CAF		   3052	 #3091
@19@86			Near   _TEXT:0C7E		   #3042  3082
@1@1094			Near   _TEXT:01D6		   516	#531
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 124
Symbol Table



@1@1150			Near   _TEXT:01E6		   530	537  #546
@1@1178			Near   _TEXT:01E8		   511	#553
@1@1262			Near   _TEXT:0203		   570	#575
@1@1290			Near   _TEXT:020A		   559	#584
@1@1374			Near   _TEXT:0227		   601	#607
@1@142			Near   _TEXT:00FD		   #318	 323
@1@1430			Near   _TEXT:0234		   613	#619
@1@1458			Near   _TEXT:023A		   552	583  591  606  618  #625
@1@1514			Near   _TEXT:0242		   #636	 649
@1@1542			Near   _TEXT:0246		   635	#647
@1@1598			Near   _TEXT:0278		   501	634  #684
@1@1626			Near   _TEXT:027B		   #691	 1274
@1@1766			Near   _TEXT:02A6		   715	#721
@1@1794			Near   _TEXT:02AC		   720	#727
@1@1822			Near   _TEXT:02AE		   708	#732
@1@1878			Near   _TEXT:02BF		   742	#747
@1@1934			Near   _TEXT:02CE		   731	753  #758
@1@1962			Near   _TEXT:02D0		   #760	 774
@1@1990			Near   _TEXT:02D4		   759	#772
@1@2074			Near   _TEXT:030D		   698	702  780  #814
@1@2102			Near   _TEXT:030F		   397	472  493  690  820  #821
@1@2130			Near   _TEXT:0312		   #827	 1289
@1@2158			Near   _TEXT:0337		   #858	 1023
@1@2186			Near   _TEXT:0339		   #860	 873  876
@1@2214			Near   _TEXT:033C		   859	#867
@1@226			Near   _TEXT:010D		   321	#325
@1@2298			Near   _TEXT:0357		   870	#877
@1@2354			Near   _TEXT:0363		   883	#888
@1@2382			Near   _TEXT:0367		   #894	 916
@1@2410			Near   _TEXT:0375		   893	#907
@1@2494			Near   _TEXT:0390		   910	913  #917
@1@254			Near   _TEXT:0111		   #327	 1288
@1@2578			Near   _TEXT:03D3		   944	#969
@1@2606			Near   _TEXT:03D5		   927	968  #975
@1@2662			Near   _TEXT:0411		   1012	 #1017
@1@2690			Near   _TEXT:0414		   974	#1022
@1@2718			Near   _TEXT:0417		   887	1016  #1024
@1@2774			Near   _TEXT:0423		   1031	 #1040
@1@282			Near   _TEXT:0114		   #333	 1287
@1@2830			Near   _TEXT:0448		   1061	 #1067
@1@2886			Near   _TEXT:0457		   1073	 #1079
@1@2914			Near   _TEXT:045B		   1066	 1078  #1085
@1@2970			Near   _TEXT:046A		   1091	 #1097
@1@2998			Near   _TEXT:046E		   1096	 #1103
@1@3026			Near   _TEXT:0477		   #1114  1142
@1@3082			Near   _TEXT:049E		   1129	 #1138
@1@3110			Near   _TEXT:049F		   1113	 #1140
@1@3138			Near   _TEXT:04A4		   1137	 #1143
@1@3194			Near   _TEXT:04E3		   1152	 #1191
@1@3222			Near   _TEXT:04ED		   1190	 #1202
@1@3278			Near   _TEXT:04F7		   1208	 #1213
@1@3306			Near   _TEXT:04FB		   324	#1223
@1@3362			Near   _TEXT:0511		   301	332  353  375  826  1039  1222	1229  #1244
@1@338			Near   _TEXT:011C		   339	#348
@1@366			Near   _TEXT:011F		   #354	 1290
@1@394			Near   _TEXT:0121		   #356	 370
@1@422			Near   _TEXT:0125		   355	#368
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 125
Symbol Table



@1@478			Near   _TEXT:012C		   #376	 1286
@1@562			Near   _TEXT:013F		   #391	 396
@1@58			Near   _TEXT:00EA		   #302	 1247
@1@646			Near   _TEXT:014F		   394	#398
@1@674			Near   _TEXT:0153		   #400	 1271
@1@702			Near   _TEXT:015B		   #407	 420
@1@730			Near   _TEXT:015F		   406	#418
@1@786			Near   _TEXT:016F		   #435	 463
@1@842			Near   _TEXT:0194		   434	#461
@1@898			Near   _TEXT:01A0		   #473	 1273
@1@954			Near   _TEXT:01A8		   479	#488
@1@982			Near   _TEXT:01AB		   #494	 1272
@1@C3234		Word   _TEXT:0531		   317	#1275
@1@C3330		Word   _TEXT:0521		   390	#1262
@20@114			Near   _TEXT:0CCB		   #3129  3227
@20@142			Near   _TEXT:0CCD		   3119	 #3131
@20@198			Near   _TEXT:0CE8		   3137	 #3150
@20@254			Near   _TEXT:0D04		   3155	 #3167
@20@282			Near   _TEXT:0D09		   3149	 3166  #3173
@20@366			Near   _TEXT:0D1B		   #3183  3246
@20@394			Near   _TEXT:0D21		   #3191  3245
@20@422			Near   _TEXT:0D27		   #3200  3244
@20@450			Near   _TEXT:0D2D		   #3210  3243
@20@478			Near   _TEXT:0D31		   3190	 3199  3209  #3218
@20@506			Near   _TEXT:0D3C		   3180	 #3228
@20@534			Near   _TEXT:0D3E		   3130	 #3230
@20@86			Near   _TEXT:0CC9		   #3127  3229
@20@C482		Word   _TEXT:0D44		   3182	 #3242
@21@114			Near   _TEXT:0D65		   #3277  3309
@21@142			Near   _TEXT:0D67		   3262	 #3279
@21@198			Near   _TEXT:0D84		   3295	 #3302
@21@226			Near   _TEXT:0D88		   3278	 #3310
@21@86			Near   _TEXT:0D5C		   #3268  3301
@22@114			Near   _TEXT:0DBE		   3351	 #3357
@22@142			Near   _TEXT:0DC9		   3356	 #3367
@22@170			Near   _TEXT:0DCE		   #3373  3404
@22@226			Near   _TEXT:0DD9		   3378	 #3381
@22@254			Near   _TEXT:0DE1		   3380	 #3389
@22@310			Near   _TEXT:0DF2		   3372	 #3402
@22@338			Near   _TEXT:0DF7		   3339	 #3405
@22@394			Near   _TEXT:0E05		   3412	 #3420
@22@422			Near   _TEXT:0E09		   3425	 #3426
@23@114			Near   _TEXT:0ED2		   3563	 #3592
@23@170			Near   _TEXT:0EDC		   #3601  3631
@23@226			Near   _TEXT:0F05		   3600	 #3629
@23@282			Near   _TEXT:0F0F		   #3638  3668
@23@338			Near   _TEXT:0F38		   3637	 #3666
@23@394			Near   _TEXT:0F42		   #3675  3705
@23@450			Near   _TEXT:0F6B		   3674	 #3703
@23@506			Near   _TEXT:0F75		   #3712  3742
@23@562			Near   _TEXT:0F9E		   3711	 #3740
@23@58			Near   _TEXT:0EA9		   #3564  3594
@23@618			Near   _TEXT:0FA8		   #3749  3779
@23@674			Near   _TEXT:0FD1		   3748	 #3777
@24@114			Near   _TEXT:0FFA		   #3825  3875
@24@142			Near   _TEXT:0FFC		   3810	 #3827
@24@198			Near   _TEXT:100E		   3837	 #3842
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 126
Symbol Table



@24@254			Near   _TEXT:1032		   3861	 #3868
@24@282			Near   _TEXT:1036		   3826	 #3876
@24@86			Near   _TEXT:0FF1		   #3816  3867
@25@114			Near   _TEXT:1054		   3901	 #3917
@25@142			Near   _TEXT:10C2		   3916	 #4007
@25@86			Near   _TEXT:1052		   #3915  4006
@26@58			Near   _TEXT:1139		   4119	 #4120
@27@114			Near   _TEXT:11F8		   4181	 #4284
@27@142			Near   _TEXT:11F9		   4171	 #4286
@27@198			Near   _TEXT:122F		   4332	 #4333
@27@58			Near   _TEXT:1164		   #4172  4289
@28@114			Near   _TEXT:1250		   #4377  4473
@28@142			Near   _TEXT:1252		   4362	 #4379
@28@198			Near   _TEXT:1270		   4402	 #4404
@28@226			Near   _TEXT:12BE		   4378	 #4474
@28@86			Near   _TEXT:124D		   #4375  4403
@29@114			Near   _TEXT:1381		   4595	 #4624
@29@170			Near   _TEXT:1391		   #4635  4666
@29@226			Near   _TEXT:13BA		   4634	 #4664
@29@58			Near   _TEXT:1358		   #4596  4626
@30@114			Near   _TEXT:13E3		   #4714  4764
@30@142			Near   _TEXT:13E5		   4699	 #4716
@30@198			Near   _TEXT:1408		   4736	 #4741
@30@254			Near   _TEXT:141B		   4750	 #4757
@30@282			Near   _TEXT:141F		   4715	 #4765
@30@86			Near   _TEXT:13DA		   #4705  4756
@31@114			Near   _TEXT:143C		   4787	 #4803
@31@142			Near   _TEXT:1456		   4802	 #4822
@31@86			Near   _TEXT:143A		   #4801  4821
@32@114			Near   _TEXT:1475		   4845	 #4861
@32@142			Near   _TEXT:148F		   4860	 #4880
@32@86			Near   _TEXT:1473		   #4859  4879
@33@114			Near   _TEXT:14B1		   4911	 #4927
@33@170			Near   _TEXT:14D7		   4950	 #4960
@33@198			Near   _TEXT:14DB		   4926	 #4966
@33@86			Near   _TEXT:14AF		   #4925  4965
@34@114			Near   _TEXT:14FD		   4998	 #5014
@34@170			Near   _TEXT:1523		   5037	 #5047
@34@198			Near   _TEXT:1527		   5013	 #5053
@34@86			Near   _TEXT:14FB		   #5012  5052
@35@114			Near   _TEXT:1573		   5098	 #5127
@35@58			Near   _TEXT:1544		   #5099  5129
@37@114			Near   _TEXT:16C5		   5373	 #5382
@37@58			Near   _TEXT:16BA		   #5374  5384
@38@142			Near   _TEXT:16E1		   5407	 #5418
@38@170			Near   _TEXT:16E6		   5413	 5417  #5425
@38@86			Near   _TEXT:16DD		   #5412  5424
@3@86			Near   _TEXT:05AF		   1376	 #1405
@41@30			Near   _TEXT:172F		   #5508  5546
@42@30			Near   _TEXT:1761		   #5561  5599
@43@114			Near   _TEXT:17B9		   5633	 #5647
@43@86			Near   _TEXT:17A8		   5619	 #5634
@44@114			Near   _TEXT:17E4		   5680	 #5694
@44@86			Near   _TEXT:17D3		   5666	 #5681
@45@114			Near   _TEXT:1800		   #5731  5844
@45@142			Near   _TEXT:1803		   5716	 #5733
@45@198			Near   _TEXT:1866		   5811	 #5818
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 127
Symbol Table



@45@254			Near   _TEXT:187A		   5829	 #5836
@45@282			Near   _TEXT:187E		   5732	 #5845
@45@86			Near   _TEXT:17F7		   #5722  5817	5835
@4@114			Near   _TEXT:05DF		   1435	 #1454
@4@58			Near   _TEXT:05C2		   #1436  1456
@5@114			Near   _TEXT:05FB		   1482	 #1490
@5@142			Near   _TEXT:05FF		   #1496  1515
@5@198			Near   _TEXT:0613		   1505	 #1511
@5@226			Near   _TEXT:0614		   1495	 #1513
@5@282			Near   _TEXT:061B		   1489	 #1517
@5@58			Near   _TEXT:05F6		   #1483  1516
@5@86			Near   _TEXT:05F9		   #1488  1510
@6@114			Near   _TEXT:0681		   1557	 #1611
@6@142			Near   _TEXT:0682		   1547	 #1613
@6@58			Near   _TEXT:062E		   #1548  1615
@7@114			Near   _TEXT:069E		   1642	 #1650
@7@142			Near   _TEXT:06A2		   #1656  1681
@7@198			Near   _TEXT:06C2		   1671	 #1677
@7@226			Near   _TEXT:06C3		   1655	 #1679
@7@282			Near   _TEXT:06CA		   1649	 #1683
@7@58			Near   _TEXT:0699		   #1643  1682
@7@86			Near   _TEXT:069C		   #1648  1676
@8@114			Near   _TEXT:06E8		   1717	 #1724
@8@142			Near   _TEXT:070C		   1723	 #1750
@8@86			Near   _TEXT:06E6		   #1722  1749
@9@114			Near   _TEXT:072B		   1782	 #1790
@9@142			Near   _TEXT:0739		   1789	 #1800
@9@86			Near   _TEXT:0729		   #1788  1799
@@0			Near   _TEXT:01B5		   500	#502
@@1			Near   _TEXT:0285		   697	#699
@@2			Near   _TEXT:028F		   701	#703
@@3			Near   _TEXT:051B		   1246	 #1248
@@4			Near   _TEXT:09F8		   2503	 #2505
@@5			Near   _TEXT:0C53		   2984	 #2986
@@6			Near   _TEXT:1174		   4180	 #4182
@@7			Near   _TEXT:1201		   4288	 #4290
@CPU			Text   0101H
@CURSEG			Text   _TEXT			   #10	#14  #18  #22  #112  #2452  #2455  #3437  #3445	 #5063	#5074	  +
							   #5854  #5894	 #6810
@FILENAME		Text   COMMAND
@WORDSIZE		Text   2			   #10	#14  #18  #22  #112  #2452  #2455  #3437  #3445	 #5063	#5074	  +
							   #5854  #5894	 #6810
ARGLINE			Byte   _BSS:03BA		   986	994  #5883
ARGV			Dword  _BSS:037A		   998	999  1124  1125	 1156  #5881
B@			Byte   _BSS:0000		   #19
B@W			Word   _BSS:0000		   #20	2511  2519  2544  2567	2575  2600  2623  2631	2656  2764  2772  +
							   2797	 2821  2829  2854  2878	 2886  2911  2935  2943	 2968
CHEIO			Word   _BSS:0014		   5536	 5567  5787  #5855
CMDLINE			Byte   _BSS:0638		   661	669  678  791  799  808	 843  849  1047	 1242  #5887
COMMANDS		Word   _DATA:0002		   #26	1123  1163  2035  2047
COMMAND_BACKSPACE	Near   _TEXT:0545		   347	367  417  487  646  771	 #1295
COMMAND_SHOWPROMPT	Near   _TEXT:056F		   300	468  1035  1212	 #1352
COMMAND_VAR_INIT	Near   _TEXT:05BB		   273	#1425
COMMAND_VAR_LIST	Near   _TEXT:061D		   #1529  3123
COMMAND_VAR_NEXTFREE	Near   _TEXT:05EC		   #1472  1869
COMMAND_VAR_SEARCH	Near   _TEXT:068C		   #1630  1709	1774  1857
COMMAND_VAR_SET		Near   _TEXT:073C		   283	294  1185  #1812  3146	3163
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 128
Symbol Table



COMMAND_VAR_UNSET	Near   _TEXT:06CD		   #1697  3287
COMMAND_VAR_VALUE	Near   _TEXT:070F		   934	1366  #1762
D@			Byte   _DATA:0000		   #15
D@W			Word   _DATA:0000		   #16
DEMO			Near   _TEXT:0E0F		   #3450  3856
DEMO_LINHA		Word   _DATA:00AA		   #3438  3463	3832  3836  3841  4501	4731  4735  4740  5090	5154
END_COMMAND		Word   _BSS:0657		   138	1207  1245  1978  #5889
EXITCODE		Word   _DATA:00AC		   #3441  3468	3852
HISTORY			Byte   _BSS:0244		   448	658  788  1053	#5879
HISTORY_INI		Word   _BSS:0240		   142	440  590  600  1072  1077  1084	 #5875
HISTORY_LEN		Word   _BSS:0242		   462	499  510  696  707  712	 1060  1065  #5877
HISTORY_NXT		Word   _BSS:023E		   146	520  563  752  1050  1090  1095	 1102  #5873
HISTORY_POS		Word   _BSS:023C		   150	405  515  522  536  541	 558  565  569	574  589  599  605  612	  +
							   617	624  655  700  714  719	 726  737  741	746  751  757  779  785	  +
							   832	#5871
MUTEX			Word   _BSS:0018		   5520	 5530  5573  5583  5772	 #5859
NUM_VAR			Word   _DATA:0000		   #23	1461  1481  1744
PALAVRA			Byte   _BSS:0619		   901	922  926  932  951  959	 982  #5885
POSICAOCONSUMIDOR	Word   _DATA:00B2		   #5070  5481	5487  5490
POSICAOPRODUTOR		Word   _DATA:00B0		   #5067  5447	5453  5456
S@			Byte   _DATA:00B4		   27  28  30  31  33  34  36  37  39  40  42  43  45  46  48  49  51  52 +
							   54  55  57  58  60  61  63  64  66  67  69  70  72  73  75  76  78  79 +
							   81  82  84  85  87  88  90  91  93  94  96  97  99  100  102	 103  105 +
							   106	108  109  174  184  194	 208  218  224	230  244  254  264  278	  +
							   281	289  292  1183	1197  1364  2016  2416	2425  2484  2553  2609	  +
							   2665	 2688  2700  2707  2714	 2721  2728  2735  2742	 2750  2807  2864 +
							   2921	 3041  3081  3142  3189	 3198  3208  3217  3267	 3300  3344  3475 +
							   3486	 3499  3512  3525  3815	 3866  3906  3943  3970	 3997  4056  4083 +
							   4110	 4162  4187  4217  4247	 4296  4323  4367  4410	 4437  4464  4508 +
							   4519	 4532  4545  4558  4704	 4755  4792  4850  4916	 4955  5003  5042 +
							   5164	 5176  5188  5202  5239	 5255  5280  5316  5343	 5624  5671  5721 +
							   5816	 5834  #5895
TAMANHO_BUFFER		Word   _DATA:00AE		   #5064  5128	5213  5383  5404  5763	5776
TEMPOCONSUMIDOR		Word   _BSS:001A		   5306	 5596  5693  5754  #5861
TEMPOPRODUTOR		Word   _BSS:001C		   5270	 5543  5646  5745  #5863
VAR			Word   _BSS:0048		   1444	 1452  1504  1556  1565	 1591  1664  1732  1740	 1797  1891  1906 +
							   #5869
VAZIO			Word   _BSS:0016		   5514	 5589  5779  #5857
VETOR			Word   _BSS:001E		   5105	 5380  5449  5483  #5865
_ARGLINE		Alias  ARGLINE			   #6846
_ARGV			Alias  ARGV			   #6845
_ATOI			Near   ----:---- Extern		   3061	 3849  3925  4387  4724	 4811  4869  4935  5022	 5643  5690  5742 +
							   5751	 5760  #6866
_AVANCA			Near   _TEXT:16CD		   #5397  5454	5488  6817
_CHEIO			Alias  CHEIO			   #6821
_CLRSCR			Near   ----:---- Extern		   162	2379  #6879
_CMDLINE		Alias  CMDLINE			   #6848
_CMD_CLS		Near   _TEXT:0980		   44  47  #2362  6901
_CMD_DATE		Near   _TEXT:0845		   38  #2081  6903
_CMD_DEMO		Near   _TEXT:0FE4		   65  #3800  6897
_CMD_ECHO		Near   _TEXT:0D8C		   74  #3322  6894
_CMD_EXIT		Near   _TEXT:07D8		   53  56  #1963  6906
_CMD_HELP		Near   _TEXT:07ED		   29  32  #1995  6904
_CMD_KILL		Near   _TEXT:0C6B		   62  #3016  6898
_CMD_PRODCONS		Near   _TEXT:17E6		   104	#5705  6884
_CMD_PS			Near   _TEXT:09C5		   59  #2460  6899
_CMD_REBOOT		Near   _TEXT:07C2		   50  #1927  6905
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 129
Symbol Table



_CMD_RESUME		Near   _TEXT:14DF		   101	#4979  6885
_CMD_SEMCREATE		Near   _TEXT:1235		   86  #4347  6890
_CMD_SEMDESTROY		Near   _TEXT:145A		   95  #4834  6887
_CMD_SEMLS		Near   _TEXT:113F		   83  #4134  6891
_CMD_SEMTEST		Near   _TEXT:13CD		   89  #4688  6889
_CMD_SEMUP		Near   _TEXT:1421		   92  #4776  6888
_CMD_SET		Near   _TEXT:0CB3		   68  #3104  6896
_CMD_STOP		Near   _TEXT:1493		   98  #4892  6886
_CMD_TCONS		Near   _TEXT:17BB		   110	#5658  6882
_CMD_TIME		Near   _TEXT:08E0		   41  #2221  6902
_CMD_TPROD		Near   _TEXT:1790		   107	#5611  6883
_CMD_UNSET		Near   _TEXT:0D4C		   71  #3251  6895
_CMD_VER		Near   _TEXT:0996		   35  #2398  6900
_CMD_WAIT		Near   _TEXT:10C7		   80  #4020  6893
_CMD_WAITPID		Near   _TEXT:1038		   77  #3887  6892
_COMMAND		Near   _TEXT:0000		   #117	 6916
_COMMANDS		Alias  COMMANDS			   #6837
_COMMAND_BACKSPACE	Alias  COMMAND_BACKSPACE	   #6915
_COMMAND_SHOWPROMPT	Alias  COMMAND_SHOWPROMPT	   #6914
_COMMAND_VAR_INIT	Alias  COMMAND_VAR_INIT		   #6913
_COMMAND_VAR_LIST	Alias  COMMAND_VAR_LIST		   #6911
_COMMAND_VAR_NEXTFREE	Alias  COMMAND_VAR_NEXTFREE	   #6912
_COMMAND_VAR_SEARCH	Alias  COMMAND_VAR_SEARCH	   #6910
_COMMAND_VAR_SET	Alias  COMMAND_VAR_SET		   #6907
_COMMAND_VAR_UNSET	Alias  COMMAND_VAR_UNSET	   #6909
_COMMAND_VAR_VALUE	Alias  COMMAND_VAR_VALUE	   #6908
_CONSOME		Near   _TEXT:170A		   #5471  5579	6815
_CONSUMIDOR		Near   _TEXT:175E		   #5558  5824	6812
_DEMO			Alias  DEMO			   #6835
_DEMO_LINHA		Alias  DEMO_LINHA		   #6834
_END_COMMAND		Alias  END_COMMAND		   #6849
_EXIT			Near   ----:---- Extern		   3785	 4673  #6858
_EXITCODE		Alias  EXITCODE			   #6833
_FORK			Near   ----:---- Extern		   3858	 4747  5808  5826  #6862
_GETCH			Near   ----:---- Extern		   308	381  #6880
_GETCOLOR		Near   ----:---- Extern		   1380	 1541  #6876
_GETDATE		Near   ----:---- Extern		   2108	 #6871
_GETPID			Near   ----:---- Extern		   3538	 4571  #6857
_GETTIME		Near   ----:---- Extern		   2245	 #6870
_GOTOXY			Near   ----:---- Extern		   1322	 1337  #6872
_HISTORY		Alias  HISTORY			   #6844
_HISTORY_INI		Alias  HISTORY_INI		   #6842
_HISTORY_LEN		Alias  HISTORY_LEN		   #6843
_HISTORY_NXT		Alias  HISTORY_NXT		   #6841
_HISTORY_POS		Alias  HISTORY_POS		   #6840
_IMPRIMEBUFFER		Near   _TEXT:157E		   #5143  5460	5494  5800  6819
_IMPRIMELISTA		Near   _TEXT:152B		   #5079  5250	6820
_INICIALIZALISTA	Near   _TEXT:16B3		   #5364  5794	6818
_INTTOSTR		Near   ----:---- Extern		   1174	 2513  2569  2625  2766	 2823  2880  2937  3543	 3955  3982  4068 +
							   4095	 4202  4232  4262  4308	 4422  4449  4576  5109	 5217  5274  5310 +
							   #6864
_KILL			Near   ----:---- Extern		   3069	 #6861
_MINISLEEP		Near   ----:---- Extern		   5443	 5477  #6850
_MINISO_SEM		Word   ----:---- Extern		   4179	 4198  4228  4258  #6832
_MINISO_THREAD		Word   ----:---- Extern		   2502	 2565  2621  2677  2762	 2819  2876  2933  #6836
_MUTEX			Alias  MUTEX			   #6823
_NUM_VAR		Alias  NUM_VAR			   #6839
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 130
Symbol Table



_PALAVRA		Alias  PALAVRA			   #6847
_POSICAOCONSUMIDOR	Alias  POSICAOCONSUMIDOR	   #6826
_POSICAOPRODUTOR	Alias  POSICAOPRODUTOR		   #6827
_PRODUTOR		Near   _TEXT:172C		   #5505  5806	6814
_PRODUZ			Near   _TEXT:16E8		   #5437  5526	6816
_PUTCH			Near   ----:---- Extern		   427	458  838  1236	1330  1412  1575  1609	2056  2140  2171  2200	  +
							   2277	 2310  2341  2435  2533	 2589  2645  2786  2843	 2900  2957  2978 +
							   3387	 3418  4278  #6881
_PUTSTR			Near   ----:---- Extern		   176	186  196  210  220  226	 232  246  256	266  450  671  801  1199  +
							   1394	 1567  1593  2018  2036	 2048  2132  2163  2192	 2269  2302  2333 +
							   2418	 2427  2486  2546  2555	 2602  2611  2658  2667	 2691  2752  2799 +
							   2809	 2856  2866  2913  2923	 2970  3044  3220  3270	 3364  3398  3818 +
							   3908	 3945  3963  3972  3990	 3999  4058  4076  4085	 4103  4112  4164 +
							   4189	 4210  4219  4240  4249	 4270  4298  4316  4325	 4369  4412  4430 +
							   4439	 4457  4466  4707  4794	 4852  4918  4957  5005	 5044  5626  5673 +
							   5724	 #6878
_PUTSTRXY		Near   ----:---- Extern		   3480	 3493  3506  3519  3532	 3556  3589  3626  3663	 3700  3737  3774 +
							   4513	 4526  4539  4552  4565	 4589  4621  4661  5124	 5170  5182  5194 +
							   5208	 5231  5245  5263  5286	 5300  5322  5336  5349	 #6877
_REBOOT			Near   ----:---- Extern		   1944	 #6863
_RESUME			Near   ----:---- Extern		   5030	 #6851
_S@			Alias  S@			   #6917
_SEMCREATE		Near   ----:---- Extern		   4395	 5770  5777  5785  #6856
_SEMDESTROY		Near   ----:---- Extern		   4877	 #6853
_SEMDOWN		Near   ----:---- Extern		   4632	 5515  5521  5568  5574	 #6854
_SEMID			Word   _BSS:0046		   4631	 4727  #5867  6831
_SEMUP			Near   ----:---- Extern		   4819	 5531  5537  5584  5590	 #6855
_SEM_APLIC		Near   _TEXT:12C4		   #4488  4745	6830
_SETCOLOR		Near   ----:---- Extern		   157	168  191  201  215  237	 251  1387  1403  1582	1602  #6875
_SLEEP			Near   ----:---- Extern		   5544	 5597  #6813
_STOP			Near   ----:---- Extern		   4943	 #6852
_STRCMP			Near   ----:---- Extern		   1126	 1668  3348  #6868
_STRCPY			Near   ----:---- Extern		   663	793  953  988  1055  1893  1908	 #6869
_STRLEN			Near   ----:---- Extern		   680	810  961  1824	1841  2521  2577  2633	2774  2831  2888  2945	  +
							   #6867
_TAMANHO_BUFFER		Alias  TAMANHO_BUFFER		   #6829
_TEMPOCONSUMIDOR	Alias  TEMPOCONSUMIDOR		   #6824
_TEMPOPRODUTOR		Alias  TEMPOPRODUTOR		   #6825
_UNSIGNEDTOSTR		Near   ----:---- Extern		   2124	 2155  2184  2261  2294	 2325  3576  3613  3650	 3687  3724  3761 +
							   4608	 4648  #6865
_VAR			Alias  VAR			   #6838
_VAZIO			Alias  VAZIO			   #6822
_VETOR			Alias  VETOR			   #6828
_WAIT			Near   ----:---- Extern		   4048	 #6860
_WAITPID		Near   ----:---- Extern		   3936	 #6859
_WHEREX			Near   ----:---- Extern		   1306	 #6874
_WHEREY			Near   ----:---- Extern		   1311	 #6873

Macro Name						   Cref	(defined at #)

$COMM							   #1

Groups & Segments	Bit Size Align	Combine	Class	   Cref	(defined at #)

DGROUP			Group				   #12	13  27	28  30	31  33	34  36	37  39	40  42	43  45	46  48	49+
							   51  52  54  55  57  58  60  61  63  64  66  67  69  70  72  73  75  76 +
							   78  79  81  82  84  85  87  88  90  91  93  94  96  97  99  100  102	  +
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 131
Symbol Table



							   103	105  106  108  109  138	 142  146  150	174  184  194  208  218	  +
							   224	230  244  254  264  278	 281  289  292	405  440  448  462  499	  +
							   510	515  520  522  536  541	 558  563  565	569  574  589  590  599	  +
							   600	605  612  617  624  655	 658  661  669	678  696  700  707  712	  +
							   714	719  726  737  741  746	 751  752  757	779  785  788  791  799	  +
							   808	832  843  849  901  922	 926  932  951	959  982  986  994  998	  +
							   999	1047  1050  1053  1060	1065  1072  1077  1084	1090  1095  1102  +
							   1123	 1124  1125  1156  1163	 1183  1197  1207  1242	 1245  1364  1444 +
							   1452	 1461  1481  1504  1556	 1565  1591  1664  1732	 1740  1744  1797 +
							   1891	 1906  1978  2016  2035	 2047  2416  2425  2484	 2502  2511  2519 +
							   2544	 2553  2565  2567  2575	 2600  2609  2621  2623	 2631  2656  2665 +
							   2677	 2688  2700  2707
  _BSS			16  0659 Word	Public	BSS	   12  #18  #2452  #5854
  _DATA			16  0E7E Word	Public	DATA	   12  #14  #22	 #3437	#5063  #5894
_TEXT			16  1881 Byte	Public	CODE	   #10	13  #112  116  1294  1351  1424	 1471  1528  1629  1696	 1761	  +
							   1811	 1926  1962  1994  2080	 2220  2361  2397  #2455  2459	3015  3103+
							   3250	 3321  #3445  3449  3799  3886	4019  4133  4346  4487	4687  4775+
							   4833	 4891  4978  #5074  5078  5142	5363  5396  5436  5470	5504  5557+
							   5610	 5657  5704  #6810
Turbo Assembler	 Version 3.1	    12/03/17 20:31:11	    Page 132
Error Summary



*Warning* command.ASM(3448) Reserved word used as symbol: EXITCODE
