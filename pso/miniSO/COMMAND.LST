Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 1
command.ASM



      1				     $comm   macro   name,dist,size,count
      2					     comm    dist name[size]:BYTE:count
      3					     endm
      4					     ?debug  V 300h
      5					     ?debug  S "command.c"
      6					     ?debug  C E996987E4709636F6D6D616E642E63
      7					     ?debug  C E9EE217847086D696E69534F2E68
      8					     ?debug  C E99C987E4709636F6D6D616E642E68
      9					     ?debug  C E9E3AB614B056C69622E68
     10	0000			     _TEXT   segment byte public 'CODE'
     11	0000			     _TEXT   ends
     12				     DGROUP  group   _DATA,_BSS
     13					     assume  cs:_TEXT,ds:DGROUP
     14	0000			     _DATA   segment word public 'DATA'
     15	0000			     d@	     label   byte
     16	0000			     d@w     label   word
     17	0000			     _DATA   ends
     18	0000			     _BSS    segment word public 'BSS'
     19	0000			     b@	     label   byte
     20	0000			     b@w     label   word
     21	0000			     _BSS    ends
     22	0000			     _DATA   segment word public 'DATA'
     23	0000			     num_var label   word
     24	0000  00			     db	     0
     25	0001  00			     db	     0
     26	0002			     commands	     label   word
     27	0002  0090r			     dw	     DGROUP:s@
     28	0004  0092r			     dw	     DGROUP:s@+2
     29	0006  07EDr			     dw	     _cmd_help
     30	0008  00BDr			     dw	     DGROUP:s@+45
     31	000A  00C2r			     dw	     DGROUP:s@+50
     32	000C  07EDr			     dw	     _cmd_help
     33	000E  00EAr			     dw	     DGROUP:s@+90
     34	0010  00EEr			     dw	     DGROUP:s@+94
     35	0012  0996r			     dw	     _cmd_ver
     36	0014  0116r			     dw	     DGROUP:s@+134
     37	0016  011Br			     dw	     DGROUP:s@+139
     38	0018  0845r			     dw	     _cmd_date
     39	001A  0139r			     dw	     DGROUP:s@+169
     40	001C  013Er			     dw	     DGROUP:s@+174
     41	001E  08E0r			     dw	     _cmd_time
     42	0020  015Cr			     dw	     DGROUP:s@+204
     43	0022  0160r			     dw	     DGROUP:s@+208
     44	0024  0980r			     dw	     _cmd_cls
     45	0026  017Er			     dw	     DGROUP:s@+238
     46	0028  0184r			     dw	     DGROUP:s@+244
     47	002A  0980r			     dw	     _cmd_cls
     48	002C  01A0r			     dw	     DGROUP:s@+272
     49	002E  01A7r			     dw	     DGROUP:s@+279
     50	0030  07C2r			     dw	     _cmd_reboot
     51	0032  01CCr			     dw	     DGROUP:s@+316
     52	0034  01D1r			     dw	     DGROUP:s@+321
     53	0036  07D8r			     dw	     _cmd_exit
     54	0038  01F4r			     dw	     DGROUP:s@+356
     55	003A  01F9r			     dw	     DGROUP:s@+361
     56	003C  07D8r			     dw	     _cmd_exit
     57	003E  021Cr			     dw	     DGROUP:s@+396
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 2
command.ASM



     58	0040  021Fr			     dw	     DGROUP:s@+399
     59	0042  09C5r			     dw	     _cmd_ps
     60	0044  0255r			     dw	     DGROUP:s@+453
     61	0046  025Ar			     dw	     DGROUP:s@+458
     62	0048  0C63r			     dw	     _cmd_kill
     63	004A  0285r			     dw	     DGROUP:s@+501
     64	004C  028Ar			     dw	     DGROUP:s@+506
     65	004E  0FDCr			     dw	     _cmd_demo
     66	0050  02C3r			     dw	     DGROUP:s@+563
     67	0052  02C7r			     dw	     DGROUP:s@+567
     68	0054  0CABr			     dw	     _cmd_set
     69	0056  0306r			     dw	     DGROUP:s@+630
     70	0058  030Cr			     dw	     DGROUP:s@+636
     71	005A  0D44r			     dw	     _cmd_unset
     72	005C  032Cr			     dw	     DGROUP:s@+668
     73	005E  0331r			     dw	     DGROUP:s@+673
     74	0060  0D84r			     dw	     _cmd_echo
     75	0062  0354r			     dw	     DGROUP:s@+708
     76	0064  035Cr			     dw	     DGROUP:s@+716
     77	0066  1030r			     dw	     _cmd_waitpid
     78	0068  038Dr			     dw	     DGROUP:s@+765
     79	006A  0392r			     dw	     DGROUP:s@+770
     80	006C  10BFr			     dw	     _cmd_wait
     81	006E  03BFr			     dw	     DGROUP:s@+815
     82	0070  03C5r			     dw	     DGROUP:s@+821
     83	0072  1137r			     dw	     _cmd_semls
     84	0074  03EEr			     dw	     DGROUP:s@+862
     85	0076  03F8r			     dw	     DGROUP:s@+872
     86	0078  122Dr			     dw	     _cmd_semcreate
     87	007A  0414r			     dw	     DGROUP:s@+900
     88	007C  041Cr			     dw	     DGROUP:s@+908
     89	007E  13C5r			     dw	     _cmd_semtest
     90	0080  044Br			     dw	     DGROUP:s@+955
     91	0082  0451r			     dw	     DGROUP:s@+961
     92	0084  1419r			     dw	     _cmd_semup
     93	0086  0482r			     dw	     DGROUP:s@+1010
     94	0088  048Dr			     dw	     DGROUP:s@+1021
     95	008A  1452r			     dw	     _cmd_semdestroy
     96	008C			     _DATA   ends
     97	0000			     _TEXT   segment byte public 'CODE'
     98					;
     99					;    void command()
    100					;
    101					     assume  cs:_TEXT
    102	0000			     _command	     proc    near
    103	0000  55			     push    bp
    104	0001  8B EC			     mov     bp,sp
    105	0003  83 EC 22			     sub     sp,34
    106	0006  56			     push    si
    107	0007  57			     push    di
    108					;
    109					;    {
    110					;      char car,str[10];
    111					;      int numcar;
    112					;      int i,achou,pos;
    113					;      int novalinha,res,argc;
    114					;      char far	*ptrline,far *var;
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 3
command.ASM



    115					;
    116					;      /* InicializaÁıes... */
    117					;      numcar =	0;
    118					;
    119	0008  33 F6			     xor     si,si
    120					;
    121					;      end_command = 0;
    122					;
    123	000A  C7 06 0625r 0000		     mov     word ptr DGROUP:end_command,0
    124					;
    125					;      history_ini = 0;
    126					;
    127	0010  C7 06 020Er 0000		     mov     word ptr DGROUP:history_ini,0
    128					;
    129					;      history_nxt = 0;
    130					;
    131	0016  C7 06 020Cr 0000		     mov     word ptr DGROUP:history_nxt,0
    132					;
    133					;      history_pos = -1;
    134					;
    135	001C  C7 06 020Ar FFFF		     mov     word ptr DGROUP:history_pos,-1
    136					;
    137					;      /* Mensagem inicial */
    138					;      setcolor(7);
    139					;
    140	0022  B8 0007			     mov     ax,7
    141	0025  50			     push    ax
    142	0026  E8 0000e			     call    near ptr _setcolor
    143	0029  59			     pop     cx
    144					;
    145					;      clrscr();
    146					;
    147	002A  E8 0000e			     call    near ptr _clrscr
    148					;
    149					;      setcolor(LOGOCOLOR);
    150					;
    151	002D  B8 0001			     mov     ax,1
    152	0030  50			     push    ax
    153	0031  E8 0000e			     call    near ptr _setcolor
    154	0034  59			     pop     cx
    155					;
    156					;      putstr("			 ‹‹‹‹‹‹‹  ‹‹‹‹‹‹\n");
    157					;
    158	0035  1E			     push    ds
    159	0036  B8 04ABr			     mov     ax,offset DGROUP:s@+1051
    160	0039  50			     push    ax
    161	003A  E8 0000e			     call    near ptr _putstr
    162	003D  59			     pop     cx
    163	003E  59			     pop     cx
    164					;
    165					;      putstr("	‹‹‹‹‹  ‹  ‹‹‹  ‹ €€   ﬂﬂ  €€  €€  "); setcolor(7); putstr("MinisSistema	    +
    166				     Operacional\n"); setcolor(LOGOCOLOR);
    167					;
    168	003F  1E			     push    ds
    169	0040  B8 04CEr			     mov     ax,offset DGROUP:s@+1086
    170	0043  50			     push    ax
    171	0044  E8 0000e			     call    near ptr _putstr
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 4
command.ASM



    172	0047  59			     pop     cx
    173	0048  59			     pop     cx
    174	0049  B8 0007			     mov     ax,7
    175	004C  50			     push    ax
    176	004D  E8 0000e			     call    near ptr _setcolor
    177	0050  59			     pop     cx
    178	0051  1E			     push    ds
    179	0052  B8 04F2r			     mov     ax,offset DGROUP:s@+1122
    180	0055  50			     push    ax
    181	0056  E8 0000e			     call    near ptr _putstr
    182	0059  59			     pop     cx
    183	005A  59			     pop     cx
    184	005B  B8 0001			     mov     ax,1
    185	005E  50			     push    ax
    186	005F  E8 0000e			     call    near ptr _setcolor
    187	0062  59			     pop     cx
    188					;
    189					;      putstr("‹€ € € ‹€ ‹€ € ‹€ ﬂﬂﬂﬂ€€€ €€€  €€  "); setcolor(7); putstr("Vs "); putstr    +
    190				     (miniSO_VERSION); putstr("\n"); setcolor(LOGO
    191					;
    192	0063  1E			     push    ds
    193	0064  B8 050Cr			     mov     ax,offset DGROUP:s@+1148
    194	0067  50			     push    ax
    195	0068  E8 0000e			     call    near ptr _putstr
    196	006B  59			     pop     cx
    197	006C  59			     pop     cx
    198	006D  B8 0007			     mov     ax,7
    199	0070  50			     push    ax
    200	0071  E8 0000e			     call    near ptr _setcolor
    201	0074  59			     pop     cx
    202	0075  1E			     push    ds
    203	0076  B8 0530r			     mov     ax,offset DGROUP:s@+1184
    204	0079  50			     push    ax
    205	007A  E8 0000e			     call    near ptr _putstr
    206	007D  59			     pop     cx
    207	007E  59			     pop     cx
    208	007F  1E			     push    ds
    209	0080  B8 0534r			     mov     ax,offset DGROUP:s@+1188
    210	0083  50			     push    ax
    211	0084  E8 0000e			     call    near ptr _putstr
    212	0087  59			     pop     cx
    213	0088  59			     pop     cx
    214	0089  1E			     push    ds
    215	008A  B8 0539r			     mov     ax,offset DGROUP:s@+1193
    216	008D  50			     push    ax
    217	008E  E8 0000e			     call    near ptr _putstr
    218	0091  59			     pop     cx
    219	0092  59			     pop     cx
    220	0093  B8 0001			     mov     ax,1
    221	0096  50			     push    ax
    222	0097  E8 0000e			     call    near ptr _setcolor
    223	009A  59			     pop     cx
    224					;
    225					;      putstr("€€ € € €€ €€ € €€ €€‹‹€€€ €€€‹‹€€  "); setcolor(7); putstr("por Roland	    +
    226				     Teodorowitsch\n");
    227					;
    228	009B  1E			     push    ds
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 5
command.ASM



    229	009C  B8 053Br			     mov     ax,offset DGROUP:s@+1195
    230	009F  50			     push    ax
    231	00A0  E8 0000e			     call    near ptr _putstr
    232	00A3  59			     pop     cx
    233	00A4  59			     pop     cx
    234	00A5  B8 0007			     mov     ax,7
    235	00A8  50			     push    ax
    236	00A9  E8 0000e			     call    near ptr _setcolor
    237	00AC  59			     pop     cx
    238	00AD  1E			     push    ds
    239	00AE  B8 055Fr			     mov     ax,offset DGROUP:s@+1231
    240	00B1  50			     push    ax
    241	00B2  E8 0000e			     call    near ptr _putstr
    242	00B5  59			     pop     cx
    243	00B6  59			     pop     cx
    244					;
    245					;
    246					;      putstr("\nDigite	'help' ou '?' para ajuda...\n\n");
    247					;
    248	00B7  1E			     push    ds
    249	00B8  B8 0579r			     mov     ax,offset DGROUP:s@+1257
    250	00BB  50			     push    ax
    251	00BC  E8 0000e			     call    near ptr _putstr
    252	00BF  59			     pop     cx
    253	00C0  59			     pop     cx
    254					;
    255					;      /* Inicializa vari·veis de ambiente */
    256					;      command_var_init();
    257					;
    258	00C1  E8 04F7			     call    near ptr command_var_init
    259					;
    260					;      command_var_set("PROMPT","miniSO>");
    261					;
    262	00C4  1E			     push    ds
    263	00C5  B8 05A6r			     mov     ax,offset DGROUP:s@+1302
    264	00C8  50			     push    ax
    265	00C9  1E			     push    ds
    266	00CA  B8 059Fr			     mov     ax,offset DGROUP:s@+1295
    267	00CD  50			     push    ax
    268	00CE  E8 066B			     call    near ptr command_var_set
    269	00D1  83 C4 08			     add     sp,8
    270					;
    271					;      command_var_set("ERRORLEVEL","0");
    272					;
    273	00D4  1E			     push    ds
    274	00D5  B8 05B9r			     mov     ax,offset DGROUP:s@+1321
    275	00D8  50			     push    ax
    276	00D9  1E			     push    ds
    277	00DA  B8 05AEr			     mov     ax,offset DGROUP:s@+1310
    278	00DD  50			     push    ax
    279	00DE  E8 065B			     call    near ptr command_var_set
    280	00E1  83 C4 08			     add     sp,8
    281					;
    282					;      /* Imprime sinal	de pronto */
    283					;      command_showprompt();
    284					;
    285	00E4  E8 0488			     call    near ptr command_showprompt
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 6
command.ASM



    286	00E7  E9 0427			     jmp     @1@3362
    287	00EA			     @1@58:
    288					;
    289					;      /* LaÁo para interpretaÁ„o de comandos */
    290					;      while ( !end_command )  {
    291					;	     car=getch();
    292					;
    293	00EA  E8 0000e			     call    near ptr _getch
    294	00ED  88 46 FF			     mov     byte ptr [bp-1],al
    295					;
    296					;	     switch (car)  {
    297					;
    298	00F0  8A 46 FF			     mov     al,byte ptr [bp-1]
    299	00F3  98			     cbw
    300	00F4  89 46 E0			     mov     word ptr [bp-32],ax
    301	00F7  B9 0005			     mov     cx,5
    302	00FA  BB 0531r			     mov     bx,offset @1@C3234
    303	00FD			     @1@142:
    304	00FD  2E: 8B 07			     mov     ax,word ptr cs:[bx]
    305	0100  3B 46 E0			     cmp     ax,word ptr [bp-32]
    306	0103  74 08			     je	     short @1@226
    307	0105  83 C3 02			     add     bx,2
    308	0108  E2 F3			     loop    short @1@142
    309	010A  E9 03EE			     jmp     @1@3306
    310	010D			     @1@226:
    311	010D  2E: FF 67	0A		     jmp     word ptr cs:[bx+10]
    312	0111			     @1@254:
    313					;
    314					;		    case 9:
    315					;			 break;
    316					;
    317	0111  E9 03FD			     jmp     @1@3362
    318	0114			     @1@282:
    319					;
    320					;		    case 8:
    321					;			 if (numcar>0)	{
    322					;
    323	0114  0B F6			     or	     si,si
    324	0116  7E 04			     jle     short @1@338
    325					;
    326					;			    --numcar;
    327					;
    328	0118  4E			     dec     si
    329					;
    330					;			    command_backspace();
    331					;
    332	0119  E8 0429			     call    near ptr command_backspace
    333	011C			     @1@338:
    334					;
    335					;			 }
    336					;			 break;
    337					;
    338	011C  E9 03F2			     jmp     @1@3362
    339	011F			     @1@366:
    340	011F  EB 04			     jmp     short @1@422
    341	0121			     @1@394:
    342					;
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 7
command.ASM



    343					;		    case 27:
    344					;			 /* Limpa a linha de comandos */
    345					;			 while (numcar>0)  {
    346					;			       --numcar;
    347					;
    348	0121  4E			     dec     si
    349					;
    350					;			       command_backspace();
    351					;
    352	0122  E8 0420			     call    near ptr command_backspace
    353	0125			     @1@422:
    354	0125  0B F6			     or	     si,si
    355	0127  7F F8			     jg	     short @1@394
    356					;
    357					;			 }
    358					;			 break;
    359					;
    360	0129  E9 03E5			     jmp     @1@3362
    361	012C			     @1@478:
    362					;
    363					;		    case 0:
    364					;			 car=getch();
    365					;
    366	012C  E8 0000e			     call    near ptr _getch
    367	012F  88 46 FF			     mov     byte ptr [bp-1],al
    368					;
    369					;			 switch	(car)  {
    370					;
    371	0132  8A 46 FF			     mov     al,byte ptr [bp-1]
    372	0135  98			     cbw
    373	0136  89 46 DE			     mov     word ptr [bp-34],ax
    374	0139  B9 0004			     mov     cx,4
    375	013C  BB 0521r			     mov     bx,offset @1@C3330
    376	013F			     @1@562:
    377	013F  2E: 8B 07			     mov     ax,word ptr cs:[bx]
    378	0142  3B 46 DE			     cmp     ax,word ptr [bp-34]
    379	0145  74 08			     je	     short @1@646
    380	0147  83 C3 02			     add     bx,2
    381	014A  E2 F3			     loop    short @1@562
    382	014C  E9 01C0			     jmp     @1@2102
    383	014F			     @1@646:
    384	014F  2E: FF 67	08		     jmp     word ptr cs:[bx+8]
    385	0153			     @1@674:
    386					;
    387					;				case 65: /* F7 */
    388					;				     history_pos = -1;
    389					;
    390	0153  C7 06 020Ar FFFF		     mov     word ptr DGROUP:history_pos,-1
    391	0159  EB 04			     jmp     short @1@730
    392	015B			     @1@702:
    393					;
    394					;				     /*	Limpa a	linha de comandos */
    395					;				     while (numcar>0)  {
    396					;					   --numcar;
    397					;
    398	015B  4E			     dec     si
    399					;
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 8
command.ASM



    400					;					   command_backspace();
    401					;
    402	015C  E8 03E6			     call    near ptr command_backspace
    403	015F			     @1@730:
    404	015F  0B F6			     or	     si,si
    405	0161  7F F8			     jg	     short @1@702
    406					;
    407					;				     }
    408					;				     putch('\n');
    409					;
    410	0163  B8 000A			     mov     ax,10
    411	0166  50			     push    ax
    412	0167  E8 0000e			     call    near ptr _putch
    413	016A  59			     pop     cx
    414					;
    415					;				     /*	Imprime	o histÛrico */
    416					;				     for (i=0;i<history_len;++i)  {
    417					;
    418	016B  33 FF			     xor     di,di
    419	016D  EB 25			     jmp     short @1@842
    420	016F			     @1@786:
    421					;
    422					;					 putstr(history[(history_ini+i)%MAXHISTORY]);
    423					;
    424	016F  1E			     push    ds
    425	0170  A1 020Er			     mov     ax,word ptr DGROUP:history_ini
    426	0173  03 C7			     add     ax,di
    427	0175  BB 000A			     mov     bx,10
    428	0178  99			     cwd
    429	0179  F7 FB			     idiv    bx
    430	017B  BB 001F			     mov     bx,31
    431	017E  8B C2			     mov     ax,dx
    432	0180  F7 EB			     imul    bx
    433	0182  05 0212r			     add     ax,offset DGROUP:history
    434	0185  50			     push    ax
    435	0186  E8 0000e			     call    near ptr _putstr
    436	0189  59			     pop     cx
    437	018A  59			     pop     cx
    438					;
    439					;					 putch('\n');
    440					;
    441	018B  B8 000A			     mov     ax,10
    442	018E  50			     push    ax
    443	018F  E8 0000e			     call    near ptr _putch
    444	0192  59			     pop     cx
    445	0193  47			     inc     di
    446	0194			     @1@842:
    447	0194  3B 3E 0210r		     cmp     di,word ptr DGROUP:history_len
    448	0198  7C D5			     jl	     short @1@786
    449					;
    450					;				     }
    451					;				     command_showprompt();
    452					;
    453	019A  E8 03D2			     call    near ptr command_showprompt
    454					;
    455					;				     break;
    456					;
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 9
command.ASM



    457	019D  E9 016F			     jmp     @1@2102
    458	01A0			     @1@898:
    459					;
    460					;				case 75: /* Seta para esquerda */
    461					;				     if	(numcar>0)  {
    462					;
    463	01A0  0B F6			     or	     si,si
    464	01A2  7E 04			     jle     short @1@954
    465					;
    466					;					--numcar;
    467					;
    468	01A4  4E			     dec     si
    469					;
    470					;					command_backspace();
    471					;
    472	01A5  E8 039D			     call    near ptr command_backspace
    473	01A8			     @1@954:
    474					;
    475					;				     }
    476					;				     break;
    477					;
    478	01A8  E9 0164			     jmp     @1@2102
    479	01AB			     @1@982:
    480					;
    481					;				case 72: /* Seta para cima */
    482					;				     if	(history_len>0)	 {
    483					;
    484	01AB  83 3E 0210r 00		     cmp     word ptr DGROUP:history_len,0
    485	01B0  7F 03			     jg	     @@0
    486	01B2  E9 00C3			     jmp     @1@1598
    487	01B5			     @@0:
    488					;
    489					;					novalinha=0;
    490					;
    491	01B5  C7 46 EE 0000		     mov     word ptr [bp-18],0
    492					;
    493					;					if (history_len<MAXHISTORY)  {
    494					;
    495	01BA  83 3E 0210r 0A		     cmp     word ptr DGROUP:history_len,10
    496	01BF  7D 27			     jge     short @1@1178
    497					;
    498					;					   if (history_pos==-1)	 {
    499					;
    500	01C1  83 3E 020Ar FF		     cmp     word ptr DGROUP:history_pos,-1
    501	01C6  75 0E			     jne     short @1@1094
    502					;
    503					;					      history_pos=history_nxt-1;
    504					;
    505	01C8  A1 020Cr			     mov     ax,word ptr DGROUP:history_nxt
    506	01CB  48			     dec     ax
    507	01CC  A3 020Ar			     mov     word ptr DGROUP:history_pos,ax
    508					;
    509					;					      novalinha=1;
    510					;
    511	01CF  C7 46 EE 0001		     mov     word ptr [bp-18],1
    512					;
    513					;					   }
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 10
command.ASM



    514					;
    515	01D4  EB 10			     jmp     short @1@1150
    516	01D6			     @1@1094:
    517					;
    518					;					   else	 {
    519					;					      if (history_pos>0)  {
    520					;
    521	01D6  83 3E 020Ar 00		     cmp     word ptr DGROUP:history_pos,0
    522	01DB  7E 09			     jle     short @1@1150
    523					;
    524					;						 history_pos--;
    525					;
    526	01DD  FF 0E 020Ar		     dec     word ptr DGROUP:history_pos
    527					;
    528					;						 novalinha=1;
    529					;
    530	01E1  C7 46 EE 0001		     mov     word ptr [bp-18],1
    531	01E6			     @1@1150:
    532					;
    533					;					      }
    534					;					   }
    535					;					}
    536					;
    537	01E6  EB 52			     jmp     short @1@1458
    538	01E8			     @1@1178:
    539					;
    540					;					else  {
    541					;					   if (history_pos==-1)	 {
    542					;
    543	01E8  83 3E 020Ar FF		     cmp     word ptr DGROUP:history_pos,-1
    544	01ED  75 1B			     jne     short @1@1290
    545					;
    546					;					      history_pos=history_nxt-1;
    547					;
    548	01EF  A1 020Cr			     mov     ax,word ptr DGROUP:history_nxt
    549	01F2  48			     dec     ax
    550	01F3  A3 020Ar			     mov     word ptr DGROUP:history_pos,ax
    551					;
    552					;					      if (history_pos<0)
    553					;
    554	01F6  83 3E 020Ar 00		     cmp     word ptr DGROUP:history_pos,0
    555	01FB  7D 06			     jge     short @1@1262
    556					;
    557					;						 history_pos=MAXHISTORY-1;
    558					;
    559	01FD  C7 06 020Ar 0009		     mov     word ptr DGROUP:history_pos,9
    560	0203			     @1@1262:
    561					;
    562					;					      novalinha=1;
    563					;
    564	0203  C7 46 EE 0001		     mov     word ptr [bp-18],1
    565					;
    566					;					   }
    567					;
    568	0208  EB 30			     jmp     short @1@1458
    569	020A			     @1@1290:
    570					;
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 11
command.ASM



    571					;					   else	 {
    572					;					      if (history_pos!=history_ini)  {
    573					;
    574	020A  A1 020Ar			     mov     ax,word ptr DGROUP:history_pos
    575	020D  3B 06 020Er		     cmp     ax,word ptr DGROUP:history_ini
    576	0211  74 27			     je	     short @1@1458
    577					;
    578					;						 novalinha=1;
    579					;
    580	0213  C7 46 EE 0001		     mov     word ptr [bp-18],1
    581					;
    582					;						 if (history_pos>history_ini)
    583					;
    584	0218  A1 020Ar			     mov     ax,word ptr DGROUP:history_pos
    585	021B  3B 06 020Er		     cmp     ax,word ptr DGROUP:history_ini
    586	021F  7E 06			     jle     short @1@1374
    587					;
    588					;						    --history_pos;
    589					;
    590	0221  FF 0E 020Ar		     dec     word ptr DGROUP:history_pos
    591	0225  EB 13			     jmp     short @1@1458
    592	0227			     @1@1374:
    593					;
    594					;						 else  {  /* history_pos<history_ini */
    595					;						    if (history_pos>0)
    596					;
    597	0227  83 3E 020Ar 00		     cmp     word ptr DGROUP:history_pos,0
    598	022C  7E 06			     jle     short @1@1430
    599					;
    600					;						       history_pos--;
    601					;
    602	022E  FF 0E 020Ar		     dec     word ptr DGROUP:history_pos
    603	0232  EB 06			     jmp     short @1@1458
    604	0234			     @1@1430:
    605					;
    606					;						    else
    607					;						       history_pos=MAXHISTORY-1;
    608					;
    609	0234  C7 06 020Ar 0009		     mov     word ptr DGROUP:history_pos,9
    610	023A			     @1@1458:
    611					;
    612					;						  }
    613					;					      }
    614					;					   }
    615					;					}
    616					;					if (novalinha)	{
    617					;
    618	023A  83 7E EE 00		     cmp     word ptr [bp-18],0
    619	023E  74 38			     je	     short @1@1598
    620	0240  EB 04			     jmp     short @1@1542
    621	0242			     @1@1514:
    622					;
    623					;					   /* Limpa a linha de comandos	*/
    624					;					   while (numcar>0)  {
    625					;						 --numcar;
    626					;
    627	0242  4E			     dec     si
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 12
command.ASM



    628					;
    629					;						 command_backspace();
    630					;
    631	0243  E8 02FF			     call    near ptr command_backspace
    632	0246			     @1@1542:
    633	0246  0B F6			     or	     si,si
    634	0248  7F F8			     jg	     short @1@1514
    635					;
    636					;					   }
    637					;					   strcpy(cmdline,history[history_pos]);
    638					;
    639	024A  1E			     push    ds
    640	024B  A1 020Ar			     mov     ax,word ptr DGROUP:history_pos
    641	024E  BA 001F			     mov     dx,31
    642	0251  F7 EA			     imul    dx
    643	0253  05 0212r			     add     ax,offset DGROUP:history
    644	0256  50			     push    ax
    645	0257  1E			     push    ds
    646	0258  B8 0606r			     mov     ax,offset DGROUP:cmdline
    647	025B  50			     push    ax
    648	025C  E8 0000e			     call    near ptr _strcpy
    649	025F  83 C4 08			     add     sp,8
    650					;
    651					;					   putstr(cmdline);
    652					;
    653	0262  1E			     push    ds
    654	0263  B8 0606r			     mov     ax,offset DGROUP:cmdline
    655	0266  50			     push    ax
    656	0267  E8 0000e			     call    near ptr _putstr
    657	026A  59			     pop     cx
    658	026B  59			     pop     cx
    659					;
    660					;					   numcar=strlen(cmdline);
    661					;
    662	026C  1E			     push    ds
    663	026D  B8 0606r			     mov     ax,offset DGROUP:cmdline
    664	0270  50			     push    ax
    665	0271  E8 0000e			     call    near ptr _strlen
    666	0274  59			     pop     cx
    667	0275  59			     pop     cx
    668	0276  8B F0			     mov     si,ax
    669	0278			     @1@1598:
    670					;
    671					;					}
    672					;				     }
    673					;				     break;
    674					;
    675	0278  E9 0094			     jmp     @1@2102
    676	027B			     @1@1626:
    677					;
    678					;				case 80: /* Seta para baixo */
    679					;				     if	(history_len>0 && history_pos!=-1)  {
    680					;
    681	027B  83 3E 0210r 00		     cmp     word ptr DGROUP:history_len,0
    682	0280  7F 03			     jg	     @@1
    683	0282  E9 0088			     jmp     @1@2074
    684	0285			     @@1:
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 13
command.ASM



    685	0285  83 3E 020Ar FF		     cmp     word ptr DGROUP:history_pos,-1
    686	028A  75 03			     jne     @@2
    687	028C  EB 7F 90			     jmp     @1@2074
    688	028F			     @@2:
    689					;
    690					;					if (history_len<MAXHISTORY)  {
    691					;
    692	028F  83 3E 0210r 0A		     cmp     word ptr DGROUP:history_len,10
    693	0294  7D 18			     jge     short @1@1822
    694					;
    695					;					   if (history_pos<history_len-1)
    696					;
    697	0296  A1 0210r			     mov     ax,word ptr DGROUP:history_len
    698	0299  48			     dec     ax
    699	029A  3B 06 020Ar		     cmp     ax,word ptr DGROUP:history_pos
    700	029E  7E 06			     jle     short @1@1766
    701					;
    702					;					      history_pos++;
    703					;
    704	02A0  FF 06 020Ar		     inc     word ptr DGROUP:history_pos
    705	02A4  EB 06			     jmp     short @1@1794
    706	02A6			     @1@1766:
    707					;
    708					;					   else
    709					;					      history_pos = -1;
    710					;
    711	02A6  C7 06 020Ar FFFF		     mov     word ptr DGROUP:history_pos,-1
    712	02AC			     @1@1794:
    713					;
    714					;					}
    715					;
    716	02AC  EB 20			     jmp     short @1@1934
    717	02AE			     @1@1822:
    718					;
    719					;					else  {
    720					;					   history_pos++;
    721					;
    722	02AE  FF 06 020Ar		     inc     word ptr DGROUP:history_pos
    723					;
    724					;					   if (history_pos>=MAXHISTORY)
    725					;
    726	02B2  83 3E 020Ar 0A		     cmp     word ptr DGROUP:history_pos,10
    727	02B7  7C 06			     jl	     short @1@1878
    728					;
    729					;					      history_pos = 0;
    730					;
    731	02B9  C7 06 020Ar 0000		     mov     word ptr DGROUP:history_pos,0
    732	02BF			     @1@1878:
    733					;
    734					;					   if (history_pos==history_nxt)
    735					;
    736	02BF  A1 020Ar			     mov     ax,word ptr DGROUP:history_pos
    737	02C2  3B 06 020Cr		     cmp     ax,word ptr DGROUP:history_nxt
    738	02C6  75 06			     jne     short @1@1934
    739					;
    740					;					      history_pos = -1;
    741					;
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 14
command.ASM



    742	02C8  C7 06 020Ar FFFF		     mov     word ptr DGROUP:history_pos,-1
    743	02CE			     @1@1934:
    744	02CE  EB 04			     jmp     short @1@1990
    745	02D0			     @1@1962:
    746					;
    747					;					}
    748					;					/* Limpa a linha de comandos */
    749					;					while (numcar>0)  {
    750					;					      --numcar;
    751					;
    752	02D0  4E			     dec     si
    753					;
    754					;					      command_backspace();
    755					;
    756	02D1  E8 0271			     call    near ptr command_backspace
    757	02D4			     @1@1990:
    758	02D4  0B F6			     or	     si,si
    759	02D6  7F F8			     jg	     short @1@1962
    760					;
    761					;					}
    762					;					if (history_pos!=-1)  {
    763					;
    764	02D8  83 3E 020Ar FF		     cmp     word ptr DGROUP:history_pos,-1
    765	02DD  74 2E			     je	     short @1@2074
    766					;
    767					;					   strcpy(cmdline,history[history_pos]);
    768					;
    769	02DF  1E			     push    ds
    770	02E0  A1 020Ar			     mov     ax,word ptr DGROUP:history_pos
    771	02E3  BA 001F			     mov     dx,31
    772	02E6  F7 EA			     imul    dx
    773	02E8  05 0212r			     add     ax,offset DGROUP:history
    774	02EB  50			     push    ax
    775	02EC  1E			     push    ds
    776	02ED  B8 0606r			     mov     ax,offset DGROUP:cmdline
    777	02F0  50			     push    ax
    778	02F1  E8 0000e			     call    near ptr _strcpy
    779	02F4  83 C4 08			     add     sp,8
    780					;
    781					;					   putstr(cmdline);
    782					;
    783	02F7  1E			     push    ds
    784	02F8  B8 0606r			     mov     ax,offset DGROUP:cmdline
    785	02FB  50			     push    ax
    786	02FC  E8 0000e			     call    near ptr _putstr
    787	02FF  59			     pop     cx
    788	0300  59			     pop     cx
    789					;
    790					;					   numcar=strlen(cmdline);
    791					;
    792	0301  1E			     push    ds
    793	0302  B8 0606r			     mov     ax,offset DGROUP:cmdline
    794	0305  50			     push    ax
    795	0306  E8 0000e			     call    near ptr _strlen
    796	0309  59			     pop     cx
    797	030A  59			     pop     cx
    798	030B  8B F0			     mov     si,ax
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 15
command.ASM



    799	030D			     @1@2074:
    800					;
    801					;					}
    802					;				     }
    803					;				     break;
    804					;
    805	030D  EB 00			     jmp     short @1@2102
    806	030F			     @1@2102:
    807					;
    808					;			 }
    809					;			 break;
    810					;
    811	030F  E9 01FF			     jmp     @1@3362
    812	0312			     @1@2130:
    813					;
    814					;		    case 13:
    815					;			 history_pos = -1;
    816					;
    817	0312  C7 06 020Ar FFFF		     mov     word ptr DGROUP:history_pos,-1
    818					;
    819					;			 putch('\n');
    820					;
    821	0318  B8 000A			     mov     ax,10
    822	031B  50			     push    ax
    823	031C  E8 0000e			     call    near ptr _putch
    824	031F  59			     pop     cx
    825					;
    826					;			 cmdline[numcar]='\0';
    827					;
    828	0320  C6 84 0606r 00		     mov     byte ptr DGROUP:cmdline[si],0
    829					;
    830					;			 /* Divide a linha de comandos em comando e opÁıes */
    831					;			 ptrline = cmdline;
    832					;
    833	0325  8C 5E E8			     mov     word ptr [bp-24],ds
    834	0328  C7 46 E6 0606r		     mov     word ptr [bp-26],offset DGROUP:cmdline
    835					;
    836					;			 argc =	0;
    837					;
    838	032D  C7 46 EA 0000		     mov     word ptr [bp-22],0
    839					;
    840					;			 pos = 0;
    841					;
    842	0332  C7 46 F0 0000		     mov     word ptr [bp-16],0
    843	0337			     @1@2158:
    844	0337  EB 03			     jmp     short @1@2214
    845	0339			     @1@2186:
    846					;
    847					;			 while (1) {
    848					;			       while (*ptrline!='\0' &&	(*ptrline==' ' || *ptrline=='\t'))
    849					;				     ++ptrline;
    850					;
    851	0339  FF 46 E6			     inc     word ptr [bp-26]
    852	033C			     @1@2214:
    853	033C  C4 5E E6			     les     bx,dword ptr [bp-26]
    854	033F  26: 80 3F	00		     cmp     byte ptr es:[bx],0
    855	0343  74 12			     je	     short @1@2298
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 16
command.ASM



    856	0345  C4 5E E6			     les     bx,dword ptr [bp-26]
    857	0348  26: 80 3F	20		     cmp     byte ptr es:[bx],32
    858	034C  74 EB			     je	     short @1@2186
    859	034E  C4 5E E6			     les     bx,dword ptr [bp-26]
    860	0351  26: 80 3F	09		     cmp     byte ptr es:[bx],9
    861	0355  74 E2			     je	     short @1@2186
    862	0357			     @1@2298:
    863					;
    864					;			       if (*ptrline=='\0')
    865					;
    866	0357  C4 5E E6			     les     bx,dword ptr [bp-26]
    867	035A  26: 80 3F	00		     cmp     byte ptr es:[bx],0
    868	035E  75 03			     jne     short @1@2354
    869					;
    870					;				  break;
    871					;
    872	0360  E9 00B4			     jmp     @1@2718
    873	0363			     @1@2354:
    874					;
    875					;			       i = 0;
    876					;
    877	0363  33 FF			     xor     di,di
    878	0365  EB 0E			     jmp     short @1@2410
    879	0367			     @1@2382:
    880					;
    881					;			       while (*ptrline!='\0' &&	*ptrline!=' ' && *ptrline!='\t')  {
    882					;				     palavra[i++] = *ptrline;
    883					;
    884	0367  C4 5E E6			     les     bx,dword ptr [bp-26]
    885	036A  26: 8A 07			     mov     al,byte ptr es:[bx]
    886	036D  88 85 05E7r		     mov     byte ptr DGROUP:palavra[di],al
    887	0371  47			     inc     di
    888					;
    889					;				     ++ptrline;
    890					;
    891	0372  FF 46 E6			     inc     word ptr [bp-26]
    892	0375			     @1@2410:
    893	0375  C4 5E E6			     les     bx,dword ptr [bp-26]
    894	0378  26: 80 3F	00		     cmp     byte ptr es:[bx],0
    895	037C  74 12			     je	     short @1@2494
    896	037E  C4 5E E6			     les     bx,dword ptr [bp-26]
    897	0381  26: 80 3F	20		     cmp     byte ptr es:[bx],32
    898	0385  74 09			     je	     short @1@2494
    899	0387  C4 5E E6			     les     bx,dword ptr [bp-26]
    900	038A  26: 80 3F	09		     cmp     byte ptr es:[bx],9
    901	038E  75 D7			     jne     short @1@2382
    902	0390			     @1@2494:
    903					;
    904					;			       }
    905					;			       palavra[i] = '\0';
    906					;
    907	0390  C6 85 05E7r 00		     mov     byte ptr DGROUP:palavra[di],0
    908					;
    909					;			       if (palavra[0]=='$')  {
    910					;
    911	0395  80 3E 05E7r 24		     cmp     byte ptr DGROUP:palavra,36
    912	039A  75 39			     jne     short @1@2606
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 17
command.ASM



    913					;
    914					;				  var =	command_var_value(&palavra[1]);
    915					;
    916	039C  1E			     push    ds
    917	039D  B8 05E8r			     mov     ax,offset DGROUP:palavra+1
    918	03A0  50			     push    ax
    919	03A1  E8 036B			     call    near ptr command_var_value
    920	03A4  59			     pop     cx
    921	03A5  59			     pop     cx
    922	03A6  89 56 E4			     mov     word ptr [bp-28],dx
    923	03A9  89 46 E2			     mov     word ptr [bp-30],ax
    924					;
    925					;				  if (var!=NULL)  {
    926					;
    927	03AC  8B 46 E2			     mov     ax,word ptr [bp-30]
    928	03AF  0B 46 E4			     or	     ax,word ptr [bp-28]
    929	03B2  74 1F			     je	     short @1@2578
    930					;
    931					;				     strcpy(palavra,var);
    932					;
    933	03B4  FF 76 E4			     push    word ptr [bp-28]
    934	03B7  FF 76 E2			     push    word ptr [bp-30]
    935	03BA  1E			     push    ds
    936	03BB  B8 05E7r			     mov     ax,offset DGROUP:palavra
    937	03BE  50			     push    ax
    938	03BF  E8 0000e			     call    near ptr _strcpy
    939	03C2  83 C4 08			     add     sp,8
    940					;
    941					;				     i = strlen(palavra);
    942					;
    943	03C5  1E			     push    ds
    944	03C6  B8 05E7r			     mov     ax,offset DGROUP:palavra
    945	03C9  50			     push    ax
    946	03CA  E8 0000e			     call    near ptr _strlen
    947	03CD  59			     pop     cx
    948	03CE  59			     pop     cx
    949	03CF  8B F8			     mov     di,ax
    950					;
    951					;				  }
    952					;
    953	03D1  EB 02			     jmp     short @1@2606
    954	03D3			     @1@2578:
    955					;
    956					;				  else
    957					;				     continue;
    958					;
    959	03D3  EB 3F			     jmp     short @1@2690
    960	03D5			     @1@2606:
    961					;
    962					;
    963					;			       }
    964					;			       strcpy(&argline[pos],palavra);
    965					;
    966	03D5  1E			     push    ds
    967	03D6  B8 05E7r			     mov     ax,offset DGROUP:palavra
    968	03D9  50			     push    ax
    969	03DA  1E			     push    ds
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 18
command.ASM



    970	03DB  8B 46 F0			     mov     ax,word ptr [bp-16]
    971	03DE  05 0388r			     add     ax,offset DGROUP:argline
    972	03E1  50			     push    ax
    973	03E2  E8 0000e			     call    near ptr _strcpy
    974	03E5  83 C4 08			     add     sp,8
    975					;
    976					;			       argv[argc++] = &argline[pos];
    977					;
    978	03E8  8B 46 F0			     mov     ax,word ptr [bp-16]
    979	03EB  05 0388r			     add     ax,offset DGROUP:argline
    980	03EE  8B 5E EA			     mov     bx,word ptr [bp-22]
    981	03F1  B1 02			     mov     cl,2
    982	03F3  D3 E3			     shl     bx,cl
    983	03F5  8C 9F 034Ar		     mov     word ptr DGROUP:argv[bx+2],ds
    984	03F9  89 87 0348r		     mov     word ptr DGROUP:argv[bx],ax
    985	03FD  FF 46 EA			     inc     word ptr [bp-22]
    986					;
    987					;			       pos+= (i+1);
    988					;
    989	0400  8B C7			     mov     ax,di
    990	0402  40			     inc     ax
    991	0403  01 46 F0			     add     word ptr [bp-16],ax
    992					;
    993					;			       if (*ptrline=='\0')
    994					;
    995	0406  C4 5E E6			     les     bx,dword ptr [bp-26]
    996	0409  26: 80 3F	00		     cmp     byte ptr es:[bx],0
    997	040D  75 02			     jne     short @1@2662
    998					;
    999					;				  break;
   1000					;
   1001	040F  EB 06			     jmp     short @1@2718
   1002	0411			     @1@2662:
   1003					;
   1004					;			       ++ptrline;
   1005					;
   1006	0411  FF 46 E6			     inc     word ptr [bp-26]
   1007	0414			     @1@2690:
   1008	0414  E9 FF20			     jmp     @1@2158
   1009	0417			     @1@2718:
   1010					;
   1011					;			 }
   1012					;			 /* Se È comando vazio n„o faz nada */
   1013					;			 if (argc==0)  {
   1014					;
   1015	0417  83 7E EA 00		     cmp     word ptr [bp-22],0
   1016	041B  75 06			     jne     short @1@2774
   1017					;
   1018					;			    command_showprompt();
   1019					;
   1020	041D  E8 014F			     call    near ptr command_showprompt
   1021					;
   1022					;			    break;
   1023					;
   1024	0420  E9 00EE			     jmp     @1@3362
   1025	0423			     @1@2774:
   1026					;
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 19
command.ASM



   1027					;			 }
   1028					;			 /* Salva linha	de comando no histÛrico	*/
   1029					;			 strcpy	(history[history_nxt],cmdline);
   1030					;
   1031	0423  1E			     push    ds
   1032	0424  B8 0606r			     mov     ax,offset DGROUP:cmdline
   1033	0427  50			     push    ax
   1034	0428  1E			     push    ds
   1035	0429  A1 020Cr			     mov     ax,word ptr DGROUP:history_nxt
   1036	042C  BA 001F			     mov     dx,31
   1037	042F  F7 EA			     imul    dx
   1038	0431  05 0212r			     add     ax,offset DGROUP:history
   1039	0434  50			     push    ax
   1040	0435  E8 0000e			     call    near ptr _strcpy
   1041	0438  83 C4 08			     add     sp,8
   1042					;
   1043					;			 if (history_len<MAXHISTORY)
   1044					;
   1045	043B  83 3E 0210r 0A		     cmp     word ptr DGROUP:history_len,10
   1046	0440  7D 06			     jge     short @1@2830
   1047					;
   1048					;			    ++history_len;
   1049					;
   1050	0442  FF 06 0210r		     inc     word ptr DGROUP:history_len
   1051	0446  EB 13			     jmp     short @1@2914
   1052	0448			     @1@2830:
   1053					;
   1054					;			 else  {
   1055					;			    if (history_ini==MAXHISTORY-1)
   1056					;
   1057	0448  83 3E 020Er 09		     cmp     word ptr DGROUP:history_ini,9
   1058	044D  75 08			     jne     short @1@2886
   1059					;
   1060					;			       history_ini = 0;
   1061					;
   1062	044F  C7 06 020Er 0000		     mov     word ptr DGROUP:history_ini,0
   1063	0455  EB 04			     jmp     short @1@2914
   1064	0457			     @1@2886:
   1065					;
   1066					;			    else
   1067					;			       ++history_ini;
   1068					;
   1069	0457  FF 06 020Er		     inc     word ptr DGROUP:history_ini
   1070	045B			     @1@2914:
   1071					;
   1072					;			 }
   1073					;			 if (history_nxt==MAXHISTORY-1)
   1074					;
   1075	045B  83 3E 020Cr 09		     cmp     word ptr DGROUP:history_nxt,9
   1076	0460  75 08			     jne     short @1@2970
   1077					;
   1078					;			    history_nxt	= 0;
   1079					;
   1080	0462  C7 06 020Cr 0000		     mov     word ptr DGROUP:history_nxt,0
   1081	0468  EB 04			     jmp     short @1@2998
   1082	046A			     @1@2970:
   1083					;
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 20
command.ASM



   1084					;			 else
   1085					;			    ++history_nxt;
   1086					;
   1087	046A  FF 06 020Cr		     inc     word ptr DGROUP:history_nxt
   1088	046E			     @1@2998:
   1089					;
   1090					;			 /* Verifica qual È o comando ... */
   1091					;			 achou = 0;
   1092					;
   1093	046E  C7 46 F2 0000		     mov     word ptr [bp-14],0
   1094					;
   1095					;			 for (i=0;i<MAXCOMMANDS;++i)  {
   1096					;
   1097	0473  33 FF			     xor     di,di
   1098	0475  EB 28			     jmp     short @1@3110
   1099	0477			     @1@3026:
   1100					;
   1101					;			     if	(strcmp(argv[0],commands[i].name)==0)  {
   1102					;
   1103	0477  1E			     push    ds
   1104	0478  8B C7			     mov     ax,di
   1105	047A  BA 0006			     mov     dx,6
   1106	047D  F7 EA			     imul    dx
   1107	047F  8B D8			     mov     bx,ax
   1108	0481  FF B7 0002r		     push    word ptr DGROUP:commands[bx]
   1109	0485  FF 36 034Ar		     push    word ptr DGROUP:argv+2
   1110	0489  FF 36 0348r		     push    word ptr DGROUP:argv
   1111	048D  E8 0000e			     call    near ptr _strcmp
   1112	0490  83 C4 08			     add     sp,8
   1113	0493  0B C0			     or	     ax,ax
   1114	0495  75 07			     jne     short @1@3082
   1115					;
   1116					;				achou=1;
   1117					;
   1118	0497  C7 46 F2 0001		     mov     word ptr [bp-14],1
   1119					;
   1120					;				break;
   1121					;
   1122	049C  EB 06			     jmp     short @1@3138
   1123	049E			     @1@3082:
   1124	049E  47			     inc     di
   1125	049F			     @1@3110:
   1126	049F  83 FF 17			     cmp     di,23
   1127	04A2  7C D3			     jl	     short @1@3026
   1128	04A4			     @1@3138:
   1129					;
   1130					;			     }
   1131					;			 }
   1132					;
   1133					;			 /* Executa o comando */
   1134					;			 if (achou)  {
   1135					;
   1136	04A4  83 7E F2 00		     cmp     word ptr [bp-14],0
   1137	04A8  74 39			     je	     short @1@3194
   1138					;
   1139					;			    res	= commands[i].code(argc,argv);
   1140					;
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 21
command.ASM



   1141	04AA  B8 0348r			     mov     ax,offset DGROUP:argv
   1142	04AD  50			     push    ax
   1143	04AE  FF 76 EA			     push    word ptr [bp-22]
   1144	04B1  8B C7			     mov     ax,di
   1145	04B3  BA 0006			     mov     dx,6
   1146	04B6  F7 EA			     imul    dx
   1147	04B8  8B D8			     mov     bx,ax
   1148	04BA  FF 97 0006r		     call    word ptr DGROUP:commands[bx+4]
   1149	04BE  59			     pop     cx
   1150	04BF  59			     pop     cx
   1151	04C0  89 46 EC			     mov     word ptr [bp-20],ax
   1152					;
   1153					;			    inttostr(str,res);
   1154					;
   1155	04C3  FF 76 EC			     push    word ptr [bp-20]
   1156	04C6  16			     push    ss
   1157	04C7  8D 46 F4			     lea     ax,word ptr [bp-12]
   1158	04CA  50			     push    ax
   1159	04CB  E8 0000e			     call    near ptr _inttostr
   1160	04CE  83 C4 06			     add     sp,6
   1161					;
   1162					;			    command_var_set("ERRORLEVEL",str);
   1163					;
   1164	04D1  16			     push    ss
   1165	04D2  8D 46 F4			     lea     ax,word ptr [bp-12]
   1166	04D5  50			     push    ax
   1167	04D6  1E			     push    ds
   1168	04D7  B8 05BBr			     mov     ax,offset DGROUP:s@+1323
   1169	04DA  50			     push    ax
   1170	04DB  E8 025E			     call    near ptr command_var_set
   1171	04DE  83 C4 08			     add     sp,8
   1172					;
   1173					;			 }
   1174					;
   1175	04E1  EB 0A			     jmp     short @1@3222
   1176	04E3			     @1@3194:
   1177					;
   1178					;			 else
   1179					;			    putstr("Erro: comando desconhecido!\n");
   1180					;
   1181	04E3  1E			     push    ds
   1182	04E4  B8 05C6r			     mov     ax,offset DGROUP:s@+1334
   1183	04E7  50			     push    ax
   1184	04E8  E8 0000e			     call    near ptr _putstr
   1185	04EB  59			     pop     cx
   1186	04EC  59			     pop     cx
   1187	04ED			     @1@3222:
   1188					;
   1189					;
   1190					;			 if (!end_command)
   1191					;
   1192	04ED  83 3E 0625r 00		     cmp     word ptr DGROUP:end_command,0
   1193	04F2  75 03			     jne     short @1@3278
   1194					;
   1195					;			    command_showprompt();
   1196					;
   1197	04F4  E8 0078			     call    near ptr command_showprompt
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 22
command.ASM



   1198	04F7			     @1@3278:
   1199					;
   1200					;
   1201					;			 numcar=0;
   1202					;
   1203	04F7  33 F6			     xor     si,si
   1204					;
   1205					;			 break;
   1206					;
   1207	04F9  EB 16			     jmp     short @1@3362
   1208	04FB			     @1@3306:
   1209					;
   1210					;		    default:
   1211					;			 if (numcar<MAXLINE)  {
   1212					;
   1213	04FB  83 FE 1E			     cmp     si,30
   1214	04FE  7D 11			     jge     short @1@3362
   1215					;
   1216					;			    putch(car);
   1217					;
   1218	0500  8A 46 FF			     mov     al,byte ptr [bp-1]
   1219	0503  98			     cbw
   1220	0504  50			     push    ax
   1221	0505  E8 0000e			     call    near ptr _putch
   1222	0508  59			     pop     cx
   1223					;
   1224					;			    cmdline[numcar++]=car;
   1225					;
   1226	0509  8A 46 FF			     mov     al,byte ptr [bp-1]
   1227	050C  88 84 0606r		     mov     byte ptr DGROUP:cmdline[si],al
   1228	0510  46			     inc     si
   1229	0511			     @1@3362:
   1230	0511  83 3E 0625r 00		     cmp     word ptr DGROUP:end_command,0
   1231	0516  75 03			     jne     @@3
   1232	0518  E9 FBCF			     jmp     @1@58
   1233	051B			     @@3:
   1234					;
   1235					;			 }
   1236					;	     }
   1237					;      }
   1238					;
   1239					;    }
   1240					;
   1241	051B  5F			     pop     di
   1242	051C  5E			     pop     si
   1243	051D  8B E5			     mov     sp,bp
   1244	051F  5D			     pop     bp
   1245	0520  C3			     ret
   1246	0521			     _command	     endp
   1247	0521			     @1@C3330	     label   word
   1248	0521  41			     db	     65
   1249	0522  00			     db	     0
   1250	0523  48			     db	     72
   1251	0524  00			     db	     0
   1252	0525  4B			     db	     75
   1253	0526  00			     db	     0
   1254	0527  50			     db	     80
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 23
command.ASM



   1255	0528  00			     db	     0
   1256	0529  0153r			     dw	     @1@674
   1257	052B  01ABr			     dw	     @1@982
   1258	052D  01A0r			     dw	     @1@898
   1259	052F  027Br			     dw	     @1@1626
   1260	0531			     @1@C3234	     label   word
   1261	0531  00			     db	     0
   1262	0532  00			     db	     0
   1263	0533  08			     db	     8
   1264	0534  00			     db	     0
   1265	0535  09			     db	     9
   1266	0536  00			     db	     0
   1267	0537  0D			     db	     13
   1268	0538  00			     db	     0
   1269	0539  1B			     db	     27
   1270	053A  00			     db	     0
   1271	053B  012Cr			     dw	     @1@478
   1272	053D  0114r			     dw	     @1@282
   1273	053F  0111r			     dw	     @1@254
   1274	0541  0312r			     dw	     @1@2130
   1275	0543  011Fr			     dw	     @1@366
   1276					;
   1277					;    static void command_backspace()
   1278					;
   1279					     assume  cs:_TEXT
   1280	0545			     command_backspace	     proc    near
   1281	0545  55			     push    bp
   1282	0546  8B EC			     mov     bp,sp
   1283	0548  56			     push    si
   1284	0549  57			     push    di
   1285					;
   1286					;    {
   1287					;      int x,y;
   1288					;
   1289					;      x = wherex();
   1290					;
   1291	054A  E8 0000e			     call    near ptr _wherex
   1292	054D  8B F0			     mov     si,ax
   1293					;
   1294					;      y = wherey();
   1295					;
   1296	054F  E8 0000e			     call    near ptr _wherey
   1297	0552  8B F8			     mov     di,ax
   1298					;
   1299					;      --x;
   1300					;
   1301	0554  4E			     dec     si
   1302					;
   1303					;      gotoxy(x,y);
   1304					;
   1305	0555  57			     push    di
   1306	0556  56			     push    si
   1307	0557  E8 0000e			     call    near ptr _gotoxy
   1308	055A  59			     pop     cx
   1309	055B  59			     pop     cx
   1310					;
   1311					;      putch(' ');
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 24
command.ASM



   1312					;
   1313	055C  B8 0020			     mov     ax,32
   1314	055F  50			     push    ax
   1315	0560  E8 0000e			     call    near ptr _putch
   1316	0563  59			     pop     cx
   1317					;
   1318					;      gotoxy(x,y);
   1319					;
   1320	0564  57			     push    di
   1321	0565  56			     push    si
   1322	0566  E8 0000e			     call    near ptr _gotoxy
   1323	0569  59			     pop     cx
   1324	056A  59			     pop     cx
   1325					;
   1326					;    }
   1327					;
   1328	056B  5F			     pop     di
   1329	056C  5E			     pop     si
   1330	056D  5D			     pop     bp
   1331	056E  C3			     ret
   1332	056F			     command_backspace	     endp
   1333					;
   1334					;    static void command_showprompt()
   1335					;
   1336					     assume  cs:_TEXT
   1337	056F			     command_showprompt	     proc    near
   1338	056F  55			     push    bp
   1339	0570  8B EC			     mov     bp,sp
   1340	0572  83 EC 06			     sub     sp,6
   1341					;
   1342					;    {
   1343					;      char cor;
   1344					;      char far	*prompt;
   1345					;
   1346					;      prompt =	command_var_value("PROMPT");
   1347					;
   1348	0575  1E			     push    ds
   1349	0576  B8 05E3r			     mov     ax,offset DGROUP:s@+1363
   1350	0579  50			     push    ax
   1351	057A  E8 0192			     call    near ptr command_var_value
   1352	057D  59			     pop     cx
   1353	057E  59			     pop     cx
   1354	057F  89 56 FC			     mov     word ptr [bp-4],dx
   1355	0582  89 46 FA			     mov     word ptr [bp-6],ax
   1356					;
   1357					;      if (prompt!=NULL)  {
   1358					;
   1359	0585  8B 46 FA			     mov     ax,word ptr [bp-6]
   1360	0588  0B 46 FC			     or	     ax,word ptr [bp-4]
   1361	058B  74 22			     je	     short @3@86
   1362					;
   1363					;	  cor =	getcolor();
   1364					;
   1365	058D  E8 0000e			     call    near ptr _getcolor
   1366	0590  88 46 FF			     mov     byte ptr [bp-1],al
   1367					;
   1368					;	  setcolor(PROMPTCOLOR);
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 25
command.ASM



   1369					;
   1370	0593  B8 0009			     mov     ax,9
   1371	0596  50			     push    ax
   1372	0597  E8 0000e			     call    near ptr _setcolor
   1373	059A  59			     pop     cx
   1374					;
   1375					;	  putstr(prompt);
   1376					;
   1377	059B  FF 76 FC			     push    word ptr [bp-4]
   1378	059E  FF 76 FA			     push    word ptr [bp-6]
   1379	05A1  E8 0000e			     call    near ptr _putstr
   1380	05A4  59			     pop     cx
   1381	05A5  59			     pop     cx
   1382					;
   1383					;	  setcolor(cor);
   1384					;
   1385	05A6  8A 46 FF			     mov     al,byte ptr [bp-1]
   1386	05A9  98			     cbw
   1387	05AA  50			     push    ax
   1388	05AB  E8 0000e			     call    near ptr _setcolor
   1389	05AE  59			     pop     cx
   1390	05AF			     @3@86:
   1391					;
   1392					;      }
   1393					;      putch(' ');
   1394					;
   1395	05AF  B8 0020			     mov     ax,32
   1396	05B2  50			     push    ax
   1397	05B3  E8 0000e			     call    near ptr _putch
   1398	05B6  59			     pop     cx
   1399					;
   1400					;    }
   1401					;
   1402	05B7  8B E5			     mov     sp,bp
   1403	05B9  5D			     pop     bp
   1404	05BA  C3			     ret
   1405	05BB			     command_showprompt	     endp
   1406					;
   1407					;    static void command_var_init()
   1408					;
   1409					     assume  cs:_TEXT
   1410	05BB			     command_var_init	     proc    near
   1411	05BB  55			     push    bp
   1412	05BC  8B EC			     mov     bp,sp
   1413					;
   1414					;    {
   1415					;      int i;
   1416					;
   1417					;      for (i=0;i<VAR_MAX;++i)	{
   1418					;
   1419	05BE  33 C9			     xor     cx,cx
   1420	05C0  EB 1D			     jmp     short @4@114
   1421	05C2			     @4@58:
   1422					;
   1423					;	   var[i].name[0]='\0';
   1424					;
   1425	05C2  8B C1			     mov     ax,cx
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 26
command.ASM



   1426	05C4  BA 0032			     mov     dx,50
   1427	05C7  F7 EA			     imul    dx
   1428	05C9  8B D8			     mov     bx,ax
   1429	05CB  C6 87 0016r 00		     mov     byte ptr DGROUP:var[bx],0
   1430					;
   1431					;	   var[i].value[0]='\0';
   1432					;
   1433	05D0  8B C1			     mov     ax,cx
   1434	05D2  BA 0032			     mov     dx,50
   1435	05D5  F7 EA			     imul    dx
   1436	05D7  8B D8			     mov     bx,ax
   1437	05D9  C6 87 0023r 00		     mov     byte ptr DGROUP:var[bx+13],0
   1438	05DE  41			     inc     cx
   1439	05DF			     @4@114:
   1440	05DF  83 F9 0A			     cmp     cx,10
   1441	05E2  7C DE			     jl	     short @4@58
   1442					;
   1443					;      }
   1444					;      num_var = 0;
   1445					;
   1446	05E4  C7 06 0000r 0000		     mov     word ptr DGROUP:num_var,0
   1447					;
   1448					;    }
   1449					;
   1450	05EA  5D			     pop     bp
   1451	05EB  C3			     ret
   1452	05EC			     command_var_init	     endp
   1453					;
   1454					;    static int	command_var_nextfree()
   1455					;
   1456					     assume  cs:_TEXT
   1457	05EC			     command_var_nextfree    proc    near
   1458	05EC  55			     push    bp
   1459	05ED  8B EC			     mov     bp,sp
   1460					;
   1461					;    {
   1462					;      int i;
   1463					;
   1464					;      if (num_var>=VAR_MAX)
   1465					;
   1466	05EF  83 3E 0000r 0A		     cmp     word ptr DGROUP:num_var,10
   1467	05F4  7C 05			     jl	     short @5@114
   1468	05F6			     @5@58:
   1469					;
   1470					;	  return -1;
   1471					;
   1472	05F6  B8 FFFF			     mov     ax,-1
   1473	05F9			     @5@86:
   1474	05F9  EB 20			     jmp     short @5@282
   1475	05FB			     @5@114:
   1476					;
   1477					;      for (i=0;i<VAR_MAX;++i)
   1478					;
   1479	05FB  33 C9			     xor     cx,cx
   1480	05FD  EB 15			     jmp     short @5@226
   1481	05FF			     @5@142:
   1482					;
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 27
command.ASM



   1483					;	   if (var[i].name[0]=='\0')
   1484					;
   1485	05FF  8B C1			     mov     ax,cx
   1486	0601  BA 0032			     mov     dx,50
   1487	0604  F7 EA			     imul    dx
   1488	0606  8B D8			     mov     bx,ax
   1489	0608  80 BF 0016r 00		     cmp     byte ptr DGROUP:var[bx],0
   1490	060D  75 04			     jne     short @5@198
   1491					;
   1492					;	      return i;
   1493					;
   1494	060F  8B C1			     mov     ax,cx
   1495	0611  EB E6			     jmp     short @5@86
   1496	0613			     @5@198:
   1497	0613  41			     inc     cx
   1498	0614			     @5@226:
   1499	0614  83 F9 0A			     cmp     cx,10
   1500	0617  7C E6			     jl	     short @5@142
   1501	0619  EB DB			     jmp     short @5@58
   1502	061B			     @5@282:
   1503					;
   1504					;      return -1;
   1505					;    }
   1506					;
   1507	061B  5D			     pop     bp
   1508	061C  C3			     ret
   1509	061D			     command_var_nextfree    endp
   1510					;
   1511					;    static void command_var_list()
   1512					;
   1513					     assume  cs:_TEXT
   1514	061D			     command_var_list	     proc    near
   1515	061D  55			     push    bp
   1516	061E  8B EC			     mov     bp,sp
   1517	0620  83 EC 02			     sub     sp,2
   1518	0623  56			     push    si
   1519					;
   1520					;    {
   1521					;      int i;
   1522					;      char cor;
   1523					;
   1524					;      cor = getcolor();
   1525					;
   1526	0624  E8 0000e			     call    near ptr _getcolor
   1527	0627  88 46 FF			     mov     byte ptr [bp-1],al
   1528					;
   1529					;      for (i=0;i<VAR_MAX;++i)	{
   1530					;
   1531	062A  33 F6			     xor     si,si
   1532	062C  EB 54			     jmp     short @6@142
   1533	062E			     @6@58:
   1534					;
   1535					;	   if (var[i].name[0]!='\0')  {
   1536					;
   1537	062E  8B C6			     mov     ax,si
   1538	0630  BA 0032			     mov     dx,50
   1539	0633  F7 EA			     imul    dx
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 28
command.ASM



   1540	0635  8B D8			     mov     bx,ax
   1541	0637  80 BF 0016r 00		     cmp     byte ptr DGROUP:var[bx],0
   1542	063C  74 43			     je	     short @6@114
   1543					;
   1544					;	      putstr(var[i].name);
   1545					;
   1546	063E  1E			     push    ds
   1547	063F  8B C6			     mov     ax,si
   1548	0641  BA 0032			     mov     dx,50
   1549	0644  F7 EA			     imul    dx
   1550	0646  05 0016r			     add     ax,offset DGROUP:var
   1551	0649  50			     push    ax
   1552	064A  E8 0000e			     call    near ptr _putstr
   1553	064D  59			     pop     cx
   1554	064E  59			     pop     cx
   1555					;
   1556					;	      putch('=');
   1557					;
   1558	064F  B8 003D			     mov     ax,61
   1559	0652  50			     push    ax
   1560	0653  E8 0000e			     call    near ptr _putch
   1561	0656  59			     pop     cx
   1562					;
   1563					;	      setcolor(VARCOLOR);
   1564					;
   1565	0657  B8 000E			     mov     ax,14
   1566	065A  50			     push    ax
   1567	065B  E8 0000e			     call    near ptr _setcolor
   1568	065E  59			     pop     cx
   1569					;
   1570					;	      putstr(var[i].value);
   1571					;
   1572	065F  1E			     push    ds
   1573	0660  8B C6			     mov     ax,si
   1574	0662  BA 0032			     mov     dx,50
   1575	0665  F7 EA			     imul    dx
   1576	0667  05 0023r			     add     ax,offset DGROUP:var+13
   1577	066A  50			     push    ax
   1578	066B  E8 0000e			     call    near ptr _putstr
   1579	066E  59			     pop     cx
   1580	066F  59			     pop     cx
   1581					;
   1582					;	      setcolor(cor);
   1583					;
   1584	0670  8A 46 FF			     mov     al,byte ptr [bp-1]
   1585	0673  98			     cbw
   1586	0674  50			     push    ax
   1587	0675  E8 0000e			     call    near ptr _setcolor
   1588	0678  59			     pop     cx
   1589					;
   1590					;	      putch('\n');
   1591					;
   1592	0679  B8 000A			     mov     ax,10
   1593	067C  50			     push    ax
   1594	067D  E8 0000e			     call    near ptr _putch
   1595	0680  59			     pop     cx
   1596	0681			     @6@114:
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 29
command.ASM



   1597	0681  46			     inc     si
   1598	0682			     @6@142:
   1599	0682  83 FE 0A			     cmp     si,10
   1600	0685  7C A7			     jl	     short @6@58
   1601					;
   1602					;	   }
   1603					;      }
   1604					;    }
   1605					;
   1606	0687  5E			     pop     si
   1607	0688  8B E5			     mov     sp,bp
   1608	068A  5D			     pop     bp
   1609	068B  C3			     ret
   1610	068C			     command_var_list	     endp
   1611					;
   1612					;    static int	 command_var_search(char far *nome)
   1613					;
   1614					     assume  cs:_TEXT
   1615	068C			     command_var_search	     proc    near
   1616	068C  55			     push    bp
   1617	068D  8B EC			     mov     bp,sp
   1618	068F  56			     push    si
   1619					;
   1620					;    {
   1621					;      int i;
   1622					;
   1623					;      if (nome[0] == '\0')
   1624					;
   1625	0690  C4 5E 04			     les     bx,dword ptr [bp+4]
   1626	0693  26: 80 3F	00		     cmp     byte ptr es:[bx],0
   1627	0697  75 05			     jne     short @7@114
   1628	0699			     @7@58:
   1629					;
   1630					;	  return -1;
   1631					;
   1632	0699  B8 FFFF			     mov     ax,-1
   1633	069C			     @7@86:
   1634	069C  EB 2C			     jmp     short @7@282
   1635	069E			     @7@114:
   1636					;
   1637					;      for (i=0;i<VAR_MAX;++i)	{
   1638					;
   1639	069E  33 F6			     xor     si,si
   1640	06A0  EB 21			     jmp     short @7@226
   1641	06A2			     @7@142:
   1642					;
   1643					;	   if (strcmp(nome,var[i].name)==0)
   1644					;
   1645	06A2  1E			     push    ds
   1646	06A3  8B C6			     mov     ax,si
   1647	06A5  BA 0032			     mov     dx,50
   1648	06A8  F7 EA			     imul    dx
   1649	06AA  05 0016r			     add     ax,offset DGROUP:var
   1650	06AD  50			     push    ax
   1651	06AE  FF 76 06			     push    word ptr [bp+6]
   1652	06B1  FF 76 04			     push    word ptr [bp+4]
   1653	06B4  E8 0000e			     call    near ptr _strcmp
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 30
command.ASM



   1654	06B7  83 C4 08			     add     sp,8
   1655	06BA  0B C0			     or	     ax,ax
   1656	06BC  75 04			     jne     short @7@198
   1657					;
   1658					;	      return i;
   1659					;
   1660	06BE  8B C6			     mov     ax,si
   1661	06C0  EB DA			     jmp     short @7@86
   1662	06C2			     @7@198:
   1663	06C2  46			     inc     si
   1664	06C3			     @7@226:
   1665	06C3  83 FE 0A			     cmp     si,10
   1666	06C6  7C DA			     jl	     short @7@142
   1667	06C8  EB CF			     jmp     short @7@58
   1668	06CA			     @7@282:
   1669					;
   1670					;      }
   1671					;      return -1;
   1672					;    }
   1673					;
   1674	06CA  5E			     pop     si
   1675	06CB  5D			     pop     bp
   1676	06CC  C3			     ret
   1677	06CD			     command_var_search	     endp
   1678					;
   1679					;    static int	 command_var_unset(char	far *nome)
   1680					;
   1681					     assume  cs:_TEXT
   1682	06CD			     command_var_unset	     proc    near
   1683	06CD  55			     push    bp
   1684	06CE  8B EC			     mov     bp,sp
   1685	06D0  56			     push    si
   1686					;
   1687					;    {
   1688					;      int i;
   1689					;
   1690					;      i = command_var_search(nome);
   1691					;
   1692	06D1  FF 76 06			     push    word ptr [bp+6]
   1693	06D4  FF 76 04			     push    word ptr [bp+4]
   1694	06D7  E8 FFB2			     call    near ptr command_var_search
   1695	06DA  59			     pop     cx
   1696	06DB  59			     pop     cx
   1697	06DC  8B F0			     mov     si,ax
   1698					;
   1699					;      if (i==-1)
   1700					;
   1701	06DE  83 FE FF			     cmp     si,-1
   1702	06E1  75 05			     jne     short @8@114
   1703					;
   1704					;	  return -1;
   1705					;
   1706	06E3  B8 FFFF			     mov     ax,-1
   1707	06E6			     @8@86:
   1708	06E6  EB 24			     jmp     short @8@142
   1709	06E8			     @8@114:
   1710					;
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 31
command.ASM



   1711					;      var[i].name[0]='\0';
   1712					;
   1713	06E8  8B C6			     mov     ax,si
   1714	06EA  BA 0032			     mov     dx,50
   1715	06ED  F7 EA			     imul    dx
   1716	06EF  8B D8			     mov     bx,ax
   1717	06F1  C6 87 0016r 00		     mov     byte ptr DGROUP:var[bx],0
   1718					;
   1719					;      var[i].value[0]='\0';
   1720					;
   1721	06F6  8B C6			     mov     ax,si
   1722	06F8  BA 0032			     mov     dx,50
   1723	06FB  F7 EA			     imul    dx
   1724	06FD  8B D8			     mov     bx,ax
   1725	06FF  C6 87 0023r 00		     mov     byte ptr DGROUP:var[bx+13],0
   1726					;
   1727					;      --num_var;
   1728					;
   1729	0704  FF 0E 0000r		     dec     word ptr DGROUP:num_var
   1730					;
   1731					;      return 0;
   1732					;
   1733	0708  33 C0			     xor     ax,ax
   1734	070A  EB DA			     jmp     short @8@86
   1735	070C			     @8@142:
   1736					;
   1737					;    }
   1738					;
   1739	070C  5E			     pop     si
   1740	070D  5D			     pop     bp
   1741	070E  C3			     ret
   1742	070F			     command_var_unset	     endp
   1743					;
   1744					;    static char far *command_var_value(char far *nome)
   1745					;
   1746					     assume  cs:_TEXT
   1747	070F			     command_var_value	     proc    near
   1748	070F  55			     push    bp
   1749	0710  8B EC			     mov     bp,sp
   1750	0712  56			     push    si
   1751					;
   1752					;    {
   1753					;      int i;
   1754					;
   1755					;      i = command_var_search(nome);
   1756					;
   1757	0713  FF 76 06			     push    word ptr [bp+6]
   1758	0716  FF 76 04			     push    word ptr [bp+4]
   1759	0719  E8 FF70			     call    near ptr command_var_search
   1760	071C  59			     pop     cx
   1761	071D  59			     pop     cx
   1762	071E  8B F0			     mov     si,ax
   1763					;
   1764					;      if (i==-1)
   1765					;
   1766	0720  83 FE FF			     cmp     si,-1
   1767	0723  75 06			     jne     short @9@114
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 32
command.ASM



   1768					;
   1769					;	  return NULL;
   1770					;
   1771	0725  33 D2			     xor     dx,dx
   1772	0727  33 C0			     xor     ax,ax
   1773	0729			     @9@86:
   1774	0729  EB 0E			     jmp     short @9@142
   1775	072B			     @9@114:
   1776					;
   1777					;      return var[i].value;
   1778					;
   1779	072B  8B C6			     mov     ax,si
   1780	072D  BA 0032			     mov     dx,50
   1781	0730  F7 EA			     imul    dx
   1782	0732  05 0023r			     add     ax,offset DGROUP:var+13
   1783	0735  8C DA			     mov     dx,ds
   1784	0737  EB F0			     jmp     short @9@86
   1785	0739			     @9@142:
   1786					;
   1787					;    }
   1788					;
   1789	0739  5E			     pop     si
   1790	073A  5D			     pop     bp
   1791	073B  C3			     ret
   1792	073C			     command_var_value	     endp
   1793					;
   1794					;    static int	command_var_set(char far *nome,char far	*valor)
   1795					;
   1796					     assume  cs:_TEXT
   1797	073C			     command_var_set proc    near
   1798	073C  55			     push    bp
   1799	073D  8B EC			     mov     bp,sp
   1800	073F  56			     push    si
   1801					;
   1802					;    {
   1803					;      int i;
   1804					;
   1805					;      if (strlen(nome)>VAR_NOME_TAM)
   1806					;
   1807	0740  FF 76 06			     push    word ptr [bp+6]
   1808	0743  FF 76 04			     push    word ptr [bp+4]
   1809	0746  E8 0000e			     call    near ptr _strlen
   1810	0749  59			     pop     cx
   1811	074A  59			     pop     cx
   1812	074B  3D 000C			     cmp     ax,12
   1813	074E  76 05			     jbe     short @10@114
   1814					;
   1815					;	  return -3;
   1816					;
   1817	0750  B8 FFFD			     mov     ax,-3
   1818	0753			     @10@86:
   1819	0753  EB 6A			     jmp     short @10@310
   1820	0755			     @10@114:
   1821					;
   1822					;      if (strlen(valor)>VAR_VALOR_TAM)
   1823					;
   1824	0755  FF 76 0A			     push    word ptr [bp+10]
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 33
command.ASM



   1825	0758  FF 76 08			     push    word ptr [bp+8]
   1826	075B  E8 0000e			     call    near ptr _strlen
   1827	075E  59			     pop     cx
   1828	075F  59			     pop     cx
   1829	0760  3D 0024			     cmp     ax,36
   1830	0763  76 05			     jbe     short @10@170
   1831					;
   1832					;	  return -4;
   1833					;
   1834	0765  B8 FFFC			     mov     ax,-4
   1835	0768  EB E9			     jmp     short @10@86
   1836	076A			     @10@170:
   1837					;
   1838					;      i = command_var_search(nome);
   1839					;
   1840	076A  FF 76 06			     push    word ptr [bp+6]
   1841	076D  FF 76 04			     push    word ptr [bp+4]
   1842	0770  E8 FF19			     call    near ptr command_var_search
   1843	0773  59			     pop     cx
   1844	0774  59			     pop     cx
   1845	0775  8B F0			     mov     si,ax
   1846					;
   1847					;      if (i==-1)  {
   1848					;
   1849	0777  83 FE FF			     cmp     si,-1
   1850	077A  75 27			     jne     short @10@282
   1851					;
   1852					;	  i = command_var_nextfree();
   1853					;
   1854	077C  E8 FE6D			     call    near ptr command_var_nextfree
   1855	077F  8B F0			     mov     si,ax
   1856					;
   1857					;	  if (i==-1)
   1858					;
   1859	0781  83 FE FF			     cmp     si,-1
   1860	0784  75 05			     jne     short @10@254
   1861					;
   1862					;	     return -2;
   1863					;
   1864	0786  B8 FFFE			     mov     ax,-2
   1865	0789  EB C8			     jmp     short @10@86
   1866	078B			     @10@254:
   1867					;
   1868					;	  strcpy(var[i].name,nome);
   1869					;
   1870	078B  FF 76 06			     push    word ptr [bp+6]
   1871	078E  FF 76 04			     push    word ptr [bp+4]
   1872	0791  1E			     push    ds
   1873	0792  8B C6			     mov     ax,si
   1874	0794  BA 0032			     mov     dx,50
   1875	0797  F7 EA			     imul    dx
   1876	0799  05 0016r			     add     ax,offset DGROUP:var
   1877	079C  50			     push    ax
   1878	079D  E8 0000e			     call    near ptr _strcpy
   1879	07A0  83 C4 08			     add     sp,8
   1880	07A3			     @10@282:
   1881					;
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 34
command.ASM



   1882					;      }
   1883					;      strcpy(var[i].value,valor);
   1884					;
   1885	07A3  FF 76 0A			     push    word ptr [bp+10]
   1886	07A6  FF 76 08			     push    word ptr [bp+8]
   1887	07A9  1E			     push    ds
   1888	07AA  8B C6			     mov     ax,si
   1889	07AC  BA 0032			     mov     dx,50
   1890	07AF  F7 EA			     imul    dx
   1891	07B1  05 0023r			     add     ax,offset DGROUP:var+13
   1892	07B4  50			     push    ax
   1893	07B5  E8 0000e			     call    near ptr _strcpy
   1894	07B8  83 C4 08			     add     sp,8
   1895					;
   1896					;      return 0;
   1897					;
   1898	07BB  33 C0			     xor     ax,ax
   1899	07BD  EB 94			     jmp     short @10@86
   1900	07BF			     @10@310:
   1901					;
   1902					;    }
   1903					;
   1904	07BF  5E			     pop     si
   1905	07C0  5D			     pop     bp
   1906	07C1  C3			     ret
   1907	07C2			     command_var_set endp
   1908					;
   1909					;    int cmd_reboot(int	argc, char far *argv[])
   1910					;
   1911					     assume  cs:_TEXT
   1912	07C2			     _cmd_reboot     proc    near
   1913	07C2  55			     push    bp
   1914	07C3  8B EC			     mov     bp,sp
   1915	07C5  56			     push    si
   1916	07C6  57			     push    di
   1917	07C7  8B 76 04			     mov     si,word ptr [bp+4]
   1918	07CA  8B 7E 06			     mov     di,word ptr [bp+6]
   1919					;
   1920					;    {
   1921					;      argc=argc;
   1922					;
   1923					;
   1924					;      argv=argv;
   1925					;
   1926					;
   1927					;      reboot();
   1928					;
   1929	07CD  E8 0000e			     call    near ptr _reboot
   1930					;
   1931					;      return 0;
   1932					;
   1933	07D0  33 C0			     xor     ax,ax
   1934	07D2  EB 00			     jmp     short @11@58
   1935	07D4			     @11@58:
   1936					;
   1937					;    }
   1938					;
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 35
command.ASM



   1939	07D4  5F			     pop     di
   1940	07D5  5E			     pop     si
   1941	07D6  5D			     pop     bp
   1942	07D7  C3			     ret
   1943	07D8			     _cmd_reboot     endp
   1944					;
   1945					;    int cmd_exit(int argc, char far *argv[])
   1946					;
   1947					     assume  cs:_TEXT
   1948	07D8			     _cmd_exit	     proc    near
   1949	07D8  55			     push    bp
   1950	07D9  8B EC			     mov     bp,sp
   1951	07DB  8B 56 04			     mov     dx,word ptr [bp+4]
   1952	07DE  8B 5E 06			     mov     bx,word ptr [bp+6]
   1953					;
   1954					;    {
   1955					;      argc=argc;
   1956					;
   1957					;
   1958					;      argv=argv;
   1959					;
   1960					;
   1961					;      end_command = 1;
   1962					;
   1963	07E1  C7 06 0625r 0001		     mov     word ptr DGROUP:end_command,1
   1964					;
   1965					;      return 0;
   1966					;
   1967	07E7  33 C0			     xor     ax,ax
   1968	07E9  EB 00			     jmp     short @12@58
   1969	07EB			     @12@58:
   1970					;
   1971					;    }
   1972					;
   1973	07EB  5D			     pop     bp
   1974	07EC  C3			     ret
   1975	07ED			     _cmd_exit	     endp
   1976					;
   1977					;    int cmd_help(int argc, char far *argv[])
   1978					;
   1979					     assume  cs:_TEXT
   1980	07ED			     _cmd_help	     proc    near
   1981	07ED  55			     push    bp
   1982	07EE  8B EC			     mov     bp,sp
   1983	07F0  56			     push    si
   1984	07F1  57			     push    di
   1985	07F2  8B 7E 04			     mov     di,word ptr [bp+4]
   1986					;
   1987					;    {
   1988					;      int i;
   1989					;
   1990					;      argc=argc;
   1991					;
   1992					;
   1993					;      argv=argv;
   1994					;
   1995	07F5  8B 46 06			     mov     ax,word ptr [bp+6]
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 36
command.ASM



   1996	07F8  89 46 06			     mov     word ptr [bp+6],ax
   1997					;
   1998					;      putstr("Comandos	do minisSistema	Operacional:\n");
   1999					;
   2000	07FB  1E			     push    ds
   2001	07FC  B8 05EAr			     mov     ax,offset DGROUP:s@+1370
   2002	07FF  50			     push    ax
   2003	0800  E8 0000e			     call    near ptr _putstr
   2004	0803  59			     pop     cx
   2005	0804  59			     pop     cx
   2006					;
   2007					;      for (i=0;i<MAXCOMMANDS;++i)  {
   2008					;
   2009	0805  33 F6			     xor     si,si
   2010	0807  EB 2F			     jmp     short @13@114
   2011	0809			     @13@58:
   2012					;
   2013					;	   putstr(commands[i].name);
   2014					;
   2015	0809  1E			     push    ds
   2016	080A  8B C6			     mov     ax,si
   2017	080C  BA 0006			     mov     dx,6
   2018	080F  F7 EA			     imul    dx
   2019	0811  8B D8			     mov     bx,ax
   2020	0813  FF B7 0002r		     push    word ptr DGROUP:commands[bx]
   2021	0817  E8 0000e			     call    near ptr _putstr
   2022	081A  59			     pop     cx
   2023	081B  59			     pop     cx
   2024					;
   2025					;	   putstr(commands[i].help);
   2026					;
   2027	081C  1E			     push    ds
   2028	081D  8B C6			     mov     ax,si
   2029	081F  BA 0006			     mov     dx,6
   2030	0822  F7 EA			     imul    dx
   2031	0824  8B D8			     mov     bx,ax
   2032	0826  FF B7 0004r		     push    word ptr DGROUP:commands[bx+2]
   2033	082A  E8 0000e			     call    near ptr _putstr
   2034	082D  59			     pop     cx
   2035	082E  59			     pop     cx
   2036					;
   2037					;	   putch('\n');
   2038					;
   2039	082F  B8 000A			     mov     ax,10
   2040	0832  50			     push    ax
   2041	0833  E8 0000e			     call    near ptr _putch
   2042	0836  59			     pop     cx
   2043	0837  46			     inc     si
   2044	0838			     @13@114:
   2045	0838  83 FE 17			     cmp     si,23
   2046	083B  7C CC			     jl	     short @13@58
   2047					;
   2048					;      }
   2049					;      return 0;
   2050					;
   2051	083D  33 C0			     xor     ax,ax
   2052	083F  EB 00			     jmp     short @13@170
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 37
command.ASM



   2053	0841			     @13@170:
   2054					;
   2055					;    }
   2056					;
   2057	0841  5F			     pop     di
   2058	0842  5E			     pop     si
   2059	0843  5D			     pop     bp
   2060	0844  C3			     ret
   2061	0845			     _cmd_help	     endp
   2062					;
   2063					;    int cmd_date(int argc, char far *argv[])
   2064					;
   2065					     assume  cs:_TEXT
   2066	0845			     _cmd_date	     proc    near
   2067	0845  55			     push    bp
   2068	0846  8B EC			     mov     bp,sp
   2069	0848  83 EC 18			     sub     sp,24
   2070	084B  56			     push    si
   2071	084C  57			     push    di
   2072	084D  8B 76 04			     mov     si,word ptr [bp+4]
   2073	0850  8B 7E 06			     mov     di,word ptr [bp+6]
   2074					;
   2075					;    {
   2076					;      struct date d;
   2077					;      char str[20];
   2078					;
   2079					;      argc=argc;
   2080					;
   2081					;
   2082					;      argv=argv;
   2083					;
   2084					;
   2085					;
   2086					;
   2087					;
   2088					;      getdate(&d);
   2089					;
   2090	0853  16			     push    ss
   2091	0854  8D 46 FC			     lea     ax,word ptr [bp-4]
   2092	0857  50			     push    ax
   2093	0858  E8 0000e			     call    near ptr _getdate
   2094	085B  59			     pop     cx
   2095	085C  59			     pop     cx
   2096					;
   2097					;      unsignedtostr(str,d.da_day,2,'0');
   2098					;
   2099	085D  B0 30			     mov     al,48
   2100	085F  50			     push    ax
   2101	0860  B8 0002			     mov     ax,2
   2102	0863  50			     push    ax
   2103	0864  8A 46 FE			     mov     al,byte ptr [bp-2]
   2104	0867  98			     cbw
   2105	0868  50			     push    ax
   2106	0869  16			     push    ss
   2107	086A  8D 46 E8			     lea     ax,word ptr [bp-24]
   2108	086D  50			     push    ax
   2109	086E  E8 0000e			     call    near ptr _unsignedtostr
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 38
command.ASM



   2110	0871  83 C4 0A			     add     sp,10
   2111					;
   2112					;      putstr(str);
   2113					;
   2114	0874  16			     push    ss
   2115	0875  8D 46 E8			     lea     ax,word ptr [bp-24]
   2116	0878  50			     push    ax
   2117	0879  E8 0000e			     call    near ptr _putstr
   2118	087C  59			     pop     cx
   2119	087D  59			     pop     cx
   2120					;
   2121					;      putch('/');
   2122					;
   2123	087E  B8 002F			     mov     ax,47
   2124	0881  50			     push    ax
   2125	0882  E8 0000e			     call    near ptr _putch
   2126	0885  59			     pop     cx
   2127					;
   2128					;      unsignedtostr(str,d.da_mon,2,'0');
   2129					;
   2130	0886  B0 30			     mov     al,48
   2131	0888  50			     push    ax
   2132	0889  B8 0002			     mov     ax,2
   2133	088C  50			     push    ax
   2134	088D  8A 46 FF			     mov     al,byte ptr [bp-1]
   2135	0890  98			     cbw
   2136	0891  50			     push    ax
   2137	0892  16			     push    ss
   2138	0893  8D 46 E8			     lea     ax,word ptr [bp-24]
   2139	0896  50			     push    ax
   2140	0897  E8 0000e			     call    near ptr _unsignedtostr
   2141	089A  83 C4 0A			     add     sp,10
   2142					;
   2143					;      putstr(str);
   2144					;
   2145	089D  16			     push    ss
   2146	089E  8D 46 E8			     lea     ax,word ptr [bp-24]
   2147	08A1  50			     push    ax
   2148	08A2  E8 0000e			     call    near ptr _putstr
   2149	08A5  59			     pop     cx
   2150	08A6  59			     pop     cx
   2151					;
   2152					;      putch('/');
   2153					;
   2154	08A7  B8 002F			     mov     ax,47
   2155	08AA  50			     push    ax
   2156	08AB  E8 0000e			     call    near ptr _putch
   2157	08AE  59			     pop     cx
   2158					;
   2159					;      unsignedtostr(str,d.da_year,4,'0');
   2160					;
   2161	08AF  B0 30			     mov     al,48
   2162	08B1  50			     push    ax
   2163	08B2  B8 0004			     mov     ax,4
   2164	08B5  50			     push    ax
   2165	08B6  FF 76 FC			     push    word ptr [bp-4]
   2166	08B9  16			     push    ss
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 39
command.ASM



   2167	08BA  8D 46 E8			     lea     ax,word ptr [bp-24]
   2168	08BD  50			     push    ax
   2169	08BE  E8 0000e			     call    near ptr _unsignedtostr
   2170	08C1  83 C4 0A			     add     sp,10
   2171					;
   2172					;      putstr(str);
   2173					;
   2174	08C4  16			     push    ss
   2175	08C5  8D 46 E8			     lea     ax,word ptr [bp-24]
   2176	08C8  50			     push    ax
   2177	08C9  E8 0000e			     call    near ptr _putstr
   2178	08CC  59			     pop     cx
   2179	08CD  59			     pop     cx
   2180					;
   2181					;      putch('\n');
   2182					;
   2183	08CE  B8 000A			     mov     ax,10
   2184	08D1  50			     push    ax
   2185	08D2  E8 0000e			     call    near ptr _putch
   2186	08D5  59			     pop     cx
   2187					;
   2188					;      return 0;
   2189					;
   2190	08D6  33 C0			     xor     ax,ax
   2191	08D8  EB 00			     jmp     short @14@58
   2192	08DA			     @14@58:
   2193					;
   2194					;    }
   2195					;
   2196	08DA  5F			     pop     di
   2197	08DB  5E			     pop     si
   2198	08DC  8B E5			     mov     sp,bp
   2199	08DE  5D			     pop     bp
   2200	08DF  C3			     ret
   2201	08E0			     _cmd_date	     endp
   2202					;
   2203					;    int cmd_time(int argc, char far *argv[])
   2204					;
   2205					     assume  cs:_TEXT
   2206	08E0			     _cmd_time	     proc    near
   2207	08E0  55			     push    bp
   2208	08E1  8B EC			     mov     bp,sp
   2209	08E3  83 EC 18			     sub     sp,24
   2210	08E6  56			     push    si
   2211	08E7  57			     push    di
   2212	08E8  8B 76 04			     mov     si,word ptr [bp+4]
   2213	08EB  8B 7E 06			     mov     di,word ptr [bp+6]
   2214					;
   2215					;    {
   2216					;      struct time t;
   2217					;      char str[20];
   2218					;
   2219					;      argc=argc;
   2220					;
   2221					;
   2222					;      argv=argv;
   2223					;
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 40
command.ASM



   2224					;
   2225					;      gettime(&t);
   2226					;
   2227	08EE  16			     push    ss
   2228	08EF  8D 46 FC			     lea     ax,word ptr [bp-4]
   2229	08F2  50			     push    ax
   2230	08F3  E8 0000e			     call    near ptr _gettime
   2231	08F6  59			     pop     cx
   2232	08F7  59			     pop     cx
   2233					;
   2234					;      unsignedtostr(str,t.ti_hour,2,'0');
   2235					;
   2236	08F8  B0 30			     mov     al,48
   2237	08FA  50			     push    ax
   2238	08FB  B8 0002			     mov     ax,2
   2239	08FE  50			     push    ax
   2240	08FF  8A 46 FD			     mov     al,byte ptr [bp-3]
   2241	0902  B4 00			     mov     ah,0
   2242	0904  50			     push    ax
   2243	0905  16			     push    ss
   2244	0906  8D 46 E8			     lea     ax,word ptr [bp-24]
   2245	0909  50			     push    ax
   2246	090A  E8 0000e			     call    near ptr _unsignedtostr
   2247	090D  83 C4 0A			     add     sp,10
   2248					;
   2249					;      putstr(str);
   2250					;
   2251	0910  16			     push    ss
   2252	0911  8D 46 E8			     lea     ax,word ptr [bp-24]
   2253	0914  50			     push    ax
   2254	0915  E8 0000e			     call    near ptr _putstr
   2255	0918  59			     pop     cx
   2256	0919  59			     pop     cx
   2257					;
   2258					;      putch(':');
   2259					;
   2260	091A  B8 003A			     mov     ax,58
   2261	091D  50			     push    ax
   2262	091E  E8 0000e			     call    near ptr _putch
   2263	0921  59			     pop     cx
   2264					;
   2265					;
   2266					;
   2267					;      unsignedtostr(str,t.ti_min,2,'0');
   2268					;
   2269	0922  B0 30			     mov     al,48
   2270	0924  50			     push    ax
   2271	0925  B8 0002			     mov     ax,2
   2272	0928  50			     push    ax
   2273	0929  8A 46 FC			     mov     al,byte ptr [bp-4]
   2274	092C  B4 00			     mov     ah,0
   2275	092E  50			     push    ax
   2276	092F  16			     push    ss
   2277	0930  8D 46 E8			     lea     ax,word ptr [bp-24]
   2278	0933  50			     push    ax
   2279	0934  E8 0000e			     call    near ptr _unsignedtostr
   2280	0937  83 C4 0A			     add     sp,10
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 41
command.ASM



   2281					;
   2282					;      putstr(str);
   2283					;
   2284	093A  16			     push    ss
   2285	093B  8D 46 E8			     lea     ax,word ptr [bp-24]
   2286	093E  50			     push    ax
   2287	093F  E8 0000e			     call    near ptr _putstr
   2288	0942  59			     pop     cx
   2289	0943  59			     pop     cx
   2290					;
   2291					;      putch(':');
   2292					;
   2293	0944  B8 003A			     mov     ax,58
   2294	0947  50			     push    ax
   2295	0948  E8 0000e			     call    near ptr _putch
   2296	094B  59			     pop     cx
   2297					;
   2298					;      unsignedtostr(str,t.ti_sec,2,'0');
   2299					;
   2300	094C  B0 30			     mov     al,48
   2301	094E  50			     push    ax
   2302	094F  B8 0002			     mov     ax,2
   2303	0952  50			     push    ax
   2304	0953  8A 46 FF			     mov     al,byte ptr [bp-1]
   2305	0956  B4 00			     mov     ah,0
   2306	0958  50			     push    ax
   2307	0959  16			     push    ss
   2308	095A  8D 46 E8			     lea     ax,word ptr [bp-24]
   2309	095D  50			     push    ax
   2310	095E  E8 0000e			     call    near ptr _unsignedtostr
   2311	0961  83 C4 0A			     add     sp,10
   2312					;
   2313					;      putstr(str);
   2314					;
   2315	0964  16			     push    ss
   2316	0965  8D 46 E8			     lea     ax,word ptr [bp-24]
   2317	0968  50			     push    ax
   2318	0969  E8 0000e			     call    near ptr _putstr
   2319	096C  59			     pop     cx
   2320	096D  59			     pop     cx
   2321					;
   2322					;      putch('\n');
   2323					;
   2324	096E  B8 000A			     mov     ax,10
   2325	0971  50			     push    ax
   2326	0972  E8 0000e			     call    near ptr _putch
   2327	0975  59			     pop     cx
   2328					;
   2329					;      return 0;
   2330					;
   2331	0976  33 C0			     xor     ax,ax
   2332	0978  EB 00			     jmp     short @15@58
   2333	097A			     @15@58:
   2334					;
   2335					;    }
   2336					;
   2337	097A  5F			     pop     di
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 42
command.ASM



   2338	097B  5E			     pop     si
   2339	097C  8B E5			     mov     sp,bp
   2340	097E  5D			     pop     bp
   2341	097F  C3			     ret
   2342	0980			     _cmd_time	     endp
   2343					;
   2344					;    int cmd_cls(int argc, char	far *argv[])
   2345					;
   2346					     assume  cs:_TEXT
   2347	0980			     _cmd_cls	     proc    near
   2348	0980  55			     push    bp
   2349	0981  8B EC			     mov     bp,sp
   2350	0983  56			     push    si
   2351	0984  57			     push    di
   2352	0985  8B 76 04			     mov     si,word ptr [bp+4]
   2353	0988  8B 7E 06			     mov     di,word ptr [bp+6]
   2354					;
   2355					;    {
   2356					;      argc=argc;
   2357					;
   2358					;
   2359					;      argv=argv;
   2360					;
   2361					;
   2362					;      clrscr();
   2363					;
   2364	098B  E8 0000e			     call    near ptr _clrscr
   2365					;
   2366					;      return 0;
   2367					;
   2368	098E  33 C0			     xor     ax,ax
   2369	0990  EB 00			     jmp     short @16@58
   2370	0992			     @16@58:
   2371					;
   2372					;    }
   2373					;
   2374	0992  5F			     pop     di
   2375	0993  5E			     pop     si
   2376	0994  5D			     pop     bp
   2377	0995  C3			     ret
   2378	0996			     _cmd_cls	     endp
   2379					;
   2380					;    int cmd_ver(int argc, char	far *argv[])
   2381					;
   2382					     assume  cs:_TEXT
   2383	0996			     _cmd_ver	     proc    near
   2384	0996  55			     push    bp
   2385	0997  8B EC			     mov     bp,sp
   2386	0999  56			     push    si
   2387	099A  57			     push    di
   2388	099B  8B 76 04			     mov     si,word ptr [bp+4]
   2389	099E  8B 7E 06			     mov     di,word ptr [bp+6]
   2390					;
   2391					;    {
   2392					;      argc=argc;
   2393					;
   2394					;
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 43
command.ASM



   2395					;      argv=argv;
   2396					;
   2397					;
   2398					;      putstr("minisSistema Operacional	- Vs ");
   2399					;
   2400	09A1  1E			     push    ds
   2401	09A2  B8 0611r			     mov     ax,offset DGROUP:s@+1409
   2402	09A5  50			     push    ax
   2403	09A6  E8 0000e			     call    near ptr _putstr
   2404	09A9  59			     pop     cx
   2405	09AA  59			     pop     cx
   2406					;
   2407					;      putstr(miniSO_VERSION);
   2408					;
   2409	09AB  1E			     push    ds
   2410	09AC  B8 0630r			     mov     ax,offset DGROUP:s@+1440
   2411	09AF  50			     push    ax
   2412	09B0  E8 0000e			     call    near ptr _putstr
   2413	09B3  59			     pop     cx
   2414	09B4  59			     pop     cx
   2415					;
   2416					;      putch('\n');
   2417					;
   2418	09B5  B8 000A			     mov     ax,10
   2419	09B8  50			     push    ax
   2420	09B9  E8 0000e			     call    near ptr _putch
   2421	09BC  59			     pop     cx
   2422					;
   2423					;      return 0;
   2424					;
   2425	09BD  33 C0			     xor     ax,ax
   2426	09BF  EB 00			     jmp     short @17@58
   2427	09C1			     @17@58:
   2428					;
   2429					;    }
   2430					;
   2431	09C1  5F			     pop     di
   2432	09C2  5E			     pop     si
   2433	09C3  5D			     pop     bp
   2434	09C4  C3			     ret
   2435	09C5			     _cmd_ver	     endp
   2436	09C5			     _TEXT   ends
   2437	0000			     _BSS    segment word public 'BSS'
   2438	0000  14*(??)			     db	     20	dup (?)
   2439	0014			     _BSS    ends
   2440	09C5			     _TEXT   segment byte public 'CODE'
   2441					;
   2442					;    int cmd_ps(int argc, char far *argv[])
   2443					;
   2444					     assume  cs:_TEXT
   2445	09C5			     _cmd_ps proc    near
   2446	09C5  55			     push    bp
   2447	09C6  8B EC			     mov     bp,sp
   2448	09C8  56			     push    si
   2449	09C9  57			     push    di
   2450					;
   2451					;    {
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 44
command.ASM



   2452					;      int i,l;
   2453					;      static char str[20];
   2454					;      extern miniSO_PCB miniSO_thread[];
   2455					;
   2456					;      argc=argc;
   2457					;
   2458	09CA  8B 46 04			     mov     ax,word ptr [bp+4]
   2459	09CD  89 46 04			     mov     word ptr [bp+4],ax
   2460					;
   2461					;      argv=argv;
   2462					;
   2463	09D0  8B 46 06			     mov     ax,word ptr [bp+6]
   2464	09D3  89 46 06			     mov     word ptr [bp+6],ax
   2465					;
   2466					;      putstr("	BCP   PID   PPID  STATUS   WAIT	  ZLIST	 PREV	NEXT\n");
   2467					;
   2468	09D6  1E			     push    ds
   2469	09D7  B8 0635r			     mov     ax,offset DGROUP:s@+1445
   2470	09DA  50			     push    ax
   2471	09DB  E8 0000e			     call    near ptr _putstr
   2472	09DE  59			     pop     cx
   2473	09DF  59			     pop     cx
   2474					;
   2475					;      for (i=0;i<miniSO_MAXTHREADS;++i)  {
   2476					;
   2477	09E0  33 FF			     xor     di,di
   2478	09E2  E9 0260			     jmp     @18@1066
   2479	09E5			     @18@58:
   2480					;
   2481					;	   if (miniSO_thread[i].status!=FREE)  {
   2482					;
   2483	09E5  8B C7			     mov     ax,di
   2484	09E7  BA 001A			     mov     dx,26
   2485	09EA  F7 EA			     imul    dx
   2486	09EC  8B D8			     mov     bx,ax
   2487	09EE  83 BF 0004e FF		     cmp     word ptr DGROUP:_miniSO_thread[bx+4],-1
   2488	09F3  75 03			     jne     @@4
   2489	09F5  E9 024C			     jmp     @18@1038
   2490	09F8			     @@4:
   2491					;
   2492					;	      inttostr(str,i);
   2493					;
   2494	09F8  57			     push    di
   2495	09F9  1E			     push    ds
   2496	09FA  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2497	09FD  50			     push    ax
   2498	09FE  E8 0000e			     call    near ptr _inttostr
   2499	0A01  83 C4 06			     add     sp,6
   2500					;
   2501					;	      l=strlen(str);
   2502					;
   2503	0A04  1E			     push    ds
   2504	0A05  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2505	0A08  50			     push    ax
   2506	0A09  E8 0000e			     call    near ptr _strlen
   2507	0A0C  59			     pop     cx
   2508	0A0D  59			     pop     cx
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 45
command.ASM



   2509	0A0E  8B F0			     mov     si,ax
   2510	0A10  EB 08			     jmp     short @18@142
   2511	0A12			     @18@114:
   2512					;
   2513					;	      while (l++<3)
   2514					;		    putch(' ');
   2515					;
   2516	0A12  B8 0020			     mov     ax,32
   2517	0A15  50			     push    ax
   2518	0A16  E8 0000e			     call    near ptr _putch
   2519	0A19  59			     pop     cx
   2520	0A1A			     @18@142:
   2521	0A1A  8B C6			     mov     ax,si
   2522	0A1C  46			     inc     si
   2523	0A1D  3D 0003			     cmp     ax,3
   2524	0A20  7C F0			     jl	     short @18@114
   2525					;
   2526					;	      putstr(str);
   2527					;
   2528	0A22  1E			     push    ds
   2529	0A23  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2530	0A26  50			     push    ax
   2531	0A27  E8 0000e			     call    near ptr _putstr
   2532	0A2A  59			     pop     cx
   2533	0A2B  59			     pop     cx
   2534					;
   2535					;	      putstr("	");
   2536					;
   2537	0A2C  1E			     push    ds
   2538	0A2D  B8 066Cr			     mov     ax,offset DGROUP:s@+1500
   2539	0A30  50			     push    ax
   2540	0A31  E8 0000e			     call    near ptr _putstr
   2541	0A34  59			     pop     cx
   2542	0A35  59			     pop     cx
   2543					;
   2544					;	      inttostr(str,miniSO_thread[i].pid);
   2545					;
   2546	0A36  8B C7			     mov     ax,di
   2547	0A38  BA 001A			     mov     dx,26
   2548	0A3B  F7 EA			     imul    dx
   2549	0A3D  8B D8			     mov     bx,ax
   2550	0A3F  FF B7 0000e		     push    word ptr DGROUP:_miniSO_thread[bx]
   2551	0A43  1E			     push    ds
   2552	0A44  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2553	0A47  50			     push    ax
   2554	0A48  E8 0000e			     call    near ptr _inttostr
   2555	0A4B  83 C4 06			     add     sp,6
   2556					;
   2557					;	      l=strlen(str);
   2558					;
   2559	0A4E  1E			     push    ds
   2560	0A4F  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2561	0A52  50			     push    ax
   2562	0A53  E8 0000e			     call    near ptr _strlen
   2563	0A56  59			     pop     cx
   2564	0A57  59			     pop     cx
   2565	0A58  8B F0			     mov     si,ax
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 46
command.ASM



   2566	0A5A  EB 08			     jmp     short @18@226
   2567	0A5C			     @18@198:
   2568					;
   2569					;	      while (l++<5)
   2570					;		    putch(' ');
   2571					;
   2572	0A5C  B8 0020			     mov     ax,32
   2573	0A5F  50			     push    ax
   2574	0A60  E8 0000e			     call    near ptr _putch
   2575	0A63  59			     pop     cx
   2576	0A64			     @18@226:
   2577	0A64  8B C6			     mov     ax,si
   2578	0A66  46			     inc     si
   2579	0A67  3D 0005			     cmp     ax,5
   2580	0A6A  7C F0			     jl	     short @18@198
   2581					;
   2582					;	      putstr(str);
   2583					;
   2584	0A6C  1E			     push    ds
   2585	0A6D  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2586	0A70  50			     push    ax
   2587	0A71  E8 0000e			     call    near ptr _putstr
   2588	0A74  59			     pop     cx
   2589	0A75  59			     pop     cx
   2590					;
   2591					;	      putstr("	");
   2592					;
   2593	0A76  1E			     push    ds
   2594	0A77  B8 066Fr			     mov     ax,offset DGROUP:s@+1503
   2595	0A7A  50			     push    ax
   2596	0A7B  E8 0000e			     call    near ptr _putstr
   2597	0A7E  59			     pop     cx
   2598	0A7F  59			     pop     cx
   2599					;
   2600					;	      inttostr(str,miniSO_thread[i].ppid);
   2601					;
   2602	0A80  8B C7			     mov     ax,di
   2603	0A82  BA 001A			     mov     dx,26
   2604	0A85  F7 EA			     imul    dx
   2605	0A87  8B D8			     mov     bx,ax
   2606	0A89  FF B7 0002e		     push    word ptr DGROUP:_miniSO_thread[bx+2]
   2607	0A8D  1E			     push    ds
   2608	0A8E  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2609	0A91  50			     push    ax
   2610	0A92  E8 0000e			     call    near ptr _inttostr
   2611	0A95  83 C4 06			     add     sp,6
   2612					;
   2613					;	      l=strlen(str);
   2614					;
   2615	0A98  1E			     push    ds
   2616	0A99  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2617	0A9C  50			     push    ax
   2618	0A9D  E8 0000e			     call    near ptr _strlen
   2619	0AA0  59			     pop     cx
   2620	0AA1  59			     pop     cx
   2621	0AA2  8B F0			     mov     si,ax
   2622	0AA4  EB 08			     jmp     short @18@310
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 47
command.ASM



   2623	0AA6			     @18@282:
   2624					;
   2625					;	      while (l++<5)
   2626					;		    putch(' ');
   2627					;
   2628	0AA6  B8 0020			     mov     ax,32
   2629	0AA9  50			     push    ax
   2630	0AAA  E8 0000e			     call    near ptr _putch
   2631	0AAD  59			     pop     cx
   2632	0AAE			     @18@310:
   2633	0AAE  8B C6			     mov     ax,si
   2634	0AB0  46			     inc     si
   2635	0AB1  3D 0005			     cmp     ax,5
   2636	0AB4  7C F0			     jl	     short @18@282
   2637					;
   2638					;	      putstr(str);
   2639					;
   2640	0AB6  1E			     push    ds
   2641	0AB7  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2642	0ABA  50			     push    ax
   2643	0ABB  E8 0000e			     call    near ptr _putstr
   2644	0ABE  59			     pop     cx
   2645	0ABF  59			     pop     cx
   2646					;
   2647					;	      putstr("	");
   2648					;
   2649	0AC0  1E			     push    ds
   2650	0AC1  B8 0672r			     mov     ax,offset DGROUP:s@+1506
   2651	0AC4  50			     push    ax
   2652	0AC5  E8 0000e			     call    near ptr _putstr
   2653	0AC8  59			     pop     cx
   2654	0AC9  59			     pop     cx
   2655					;
   2656					;	      switch(miniSO_thread[i].status)  {
   2657					;
   2658	0ACA  8B C7			     mov     ax,di
   2659	0ACC  BA 001A			     mov     dx,26
   2660	0ACF  F7 EA			     imul    dx
   2661	0AD1  8B D8			     mov     bx,ax
   2662	0AD3  8B 9F 0004e		     mov     bx,word ptr DGROUP:_miniSO_thread[bx+4]
   2663	0AD7  43			     inc     bx
   2664	0AD8  83 FB 06			     cmp     bx,6
   2665	0ADB  77 37			     ja	     short @18@674
   2666	0ADD  D1 E3			     shl     bx,1
   2667	0ADF  2E: FF A7	0C55r		     jmp     word ptr cs:@18@C1234[bx]
   2668	0AE4			     @18@450:
   2669					;
   2670					;		    case FREE:	  putstr(strFREE);    break;
   2671					;
   2672	0AE4  1E			     push    ds
   2673	0AE5  B8 0675r			     mov     ax,offset DGROUP:s@+1509
   2674	0AE8			     @18@478:
   2675	0AE8  50			     push    ax
   2676	0AE9  E8 0000e			     call    near ptr _putstr
   2677	0AEC  59			     pop     cx
   2678	0AED  59			     pop     cx
   2679	0AEE  EB 24			     jmp     short @18@674
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 48
command.ASM



   2680	0AF0			     @18@506:
   2681					;
   2682					;		    case READY:	  putstr(strREADY);   break;
   2683					;
   2684	0AF0  1E			     push    ds
   2685	0AF1  B8 067Dr			     mov     ax,offset DGROUP:s@+1517
   2686	0AF4  EB F2			     jmp     short @18@478
   2687	0AF6			     @18@534:
   2688					;
   2689					;		    case RUNNING: putstr(strRUNNING); break;
   2690					;
   2691	0AF6  1E			     push    ds
   2692	0AF7  B8 0685r			     mov     ax,offset DGROUP:s@+1525
   2693	0AFA  EB EC			     jmp     short @18@478
   2694	0AFC			     @18@562:
   2695					;
   2696					;		    case ZOMBIE:  putstr(strZOMBIE);  break;
   2697					;
   2698	0AFC  1E			     push    ds
   2699	0AFD  B8 068Dr			     mov     ax,offset DGROUP:s@+1533
   2700	0B00  EB E6			     jmp     short @18@478
   2701	0B02			     @18@590:
   2702					;
   2703					;		    case WAIT:	  putstr(strWAIT);    break;
   2704					;
   2705	0B02  1E			     push    ds
   2706	0B03  B8 0695r			     mov     ax,offset DGROUP:s@+1541
   2707	0B06  EB E0			     jmp     short @18@478
   2708	0B08			     @18@618:
   2709					;
   2710					;		    case WAITSIG: putstr(strWAITSIG); break;
   2711					;
   2712	0B08  1E			     push    ds
   2713	0B09  B8 069Dr			     mov     ax,offset DGROUP:s@+1549
   2714	0B0C  EB DA			     jmp     short @18@478
   2715	0B0E			     @18@646:
   2716					;
   2717					;		    case WAITSEM: putstr(strWAITSEM); break;
   2718					;
   2719	0B0E  1E			     push    ds
   2720	0B0F  B8 06A5r			     mov     ax,offset DGROUP:s@+1557
   2721	0B12  EB D4			     jmp     short @18@478
   2722	0B14			     @18@674:
   2723					;
   2724					;	      }
   2725					;	      putstr("	");
   2726					;
   2727	0B14  1E			     push    ds
   2728	0B15  B8 06ADr			     mov     ax,offset DGROUP:s@+1565
   2729	0B18  50			     push    ax
   2730	0B19  E8 0000e			     call    near ptr _putstr
   2731	0B1C  59			     pop     cx
   2732	0B1D  59			     pop     cx
   2733					;
   2734					;	      inttostr(str,miniSO_thread[i].wait);
   2735					;
   2736	0B1E  8B C7			     mov     ax,di
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 49
command.ASM



   2737	0B20  BA 001A			     mov     dx,26
   2738	0B23  F7 EA			     imul    dx
   2739	0B25  8B D8			     mov     bx,ax
   2740	0B27  FF B7 000Ee		     push    word ptr DGROUP:_miniSO_thread[bx+14]
   2741	0B2B  1E			     push    ds
   2742	0B2C  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2743	0B2F  50			     push    ax
   2744	0B30  E8 0000e			     call    near ptr _inttostr
   2745	0B33  83 C4 06			     add     sp,6
   2746					;
   2747					;	      l=strlen(str);
   2748					;
   2749	0B36  1E			     push    ds
   2750	0B37  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2751	0B3A  50			     push    ax
   2752	0B3B  E8 0000e			     call    near ptr _strlen
   2753	0B3E  59			     pop     cx
   2754	0B3F  59			     pop     cx
   2755	0B40  8B F0			     mov     si,ax
   2756	0B42  EB 08			     jmp     short @18@730
   2757	0B44			     @18@702:
   2758					;
   2759					;	      while (l++<5)
   2760					;		    putch(' ');
   2761					;
   2762	0B44  B8 0020			     mov     ax,32
   2763	0B47  50			     push    ax
   2764	0B48  E8 0000e			     call    near ptr _putch
   2765	0B4B  59			     pop     cx
   2766	0B4C			     @18@730:
   2767	0B4C  8B C6			     mov     ax,si
   2768	0B4E  46			     inc     si
   2769	0B4F  3D 0005			     cmp     ax,5
   2770	0B52  7C F0			     jl	     short @18@702
   2771					;
   2772					;	      putstr(str);
   2773					;
   2774	0B54  1E			     push    ds
   2775	0B55  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2776	0B58  50			     push    ax
   2777	0B59  E8 0000e			     call    near ptr _putstr
   2778	0B5C  59			     pop     cx
   2779	0B5D  59			     pop     cx
   2780					;
   2781					;
   2782					;	      putstr("	");
   2783					;
   2784	0B5E  1E			     push    ds
   2785	0B5F  B8 06B0r			     mov     ax,offset DGROUP:s@+1568
   2786	0B62  50			     push    ax
   2787	0B63  E8 0000e			     call    near ptr _putstr
   2788	0B66  59			     pop     cx
   2789	0B67  59			     pop     cx
   2790					;
   2791					;	      inttostr(str,miniSO_thread[i].zombies);
   2792					;
   2793	0B68  8B C7			     mov     ax,di
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 50
command.ASM



   2794	0B6A  BA 001A			     mov     dx,26
   2795	0B6D  F7 EA			     imul    dx
   2796	0B6F  8B D8			     mov     bx,ax
   2797	0B71  FF B7 0014e		     push    word ptr DGROUP:_miniSO_thread[bx+20]
   2798	0B75  1E			     push    ds
   2799	0B76  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2800	0B79  50			     push    ax
   2801	0B7A  E8 0000e			     call    near ptr _inttostr
   2802	0B7D  83 C4 06			     add     sp,6
   2803					;
   2804					;	      l=strlen(str);
   2805					;
   2806	0B80  1E			     push    ds
   2807	0B81  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2808	0B84  50			     push    ax
   2809	0B85  E8 0000e			     call    near ptr _strlen
   2810	0B88  59			     pop     cx
   2811	0B89  59			     pop     cx
   2812	0B8A  8B F0			     mov     si,ax
   2813	0B8C  EB 08			     jmp     short @18@814
   2814	0B8E			     @18@786:
   2815					;
   2816					;	      while (l++<5)
   2817					;		    putch(' ');
   2818					;
   2819	0B8E  B8 0020			     mov     ax,32
   2820	0B91  50			     push    ax
   2821	0B92  E8 0000e			     call    near ptr _putch
   2822	0B95  59			     pop     cx
   2823	0B96			     @18@814:
   2824	0B96  8B C6			     mov     ax,si
   2825	0B98  46			     inc     si
   2826	0B99  3D 0005			     cmp     ax,5
   2827	0B9C  7C F0			     jl	     short @18@786
   2828					;
   2829					;	      putstr(str);
   2830					;
   2831	0B9E  1E			     push    ds
   2832	0B9F  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2833	0BA2  50			     push    ax
   2834	0BA3  E8 0000e			     call    near ptr _putstr
   2835	0BA6  59			     pop     cx
   2836	0BA7  59			     pop     cx
   2837					;
   2838					;
   2839					;	      putstr(" ");
   2840					;
   2841	0BA8  1E			     push    ds
   2842	0BA9  B8 06B3r			     mov     ax,offset DGROUP:s@+1571
   2843	0BAC  50			     push    ax
   2844	0BAD  E8 0000e			     call    near ptr _putstr
   2845	0BB0  59			     pop     cx
   2846	0BB1  59			     pop     cx
   2847					;
   2848					;	      inttostr(str,miniSO_thread[i].prev);
   2849					;
   2850	0BB2  8B C7			     mov     ax,di
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 51
command.ASM



   2851	0BB4  BA 001A			     mov     dx,26
   2852	0BB7  F7 EA			     imul    dx
   2853	0BB9  8B D8			     mov     bx,ax
   2854	0BBB  FF B7 0016e		     push    word ptr DGROUP:_miniSO_thread[bx+22]
   2855	0BBF  1E			     push    ds
   2856	0BC0  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2857	0BC3  50			     push    ax
   2858	0BC4  E8 0000e			     call    near ptr _inttostr
   2859	0BC7  83 C4 06			     add     sp,6
   2860					;
   2861					;	      l=strlen(str);
   2862					;
   2863	0BCA  1E			     push    ds
   2864	0BCB  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2865	0BCE  50			     push    ax
   2866	0BCF  E8 0000e			     call    near ptr _strlen
   2867	0BD2  59			     pop     cx
   2868	0BD3  59			     pop     cx
   2869	0BD4  8B F0			     mov     si,ax
   2870	0BD6  EB 08			     jmp     short @18@898
   2871	0BD8			     @18@870:
   2872					;
   2873					;	      while (l++<5)
   2874					;		    putch(' ');
   2875					;
   2876	0BD8  B8 0020			     mov     ax,32
   2877	0BDB  50			     push    ax
   2878	0BDC  E8 0000e			     call    near ptr _putch
   2879	0BDF  59			     pop     cx
   2880	0BE0			     @18@898:
   2881	0BE0  8B C6			     mov     ax,si
   2882	0BE2  46			     inc     si
   2883	0BE3  3D 0005			     cmp     ax,5
   2884	0BE6  7C F0			     jl	     short @18@870
   2885					;
   2886					;	      putstr(str);
   2887					;
   2888	0BE8  1E			     push    ds
   2889	0BE9  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2890	0BEC  50			     push    ax
   2891	0BED  E8 0000e			     call    near ptr _putstr
   2892	0BF0  59			     pop     cx
   2893	0BF1  59			     pop     cx
   2894					;
   2895					;
   2896					;	      putstr("	");
   2897					;
   2898	0BF2  1E			     push    ds
   2899	0BF3  B8 06B5r			     mov     ax,offset DGROUP:s@+1573
   2900	0BF6  50			     push    ax
   2901	0BF7  E8 0000e			     call    near ptr _putstr
   2902	0BFA  59			     pop     cx
   2903	0BFB  59			     pop     cx
   2904					;
   2905					;	      inttostr(str,miniSO_thread[i].next);
   2906					;
   2907	0BFC  8B C7			     mov     ax,di
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 52
command.ASM



   2908	0BFE  BA 001A			     mov     dx,26
   2909	0C01  F7 EA			     imul    dx
   2910	0C03  8B D8			     mov     bx,ax
   2911	0C05  FF B7 0018e		     push    word ptr DGROUP:_miniSO_thread[bx+24]
   2912	0C09  1E			     push    ds
   2913	0C0A  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2914	0C0D  50			     push    ax
   2915	0C0E  E8 0000e			     call    near ptr _inttostr
   2916	0C11  83 C4 06			     add     sp,6
   2917					;
   2918					;	      l=strlen(str);
   2919					;
   2920	0C14  1E			     push    ds
   2921	0C15  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2922	0C18  50			     push    ax
   2923	0C19  E8 0000e			     call    near ptr _strlen
   2924	0C1C  59			     pop     cx
   2925	0C1D  59			     pop     cx
   2926	0C1E  8B F0			     mov     si,ax
   2927	0C20  EB 08			     jmp     short @18@982
   2928	0C22			     @18@954:
   2929					;
   2930					;	      while (l++<5)
   2931					;		    putch(' ');
   2932					;
   2933	0C22  B8 0020			     mov     ax,32
   2934	0C25  50			     push    ax
   2935	0C26  E8 0000e			     call    near ptr _putch
   2936	0C29  59			     pop     cx
   2937	0C2A			     @18@982:
   2938	0C2A  8B C6			     mov     ax,si
   2939	0C2C  46			     inc     si
   2940	0C2D  3D 0005			     cmp     ax,5
   2941	0C30  7C F0			     jl	     short @18@954
   2942					;
   2943					;	      putstr(str);
   2944					;
   2945	0C32  1E			     push    ds
   2946	0C33  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2947	0C36  50			     push    ax
   2948	0C37  E8 0000e			     call    near ptr _putstr
   2949	0C3A  59			     pop     cx
   2950	0C3B  59			     pop     cx
   2951					;
   2952					;	      putch('\n');
   2953					;
   2954	0C3C  B8 000A			     mov     ax,10
   2955	0C3F  50			     push    ax
   2956	0C40  E8 0000e			     call    near ptr _putch
   2957	0C43  59			     pop     cx
   2958	0C44			     @18@1038:
   2959	0C44  47			     inc     di
   2960	0C45			     @18@1066:
   2961	0C45  83 FF 10			     cmp     di,16
   2962	0C48  7D 03			     jge     @@5
   2963	0C4A  E9 FD98			     jmp     @18@58
   2964	0C4D			     @@5:
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 53
command.ASM



   2965					;
   2966					;	   }
   2967					;      }
   2968					;      return 0;
   2969					;
   2970	0C4D  33 C0			     xor     ax,ax
   2971	0C4F  EB 00			     jmp     short @18@1122
   2972	0C51			     @18@1122:
   2973					;
   2974					;    }
   2975					;
   2976	0C51  5F			     pop     di
   2977	0C52  5E			     pop     si
   2978	0C53  5D			     pop     bp
   2979	0C54  C3			     ret
   2980	0C55			     _cmd_ps endp
   2981	0C55			     @18@C1234	     label   word
   2982	0C55  0AE4r			     dw	     @18@450
   2983	0C57  0AF0r			     dw	     @18@506
   2984	0C59  0AF6r			     dw	     @18@534
   2985	0C5B  0AFCr			     dw	     @18@562
   2986	0C5D  0B02r			     dw	     @18@590
   2987	0C5F  0B08r			     dw	     @18@618
   2988	0C61  0B0Er			     dw	     @18@646
   2989					;
   2990					;    int cmd_kill(int argc, char far *argv[])
   2991					;
   2992					     assume  cs:_TEXT
   2993	0C63			     _cmd_kill	     proc    near
   2994	0C63  55			     push    bp
   2995	0C64  8B EC			     mov     bp,sp
   2996	0C66  56			     push    si
   2997	0C67  57			     push    di
   2998					;
   2999					;    {
   3000					;      int t=0;
   3001					;
   3002	0C68  33 F6			     xor     si,si
   3003					;
   3004					;      pid_t pid=0;
   3005					;
   3006	0C6A  33 FF			     xor     di,di
   3007					;
   3008					;      char str[10];
   3009					;
   3010					;      if (argc<=1)  {
   3011					;
   3012	0C6C  83 7E 04 01		     cmp     word ptr [bp+4],1
   3013	0C70  7F 0F			     jg	     short @19@142
   3014					;
   3015					;	  putstr("Erro em kill:	parametro nao fornecido!\n");
   3016					;
   3017	0C72  1E			     push    ds
   3018	0C73  B8 06B8r			     mov     ax,offset DGROUP:s@+1576
   3019	0C76			     @19@86:
   3020	0C76  50			     push    ax
   3021	0C77  E8 0000e			     call    near ptr _putstr
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 54
command.ASM



   3022	0C7A  59			     pop     cx
   3023	0C7B  59			     pop     cx
   3024					;
   3025					;	  return 1;
   3026					;
   3027	0C7C  B8 0001			     mov     ax,1
   3028	0C7F			     @19@114:
   3029	0C7F  EB 26			     jmp     short @19@226
   3030	0C81			     @19@142:
   3031					;
   3032					;      }
   3033					;      pid = atoi(argv[1]);
   3034					;
   3035	0C81  8B 5E 06			     mov     bx,word ptr [bp+6]
   3036	0C84  FF 77 06			     push    word ptr [bx+6]
   3037	0C87  FF 77 04			     push    word ptr [bx+4]
   3038	0C8A  E8 0000e			     call    near ptr _atoi
   3039	0C8D  59			     pop     cx
   3040	0C8E  59			     pop     cx
   3041	0C8F  8B F8			     mov     di,ax
   3042					;
   3043					;      t = kill(pid);
   3044					;
   3045	0C91  57			     push    di
   3046	0C92  E8 0000e			     call    near ptr _kill
   3047	0C95  59			     pop     cx
   3048	0C96  8B F0			     mov     si,ax
   3049					;
   3050					;      if (t==miniSO_ERROR)  {
   3051					;
   3052	0C98  83 FE FF			     cmp     si,-1
   3053	0C9B  75 06			     jne     short @19@198
   3054					;
   3055					;	  putstr("kill:	impossivel matar o processo/thread\n");
   3056					;
   3057	0C9D  1E			     push    ds
   3058	0C9E  B8 06E0r			     mov     ax,offset DGROUP:s@+1616
   3059	0CA1  EB D3			     jmp     short @19@86
   3060	0CA3			     @19@198:
   3061					;
   3062					;	  return 1;
   3063					;      }
   3064					;      return 0;
   3065					;
   3066	0CA3  33 C0			     xor     ax,ax
   3067	0CA5  EB D8			     jmp     short @19@114
   3068	0CA7			     @19@226:
   3069					;
   3070					;    }
   3071					;
   3072	0CA7  5F			     pop     di
   3073	0CA8  5E			     pop     si
   3074	0CA9  5D			     pop     bp
   3075	0CAA  C3			     ret
   3076	0CAB			     _cmd_kill	     endp
   3077					;
   3078					;    int cmd_set(int argc, char	far *argv[])
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 55
command.ASM



   3079					;
   3080					     assume  cs:_TEXT
   3081	0CAB			     _cmd_set	     proc    near
   3082	0CAB  55			     push    bp
   3083	0CAC  8B EC			     mov     bp,sp
   3084	0CAE  83 EC 02			     sub     sp,2
   3085	0CB1  56			     push    si
   3086	0CB2  57			     push    di
   3087	0CB3  8B 76 04			     mov     si,word ptr [bp+4]
   3088	0CB6  8B 7E 06			     mov     di,word ptr [bp+6]
   3089					;
   3090					;    {
   3091					;      int res;
   3092					;
   3093					;      if (argc	== 1)  {
   3094					;
   3095	0CB9  83 FE 01			     cmp     si,1
   3096	0CBC  75 07			     jne     short @20@142
   3097					;
   3098					;	  command_var_list();
   3099					;
   3100	0CBE  E8 F95C			     call    near ptr command_var_list
   3101					;
   3102					;	  return 0;
   3103					;
   3104	0CC1			     @20@86:
   3105	0CC1  33 C0			     xor     ax,ax
   3106	0CC3			     @20@114:
   3107	0CC3  EB 71			     jmp     short @20@534
   3108	0CC5			     @20@142:
   3109					;
   3110					;      }
   3111					;      if (argc	== 2)
   3112					;
   3113	0CC5  83 FE 02			     cmp     si,2
   3114	0CC8  75 16			     jne     short @20@198
   3115					;
   3116					;	  res =	command_var_set(argv[1],"");
   3117					;
   3118	0CCA  1E			     push    ds
   3119	0CCB  B8 070Ar			     mov     ax,offset DGROUP:s@+1658
   3120	0CCE  50			     push    ax
   3121	0CCF  FF 75 06			     push    word ptr [di+6]
   3122	0CD2  FF 75 04			     push    word ptr [di+4]
   3123	0CD5  E8 FA64			     call    near ptr command_var_set
   3124	0CD8  83 C4 08			     add     sp,8
   3125	0CDB  89 46 FE			     mov     word ptr [bp-2],ax
   3126	0CDE  EB 21			     jmp     short @20@282
   3127	0CE0			     @20@198:
   3128					;
   3129					;      else if (argc ==	3)
   3130					;
   3131	0CE0  83 FE 03			     cmp     si,3
   3132	0CE3  75 17			     jne     short @20@254
   3133					;
   3134					;	    res	= command_var_set(argv[1],argv[2]);
   3135					;
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 56
command.ASM



   3136	0CE5  FF 75 0A			     push    word ptr [di+10]
   3137	0CE8  FF 75 08			     push    word ptr [di+8]
   3138	0CEB  FF 75 06			     push    word ptr [di+6]
   3139	0CEE  FF 75 04			     push    word ptr [di+4]
   3140	0CF1  E8 FA48			     call    near ptr command_var_set
   3141	0CF4  83 C4 08			     add     sp,8
   3142	0CF7  89 46 FE			     mov     word ptr [bp-2],ax
   3143	0CFA  EB 05			     jmp     short @20@282
   3144	0CFC			     @20@254:
   3145					;
   3146					;      else
   3147					;	  res =	-5;
   3148					;
   3149	0CFC  C7 46 FE FFFB		     mov     word ptr [bp-2],-5
   3150	0D01			     @20@282:
   3151					;
   3152					;      switch (res)  {
   3153					;
   3154	0D01  8B 5E FE			     mov     bx,word ptr [bp-2]
   3155	0D04  83 EB FB			     sub     bx,-5
   3156	0D07  83 FB 03			     cmp     bx,3
   3157	0D0A  77 28			     ja	     short @20@506
   3158	0D0C  D1 E3			     shl     bx,1
   3159	0D0E  2E: FF A7	0D3Cr		     jmp     word ptr cs:@20@C482[bx]
   3160	0D13			     @20@366:
   3161					;
   3162					;	      case -2:
   3163					;		   putstr("Erro	em set:	nao ha espaco para novas variaveis!\n");
   3164					;
   3165	0D13  1E			     push    ds
   3166	0D14  B8 070Br			     mov     ax,offset DGROUP:s@+1659
   3167	0D17  EB 10			     jmp     short @20@478
   3168	0D19			     @20@394:
   3169					;
   3170					;		   return 1;
   3171					;	      case -3:
   3172					;		   putstr("Erro	em set:	o tamanho do nome da variavel e	muito grande!\n");
   3173					;
   3174	0D19  1E			     push    ds
   3175	0D1A  B8 073Dr			     mov     ax,offset DGROUP:s@+1709
   3176	0D1D  EB 0A			     jmp     short @20@478
   3177	0D1F			     @20@422:
   3178					;
   3179					;		   return 1;
   3180					;	      case -4:
   3181					;		   putstr("Erro	em set:	o tamanho do conteudo da variavel e muito	    +
   3182				     grande!\n");
   3183					;
   3184	0D1F  1E			     push    ds
   3185	0D20  B8 0779r			     mov     ax,offset DGROUP:s@+1769
   3186	0D23  EB 04			     jmp     short @20@478
   3187	0D25			     @20@450:
   3188					;
   3189					;		   return 1;
   3190					;	      case -5:
   3191					;		   putstr("Erro	em set:	argumentos demais na linha de comando!\n");
   3192					;
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 57
command.ASM



   3193	0D25  1E			     push    ds
   3194	0D26  B8 07B9r			     mov     ax,offset DGROUP:s@+1833
   3195	0D29			     @20@478:
   3196	0D29  50			     push    ax
   3197	0D2A  E8 0000e			     call    near ptr _putstr
   3198	0D2D  59			     pop     cx
   3199	0D2E  59			     pop     cx
   3200					;
   3201					;		   return 1;
   3202					;
   3203	0D2F  B8 0001			     mov     ax,1
   3204	0D32  EB 8F			     jmp     short @20@114
   3205	0D34			     @20@506:
   3206	0D34  EB 8B			     jmp     short @20@86
   3207	0D36			     @20@534:
   3208					;
   3209					;      }
   3210					;      return 0;
   3211					;    }
   3212					;
   3213	0D36  5F			     pop     di
   3214	0D37  5E			     pop     si
   3215	0D38  8B E5			     mov     sp,bp
   3216	0D3A  5D			     pop     bp
   3217	0D3B  C3			     ret
   3218	0D3C			     _cmd_set	     endp
   3219	0D3C			     @20@C482	     label   word
   3220	0D3C  0D25r			     dw	     @20@450
   3221	0D3E  0D1Fr			     dw	     @20@422
   3222	0D40  0D19r			     dw	     @20@394
   3223	0D42  0D13r			     dw	     @20@366
   3224					;
   3225					;    int cmd_unset(int argc, char far *argv[])
   3226					;
   3227					     assume  cs:_TEXT
   3228	0D44			     _cmd_unset	     proc    near
   3229	0D44  55			     push    bp
   3230	0D45  8B EC			     mov     bp,sp
   3231	0D47  83 EC 02			     sub     sp,2
   3232					;
   3233					;    {
   3234					;      int res;
   3235					;
   3236					;      if (argc	!= 2)  {
   3237					;
   3238	0D4A  83 7E 04 02		     cmp     word ptr [bp+4],2
   3239	0D4E  74 0F			     je	     short @21@142
   3240					;
   3241					;	  putstr("Erro em unset: numero	invalido de argumentos!\n");
   3242					;
   3243	0D50  1E			     push    ds
   3244	0D51  B8 07EEr			     mov     ax,offset DGROUP:s@+1886
   3245	0D54			     @21@86:
   3246	0D54  50			     push    ax
   3247	0D55  E8 0000e			     call    near ptr _putstr
   3248	0D58  59			     pop     cx
   3249	0D59  59			     pop     cx
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 58
command.ASM



   3250					;
   3251					;	  return 1;
   3252					;
   3253	0D5A  B8 0001			     mov     ax,1
   3254	0D5D			     @21@114:
   3255	0D5D  EB 21			     jmp     short @21@226
   3256	0D5F			     @21@142:
   3257					;
   3258					;      }
   3259					;      res = command_var_unset(argv[1]);
   3260					;
   3261	0D5F  8B 5E 06			     mov     bx,word ptr [bp+6]
   3262	0D62  FF 77 06			     push    word ptr [bx+6]
   3263	0D65  FF 77 04			     push    word ptr [bx+4]
   3264	0D68  E8 F962			     call    near ptr command_var_unset
   3265	0D6B  59			     pop     cx
   3266	0D6C  59			     pop     cx
   3267	0D6D  89 46 FE			     mov     word ptr [bp-2],ax
   3268					;
   3269					;      if (res == -1)  {
   3270					;
   3271	0D70  83 7E FE FF		     cmp     word ptr [bp-2],-1
   3272	0D74  75 06			     jne     short @21@198
   3273					;
   3274					;	  putstr("Erro em unset: variavel inexistente!\n");
   3275					;
   3276	0D76  1E			     push    ds
   3277	0D77  B8 081Dr			     mov     ax,offset DGROUP:s@+1933
   3278	0D7A  EB D8			     jmp     short @21@86
   3279	0D7C			     @21@198:
   3280					;
   3281					;	  return 1;
   3282					;      }
   3283					;      return 0;
   3284					;
   3285	0D7C  33 C0			     xor     ax,ax
   3286	0D7E  EB DD			     jmp     short @21@114
   3287	0D80			     @21@226:
   3288					;
   3289					;    }
   3290					;
   3291	0D80  8B E5			     mov     sp,bp
   3292	0D82  5D			     pop     bp
   3293	0D83  C3			     ret
   3294	0D84			     _cmd_unset	     endp
   3295					;
   3296					;    int cmd_echo(int argc, char far *argv[])
   3297					;
   3298					     assume  cs:_TEXT
   3299	0D84			     _cmd_echo	     proc    near
   3300	0D84  55			     push    bp
   3301	0D85  8B EC			     mov     bp,sp
   3302	0D87  83 EC 02			     sub     sp,2
   3303	0D8A  56			     push    si
   3304	0D8B  57			     push    di
   3305	0D8C  8B 7E 06			     mov     di,word ptr [bp+6]
   3306					;
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 59
command.ASM



   3307					;    {
   3308					;      int i,control_n=1;
   3309					;
   3310	0D8F  C7 46 FE 0001		     mov     word ptr [bp-2],1
   3311					;
   3312					;
   3313					;      if (argc>1)  {
   3314					;
   3315	0D94  83 7E 04 01		     cmp     word ptr [bp+4],1
   3316	0D98  7E 55			     jle     short @22@338
   3317					;
   3318					;	  if (strcmp(argv[1],"-n")==0)
   3319					;
   3320	0D9A  1E			     push    ds
   3321	0D9B  B8 0843r			     mov     ax,offset DGROUP:s@+1971
   3322	0D9E  50			     push    ax
   3323	0D9F  FF 75 06			     push    word ptr [di+6]
   3324	0DA2  FF 75 04			     push    word ptr [di+4]
   3325	0DA5  E8 0000e			     call    near ptr _strcmp
   3326	0DA8  83 C4 08			     add     sp,8
   3327	0DAB  0B C0			     or	     ax,ax
   3328	0DAD  75 07			     jne     short @22@114
   3329					;
   3330					;	     control_n = 0;
   3331					;
   3332	0DAF  C7 46 FE 0000		     mov     word ptr [bp-2],0
   3333	0DB4  EB 0B			     jmp     short @22@142
   3334	0DB6			     @22@114:
   3335					;
   3336					;	  else
   3337					;	     putstr(argv[1]);
   3338					;
   3339	0DB6  FF 75 06			     push    word ptr [di+6]
   3340	0DB9  FF 75 04			     push    word ptr [di+4]
   3341	0DBC  E8 0000e			     call    near ptr _putstr
   3342	0DBF  59			     pop     cx
   3343	0DC0  59			     pop     cx
   3344	0DC1			     @22@142:
   3345					;
   3346					;	  for (i=2;i<argc;++i)	{
   3347					;
   3348	0DC1  BE 0002			     mov     si,2
   3349	0DC4  EB 24			     jmp     short @22@310
   3350	0DC6			     @22@170:
   3351					;
   3352					;	      if (i!=2 || control_n)
   3353					;
   3354	0DC6  83 FE 02			     cmp     si,2
   3355	0DC9  75 06			     jne     short @22@226
   3356	0DCB  83 7E FE 00		     cmp     word ptr [bp-2],0
   3357	0DCF  74 08			     je	     short @22@254
   3358	0DD1			     @22@226:
   3359					;
   3360					;		 putch(' ');
   3361					;
   3362	0DD1  B8 0020			     mov     ax,32
   3363	0DD4  50			     push    ax
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 60
command.ASM



   3364	0DD5  E8 0000e			     call    near ptr _putch
   3365	0DD8  59			     pop     cx
   3366	0DD9			     @22@254:
   3367					;
   3368					;	      putstr(argv[i]);
   3369					;
   3370	0DD9  8B DE			     mov     bx,si
   3371	0DDB  B1 02			     mov     cl,2
   3372	0DDD  D3 E3			     shl     bx,cl
   3373	0DDF  FF 71 02			     push    word ptr [bx+di+2]
   3374	0DE2  FF 31			     push    word ptr [bx+di]
   3375	0DE4  E8 0000e			     call    near ptr _putstr
   3376	0DE7  59			     pop     cx
   3377	0DE8  59			     pop     cx
   3378	0DE9  46			     inc     si
   3379	0DEA			     @22@310:
   3380	0DEA  3B 76 04			     cmp     si,word ptr [bp+4]
   3381	0DED  7C D7			     jl	     short @22@170
   3382	0DEF			     @22@338:
   3383					;
   3384					;	  }
   3385					;      }
   3386					;      if (control_n)
   3387					;
   3388	0DEF  83 7E FE 00		     cmp     word ptr [bp-2],0
   3389	0DF3  74 08			     je	     short @22@394
   3390					;
   3391					;	  putch('\n');
   3392					;
   3393	0DF5  B8 000A			     mov     ax,10
   3394	0DF8  50			     push    ax
   3395	0DF9  E8 0000e			     call    near ptr _putch
   3396	0DFC  59			     pop     cx
   3397	0DFD			     @22@394:
   3398					;
   3399					;      return 0;
   3400					;
   3401	0DFD  33 C0			     xor     ax,ax
   3402	0DFF  EB 00			     jmp     short @22@422
   3403	0E01			     @22@422:
   3404					;
   3405					;    }
   3406					;
   3407	0E01  5F			     pop     di
   3408	0E02  5E			     pop     si
   3409	0E03  8B E5			     mov     sp,bp
   3410	0E05  5D			     pop     bp
   3411	0E06  C3			     ret
   3412	0E07			     _cmd_echo	     endp
   3413	0E07			     _TEXT   ends
   3414	008C			     _DATA   segment word public 'DATA'
   3415	008C			     demo_linha	     label   word
   3416	008C  FC			     db	     252
   3417	008D  FF			     db	     255
   3418	008E			     exitcode	     label   word
*Warning* command.ASM(3425) Reserved word used as symbol: EXITCODE
   3419	008E  00			     db	     0
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 61
command.ASM



   3420	008F  00			     db	     0
   3421	0090			     _DATA   ends
   3422	0E07			     _TEXT   segment byte public 'CODE'
   3423					;
   3424					;    void demo()
   3425					;
   3426					     assume  cs:_TEXT
   3427	0E07			     demo    proc    near
   3428	0E07  55			     push    bp
   3429	0E08  8B EC			     mov     bp,sp
   3430	0E0A  83 EC 16			     sub     sp,22
   3431	0E0D  56			     push    si
   3432	0E0E  57			     push    di
   3433					;
   3434					;    {
   3435					;      extern int demo_linha;
   3436					;      extern int exitcode;
   3437					;      unsigned	i;
   3438					;      int ini = demo_linha;
   3439					;
   3440	0E0F  8B 3E 008Cr		     mov     di,word ptr DGROUP:demo_linha
   3441					;
   3442					;      char str[20];
   3443					;      int ec =	exitcode;
   3444					;
   3445	0E13  A1 008Er			     mov     ax,word ptr DGROUP:exitcode
   3446	0E16  89 46 FE			     mov     word ptr [bp-2],ax
   3447					;
   3448					;
   3449					;      putstrxy(65,ini+0,"⁄ƒƒ Thread ƒƒƒƒø");
   3450					;
   3451	0E19  1E			     push    ds
   3452	0E1A  B8 0846r			     mov     ax,offset DGROUP:s@+1974
   3453	0E1D  50			     push    ax
   3454	0E1E  57			     push    di
   3455	0E1F  B8 0041			     mov     ax,65
   3456	0E22  50			     push    ax
   3457	0E23  E8 0000e			     call    near ptr _putstrxy
   3458	0E26  83 C4 08			     add     sp,8
   3459					;
   3460					;      putstrxy(65,ini+1,"≥ PID	 =	 ≥");
   3461					;
   3462	0E29  1E			     push    ds
   3463	0E2A  B8 0857r			     mov     ax,offset DGROUP:s@+1991
   3464	0E2D  50			     push    ax
   3465	0E2E  8B C7			     mov     ax,di
   3466	0E30  40			     inc     ax
   3467	0E31  50			     push    ax
   3468	0E32  B8 0041			     mov     ax,65
   3469	0E35  50			     push    ax
   3470	0E36  E8 0000e			     call    near ptr _putstrxy
   3471	0E39  83 C4 08			     add     sp,8
   3472					;
   3473					;      putstrxy(65,ini+2,"≥ Execucao:	 ≥");
   3474					;
   3475	0E3C  1E			     push    ds
   3476	0E3D  B8 0868r			     mov     ax,offset DGROUP:s@+2008
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 62
command.ASM



   3477	0E40  50			     push    ax
   3478	0E41  8B C7			     mov     ax,di
   3479	0E43  05 0002			     add     ax,2
   3480	0E46  50			     push    ax
   3481	0E47  B8 0041			     mov     ax,65
   3482	0E4A  50			     push    ax
   3483	0E4B  E8 0000e			     call    near ptr _putstrxy
   3484	0E4E  83 C4 08			     add     sp,8
   3485					;
   3486					;      putstrxy(65,ini+3,"≥		 ≥");
   3487					;
   3488	0E51  1E			     push    ds
   3489	0E52  B8 0879r			     mov     ax,offset DGROUP:s@+2025
   3490	0E55  50			     push    ax
   3491	0E56  8B C7			     mov     ax,di
   3492	0E58  05 0003			     add     ax,3
   3493	0E5B  50			     push    ax
   3494	0E5C  B8 0041			     mov     ax,65
   3495	0E5F  50			     push    ax
   3496	0E60  E8 0000e			     call    near ptr _putstrxy
   3497	0E63  83 C4 08			     add     sp,8
   3498					;
   3499					;      putstrxy(65,ini+4,"¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ");
   3500					;
   3501	0E66  1E			     push    ds
   3502	0E67  B8 088Ar			     mov     ax,offset DGROUP:s@+2042
   3503	0E6A  50			     push    ax
   3504	0E6B  8B C7			     mov     ax,di
   3505	0E6D  05 0004			     add     ax,4
   3506	0E70  50			     push    ax
   3507	0E71  B8 0041			     mov     ax,65
   3508	0E74  50			     push    ax
   3509	0E75  E8 0000e			     call    near ptr _putstrxy
   3510	0E78  83 C4 08			     add     sp,8
   3511					;
   3512					;
   3513					;      inttostr(str,getpid());
   3514					;
   3515	0E7B  E8 0000e			     call    near ptr _getpid
   3516	0E7E  50			     push    ax
   3517	0E7F  16			     push    ss
   3518	0E80  8D 46 EA			     lea     ax,word ptr [bp-22]
   3519	0E83  50			     push    ax
   3520	0E84  E8 0000e			     call    near ptr _inttostr
   3521	0E87  83 C4 06			     add     sp,6
   3522					;
   3523					;      putstrxy(74,ini+1,str);
   3524					;
   3525	0E8A  16			     push    ss
   3526	0E8B  8D 46 EA			     lea     ax,word ptr [bp-22]
   3527	0E8E  50			     push    ax
   3528	0E8F  8B C7			     mov     ax,di
   3529	0E91  40			     inc     ax
   3530	0E92  50			     push    ax
   3531	0E93  B8 004A			     mov     ax,74
   3532	0E96  50			     push    ax
   3533	0E97  E8 0000e			     call    near ptr _putstrxy
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 63
command.ASM



   3534	0E9A  83 C4 08			     add     sp,8
   3535					;
   3536					;
   3537					;      for (i=0;i<60000U;++i)  {
   3538					;
   3539	0E9D  33 F6			     xor     si,si
   3540	0E9F  EB 29			     jmp     short @23@114
   3541	0EA1			     @23@58:
   3542					;
   3543					;	   unsignedtostr(str,i,5,'0');
   3544					;
   3545	0EA1  B0 30			     mov     al,48
   3546	0EA3  50			     push    ax
   3547	0EA4  B8 0005			     mov     ax,5
   3548	0EA7  50			     push    ax
   3549	0EA8  56			     push    si
   3550	0EA9  16			     push    ss
   3551	0EAA  8D 46 EA			     lea     ax,word ptr [bp-22]
   3552	0EAD  50			     push    ax
   3553	0EAE  E8 0000e			     call    near ptr _unsignedtostr
   3554	0EB1  83 C4 0A			     add     sp,10
   3555					;
   3556					;	   putstrxy(70,ini+3,str);
   3557					;
   3558	0EB4  16			     push    ss
   3559	0EB5  8D 46 EA			     lea     ax,word ptr [bp-22]
   3560	0EB8  50			     push    ax
   3561	0EB9  8B C7			     mov     ax,di
   3562	0EBB  05 0003			     add     ax,3
   3563	0EBE  50			     push    ax
   3564	0EBF  B8 0046			     mov     ax,70
   3565	0EC2  50			     push    ax
   3566	0EC3  E8 0000e			     call    near ptr _putstrxy
   3567	0EC6  83 C4 08			     add     sp,8
   3568	0EC9  46			     inc     si
   3569	0ECA			     @23@114:
   3570	0ECA  81 FE EA60		     cmp     si,-5536
   3571	0ECE  72 D1			     jb	     short @23@58
   3572					;
   3573					;      }
   3574					;      for (i=0;i<60000U;++i)  {
   3575					;
   3576	0ED0  33 F6			     xor     si,si
   3577	0ED2  EB 29			     jmp     short @23@226
   3578	0ED4			     @23@170:
   3579					;
   3580					;	   unsignedtostr(str,i,5,'0');
   3581					;
   3582	0ED4  B0 30			     mov     al,48
   3583	0ED6  50			     push    ax
   3584	0ED7  B8 0005			     mov     ax,5
   3585	0EDA  50			     push    ax
   3586	0EDB  56			     push    si
   3587	0EDC  16			     push    ss
   3588	0EDD  8D 46 EA			     lea     ax,word ptr [bp-22]
   3589	0EE0  50			     push    ax
   3590	0EE1  E8 0000e			     call    near ptr _unsignedtostr
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 64
command.ASM



   3591	0EE4  83 C4 0A			     add     sp,10
   3592					;
   3593					;	   putstrxy(70,ini+3,str);
   3594					;
   3595	0EE7  16			     push    ss
   3596	0EE8  8D 46 EA			     lea     ax,word ptr [bp-22]
   3597	0EEB  50			     push    ax
   3598	0EEC  8B C7			     mov     ax,di
   3599	0EEE  05 0003			     add     ax,3
   3600	0EF1  50			     push    ax
   3601	0EF2  B8 0046			     mov     ax,70
   3602	0EF5  50			     push    ax
   3603	0EF6  E8 0000e			     call    near ptr _putstrxy
   3604	0EF9  83 C4 08			     add     sp,8
   3605	0EFC  46			     inc     si
   3606	0EFD			     @23@226:
   3607	0EFD  81 FE EA60		     cmp     si,-5536
   3608	0F01  72 D1			     jb	     short @23@170
   3609					;
   3610					;      }
   3611					;      for (i=0;i<60000U;++i)  {
   3612					;
   3613	0F03  33 F6			     xor     si,si
   3614	0F05  EB 29			     jmp     short @23@338
   3615	0F07			     @23@282:
   3616					;
   3617					;	   unsignedtostr(str,i,5,'0');
   3618					;
   3619	0F07  B0 30			     mov     al,48
   3620	0F09  50			     push    ax
   3621	0F0A  B8 0005			     mov     ax,5
   3622	0F0D  50			     push    ax
   3623	0F0E  56			     push    si
   3624	0F0F  16			     push    ss
   3625	0F10  8D 46 EA			     lea     ax,word ptr [bp-22]
   3626	0F13  50			     push    ax
   3627	0F14  E8 0000e			     call    near ptr _unsignedtostr
   3628	0F17  83 C4 0A			     add     sp,10
   3629					;
   3630					;	   putstrxy(70,ini+3,str);
   3631					;
   3632	0F1A  16			     push    ss
   3633	0F1B  8D 46 EA			     lea     ax,word ptr [bp-22]
   3634	0F1E  50			     push    ax
   3635	0F1F  8B C7			     mov     ax,di
   3636	0F21  05 0003			     add     ax,3
   3637	0F24  50			     push    ax
   3638	0F25  B8 0046			     mov     ax,70
   3639	0F28  50			     push    ax
   3640	0F29  E8 0000e			     call    near ptr _putstrxy
   3641	0F2C  83 C4 08			     add     sp,8
   3642	0F2F  46			     inc     si
   3643	0F30			     @23@338:
   3644	0F30  81 FE EA60		     cmp     si,-5536
   3645	0F34  72 D1			     jb	     short @23@282
   3646					;
   3647					;      }
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 65
command.ASM



   3648					;      for (i=0;i<60000U;++i)  {
   3649					;
   3650	0F36  33 F6			     xor     si,si
   3651	0F38  EB 29			     jmp     short @23@450
   3652	0F3A			     @23@394:
   3653					;
   3654					;	   unsignedtostr(str,i,5,'0');
   3655					;
   3656	0F3A  B0 30			     mov     al,48
   3657	0F3C  50			     push    ax
   3658	0F3D  B8 0005			     mov     ax,5
   3659	0F40  50			     push    ax
   3660	0F41  56			     push    si
   3661	0F42  16			     push    ss
   3662	0F43  8D 46 EA			     lea     ax,word ptr [bp-22]
   3663	0F46  50			     push    ax
   3664	0F47  E8 0000e			     call    near ptr _unsignedtostr
   3665	0F4A  83 C4 0A			     add     sp,10
   3666					;
   3667					;	   putstrxy(70,ini+3,str);
   3668					;
   3669	0F4D  16			     push    ss
   3670	0F4E  8D 46 EA			     lea     ax,word ptr [bp-22]
   3671	0F51  50			     push    ax
   3672	0F52  8B C7			     mov     ax,di
   3673	0F54  05 0003			     add     ax,3
   3674	0F57  50			     push    ax
   3675	0F58  B8 0046			     mov     ax,70
   3676	0F5B  50			     push    ax
   3677	0F5C  E8 0000e			     call    near ptr _putstrxy
   3678	0F5F  83 C4 08			     add     sp,8
   3679	0F62  46			     inc     si
   3680	0F63			     @23@450:
   3681	0F63  81 FE EA60		     cmp     si,-5536
   3682	0F67  72 D1			     jb	     short @23@394
   3683					;
   3684					;      }
   3685					;      for (i=0;i<60000U;++i)  {
   3686					;
   3687	0F69  33 F6			     xor     si,si
   3688	0F6B  EB 29			     jmp     short @23@562
   3689	0F6D			     @23@506:
   3690					;
   3691					;	   unsignedtostr(str,i,5,'0');
   3692					;
   3693	0F6D  B0 30			     mov     al,48
   3694	0F6F  50			     push    ax
   3695	0F70  B8 0005			     mov     ax,5
   3696	0F73  50			     push    ax
   3697	0F74  56			     push    si
   3698	0F75  16			     push    ss
   3699	0F76  8D 46 EA			     lea     ax,word ptr [bp-22]
   3700	0F79  50			     push    ax
   3701	0F7A  E8 0000e			     call    near ptr _unsignedtostr
   3702	0F7D  83 C4 0A			     add     sp,10
   3703					;
   3704					;	   putstrxy(70,ini+3,str);
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 66
command.ASM



   3705					;
   3706	0F80  16			     push    ss
   3707	0F81  8D 46 EA			     lea     ax,word ptr [bp-22]
   3708	0F84  50			     push    ax
   3709	0F85  8B C7			     mov     ax,di
   3710	0F87  05 0003			     add     ax,3
   3711	0F8A  50			     push    ax
   3712	0F8B  B8 0046			     mov     ax,70
   3713	0F8E  50			     push    ax
   3714	0F8F  E8 0000e			     call    near ptr _putstrxy
   3715	0F92  83 C4 08			     add     sp,8
   3716	0F95  46			     inc     si
   3717	0F96			     @23@562:
   3718	0F96  81 FE EA60		     cmp     si,-5536
   3719	0F9A  72 D1			     jb	     short @23@506
   3720					;
   3721					;      }
   3722					;      for (i=0;i<60000U;++i)  {
   3723					;
   3724	0F9C  33 F6			     xor     si,si
   3725	0F9E  EB 29			     jmp     short @23@674
   3726	0FA0			     @23@618:
   3727					;
   3728					;	   unsignedtostr(str,i,5,'0');
   3729					;
   3730	0FA0  B0 30			     mov     al,48
   3731	0FA2  50			     push    ax
   3732	0FA3  B8 0005			     mov     ax,5
   3733	0FA6  50			     push    ax
   3734	0FA7  56			     push    si
   3735	0FA8  16			     push    ss
   3736	0FA9  8D 46 EA			     lea     ax,word ptr [bp-22]
   3737	0FAC  50			     push    ax
   3738	0FAD  E8 0000e			     call    near ptr _unsignedtostr
   3739	0FB0  83 C4 0A			     add     sp,10
   3740					;
   3741					;	   putstrxy(70,ini+3,str);
   3742					;
   3743	0FB3  16			     push    ss
   3744	0FB4  8D 46 EA			     lea     ax,word ptr [bp-22]
   3745	0FB7  50			     push    ax
   3746	0FB8  8B C7			     mov     ax,di
   3747	0FBA  05 0003			     add     ax,3
   3748	0FBD  50			     push    ax
   3749	0FBE  B8 0046			     mov     ax,70
   3750	0FC1  50			     push    ax
   3751	0FC2  E8 0000e			     call    near ptr _putstrxy
   3752	0FC5  83 C4 08			     add     sp,8
   3753	0FC8  46			     inc     si
   3754	0FC9			     @23@674:
   3755	0FC9  81 FE EA60		     cmp     si,-5536
   3756	0FCD  72 D1			     jb	     short @23@618
   3757					;
   3758					;      }
   3759					;      exit(ec);
   3760					;
   3761	0FCF  FF 76 FE			     push    word ptr [bp-2]
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 67
command.ASM



   3762	0FD2  E8 0000e			     call    near ptr _exit
   3763	0FD5  59			     pop     cx
   3764					;
   3765					;    }
   3766					;
   3767	0FD6  5F			     pop     di
   3768	0FD7  5E			     pop     si
   3769	0FD8  8B E5			     mov     sp,bp
   3770	0FDA  5D			     pop     bp
   3771	0FDB  C3			     ret
   3772	0FDC			     demo    endp
   3773					;
   3774					;    int cmd_demo(int argc, char far *argv[])
   3775					;
   3776					     assume  cs:_TEXT
   3777	0FDC			     _cmd_demo	     proc    near
   3778	0FDC  55			     push    bp
   3779	0FDD  8B EC			     mov     bp,sp
   3780					;
   3781					;    {
   3782					;	     extern int	demo_linha;
   3783					;
   3784					;	     if	     (argc != 2)  {
   3785					;
   3786	0FDF  83 7E 04 02		     cmp     word ptr [bp+4],2
   3787	0FE3  74 0F			     je	     short @24@142
   3788					;
   3789					;		     putstr("Erro em demo: numero invalido de argumentos!\n");
   3790					;
   3791	0FE5  1E			     push    ds
   3792	0FE6  B8 089Br			     mov     ax,offset DGROUP:s@+2059
   3793	0FE9			     @24@86:
   3794	0FE9  50			     push    ax
   3795	0FEA  E8 0000e			     call    near ptr _putstr
   3796	0FED  59			     pop     cx
   3797	0FEE  59			     pop     cx
   3798					;
   3799					;		     return 1;
   3800					;
   3801	0FEF  B8 0001			     mov     ax,1
   3802	0FF2			     @24@114:
   3803	0FF2  EB 3A			     jmp     short @24@282
   3804	0FF4			     @24@142:
   3805					;
   3806					;	     }
   3807					;	     demo_linha	+= 5;
   3808					;
   3809	0FF4  83 06 008Cr 05		     add     word ptr DGROUP:demo_linha,5
   3810					;
   3811					;	     if	     (demo_linha >21)
   3812					;
   3813	0FF9  83 3E 008Cr 15		     cmp     word ptr DGROUP:demo_linha,21
   3814	0FFE  7E 06			     jle     short @24@198
   3815					;
   3816					;		     demo_linha	= 1;
   3817					;
   3818	1000  C7 06 008Cr 0001		     mov     word ptr DGROUP:demo_linha,1
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 68
command.ASM



   3819	1006			     @24@198:
   3820					;
   3821					;	     exitcode =	atoi(argv[1]);
   3822					;
   3823	1006  8B 5E 06			     mov     bx,word ptr [bp+6]
   3824	1009  FF 77 06			     push    word ptr [bx+6]
   3825	100C  FF 77 04			     push    word ptr [bx+4]
   3826	100F  E8 0000e			     call    near ptr _atoi
   3827	1012  59			     pop     cx
   3828	1013  59			     pop     cx
   3829	1014  A3 008Er			     mov     word ptr DGROUP:exitcode,ax
   3830					;
   3831					;	     if	     (fork(demo)==miniSO_ERROR)	 {
   3832					;
   3833	1017  B8 0E07r			     mov     ax,offset demo
   3834	101A  50			     push    ax
   3835	101B  E8 0000e			     call    near ptr _fork
   3836	101E  59			     pop     cx
   3837	101F  3D FFFF			     cmp     ax,-1
   3838	1022  75 06			     jne     short @24@254
   3839					;
   3840					;		     putstr("Erro em demo: fork() nao conseguiu	criar thread!\n");
   3841					;
   3842	1024  1E			     push    ds
   3843	1025  B8 08C9r			     mov     ax,offset DGROUP:s@+2105
   3844	1028  EB BF			     jmp     short @24@86
   3845	102A			     @24@254:
   3846					;
   3847					;		     return 1;
   3848					;	     }
   3849					;	     return 0;
   3850					;
   3851	102A  33 C0			     xor     ax,ax
   3852	102C  EB C4			     jmp     short @24@114
   3853	102E			     @24@282:
   3854					;
   3855					;    }
   3856					;
   3857	102E  5D			     pop     bp
   3858	102F  C3			     ret
   3859	1030			     _cmd_demo	     endp
   3860					;
   3861					;    int cmd_waitpid(int argc, char far	*argv[])
   3862					;
   3863					     assume  cs:_TEXT
   3864	1030			     _cmd_waitpid    proc    near
   3865	1030  55			     push    bp
   3866	1031  8B EC			     mov     bp,sp
   3867	1033  83 EC 16			     sub     sp,22
   3868	1036  56			     push    si
   3869					;
   3870					;    {
   3871					;	     int     status;
   3872					;	     pid_t   pid;
   3873					;	     char    str[20];
   3874					;
   3875					;	     if	     (argc != 2)  {
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 69
command.ASM



   3876					;
   3877	1037  83 7E 04 02		     cmp     word ptr [bp+4],2
   3878	103B  74 0F			     je	     short @25@114
   3879					;
   3880					;		     putstr("Erro em waitpid: numero invalido de argumentos!\n");
   3881					;
   3882	103D  1E			     push    ds
   3883	103E  B8 08FBr			     mov     ax,offset DGROUP:s@+2155
   3884	1041  50			     push    ax
   3885	1042  E8 0000e			     call    near ptr _putstr
   3886	1045  59			     pop     cx
   3887	1046  59			     pop     cx
   3888					;
   3889					;		     return 1;
   3890					;
   3891	1047  B8 0001			     mov     ax,1
   3892	104A			     @25@86:
   3893	104A  EB 6E			     jmp     short @25@142
   3894	104C			     @25@114:
   3895					;
   3896					;	     }
   3897					;	     pid = atoi(argv[1]);
   3898					;
   3899	104C  8B 5E 06			     mov     bx,word ptr [bp+6]
   3900	104F  FF 77 06			     push    word ptr [bx+6]
   3901	1052  FF 77 04			     push    word ptr [bx+4]
   3902	1055  E8 0000e			     call    near ptr _atoi
   3903	1058  59			     pop     cx
   3904	1059  59			     pop     cx
   3905	105A  8B F0			     mov     si,ax
   3906					;
   3907					;	     pid = waitpid(pid,&status);
   3908					;
   3909	105C  16			     push    ss
   3910	105D  8D 46 FE			     lea     ax,word ptr [bp-2]
   3911	1060  50			     push    ax
   3912	1061  56			     push    si
   3913	1062  E8 0000e			     call    near ptr _waitpid
   3914	1065  83 C4 06			     add     sp,6
   3915	1068  8B F0			     mov     si,ax
   3916					;
   3917					;	     putstr("Processo ");
   3918					;
   3919	106A  1E			     push    ds
   3920	106B  B8 092Cr			     mov     ax,offset DGROUP:s@+2204
   3921	106E  50			     push    ax
   3922	106F  E8 0000e			     call    near ptr _putstr
   3923	1072  59			     pop     cx
   3924	1073  59			     pop     cx
   3925					;
   3926					;	     inttostr(str,pid);
   3927					;
   3928	1074  56			     push    si
   3929	1075  16			     push    ss
   3930	1076  8D 46 EA			     lea     ax,word ptr [bp-22]
   3931	1079  50			     push    ax
   3932	107A  E8 0000e			     call    near ptr _inttostr
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 70
command.ASM



   3933	107D  83 C4 06			     add     sp,6
   3934					;
   3935					;	     putstr(str);
   3936					;
   3937	1080  16			     push    ss
   3938	1081  8D 46 EA			     lea     ax,word ptr [bp-22]
   3939	1084  50			     push    ax
   3940	1085  E8 0000e			     call    near ptr _putstr
   3941	1088  59			     pop     cx
   3942	1089  59			     pop     cx
   3943					;
   3944					;	     putstr(" encerrado	com codigo de fim ");
   3945					;
   3946	108A  1E			     push    ds
   3947	108B  B8 0936r			     mov     ax,offset DGROUP:s@+2214
   3948	108E  50			     push    ax
   3949	108F  E8 0000e			     call    near ptr _putstr
   3950	1092  59			     pop     cx
   3951	1093  59			     pop     cx
   3952					;
   3953					;	     inttostr(str,status);
   3954					;
   3955	1094  FF 76 FE			     push    word ptr [bp-2]
   3956	1097  16			     push    ss
   3957	1098  8D 46 EA			     lea     ax,word ptr [bp-22]
   3958	109B  50			     push    ax
   3959	109C  E8 0000e			     call    near ptr _inttostr
   3960	109F  83 C4 06			     add     sp,6
   3961					;
   3962					;	     putstr(str);
   3963					;
   3964	10A2  16			     push    ss
   3965	10A3  8D 46 EA			     lea     ax,word ptr [bp-22]
   3966	10A6  50			     push    ax
   3967	10A7  E8 0000e			     call    near ptr _putstr
   3968	10AA  59			     pop     cx
   3969	10AB  59			     pop     cx
   3970					;
   3971					;	     putstr("!\n");
   3972					;
   3973	10AC  1E			     push    ds
   3974	10AD  B8 0954r			     mov     ax,offset DGROUP:s@+2244
   3975	10B0  50			     push    ax
   3976	10B1  E8 0000e			     call    near ptr _putstr
   3977	10B4  59			     pop     cx
   3978	10B5  59			     pop     cx
   3979					;
   3980					;	     return 0;
   3981					;
   3982	10B6  33 C0			     xor     ax,ax
   3983	10B8  EB 90			     jmp     short @25@86
   3984	10BA			     @25@142:
   3985					;
   3986					;    }
   3987					;
   3988	10BA  5E			     pop     si
   3989	10BB  8B E5			     mov     sp,bp
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 71
command.ASM



   3990	10BD  5D			     pop     bp
   3991	10BE  C3			     ret
   3992	10BF			     _cmd_waitpid    endp
   3993					;
   3994					;    int cmd_wait(int argc, char far *argv[])
   3995					;
   3996					     assume  cs:_TEXT
   3997	10BF			     _cmd_wait	     proc    near
   3998	10BF  55			     push    bp
   3999	10C0  8B EC			     mov     bp,sp
   4000	10C2  83 EC 18			     sub     sp,24
   4001	10C5  56			     push    si
   4002	10C6  57			     push    di
   4003	10C7  8B 76 04			     mov     si,word ptr [bp+4]
   4004	10CA  8B 7E 06			     mov     di,word ptr [bp+6]
   4005					;
   4006					;    {
   4007					;	     int     status=123;
   4008					;
   4009	10CD  C7 46 FE 007B		     mov     word ptr [bp-2],123
   4010					;
   4011					;	     pid_t   pid;
   4012					;	     char    str[20];
   4013					;
   4014					;	     argc=argc;
   4015					;
   4016					;
   4017					;	     argv=argv;
   4018					;
   4019					;
   4020					;	     pid = wait(&status);
   4021					;
   4022	10D2  16			     push    ss
   4023	10D3  8D 46 FE			     lea     ax,word ptr [bp-2]
   4024	10D6  50			     push    ax
   4025	10D7  E8 0000e			     call    near ptr _wait
   4026	10DA  59			     pop     cx
   4027	10DB  59			     pop     cx
   4028	10DC  89 46 FC			     mov     word ptr [bp-4],ax
   4029					;
   4030					;	     putstr("Processo ");
   4031					;
   4032	10DF  1E			     push    ds
   4033	10E0  B8 0957r			     mov     ax,offset DGROUP:s@+2247
   4034	10E3  50			     push    ax
   4035	10E4  E8 0000e			     call    near ptr _putstr
   4036	10E7  59			     pop     cx
   4037	10E8  59			     pop     cx
   4038					;
   4039					;	     inttostr(str,pid);
   4040					;
   4041	10E9  FF 76 FC			     push    word ptr [bp-4]
   4042	10EC  16			     push    ss
   4043	10ED  8D 46 E8			     lea     ax,word ptr [bp-24]
   4044	10F0  50			     push    ax
   4045	10F1  E8 0000e			     call    near ptr _inttostr
   4046	10F4  83 C4 06			     add     sp,6
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 72
command.ASM



   4047					;
   4048					;	     putstr(str);
   4049					;
   4050	10F7  16			     push    ss
   4051	10F8  8D 46 E8			     lea     ax,word ptr [bp-24]
   4052	10FB  50			     push    ax
   4053	10FC  E8 0000e			     call    near ptr _putstr
   4054	10FF  59			     pop     cx
   4055	1100  59			     pop     cx
   4056					;
   4057					;	     putstr(" encerrado	com codigo de fim ");
   4058					;
   4059	1101  1E			     push    ds
   4060	1102  B8 0961r			     mov     ax,offset DGROUP:s@+2257
   4061	1105  50			     push    ax
   4062	1106  E8 0000e			     call    near ptr _putstr
   4063	1109  59			     pop     cx
   4064	110A  59			     pop     cx
   4065					;
   4066					;	     inttostr(str,status);
   4067					;
   4068	110B  FF 76 FE			     push    word ptr [bp-2]
   4069	110E  16			     push    ss
   4070	110F  8D 46 E8			     lea     ax,word ptr [bp-24]
   4071	1112  50			     push    ax
   4072	1113  E8 0000e			     call    near ptr _inttostr
   4073	1116  83 C4 06			     add     sp,6
   4074					;
   4075					;	     putstr(str);
   4076					;
   4077	1119  16			     push    ss
   4078	111A  8D 46 E8			     lea     ax,word ptr [bp-24]
   4079	111D  50			     push    ax
   4080	111E  E8 0000e			     call    near ptr _putstr
   4081	1121  59			     pop     cx
   4082	1122  59			     pop     cx
   4083					;
   4084					;	     putstr("!\n");
   4085					;
   4086	1123  1E			     push    ds
   4087	1124  B8 097Fr			     mov     ax,offset DGROUP:s@+2287
   4088	1127  50			     push    ax
   4089	1128  E8 0000e			     call    near ptr _putstr
   4090	112B  59			     pop     cx
   4091	112C  59			     pop     cx
   4092					;
   4093					;	     return 0;
   4094					;
   4095	112D  33 C0			     xor     ax,ax
   4096	112F  EB 00			     jmp     short @26@58
   4097	1131			     @26@58:
   4098					;
   4099					;    }
   4100					;
   4101	1131  5F			     pop     di
   4102	1132  5E			     pop     si
   4103	1133  8B E5			     mov     sp,bp
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 73
command.ASM



   4104	1135  5D			     pop     bp
   4105	1136  C3			     ret
   4106	1137			     _cmd_wait	     endp
   4107					;
   4108					;    int cmd_semls(int argc, char far *argv[])
   4109					;
   4110					     assume  cs:_TEXT
   4111	1137			     _cmd_semls	     proc    near
   4112	1137  55			     push    bp
   4113	1138  8B EC			     mov     bp,sp
   4114	113A  83 EC 14			     sub     sp,20
   4115	113D  56			     push    si
   4116	113E  57			     push    di
   4117					;
   4118					;    {
   4119					;	     int i,n=0;
   4120					;
   4121	113F  33 FF			     xor     di,di
   4122					;
   4123					;	     char str[20];
   4124					;	     extern miniSO_SEM miniSO_sem[miniSO_MAXSEMAPHORES];
   4125					;
   4126					;	     argc=argc;
   4127					;
   4128	1141  8B 46 04			     mov     ax,word ptr [bp+4]
   4129	1144  89 46 04			     mov     word ptr [bp+4],ax
   4130					;
   4131					;	     argv=argv;
   4132					;
   4133	1147  8B 46 06			     mov     ax,word ptr [bp+6]
   4134	114A  89 46 06			     mov     word ptr [bp+6],ax
   4135					;
   4136					;	     putstr("Semaphores:\n");
   4137					;
   4138	114D  1E			     push    ds
   4139	114E  B8 0982r			     mov     ax,offset DGROUP:s@+2290
   4140	1151  50			     push    ax
   4141	1152  E8 0000e			     call    near ptr _putstr
   4142	1155  59			     pop     cx
   4143	1156  59			     pop     cx
   4144					;
   4145					;	     for     (i=0;i<miniSO_MAXSEMAPHORES;++i)
   4146					;
   4147	1157  33 F6			     xor     si,si
   4148	1159  E9 0095			     jmp     @27@142
   4149	115C			     @27@58:
   4150					;
   4151					;		     if	     (miniSO_sem[i].status!=FREE) {
   4152					;
   4153	115C  8B DE			     mov     bx,si
   4154	115E  B1 03			     mov     cl,3
   4155	1160  D3 E3			     shl     bx,cl
   4156	1162  83 BF 0000e FF		     cmp     word ptr DGROUP:_miniSO_sem[bx],-1
   4157	1167  75 03			     jne     @@6
   4158	1169  E9 0084			     jmp     @27@114
   4159	116C			     @@6:
   4160					;
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 74
command.ASM



   4161					;			     putstr("- id=");
   4162					;
   4163	116C  1E			     push    ds
   4164	116D  B8 098Fr			     mov     ax,offset DGROUP:s@+2303
   4165	1170  50			     push    ax
   4166	1171  E8 0000e			     call    near ptr _putstr
   4167	1174  59			     pop     cx
   4168	1175  59			     pop     cx
   4169					;
   4170					;			     inttostr(str,miniSO_sem[i].semid);
   4171					;
   4172	1176  8B DE			     mov     bx,si
   4173	1178  B1 03			     mov     cl,3
   4174	117A  D3 E3			     shl     bx,cl
   4175	117C  FF B7 0002e		     push    word ptr DGROUP:_miniSO_sem[bx+2]
   4176	1180  16			     push    ss
   4177	1181  8D 46 EC			     lea     ax,word ptr [bp-20]
   4178	1184  50			     push    ax
   4179	1185  E8 0000e			     call    near ptr _inttostr
   4180	1188  83 C4 06			     add     sp,6
   4181					;
   4182					;			     putstr(str);
   4183					;
   4184	118B  16			     push    ss
   4185	118C  8D 46 EC			     lea     ax,word ptr [bp-20]
   4186	118F  50			     push    ax
   4187	1190  E8 0000e			     call    near ptr _putstr
   4188	1193  59			     pop     cx
   4189	1194  59			     pop     cx
   4190					;
   4191					;			     putstr(" value=");
   4192					;
   4193	1195  1E			     push    ds
   4194	1196  B8 0995r			     mov     ax,offset DGROUP:s@+2309
   4195	1199  50			     push    ax
   4196	119A  E8 0000e			     call    near ptr _putstr
   4197	119D  59			     pop     cx
   4198	119E  59			     pop     cx
   4199					;
   4200					;			     inttostr(str,miniSO_sem[i].value);
   4201					;
   4202	119F  8B DE			     mov     bx,si
   4203	11A1  B1 03			     mov     cl,3
   4204	11A3  D3 E3			     shl     bx,cl
   4205	11A5  FF B7 0004e		     push    word ptr DGROUP:_miniSO_sem[bx+4]
   4206	11A9  16			     push    ss
   4207	11AA  8D 46 EC			     lea     ax,word ptr [bp-20]
   4208	11AD  50			     push    ax
   4209	11AE  E8 0000e			     call    near ptr _inttostr
   4210	11B1  83 C4 06			     add     sp,6
   4211					;
   4212					;			     putstr(str);
   4213					;
   4214	11B4  16			     push    ss
   4215	11B5  8D 46 EC			     lea     ax,word ptr [bp-20]
   4216	11B8  50			     push    ax
   4217	11B9  E8 0000e			     call    near ptr _putstr
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 75
command.ASM



   4218	11BC  59			     pop     cx
   4219	11BD  59			     pop     cx
   4220					;
   4221					;			     putstr(" queue=");
   4222					;
   4223	11BE  1E			     push    ds
   4224	11BF  B8 099Dr			     mov     ax,offset DGROUP:s@+2317
   4225	11C2  50			     push    ax
   4226	11C3  E8 0000e			     call    near ptr _putstr
   4227	11C6  59			     pop     cx
   4228	11C7  59			     pop     cx
   4229					;
   4230					;			     inttostr(str,miniSO_sem[i].queue);
   4231					;
   4232	11C8  8B DE			     mov     bx,si
   4233	11CA  B1 03			     mov     cl,3
   4234	11CC  D3 E3			     shl     bx,cl
   4235	11CE  FF B7 0006e		     push    word ptr DGROUP:_miniSO_sem[bx+6]
   4236	11D2  16			     push    ss
   4237	11D3  8D 46 EC			     lea     ax,word ptr [bp-20]
   4238	11D6  50			     push    ax
   4239	11D7  E8 0000e			     call    near ptr _inttostr
   4240	11DA  83 C4 06			     add     sp,6
   4241					;
   4242					;			     putstr(str);
   4243					;
   4244	11DD  16			     push    ss
   4245	11DE  8D 46 EC			     lea     ax,word ptr [bp-20]
   4246	11E1  50			     push    ax
   4247	11E2  E8 0000e			     call    near ptr _putstr
   4248	11E5  59			     pop     cx
   4249	11E6  59			     pop     cx
   4250					;
   4251					;			     putch('\n');
   4252					;
   4253	11E7  B8 000A			     mov     ax,10
   4254	11EA  50			     push    ax
   4255	11EB  E8 0000e			     call    near ptr _putch
   4256	11EE  59			     pop     cx
   4257					;
   4258					;			     ++n;
   4259					;
   4260	11EF  47			     inc     di
   4261	11F0			     @27@114:
   4262	11F0  46			     inc     si
   4263	11F1			     @27@142:
   4264	11F1  83 FE 0A			     cmp     si,10
   4265	11F4  7D 03			     jge     @@7
   4266	11F6  E9 FF63			     jmp     @27@58
   4267	11F9			     @@7:
   4268					;
   4269					;		     }
   4270					;	     putstr("TOTAL=");
   4271					;
   4272	11F9  1E			     push    ds
   4273	11FA  B8 09A5r			     mov     ax,offset DGROUP:s@+2325
   4274	11FD  50			     push    ax
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 76
command.ASM



   4275	11FE  E8 0000e			     call    near ptr _putstr
   4276	1201  59			     pop     cx
   4277	1202  59			     pop     cx
   4278					;
   4279					;	     inttostr(str,n);
   4280					;
   4281	1203  57			     push    di
   4282	1204  16			     push    ss
   4283	1205  8D 46 EC			     lea     ax,word ptr [bp-20]
   4284	1208  50			     push    ax
   4285	1209  E8 0000e			     call    near ptr _inttostr
   4286	120C  83 C4 06			     add     sp,6
   4287					;
   4288					;	     putstr(str);
   4289					;
   4290	120F  16			     push    ss
   4291	1210  8D 46 EC			     lea     ax,word ptr [bp-20]
   4292	1213  50			     push    ax
   4293	1214  E8 0000e			     call    near ptr _putstr
   4294	1217  59			     pop     cx
   4295	1218  59			     pop     cx
   4296					;
   4297					;	     putstr("\n\n");
   4298					;
   4299	1219  1E			     push    ds
   4300	121A  B8 09ACr			     mov     ax,offset DGROUP:s@+2332
   4301	121D  50			     push    ax
   4302	121E  E8 0000e			     call    near ptr _putstr
   4303	1221  59			     pop     cx
   4304	1222  59			     pop     cx
   4305					;
   4306					;	     return 0;
   4307					;
   4308	1223  33 C0			     xor     ax,ax
   4309	1225  EB 00			     jmp     short @27@198
   4310	1227			     @27@198:
   4311					;
   4312					;    }
   4313					;
   4314	1227  5F			     pop     di
   4315	1228  5E			     pop     si
   4316	1229  8B E5			     mov     sp,bp
   4317	122B  5D			     pop     bp
   4318	122C  C3			     ret
   4319	122D			     _cmd_semls	     endp
   4320					;
   4321					;    int cmd_semcreate(int argc, char far *argv[])
   4322					;
   4323					     assume  cs:_TEXT
   4324	122D			     _cmd_semcreate  proc    near
   4325	122D  55			     push    bp
   4326	122E  8B EC			     mov     bp,sp
   4327	1230  83 EC 14			     sub     sp,20
   4328	1233  56			     push    si
   4329	1234  57			     push    di
   4330					;
   4331					;    {
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 77
command.ASM



   4332					;	     int     res,value;
   4333					;	     semid_t semid;
   4334					;	     char    str[20];
   4335					;
   4336					;	     if	     (argc != 2)     {
   4337					;
   4338	1235  83 7E 04 02		     cmp     word ptr [bp+4],2
   4339	1239  74 0F			     je	     short @28@142
   4340					;
   4341					;		     putstr("Erro em semcreate:	numero invalido	de argumentos!\n");
   4342					;
   4343	123B  1E			     push    ds
   4344	123C  B8 09AFr			     mov     ax,offset DGROUP:s@+2335
   4345	123F  50			     push    ax
   4346	1240  E8 0000e			     call    near ptr _putstr
   4347	1243  59			     pop     cx
   4348	1244  59			     pop     cx
   4349					;
   4350					;		     return 1;
   4351					;
   4352	1245			     @28@86:
   4353	1245  B8 0001			     mov     ax,1
   4354	1248			     @28@114:
   4355	1248  EB 6C			     jmp     short @28@226
   4356	124A			     @28@142:
   4357					;
   4358					;	     }
   4359					;	     value = atoi(argv[1]);
   4360					;
   4361	124A  8B 5E 06			     mov     bx,word ptr [bp+6]
   4362	124D  FF 77 06			     push    word ptr [bx+6]
   4363	1250  FF 77 04			     push    word ptr [bx+4]
   4364	1253  E8 0000e			     call    near ptr _atoi
   4365	1256  59			     pop     cx
   4366	1257  59			     pop     cx
   4367	1258  8B F0			     mov     si,ax
   4368					;
   4369					;	     semid = semcreate(value);
   4370					;
   4371	125A  56			     push    si
   4372	125B  E8 0000e			     call    near ptr _semcreate
   4373	125E  59			     pop     cx
   4374	125F  8B F8			     mov     di,ax
   4375					;
   4376					;	     if	     (semid==miniSO_ERROR)
   4377					;
   4378	1261  83 FF FF			     cmp     di,-1
   4379	1264  75 02			     jne     short @28@198
   4380	1266  EB DD			     jmp     short @28@86
   4381	1268			     @28@198:
   4382					;
   4383					;		     return 1;
   4384					;	     putstr("Semaforo id=");
   4385					;
   4386	1268  1E			     push    ds
   4387	1269  B8 09E2r			     mov     ax,offset DGROUP:s@+2386
   4388	126C  50			     push    ax
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 78
command.ASM



   4389	126D  E8 0000e			     call    near ptr _putstr
   4390	1270  59			     pop     cx
   4391	1271  59			     pop     cx
   4392					;
   4393					;	     inttostr(str,semid);
   4394					;
   4395	1272  57			     push    di
   4396	1273  16			     push    ss
   4397	1274  8D 46 EC			     lea     ax,word ptr [bp-20]
   4398	1277  50			     push    ax
   4399	1278  E8 0000e			     call    near ptr _inttostr
   4400	127B  83 C4 06			     add     sp,6
   4401					;
   4402					;	     putstr(str);
   4403					;
   4404	127E  16			     push    ss
   4405	127F  8D 46 EC			     lea     ax,word ptr [bp-20]
   4406	1282  50			     push    ax
   4407	1283  E8 0000e			     call    near ptr _putstr
   4408	1286  59			     pop     cx
   4409	1287  59			     pop     cx
   4410					;
   4411					;	     putstr(" criado (value=");
   4412					;
   4413	1288  1E			     push    ds
   4414	1289  B8 09EFr			     mov     ax,offset DGROUP:s@+2399
   4415	128C  50			     push    ax
   4416	128D  E8 0000e			     call    near ptr _putstr
   4417	1290  59			     pop     cx
   4418	1291  59			     pop     cx
   4419					;
   4420					;	     inttostr(str,value);
   4421					;
   4422	1292  56			     push    si
   4423	1293  16			     push    ss
   4424	1294  8D 46 EC			     lea     ax,word ptr [bp-20]
   4425	1297  50			     push    ax
   4426	1298  E8 0000e			     call    near ptr _inttostr
   4427	129B  83 C4 06			     add     sp,6
   4428					;
   4429					;	     putstr(str);
   4430					;
   4431	129E  16			     push    ss
   4432	129F  8D 46 EC			     lea     ax,word ptr [bp-20]
   4433	12A2  50			     push    ax
   4434	12A3  E8 0000e			     call    near ptr _putstr
   4435	12A6  59			     pop     cx
   4436	12A7  59			     pop     cx
   4437					;
   4438					;	     putstr(")\n");
   4439					;
   4440	12A8  1E			     push    ds
   4441	12A9  B8 09FFr			     mov     ax,offset DGROUP:s@+2415
   4442	12AC  50			     push    ax
   4443	12AD  E8 0000e			     call    near ptr _putstr
   4444	12B0  59			     pop     cx
   4445	12B1  59			     pop     cx
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 79
command.ASM



   4446					;
   4447					;	     return 0;
   4448					;
   4449	12B2  33 C0			     xor     ax,ax
   4450	12B4  EB 92			     jmp     short @28@114
   4451	12B6			     @28@226:
   4452					;
   4453					;    }
   4454					;
   4455	12B6  5F			     pop     di
   4456	12B7  5E			     pop     si
   4457	12B8  8B E5			     mov     sp,bp
   4458	12BA  5D			     pop     bp
   4459	12BB  C3			     ret
   4460	12BC			     _cmd_semcreate  endp
   4461					;
   4462					;    void sem_aplic()
   4463					;
   4464					     assume  cs:_TEXT
   4465	12BC			     _sem_aplic	     proc    near
   4466	12BC  55			     push    bp
   4467	12BD  8B EC			     mov     bp,sp
   4468	12BF  83 EC 14			     sub     sp,20
   4469	12C2  56			     push    si
   4470	12C3  57			     push    di
   4471					;
   4472					;    {
   4473					;	     extern int	demo_linha;
   4474					;	     extern semid_t semid;
   4475					;	     unsigned i;
   4476					;	     int ini = demo_linha;
   4477					;
   4478	12C4  8B 3E 008Cr		     mov     di,word ptr DGROUP:demo_linha
   4479					;
   4480					;	     char str[20];
   4481					;
   4482					;	     putstrxy(65,ini+0,"⁄ƒƒ Thread ƒƒƒƒø");
   4483					;
   4484	12C8  1E			     push    ds
   4485	12C9  B8 0A02r			     mov     ax,offset DGROUP:s@+2418
   4486	12CC  50			     push    ax
   4487	12CD  57			     push    di
   4488	12CE  B8 0041			     mov     ax,65
   4489	12D1  50			     push    ax
   4490	12D2  E8 0000e			     call    near ptr _putstrxy
   4491	12D5  83 C4 08			     add     sp,8
   4492					;
   4493					;	     putstrxy(65,ini+1,"≥ PID  =       ≥");
   4494					;
   4495	12D8  1E			     push    ds
   4496	12D9  B8 0A13r			     mov     ax,offset DGROUP:s@+2435
   4497	12DC  50			     push    ax
   4498	12DD  8B C7			     mov     ax,di
   4499	12DF  40			     inc     ax
   4500	12E0  50			     push    ax
   4501	12E1  B8 0041			     mov     ax,65
   4502	12E4  50			     push    ax
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 80
command.ASM



   4503	12E5  E8 0000e			     call    near ptr _putstrxy
   4504	12E8  83 C4 08			     add     sp,8
   4505					;
   4506					;	     putstrxy(65,ini+2,"≥ Execucao:    ≥");
   4507					;
   4508	12EB  1E			     push    ds
   4509	12EC  B8 0A24r			     mov     ax,offset DGROUP:s@+2452
   4510	12EF  50			     push    ax
   4511	12F0  8B C7			     mov     ax,di
   4512	12F2  05 0002			     add     ax,2
   4513	12F5  50			     push    ax
   4514	12F6  B8 0041			     mov     ax,65
   4515	12F9  50			     push    ax
   4516	12FA  E8 0000e			     call    near ptr _putstrxy
   4517	12FD  83 C4 08			     add     sp,8
   4518					;
   4519					;	     putstrxy(65,ini+3,"≥	       ≥");
   4520					;
   4521	1300  1E			     push    ds
   4522	1301  B8 0A35r			     mov     ax,offset DGROUP:s@+2469
   4523	1304  50			     push    ax
   4524	1305  8B C7			     mov     ax,di
   4525	1307  05 0003			     add     ax,3
   4526	130A  50			     push    ax
   4527	130B  B8 0041			     mov     ax,65
   4528	130E  50			     push    ax
   4529	130F  E8 0000e			     call    near ptr _putstrxy
   4530	1312  83 C4 08			     add     sp,8
   4531					;
   4532					;	     putstrxy(65,ini+4,"¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ");
   4533					;
   4534	1315  1E			     push    ds
   4535	1316  B8 0A46r			     mov     ax,offset DGROUP:s@+2486
   4536	1319  50			     push    ax
   4537	131A  8B C7			     mov     ax,di
   4538	131C  05 0004			     add     ax,4
   4539	131F  50			     push    ax
   4540	1320  B8 0041			     mov     ax,65
   4541	1323  50			     push    ax
   4542	1324  E8 0000e			     call    near ptr _putstrxy
   4543	1327  83 C4 08			     add     sp,8
   4544					;
   4545					;
   4546					;	     inttostr(str,getpid());
   4547					;
   4548	132A  E8 0000e			     call    near ptr _getpid
   4549	132D  50			     push    ax
   4550	132E  16			     push    ss
   4551	132F  8D 46 EC			     lea     ax,word ptr [bp-20]
   4552	1332  50			     push    ax
   4553	1333  E8 0000e			     call    near ptr _inttostr
   4554	1336  83 C4 06			     add     sp,6
   4555					;
   4556					;	     putstrxy(74,ini+1,str);
   4557					;
   4558	1339  16			     push    ss
   4559	133A  8D 46 EC			     lea     ax,word ptr [bp-20]
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 81
command.ASM



   4560	133D  50			     push    ax
   4561	133E  8B C7			     mov     ax,di
   4562	1340  40			     inc     ax
   4563	1341  50			     push    ax
   4564	1342  B8 004A			     mov     ax,74
   4565	1345  50			     push    ax
   4566	1346  E8 0000e			     call    near ptr _putstrxy
   4567	1349  83 C4 08			     add     sp,8
   4568					;
   4569					;	     for     (i=0;i<30000U;++i)	 {
   4570					;
   4571	134C  33 F6			     xor     si,si
   4572	134E  EB 29			     jmp     short @29@114
   4573	1350			     @29@58:
   4574					;
   4575					;		     unsignedtostr(str,i,5,'0');
   4576					;
   4577	1350  B0 30			     mov     al,48
   4578	1352  50			     push    ax
   4579	1353  B8 0005			     mov     ax,5
   4580	1356  50			     push    ax
   4581	1357  56			     push    si
   4582	1358  16			     push    ss
   4583	1359  8D 46 EC			     lea     ax,word ptr [bp-20]
   4584	135C  50			     push    ax
   4585	135D  E8 0000e			     call    near ptr _unsignedtostr
   4586	1360  83 C4 0A			     add     sp,10
   4587					;
   4588					;		     putstrxy(70,ini+3,str);
   4589					;
   4590	1363  16			     push    ss
   4591	1364  8D 46 EC			     lea     ax,word ptr [bp-20]
   4592	1367  50			     push    ax
   4593	1368  8B C7			     mov     ax,di
   4594	136A  05 0003			     add     ax,3
   4595	136D  50			     push    ax
   4596	136E  B8 0046			     mov     ax,70
   4597	1371  50			     push    ax
   4598	1372  E8 0000e			     call    near ptr _putstrxy
   4599	1375  83 C4 08			     add     sp,8
   4600	1378  46			     inc     si
   4601	1379			     @29@114:
   4602	1379  81 FE 7530		     cmp     si,30000
   4603	137D  72 D1			     jb	     short @29@58
   4604					;
   4605					;	     }
   4606					;	     semdown(semid);
   4607					;
   4608	137F  FF 36 0014r		     push    word ptr DGROUP:_semid
   4609	1383  E8 0000e			     call    near ptr _semdown
   4610	1386  59			     pop     cx
   4611	1387  EB 29			     jmp     short @29@226
   4612	1389			     @29@170:
   4613					;
   4614					;	     for     (;i<60000U;++i)  {
   4615					;		     unsignedtostr(str,i,5,'0');
   4616					;
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 82
command.ASM



   4617	1389  B0 30			     mov     al,48
   4618	138B  50			     push    ax
   4619	138C  B8 0005			     mov     ax,5
   4620	138F  50			     push    ax
   4621	1390  56			     push    si
   4622	1391  16			     push    ss
   4623	1392  8D 46 EC			     lea     ax,word ptr [bp-20]
   4624	1395  50			     push    ax
   4625	1396  E8 0000e			     call    near ptr _unsignedtostr
   4626	1399  83 C4 0A			     add     sp,10
   4627					;
   4628					;		     putstrxy(70,ini+3,str);
   4629					;
   4630	139C  16			     push    ss
   4631	139D  8D 46 EC			     lea     ax,word ptr [bp-20]
   4632	13A0  50			     push    ax
   4633	13A1  8B C7			     mov     ax,di
   4634	13A3  05 0003			     add     ax,3
   4635	13A6  50			     push    ax
   4636	13A7  B8 0046			     mov     ax,70
   4637	13AA  50			     push    ax
   4638	13AB  E8 0000e			     call    near ptr _putstrxy
   4639	13AE  83 C4 08			     add     sp,8
   4640	13B1  46			     inc     si
   4641	13B2			     @29@226:
   4642	13B2  81 FE EA60		     cmp     si,-5536
   4643	13B6  72 D1			     jb	     short @29@170
   4644					;
   4645					;	     }
   4646					;	     exit(0);
   4647					;
   4648	13B8  33 C0			     xor     ax,ax
   4649	13BA  50			     push    ax
   4650	13BB  E8 0000e			     call    near ptr _exit
   4651	13BE  59			     pop     cx
   4652					;
   4653					;    }
   4654					;
   4655	13BF  5F			     pop     di
   4656	13C0  5E			     pop     si
   4657	13C1  8B E5			     mov     sp,bp
   4658	13C3  5D			     pop     bp
   4659	13C4  C3			     ret
   4660	13C5			     _sem_aplic	     endp
   4661					;
   4662					;    int cmd_semtest(int argc, char far	*argv[])
   4663					;
   4664					     assume  cs:_TEXT
   4665	13C5			     _cmd_semtest    proc    near
   4666	13C5  55			     push    bp
   4667	13C6  8B EC			     mov     bp,sp
   4668					;
   4669					;    {
   4670					;	     extern int	demo_linha;
   4671					;	     extern semid_t semid;
   4672					;
   4673					;	     if	     (argc != 2)     {
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 83
command.ASM



   4674					;
   4675	13C8  83 7E 04 02		     cmp     word ptr [bp+4],2
   4676	13CC  74 0F			     je	     short @30@142
   4677					;
   4678					;		     putstr("Erro em semtest: numero invalido de argumentos!\n");
   4679					;
   4680	13CE  1E			     push    ds
   4681	13CF  B8 0A57r			     mov     ax,offset DGROUP:s@+2503
   4682	13D2			     @30@86:
   4683	13D2  50			     push    ax
   4684	13D3  E8 0000e			     call    near ptr _putstr
   4685	13D6  59			     pop     cx
   4686	13D7  59			     pop     cx
   4687					;
   4688					;		     return 1;
   4689					;
   4690	13D8  B8 0001			     mov     ax,1
   4691	13DB			     @30@114:
   4692	13DB  EB 3A			     jmp     short @30@282
   4693	13DD			     @30@142:
   4694					;
   4695					;	     }
   4696					;	     semid = atoi(argv[1]);
   4697					;
   4698	13DD  8B 5E 06			     mov     bx,word ptr [bp+6]
   4699	13E0  FF 77 06			     push    word ptr [bx+6]
   4700	13E3  FF 77 04			     push    word ptr [bx+4]
   4701	13E6  E8 0000e			     call    near ptr _atoi
   4702	13E9  59			     pop     cx
   4703	13EA  59			     pop     cx
   4704	13EB  A3 0014r			     mov     word ptr DGROUP:_semid,ax
   4705					;
   4706					;	     demo_linha	+= 5;
   4707					;
   4708	13EE  83 06 008Cr 05		     add     word ptr DGROUP:demo_linha,5
   4709					;
   4710					;	     if	     (demo_linha >21)
   4711					;
   4712	13F3  83 3E 008Cr 15		     cmp     word ptr DGROUP:demo_linha,21
   4713	13F8  7E 06			     jle     short @30@198
   4714					;
   4715					;		     demo_linha	= 1;
   4716					;
   4717	13FA  C7 06 008Cr 0001		     mov     word ptr DGROUP:demo_linha,1
   4718	1400			     @30@198:
   4719					;
   4720					;	     if	     (fork(sem_aplic)==miniSO_ERROR)  {
   4721					;
   4722	1400  B8 12BCr			     mov     ax,offset _sem_aplic
   4723	1403  50			     push    ax
   4724	1404  E8 0000e			     call    near ptr _fork
   4725	1407  59			     pop     cx
   4726	1408  3D FFFF			     cmp     ax,-1
   4727	140B  75 06			     jne     short @30@254
   4728					;
   4729					;		     putstr("Erro em demo: fork() nao conseguiu	criar thread!\n");
   4730					;
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 84
command.ASM



   4731	140D  1E			     push    ds
   4732	140E  B8 0A88r			     mov     ax,offset DGROUP:s@+2552
   4733	1411  EB BF			     jmp     short @30@86
   4734	1413			     @30@254:
   4735					;
   4736					;		     return 1;
   4737					;	     }
   4738					;	     return 0;
   4739					;
   4740	1413  33 C0			     xor     ax,ax
   4741	1415  EB C4			     jmp     short @30@114
   4742	1417			     @30@282:
   4743					;
   4744					;    }
   4745					;
   4746	1417  5D			     pop     bp
   4747	1418  C3			     ret
   4748	1419			     _cmd_semtest    endp
   4749					;
   4750					;    int cmd_semup(int argc, char far *argv[])
   4751					;
   4752					     assume  cs:_TEXT
   4753	1419			     _cmd_semup	     proc    near
   4754	1419  55			     push    bp
   4755	141A  8B EC			     mov     bp,sp
   4756	141C  83 EC 02			     sub     sp,2
   4757					;
   4758					;    {
   4759					;	     semid_t semid;
   4760					;
   4761					;	     if	     (argc != 2)     {
   4762					;
   4763	141F  83 7E 04 02		     cmp     word ptr [bp+4],2
   4764	1423  74 0F			     je	     short @31@114
   4765					;
   4766					;		     putstr("Erro em semtest: numero invalido de argumentos!\n");
   4767					;
   4768	1425  1E			     push    ds
   4769	1426  B8 0ABAr			     mov     ax,offset DGROUP:s@+2602
   4770	1429  50			     push    ax
   4771	142A  E8 0000e			     call    near ptr _putstr
   4772	142D  59			     pop     cx
   4773	142E  59			     pop     cx
   4774					;
   4775					;		     return 1;
   4776					;
   4777	142F  B8 0001			     mov     ax,1
   4778	1432			     @31@86:
   4779	1432  EB 1A			     jmp     short @31@142
   4780	1434			     @31@114:
   4781					;
   4782					;	     }
   4783					;	     semid = atoi(argv[1]);
   4784					;
   4785	1434  8B 5E 06			     mov     bx,word ptr [bp+6]
   4786	1437  FF 77 06			     push    word ptr [bx+6]
   4787	143A  FF 77 04			     push    word ptr [bx+4]
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 85
command.ASM



   4788	143D  E8 0000e			     call    near ptr _atoi
   4789	1440  59			     pop     cx
   4790	1441  59			     pop     cx
   4791	1442  89 46 FE			     mov     word ptr [bp-2],ax
   4792					;
   4793					;	     return semup(semid);
   4794					;
   4795	1445  FF 76 FE			     push    word ptr [bp-2]
   4796	1448  E8 0000e			     call    near ptr _semup
   4797	144B  59			     pop     cx
   4798	144C  EB E4			     jmp     short @31@86
   4799	144E			     @31@142:
   4800					;
   4801					;    }
   4802					;
   4803	144E  8B E5			     mov     sp,bp
   4804	1450  5D			     pop     bp
   4805	1451  C3			     ret
   4806	1452			     _cmd_semup	     endp
   4807					;
   4808					;    int cmd_semdestroy(int argc, char far *argv[])
   4809					;
   4810					     assume  cs:_TEXT
   4811	1452			     _cmd_semdestroy proc    near
   4812	1452  55			     push    bp
   4813	1453  8B EC			     mov     bp,sp
   4814	1455  83 EC 02			     sub     sp,2
   4815					;
   4816					;    {
   4817					;	     semid_t semid;
   4818					;
   4819					;	     if	     (argc != 2)     {
   4820					;
   4821	1458  83 7E 04 02		     cmp     word ptr [bp+4],2
   4822	145C  74 0F			     je	     short @32@114
   4823					;
   4824					;		     putstr("Erro em semtest: numero invalido de argumentos!\n");
   4825					;
   4826	145E  1E			     push    ds
   4827	145F  B8 0AEBr			     mov     ax,offset DGROUP:s@+2651
   4828	1462  50			     push    ax
   4829	1463  E8 0000e			     call    near ptr _putstr
   4830	1466  59			     pop     cx
   4831	1467  59			     pop     cx
   4832					;
   4833					;		     return 1;
   4834					;
   4835	1468  B8 0001			     mov     ax,1
   4836	146B			     @32@86:
   4837	146B  EB 1A			     jmp     short @32@142
   4838	146D			     @32@114:
   4839					;
   4840					;	     }
   4841					;	     semid = atoi(argv[1]);
   4842					;
   4843	146D  8B 5E 06			     mov     bx,word ptr [bp+6]
   4844	1470  FF 77 06			     push    word ptr [bx+6]
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 86
command.ASM



   4845	1473  FF 77 04			     push    word ptr [bx+4]
   4846	1476  E8 0000e			     call    near ptr _atoi
   4847	1479  59			     pop     cx
   4848	147A  59			     pop     cx
   4849	147B  89 46 FE			     mov     word ptr [bp-2],ax
   4850					;
   4851					;	     return semdestroy(semid);
   4852					;
   4853	147E  FF 76 FE			     push    word ptr [bp-2]
   4854	1481  E8 0000e			     call    near ptr _semdestroy
   4855	1484  59			     pop     cx
   4856	1485  EB E4			     jmp     short @32@86
   4857	1487			     @32@142:
   4858					;
   4859					;    }
   4860					;
   4861	1487  8B E5			     mov     sp,bp
   4862	1489  5D			     pop     bp
   4863	148A  C3			     ret
   4864	148B			     _cmd_semdestroy endp
   4865	148B			     _TEXT   ends
   4866	0014			     _BSS    segment word public 'BSS'
   4867	0014			     _semid  label   word
   4868	0014  02*(??)			     db	     2 dup (?)
   4869	0016			     var     label   word
   4870	0016  01F4*(??)			     db	     500 dup (?)
   4871	020A			     history_pos     label   word
   4872	020A  02*(??)			     db	     2 dup (?)
   4873	020C			     history_nxt     label   word
   4874	020C  02*(??)			     db	     2 dup (?)
   4875	020E			     history_ini     label   word
   4876	020E  02*(??)			     db	     2 dup (?)
   4877	0210			     history_len     label   word
   4878	0210  02*(??)			     db	     2 dup (?)
   4879	0212			     history label   byte
   4880	0212  0136*(??)			     db	     310 dup (?)
   4881	0348			     argv    label   dword
   4882	0348  40*(??)			     db	     64	dup (?)
   4883	0388			     argline label   byte
   4884	0388  025F*(??)			     db	     607 dup (?)
   4885	05E7			     palavra label   byte
   4886	05E7  1F*(??)			     db	     31	dup (?)
   4887	0606			     cmdline label   byte
   4888	0606  1F*(??)			     db	     31	dup (?)
   4889	0625			     end_command     label   word
   4890	0625  02*(??)			     db	     2 dup (?)
   4891					     ?debug  C E9
   4892					     ?debug  C FA00000000
   4893	0627			     _BSS    ends
   4894	0090			     _DATA   segment word public 'DATA'
   4895	0090			     s@	     label   byte
   4896	0090  3F			     db	     '?'
   4897	0091  00			     db	     0
   4898	0092  20 20 20 20 20 20	20+	     db	     '			 exibe estas informacoes'
   4899	      20 20 20 20 20 20	20+
   4900	      20 20 20 20 20 65	78+
   4901	      69 62 65 20 65 73	74+
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 87
command.ASM



   4902	      61 73 20 69 6E 66	6F+
   4903	      72 6D 61 63 6F 65	73
   4904	00BC  00			     db	     0
   4905	00BD  68 65 6C 70		     db	     'help'
   4906	00C1  00			     db	     0
   4907	00C2  20 20 20 20 20 20	20+	     db	     '		      exibe estas informacoes'
   4908	      20 20 20 20 20 20	20+
   4909	      20 20 65 78 69 62	65+
   4910	      20 65 73 74 61 73	20+
   4911	      69 6E 66 6F 72 6D	61+
   4912	      63 6F 65 73
   4913	00E9  00			     db	     0
   4914	00EA  76 65 72			     db	     'ver'
   4915	00ED  00			     db	     0
   4916	00EE  20 20 20 20 20 20	20+	     db	     '		       mostra a	versao do MSO'
   4917	      20 20 20 20 20 20	20+
   4918	      20 20 20 6D 6F 73	74+
   4919	      72 61 20 61 20 76	65+
   4920	      72 73 61 6F 20 64	6F+
   4921	      20 4D 53 4F
   4922	0115  00			     db	     0
   4923	0116  64 61 74 65		     db	     'date'
   4924	011A  00			     db	     0
   4925	011B  20 20 20 20 20 20	20+	     db	     '		      mostra a data'
   4926	      20 20 20 20 20 20	20+
   4927	      20 20 6D 6F 73 74	72+
   4928	      61 20 61 20 64 61	74+
   4929	      61
   4930	0138  00			     db	     0
   4931	0139  74 69 6D 65		     db	     'time'
   4932	013D  00			     db	     0
   4933	013E  20 20 20 20 20 20	20+	     db	     '		      mostra a hora'
   4934	      20 20 20 20 20 20	20+
   4935	      20 20 6D 6F 73 74	72+
   4936	      61 20 61 20 68 6F	72+
   4937	      61
   4938	015B  00			     db	     0
   4939	015C  63 6C 73			     db	     'cls'
   4940	015F  00			     db	     0
   4941	0160  20 20 20 20 20 20	20+	     db	     '		       limpa a tela'
   4942	      20 20 20 20 20 20	20+
   4943	      20 20 20 6C 69 6D	70+
   4944	      61 20 61 20 74 65	6C+
   4945	      61
   4946	017D  00			     db	     0
   4947	017E  63 6C 65 61 72		     db	     'clear'
   4948	0183  00			     db	     0
   4949	0184  20 20 20 20 20 20	20+	     db	     '		     limpa a tela'
   4950	      20 20 20 20 20 20	20+
   4951	      20 6C 69 6D 70 61	20+
   4952	      61 20 74 65 6C 61
   4953	019F  00			     db	     0
   4954	01A0  72 65 62 6F 6F 74		     db	     'reboot'
   4955	01A6  00			     db	     0
   4956	01A7  20 20 20 20 20 20	20+	     db	     '		    reinicializa o sistema'
   4957	      20 20 20 20 20 20	20+
   4958	      72 65 69 6E 69 63	69+
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 88
command.ASM



   4959	      61 6C 69 7A 61 20	6F+
   4960	      20 73 69 73 74 65	6D+
   4961	      61
   4962	01CB  00			     db	     0
   4963	01CC  65 78 69 74		     db	     'exit'
   4964	01D0  00			     db	     0
   4965	01D1  20 20 20 20 20 20	20+	     db	     '		      abandona o sistema'
   4966	      20 20 20 20 20 20	20+
   4967	      20 20 61 62 61 6E	64+
   4968	      6F 6E 61 20 6F 20	73+
   4969	      69 73 74 65 6D 61
   4970	01F3  00			     db	     0
   4971	01F4  71 75 69 74		     db	     'quit'
   4972	01F8  00			     db	     0
   4973	01F9  20 20 20 20 20 20	20+	     db	     '		      abandona o sistema'
   4974	      20 20 20 20 20 20	20+
   4975	      20 20 61 62 61 6E	64+
   4976	      6F 6E 61 20 6F 20	73+
   4977	      69 73 74 65 6D 61
   4978	021B  00			     db	     0
   4979	021C  70 73			     db	     'ps'
   4980	021E  00			     db	     0
   4981	021F  20 20 20 20 20 20	20+	     db	     '			exibe processos/threads	em execucao'
   4982	      20 20 20 20 20 20	20+
   4983	      20 20 20 20 65 78	69+
   4984	      62 65 20 70 72 6F	63+
   4985	      65 73 73 6F 73 2F	74+
   4986	      68 72 65 61 64 73	20+
   4987	      65 6D 20 65 78 65	63+
   4988	      75 63 61 6F
   4989	0254  00			     db	     0
   4990	0255  6B 69 6C 6C		     db	     'kill'
   4991	0259  00			     db	     0
   4992	025A  20 3C 70 69 64 3E	20+	     db	     ' <pid>	      encerra um processo/thread'
   4993	      20 20 20 20 20 20	20+
   4994	      20 20 65 6E 63 65	72+
   4995	      72 61 20 75 6D 20	70+
   4996	      72 6F 63 65 73 73	6F+
   4997	      2F 74 68 72 65 61	64
   4998	0284  00			     db	     0
   4999	0285  64 65 6D 6F		     db	     'demo'
   5000	0289  00			     db	     0
   5001	028A  20 3C 65 78 69 74	63+	     db	     ' <exitcode>     inicia processos/threads de demonstracao'
   5002	      6F 64 65 3E 20 20	20+
   5003	      20 20 69 6E 69 63	69+
   5004	      61 20 70 72 6F 63	65+
   5005	      73 73 6F 73 2F 74	68+
   5006	      72 65 61 64 73 20	64+
   5007	      65 20 64 65 6D 6F	6E+
   5008	      73 74 72 61 63 61	6F
   5009	02C2  00			     db	     0
   5010	02C3  73 65 74			     db	     'set'
   5011	02C6  00			     db	     0
   5012	02C7  20 5B 3C 76 61 72	3E+	     db	     ' [<var> [<val>]] define o	valor da variavel ou exibe variavei'
   5013	      20 5B 3C 76 61 6C	3E+
   5014	      5D 5D 20 64 65 66	69+
   5015	      6E 65 20 6F 20 76	61+
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 89
command.ASM



   5016	      6C 6F 72 20 64 61	20+
   5017	      76 61 72 69 61 76	65+
   5018	      6C 20 6F 75 20 65	78+
   5019	      69 62 65 20 76 61	72+
   5020	      69 61 76 65 69
   5021	0304  73			     db	     's'
   5022	0305  00			     db	     0
   5023	0306  75 6E 73 65 74		     db	     'unset'
   5024	030B  00			     db	     0
   5025	030C  20 3C 76 61 72 3E	20+	     db	     ' <var>	     apaga a variavel'
   5026	      20 20 20 20 20 20	20+
   5027	      20 61 70 61 67 61	20+
   5028	      61 20 76 61 72 69	61+
   5029	      76 65 6C
   5030	032B  00			     db	     0
   5031	032C  65 63 68 6F		     db	     'echo'
   5032	0330  00			     db	     0
   5033	0331  20 5B 2D 6E 5D 20	3C+	     db	     ' [-n] <args>... imprime argumentos'
   5034	      61 72 67 73 3E 2E	2E+
   5035	      2E 20 69 6D 70 72	69+
   5036	      6D 65 20 61 72 67	75+
   5037	      6D 65 6E 74 6F 73
   5038	0353  00			     db	     0
   5039	0354  77 61 69 74 70 69	64	     db	     'waitpid'
   5040	035B  00			     db	     0
   5041	035C  20 3C 70 69 64 3E	20+	     db	     ' <pid>	   espera pelo processo-filho indicado'
   5042	      20 20 20 20 20 20	65+
   5043	      73 70 65 72 61 20	70+
   5044	      65 6C 6F 20 70 72	6F+
   5045	      63 65 73 73 6F 2D	66+
   5046	      69 6C 68 6F 20 69	6E+
   5047	      64 69 63 61 64 6F
   5048	038C  00			     db	     0
   5049	038D  77 61 69 74		     db	     'wait'
   5050	0391  00			     db	     0
   5051	0392  20 20 20 20 20 20	20+	     db	     '		      espera por um processo-filho'
   5052	      20 20 20 20 20 20	20+
   5053	      20 20 65 73 70 65	72+
   5054	      61 20 70 6F 72 20	75+
   5055	      6D 20 70 72 6F 63	65+
   5056	      73 73 6F 2D 66 69	6C+
   5057	      68 6F
   5058	03BE  00			     db	     0
   5059	03BF  73 65 6D 6C 73		     db	     'semls'
   5060	03C4  00			     db	     0
   5061	03C5  20 20 20 20 20 20	20+	     db	     '		     lista tabela de semaforos'
   5062	      20 20 20 20 20 20	20+
   5063	      20 6C 69 73 74 61	20+
   5064	      74 61 62 65 6C 61	20+
   5065	      64 65 20 73 65 6D	61+
   5066	      66 6F 72 6F 73
   5067	03ED  00			     db	     0
   5068	03EE  73 65 6D 63 72 65	61+	     db	     'semcreate'
   5069	      74 65
   5070	03F7  00			     db	     0
   5071	03F8  20 3C 76 61 6C 75	65+	     db	     ' <value>	 cria um semaforo'
   5072	      3E 20 20 20 63 72	69+
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 90
command.ASM



   5073	      61 20 75 6D 20 73	65+
   5074	      6D 61 66 6F 72 6F
   5075	0413  00			     db	     0
   5076	0414  73 65 6D 74 65 73	74	     db	     'semtest'
   5077	041B  00			     db	     0
   5078	041C  20 3C 73 65 6D 69	64+	     db	     ' <semid>	   aplicacao para teste	de semaforos'
   5079	      3E 20 20 20 20 20	61+
   5080	      70 6C 69 63 61 63	61+
   5081	      6F 20 70 61 72 61	20+
   5082	      74 65 73 74 65 20	64+
   5083	      65 20 73 65 6D 61	66+
   5084	      6F 72 6F 73
   5085	044A  00			     db	     0
   5086	044B  73 65 6D 75 70		     db	     'semup'
   5087	0450  00			     db	     0
   5088	0451  20 3C 73 65 6D 69	64+	     db	     ' <semid>	     incrementa	o valor	de um semaforo'
   5089	      3E 20 20 20 20 20	20+
   5090	      20 69 6E 63 72 65	6D+
   5091	      65 6E 74 61 20 6F	20+
   5092	      76 61 6C 6F 72 20	64+
   5093	      65 20 75 6D 20 73	65+
   5094	      6D 61 66 6F 72 6F
   5095	0481  00			     db	     0
   5096	0482  73 65 6D 64 65 73	74+	     db	     'semdestroy'
   5097	      72 6F 79
   5098	048C  00			     db	     0
   5099	048D  20 3C 73 65 6D 69	64+	     db	     ' <semid>	destroi	um semaforo'
   5100	      3E 20 20 64 65 73	74+
   5101	      72 6F 69 20 75 6D	20+
   5102	      73 65 6D 61 66 6F	72+
   5103	      6F
   5104	04AA  00			     db	     0
   5105	04AB  20 20 20 20 20 20	20+	     db	     '			'
   5106	      20 20 20 20 20 20	20+
   5107	      20 20 20 20
   5108	04BD  DC			     db	     -36
   5109	04BE  DC			     db	     -36
   5110	04BF  DC			     db	     -36
   5111	04C0  DC			     db	     -36
   5112	04C1  DC			     db	     -36
   5113	04C2  DC			     db	     -36
   5114	04C3  DC			     db	     -36
   5115	04C4  20 20			     db	     '	'
   5116	04C6  DC			     db	     -36
   5117	04C7  DC			     db	     -36
   5118	04C8  DC			     db	     -36
   5119	04C9  DC			     db	     -36
   5120	04CA  DC			     db	     -36
   5121	04CB  DC			     db	     -36
   5122	04CC  0A			     db	     10
   5123	04CD  00			     db	     0
   5124	04CE  20			     db	     ' '
   5125	04CF  DC			     db	     -36
   5126	04D0  DC			     db	     -36
   5127	04D1  DC			     db	     -36
   5128	04D2  DC			     db	     -36
   5129	04D3  DC			     db	     -36
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 91
command.ASM



   5130	04D4  20 20			     db	     '	'
   5131	04D6  DC			     db	     -36
   5132	04D7  20 20			     db	     '	'
   5133	04D9  DC			     db	     -36
   5134	04DA  DC			     db	     -36
   5135	04DB  DC			     db	     -36
   5136	04DC  20 20			     db	     '	'
   5137	04DE  DC			     db	     -36
   5138	04DF  20			     db	     ' '
   5139	04E0  DB			     db	     -37
   5140	04E1  DB			     db	     -37
   5141	04E2  20 20 20			     db	     '	 '
   5142	04E5  DF			     db	     -33
   5143	04E6  DF			     db	     -33
   5144	04E7  20 20			     db	     '	'
   5145	04E9  DB			     db	     -37
   5146	04EA  DB			     db	     -37
   5147	04EB  20 20			     db	     '	'
   5148	04ED  DB			     db	     -37
   5149	04EE  DB			     db	     -37
   5150	04EF  20 20			     db	     '	'
   5151	04F1  00			     db	     0
   5152	04F2  4D 69 6E 69 73 53	69+	     db	     'MinisSistema Operacional'
   5153	      73 74 65 6D 61 20	4F+
   5154	      70 65 72 61 63 69	6F+
   5155	      6E 61 6C
   5156	050A  0A			     db	     10
   5157	050B  00			     db	     0
   5158	050C  DC			     db	     -36
   5159	050D  DB			     db	     -37
   5160	050E  20			     db	     ' '
   5161	050F  DB			     db	     -37
   5162	0510  20			     db	     ' '
   5163	0511  DB			     db	     -37
   5164	0512  20			     db	     ' '
   5165	0513  DC			     db	     -36
   5166	0514  DB			     db	     -37
   5167	0515  20			     db	     ' '
   5168	0516  DC			     db	     -36
   5169	0517  DB			     db	     -37
   5170	0518  20			     db	     ' '
   5171	0519  DB			     db	     -37
   5172	051A  20			     db	     ' '
   5173	051B  DC			     db	     -36
   5174	051C  DB			     db	     -37
   5175	051D  20			     db	     ' '
   5176	051E  DF			     db	     -33
   5177	051F  DF			     db	     -33
   5178	0520  DF			     db	     -33
   5179	0521  DF			     db	     -33
   5180	0522  DB			     db	     -37
   5181	0523  DB			     db	     -37
   5182	0524  DB			     db	     -37
   5183	0525  20			     db	     ' '
   5184	0526  DB			     db	     -37
   5185	0527  DB			     db	     -37
   5186	0528  DB			     db	     -37
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 92
command.ASM



   5187	0529  20 20			     db	     '	'
   5188	052B  DB			     db	     -37
   5189	052C  DB			     db	     -37
   5190	052D  20 20			     db	     '	'
   5191	052F  00			     db	     0
   5192	0530  56 73 20			     db	     'Vs '
   5193	0533  00			     db	     0
   5194	0534  32 30 31 35		     db	     '2015'
   5195	0538  00			     db	     0
   5196	0539  0A			     db	     10
   5197	053A  00			     db	     0
   5198	053B  DB			     db	     -37
   5199	053C  DB			     db	     -37
   5200	053D  20			     db	     ' '
   5201	053E  DB			     db	     -37
   5202	053F  20			     db	     ' '
   5203	0540  DB			     db	     -37
   5204	0541  20			     db	     ' '
   5205	0542  DB			     db	     -37
   5206	0543  DB			     db	     -37
   5207	0544  20			     db	     ' '
   5208	0545  DB			     db	     -37
   5209	0546  DB			     db	     -37
   5210	0547  20			     db	     ' '
   5211	0548  DB			     db	     -37
   5212	0549  20			     db	     ' '
   5213	054A  DB			     db	     -37
   5214	054B  DB			     db	     -37
   5215	054C  20			     db	     ' '
   5216	054D  DB			     db	     -37
   5217	054E  DB			     db	     -37
   5218	054F  DC			     db	     -36
   5219	0550  DC			     db	     -36
   5220	0551  DB			     db	     -37
   5221	0552  DB			     db	     -37
   5222	0553  DB			     db	     -37
   5223	0554  20			     db	     ' '
   5224	0555  DB			     db	     -37
   5225	0556  DB			     db	     -37
   5226	0557  DB			     db	     -37
   5227	0558  DC			     db	     -36
   5228	0559  DC			     db	     -36
   5229	055A  DB			     db	     -37
   5230	055B  DB			     db	     -37
   5231	055C  20 20			     db	     '	'
   5232	055E  00			     db	     0
   5233	055F  70 6F 72 20 52 6F	6C+	     db	     'por Roland Teodorowitsch'
   5234	      61 6E 64 20 54 65	6F+
   5235	      64 6F 72 6F 77 69	74+
   5236	      73 63 68
   5237	0577  0A			     db	     10
   5238	0578  00			     db	     0
   5239	0579  0A			     db	     10
   5240	057A  44 69 67 69 74 65	20	     db	     'Digite '
   5241	0581  27			     db	     39
   5242	0582  68 65 6C 70		     db	     'help'
   5243	0586  27			     db	     39
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 93
command.ASM



   5244	0587  20 6F 75 20		     db	     ' ou '
   5245	058B  27			     db	     39
   5246	058C  3F			     db	     '?'
   5247	058D  27			     db	     39
   5248	058E  20 70 61 72 61 20	61+	     db	     ' para ajuda...'
   5249	      6A 75 64 61 2E 2E	2E
   5250	059C  0A			     db	     10
   5251	059D  0A			     db	     10
   5252	059E  00			     db	     0
   5253	059F  50 52 4F 4D 50 54		     db	     'PROMPT'
   5254	05A5  00			     db	     0
   5255	05A6  6D 69 6E 69 53 4F	3E	     db	     'miniSO>'
   5256	05AD  00			     db	     0
   5257	05AE  45 52 52 4F 52 4C	45+	     db	     'ERRORLEVEL'
   5258	      56 45 4C
   5259	05B8  00			     db	     0
   5260	05B9  30			     db	     '0'
   5261	05BA  00			     db	     0
   5262	05BB  45 52 52 4F 52 4C	45+	     db	     'ERRORLEVEL'
   5263	      56 45 4C
   5264	05C5  00			     db	     0
   5265	05C6  45 72 72 6F 3A 20	63+	     db	     'Erro: comando desconhecido!'
   5266	      6F 6D 61 6E 64 6F	20+
   5267	      64 65 73 63 6F 6E	68+
   5268	      65 63 69 64 6F 21
   5269	05E1  0A			     db	     10
   5270	05E2  00			     db	     0
   5271	05E3  50 52 4F 4D 50 54		     db	     'PROMPT'
   5272	05E9  00			     db	     0
   5273	05EA  43 6F 6D 61 6E 64	6F+	     db	     'Comandos do minisSistema Operacional:'
   5274	      73 20 64 6F 20 6D	69+
   5275	      6E 69 73 53 69 73	74+
   5276	      65 6D 61 20 4F 70	65+
   5277	      72 61 63 69 6F 6E	61+
   5278	      6C 3A
   5279	060F  0A			     db	     10
   5280	0610  00			     db	     0
   5281	0611  6D 69 6E 69 73 53	69+	     db	     'minisSistema Operacional - Vs '
   5282	      73 74 65 6D 61 20	4F+
   5283	      70 65 72 61 63 69	6F+
   5284	      6E 61 6C 20 2D 20	56+
   5285	      73 20
   5286	062F  00			     db	     0
   5287	0630  32 30 31 35		     db	     '2015'
   5288	0634  00			     db	     0
   5289	0635  20 42 43 50 20 20	20+	     db	     ' BCP   PID   PPID	 STATUS	  WAIT	 ZLIST	PREV   NEXT'
   5290	      50 49 44 20 20 20	50+
   5291	      50 49 44 20 20 53	54+
   5292	      41 54 55 53 20 20	20+
   5293	      57 41 49 54 20 20	20+
   5294	      5A 4C 49 53 54 20	20+
   5295	      50 52 45 56 20 20	20+
   5296	      4E 45 58 54
   5297	066A  0A			     db	     10
   5298	066B  00			     db	     0
   5299	066C  20 20			     db	     '	'
   5300	066E  00			     db	     0
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 94
command.ASM



   5301	066F  20 20			     db	     '	'
   5302	0671  00			     db	     0
   5303	0672  20 20			     db	     '	'
   5304	0674  00			     db	     0
   5305	0675  46 52 45 45 20 20	20	     db	     'FREE   '
   5306	067C  00			     db	     0
   5307	067D  52 45 41 44 59 20	20	     db	     'READY  '
   5308	0684  00			     db	     0
   5309	0685  52 55 4E 4E 49 4E	47	     db	     'RUNNING'
   5310	068C  00			     db	     0
   5311	068D  5A 4F 4D 42 49 45	20	     db	     'ZOMBIE '
   5312	0694  00			     db	     0
   5313	0695  57 41 49 54 20 20	20	     db	     'WAIT   '
   5314	069C  00			     db	     0
   5315	069D  57 41 49 54 53 49	47	     db	     'WAITSIG'
   5316	06A4  00			     db	     0
   5317	06A5  57 41 49 54 53 45	4D	     db	     'WAITSEM'
   5318	06AC  00			     db	     0
   5319	06AD  20 20			     db	     '	'
   5320	06AF  00			     db	     0
   5321	06B0  20 20			     db	     '	'
   5322	06B2  00			     db	     0
   5323	06B3  20			     db	     ' '
   5324	06B4  00			     db	     0
   5325	06B5  20 20			     db	     '	'
   5326	06B7  00			     db	     0
   5327	06B8  45 72 72 6F 20 65	6D+	     db	     'Erro em kill: parametro nao fornecido!'
   5328	      20 6B 69 6C 6C 3A	20+
   5329	      70 61 72 61 6D 65	74+
   5330	      72 6F 20 6E 61 6F	20+
   5331	      66 6F 72 6E 65 63	69+
   5332	      64 6F 21
   5333	06DE  0A			     db	     10
   5334	06DF  00			     db	     0
   5335	06E0  6B 69 6C 6C 3A 20	69+	     db	     'kill: impossivel matar o processo/thread'
   5336	      6D 70 6F 73 73 69	76+
   5337	      65 6C 20 6D 61 74	61+
   5338	      72 20 6F 20 70 72	6F+
   5339	      63 65 73 73 6F 2F	74+
   5340	      68 72 65 61 64
   5341	0708  0A			     db	     10
   5342	0709  00			     db	     0
   5343	070A  00			     db	     0
   5344	070B  45 72 72 6F 20 65	6D+	     db	     'Erro em set: nao ha espaco para novas variaveis!'
   5345	      20 73 65 74 3A 20	6E+
   5346	      61 6F 20 68 61 20	65+
   5347	      73 70 61 63 6F 20	70+
   5348	      61 72 61 20 6E 6F	76+
   5349	      61 73 20 76 61 72	69+
   5350	      61 76 65 69 73 21
   5351	073B  0A			     db	     10
   5352	073C  00			     db	     0
   5353	073D  45 72 72 6F 20 65	6D+	     db	     'Erro em set: o tamanho do	nome da	variavel e muito grande!'
   5354	      20 73 65 74 3A 20	6F+
   5355	      20 74 61 6D 61 6E	68+
   5356	      6F 20 64 6F 20 6E	6F+
   5357	      6D 65 20 64 61 20	76+
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 95
command.ASM



   5358	      61 72 69 61 76 65	6C+
   5359	      20 65 20 6D 75 69	74+
   5360	      6F 20 67 72 61 6E	64+
   5361	      65 21
   5362	0777  0A			     db	     10
   5363	0778  00			     db	     0
   5364	0779  45 72 72 6F 20 65	6D+	     db	     'Erro em set: o tamanho do	conteudo da variavel e muito grande'
   5365	      20 73 65 74 3A 20	6F+
   5366	      20 74 61 6D 61 6E	68+
   5367	      6F 20 64 6F 20 63	6F+
   5368	      6E 74 65 75 64 6F	20+
   5369	      64 61 20 76 61 72	69+
   5370	      61 76 65 6C 20 65	20+
   5371	      6D 75 69 74 6F 20	67+
   5372	      72 61 6E 64 65
   5373	07B6  21			     db	     '!'
   5374	07B7  0A			     db	     10
   5375	07B8  00			     db	     0
   5376	07B9  45 72 72 6F 20 65	6D+	     db	     'Erro em set: argumentos demais na	linha de comando!'
   5377	      20 73 65 74 3A 20	61+
   5378	      72 67 75 6D 65 6E	74+
   5379	      6F 73 20 64 65 6D	61+
   5380	      69 73 20 6E 61 20	6C+
   5381	      69 6E 68 61 20 64	65+
   5382	      20 63 6F 6D 61 6E	64+
   5383	      6F 21
   5384	07EC  0A			     db	     10
   5385	07ED  00			     db	     0
   5386	07EE  45 72 72 6F 20 65	6D+	     db	     'Erro em unset: numero invalido de	argumentos!'
   5387	      20 75 6E 73 65 74	3A+
   5388	      20 6E 75 6D 65 72	6F+
   5389	      20 69 6E 76 61 6C	69+
   5390	      64 6F 20 64 65 20	61+
   5391	      72 67 75 6D 65 6E	74+
   5392	      6F 73 21
   5393	081B  0A			     db	     10
   5394	081C  00			     db	     0
   5395	081D  45 72 72 6F 20 65	6D+	     db	     'Erro em unset: variavel inexistente!'
   5396	      20 75 6E 73 65 74	3A+
   5397	      20 76 61 72 69 61	76+
   5398	      65 6C 20 69 6E 65	78+
   5399	      69 73 74 65 6E 74	65+
   5400	      21
   5401	0841  0A			     db	     10
   5402	0842  00			     db	     0
   5403	0843  2D 6E			     db	     '-n'
   5404	0845  00			     db	     0
   5405	0846  DA			     db	     -38
   5406	0847  C4			     db	     -60
   5407	0848  C4			     db	     -60
   5408	0849  20 54 68 72 65 61	64+	     db	     ' Thread '
   5409	      20
   5410	0851  C4			     db	     -60
   5411	0852  C4			     db	     -60
   5412	0853  C4			     db	     -60
   5413	0854  C4			     db	     -60
   5414	0855  BF			     db	     -65
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 96
command.ASM



   5415	0856  00			     db	     0
   5416	0857  B3			     db	     -77
   5417	0858  20 50 49 44 20 20	3D+	     db	     ' PID  =	    '
   5418	      20 20 20 20 20 20	20
   5419	0866  B3			     db	     -77
   5420	0867  00			     db	     0
   5421	0868  B3			     db	     -77
   5422	0869  20 45 78 65 63 75	63+	     db	     ' Execucao:    '
   5423	      61 6F 3A 20 20 20	20
   5424	0877  B3			     db	     -77
   5425	0878  00			     db	     0
   5426	0879  B3			     db	     -77
   5427	087A  20 20 20 20 20 20	20+	     db	     '		    '
   5428	      20 20 20 20 20 20	20
   5429	0888  B3			     db	     -77
   5430	0889  00			     db	     0
   5431	088A  C0			     db	     -64
   5432	088B  C4			     db	     -60
   5433	088C  C4			     db	     -60
   5434	088D  C4			     db	     -60
   5435	088E  C4			     db	     -60
   5436	088F  C4			     db	     -60
   5437	0890  C4			     db	     -60
   5438	0891  C4			     db	     -60
   5439	0892  C4			     db	     -60
   5440	0893  C4			     db	     -60
   5441	0894  C4			     db	     -60
   5442	0895  C4			     db	     -60
   5443	0896  C4			     db	     -60
   5444	0897  C4			     db	     -60
   5445	0898  C4			     db	     -60
   5446	0899  D9			     db	     -39
   5447	089A  00			     db	     0
   5448	089B  45 72 72 6F 20 65	6D+	     db	     'Erro em demo: numero invalido de argumentos!'
   5449	      20 64 65 6D 6F 3A	20+
   5450	      6E 75 6D 65 72 6F	20+
   5451	      69 6E 76 61 6C 69	64+
   5452	      6F 20 64 65 20 61	72+
   5453	      67 75 6D 65 6E 74	6F+
   5454	      73 21
   5455	08C7  0A			     db	     10
   5456	08C8  00			     db	     0
   5457	08C9  45 72 72 6F 20 65	6D+	     db	     'Erro em demo: fork() nao conseguiu criar thread!'
   5458	      20 64 65 6D 6F 3A	20+
   5459	      66 6F 72 6B 28 29	20+
   5460	      6E 61 6F 20 63 6F	6E+
   5461	      73 65 67 75 69 75	20+
   5462	      63 72 69 61 72 20	74+
   5463	      68 72 65 61 64 21
   5464	08F9  0A			     db	     10
   5465	08FA  00			     db	     0
   5466	08FB  45 72 72 6F 20 65	6D+	     db	     'Erro em waitpid: numero invalido de argumentos!'
   5467	      20 77 61 69 74 70	69+
   5468	      64 3A 20 6E 75 6D	65+
   5469	      72 6F 20 69 6E 76	61+
   5470	      6C 69 64 6F 20 64	65+
   5471	      20 61 72 67 75 6D	65+
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 97
command.ASM



   5472	      6E 74 6F 73 21
   5473	092A  0A			     db	     10
   5474	092B  00			     db	     0
   5475	092C  50 72 6F 63 65 73	73+	     db	     'Processo '
   5476	      6F 20
   5477	0935  00			     db	     0
   5478	0936  20 65 6E 63 65 72	72+	     db	     ' encerrado com codigo de fim '
   5479	      61 64 6F 20 63 6F	6D+
   5480	      20 63 6F 64 69 67	6F+
   5481	      20 64 65 20 66 69	6D+
   5482	      20
   5483	0953  00			     db	     0
   5484	0954  21			     db	     '!'
   5485	0955  0A			     db	     10
   5486	0956  00			     db	     0
   5487	0957  50 72 6F 63 65 73	73+	     db	     'Processo '
   5488	      6F 20
   5489	0960  00			     db	     0
   5490	0961  20 65 6E 63 65 72	72+	     db	     ' encerrado com codigo de fim '
   5491	      61 64 6F 20 63 6F	6D+
   5492	      20 63 6F 64 69 67	6F+
   5493	      20 64 65 20 66 69	6D+
   5494	      20
   5495	097E  00			     db	     0
   5496	097F  21			     db	     '!'
   5497	0980  0A			     db	     10
   5498	0981  00			     db	     0
   5499	0982  53 65 6D 61 70 68	6F+	     db	     'Semaphores:'
   5500	      72 65 73 3A
   5501	098D  0A			     db	     10
   5502	098E  00			     db	     0
   5503	098F  2D 20 69 64 3D		     db	     '-	id='
   5504	0994  00			     db	     0
   5505	0995  20 76 61 6C 75 65	3D	     db	     ' value='
   5506	099C  00			     db	     0
   5507	099D  20 71 75 65 75 65	3D	     db	     ' queue='
   5508	09A4  00			     db	     0
   5509	09A5  54 4F 54 41 4C 3D		     db	     'TOTAL='
   5510	09AB  00			     db	     0
   5511	09AC  0A			     db	     10
   5512	09AD  0A			     db	     10
   5513	09AE  00			     db	     0
   5514	09AF  45 72 72 6F 20 65	6D+	     db	     'Erro em semcreate: numero	invalido de argumentos!'
   5515	      20 73 65 6D 63 72	65+
   5516	      61 74 65 3A 20 6E	75+
   5517	      6D 65 72 6F 20 69	6E+
   5518	      76 61 6C 69 64 6F	20+
   5519	      64 65 20 61 72 67	75+
   5520	      6D 65 6E 74 6F 73	21
   5521	09E0  0A			     db	     10
   5522	09E1  00			     db	     0
   5523	09E2  53 65 6D 61 66 6F	72+	     db	     'Semaforo id='
   5524	      6F 20 69 64 3D
   5525	09EE  00			     db	     0
   5526	09EF  20 63 72 69 61 64	6F+	     db	     ' criado (value='
   5527	      20 28 76 61 6C 75	65+
   5528	      3D
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 98
command.ASM



   5529	09FE  00			     db	     0
   5530	09FF  29			     db	     ')'
   5531	0A00  0A			     db	     10
   5532	0A01  00			     db	     0
   5533	0A02  DA			     db	     -38
   5534	0A03  C4			     db	     -60
   5535	0A04  C4			     db	     -60
   5536	0A05  20 54 68 72 65 61	64+	     db	     ' Thread '
   5537	      20
   5538	0A0D  C4			     db	     -60
   5539	0A0E  C4			     db	     -60
   5540	0A0F  C4			     db	     -60
   5541	0A10  C4			     db	     -60
   5542	0A11  BF			     db	     -65
   5543	0A12  00			     db	     0
   5544	0A13  B3			     db	     -77
   5545	0A14  20 50 49 44 20 20	3D+	     db	     ' PID  =	    '
   5546	      20 20 20 20 20 20	20
   5547	0A22  B3			     db	     -77
   5548	0A23  00			     db	     0
   5549	0A24  B3			     db	     -77
   5550	0A25  20 45 78 65 63 75	63+	     db	     ' Execucao:    '
   5551	      61 6F 3A 20 20 20	20
   5552	0A33  B3			     db	     -77
   5553	0A34  00			     db	     0
   5554	0A35  B3			     db	     -77
   5555	0A36  20 20 20 20 20 20	20+	     db	     '		    '
   5556	      20 20 20 20 20 20	20
   5557	0A44  B3			     db	     -77
   5558	0A45  00			     db	     0
   5559	0A46  C0			     db	     -64
   5560	0A47  C4			     db	     -60
   5561	0A48  C4			     db	     -60
   5562	0A49  C4			     db	     -60
   5563	0A4A  C4			     db	     -60
   5564	0A4B  C4			     db	     -60
   5565	0A4C  C4			     db	     -60
   5566	0A4D  C4			     db	     -60
   5567	0A4E  C4			     db	     -60
   5568	0A4F  C4			     db	     -60
   5569	0A50  C4			     db	     -60
   5570	0A51  C4			     db	     -60
   5571	0A52  C4			     db	     -60
   5572	0A53  C4			     db	     -60
   5573	0A54  C4			     db	     -60
   5574	0A55  D9			     db	     -39
   5575	0A56  00			     db	     0
   5576	0A57  45 72 72 6F 20 65	6D+	     db	     'Erro em semtest: numero invalido de argumentos!'
   5577	      20 73 65 6D 74 65	73+
   5578	      74 3A 20 6E 75 6D	65+
   5579	      72 6F 20 69 6E 76	61+
   5580	      6C 69 64 6F 20 64	65+
   5581	      20 61 72 67 75 6D	65+
   5582	      6E 74 6F 73 21
   5583	0A86  0A			     db	     10
   5584	0A87  00			     db	     0
   5585	0A88  45 72 72 6F 20 65	6D+	     db	     'Erro em demo: fork() nao conseguiu criar thread!'
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 99
command.ASM



   5586	      20 64 65 6D 6F 3A	20+
   5587	      66 6F 72 6B 28 29	20+
   5588	      6E 61 6F 20 63 6F	6E+
   5589	      73 65 67 75 69 75	20+
   5590	      63 72 69 61 72 20	74+
   5591	      68 72 65 61 64 21
   5592	0AB8  0A			     db	     10
   5593	0AB9  00			     db	     0
   5594	0ABA  45 72 72 6F 20 65	6D+	     db	     'Erro em semtest: numero invalido de argumentos!'
   5595	      20 73 65 6D 74 65	73+
   5596	      74 3A 20 6E 75 6D	65+
   5597	      72 6F 20 69 6E 76	61+
   5598	      6C 69 64 6F 20 64	65+
   5599	      20 61 72 67 75 6D	65+
   5600	      6E 74 6F 73 21
   5601	0AE9  0A			     db	     10
   5602	0AEA  00			     db	     0
   5603	0AEB  45 72 72 6F 20 65	6D+	     db	     'Erro em semtest: numero invalido de argumentos!'
   5604	      20 73 65 6D 74 65	73+
   5605	      74 3A 20 6E 75 6D	65+
   5606	      72 6F 20 69 6E 76	61+
   5607	      6C 69 64 6F 20 64	65+
   5608	      20 61 72 67 75 6D	65+
   5609	      6E 74 6F 73 21
   5610	0B1A  0A			     db	     10
   5611	0B1B  00			     db	     0
   5612	0B1C			     _DATA   ends
   5613	148B			     _TEXT   segment byte public 'CODE'
   5614	148B			     _TEXT   ends
   5615					     public  _sem_aplic
   5616					     public  _semid
   5617					     extrn   _miniSO_sem:word
   5618				     _exitcode	     equ     exitcode
   5619				     _demo_linha     equ     demo_linha
   5620				     _demo   equ     demo
   5621					     extrn   _miniSO_thread:word
   5622				     _commands	     equ     commands
   5623				     _var    equ     var
   5624				     _num_var	     equ     num_var
   5625				     _history_pos    equ     history_pos
   5626				     _history_nxt    equ     history_nxt
   5627				     _history_ini    equ     history_ini
   5628				     _history_len    equ     history_len
   5629				     _history	     equ     history
   5630				     _argv   equ     argv
   5631				     _argline	     equ     argline
   5632				     _palavra	     equ     palavra
   5633				     _cmdline	     equ     cmdline
   5634				     _end_command    equ     end_command
   5635					     extrn   _semdestroy:near
   5636					     extrn   _semdown:near
   5637					     extrn   _semup:near
   5638					     extrn   _semcreate:near
   5639					     extrn   _getpid:near
   5640					     extrn   _exit:near
   5641					     extrn   _waitpid:near
   5642					     extrn   _wait:near
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 100
command.ASM



   5643					     extrn   _kill:near
   5644					     extrn   _fork:near
   5645					     extrn   _reboot:near
   5646					     extrn   _inttostr:near
   5647					     extrn   _unsignedtostr:near
   5648					     extrn   _atoi:near
   5649					     extrn   _strlen:near
   5650					     extrn   _strcmp:near
   5651					     extrn   _strcpy:near
   5652					     extrn   _gettime:near
   5653					     extrn   _getdate:near
   5654					     extrn   _gotoxy:near
   5655					     extrn   _wherey:near
   5656					     extrn   _wherex:near
   5657					     extrn   _setcolor:near
   5658					     extrn   _getcolor:near
   5659					     extrn   _putstrxy:near
   5660					     extrn   _putstr:near
   5661					     extrn   _clrscr:near
   5662					     extrn   _getch:near
   5663					     extrn   _putch:near
   5664					     public  _cmd_semdestroy
   5665					     public  _cmd_semup
   5666					     public  _cmd_semtest
   5667					     public  _cmd_semcreate
   5668					     public  _cmd_semls
   5669					     public  _cmd_waitpid
   5670					     public  _cmd_wait
   5671					     public  _cmd_echo
   5672					     public  _cmd_unset
   5673					     public  _cmd_set
   5674					     public  _cmd_demo
   5675					     public  _cmd_kill
   5676					     public  _cmd_ps
   5677					     public  _cmd_ver
   5678					     public  _cmd_cls
   5679					     public  _cmd_time
   5680					     public  _cmd_date
   5681					     public  _cmd_help
   5682					     public  _cmd_reboot
   5683					     public  _cmd_exit
   5684				     _command_var_set	     equ     command_var_set
   5685				     _command_var_value	     equ     command_var_value
   5686				     _command_var_unset	     equ     command_var_unset
   5687				     _command_var_search     equ     command_var_search
   5688				     _command_var_list	     equ     command_var_list
   5689				     _command_var_nextfree   equ     command_var_nextfree
   5690				     _command_var_init	     equ     command_var_init
   5691				     _command_showprompt     equ     command_showprompt
   5692				     _command_backspace	     equ     command_backspace
   5693					     public  _command
   5694				     _s@     equ     s@
   5695					     end
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 101
Symbol Table




Symbol Name		Type   Value			   Cref	(defined at #)

??DATE			Text   "11/01/17"
??FILENAME		Text   "command	"
??TIME			Text   "22:46:17"
??VERSION		Number 030A
@10@114			Near   _TEXT:0755		   1813	 #1820
@10@170			Near   _TEXT:076A		   1830	 #1836
@10@254			Near   _TEXT:078B		   1860	 #1866
@10@282			Near   _TEXT:07A3		   1850	 #1880
@10@310			Near   _TEXT:07BF		   1819	 #1900
@10@86			Near   _TEXT:0753		   #1818  1835	1865  1899
@11@58			Near   _TEXT:07D4		   1934	 #1935
@12@58			Near   _TEXT:07EB		   1968	 #1969
@13@114			Near   _TEXT:0838		   2010	 #2044
@13@170			Near   _TEXT:0841		   2052	 #2053
@13@58			Near   _TEXT:0809		   #2011  2046
@14@58			Near   _TEXT:08DA		   2191	 #2192
@15@58			Near   _TEXT:097A		   2332	 #2333
@16@58			Near   _TEXT:0992		   2369	 #2370
@17@58			Near   _TEXT:09C1		   2426	 #2427
@18@1038		Near   _TEXT:0C44		   2489	 #2958
@18@1066		Near   _TEXT:0C45		   2478	 #2960
@18@1122		Near   _TEXT:0C51		   2971	 #2972
@18@114			Near   _TEXT:0A12		   #2511  2524
@18@142			Near   _TEXT:0A1A		   2510	 #2520
@18@198			Near   _TEXT:0A5C		   #2567  2580
@18@226			Near   _TEXT:0A64		   2566	 #2576
@18@282			Near   _TEXT:0AA6		   #2623  2636
@18@310			Near   _TEXT:0AAE		   2622	 #2632
@18@450			Near   _TEXT:0AE4		   #2668  2982
@18@478			Near   _TEXT:0AE8		   #2674  2686	2693  2700  2707  2714	2721
@18@506			Near   _TEXT:0AF0		   #2680  2983
@18@534			Near   _TEXT:0AF6		   #2687  2984
@18@562			Near   _TEXT:0AFC		   #2694  2985
@18@58			Near   _TEXT:09E5		   #2479  2963
@18@590			Near   _TEXT:0B02		   #2701  2986
@18@618			Near   _TEXT:0B08		   #2708  2987
@18@646			Near   _TEXT:0B0E		   #2715  2988
@18@674			Near   _TEXT:0B14		   2665	 2679  #2722
@18@702			Near   _TEXT:0B44		   #2757  2770
@18@730			Near   _TEXT:0B4C		   2756	 #2766
@18@786			Near   _TEXT:0B8E		   #2814  2827
@18@814			Near   _TEXT:0B96		   2813	 #2823
@18@870			Near   _TEXT:0BD8		   #2871  2884
@18@898			Near   _TEXT:0BE0		   2870	 #2880
@18@954			Near   _TEXT:0C22		   #2928  2941
@18@982			Near   _TEXT:0C2A		   2927	 #2937
@18@C1234		Word   _TEXT:0C55		   2667	 #2981
@19@114			Near   _TEXT:0C7F		   #3028  3067
@19@142			Near   _TEXT:0C81		   3013	 #3030
@19@198			Near   _TEXT:0CA3		   3053	 #3060
@19@226			Near   _TEXT:0CA7		   3029	 #3068
@19@86			Near   _TEXT:0C76		   #3019  3059
@1@1094			Near   _TEXT:01D6		   501	#516
@1@1150			Near   _TEXT:01E6		   515	522  #531
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 102
Symbol Table



@1@1178			Near   _TEXT:01E8		   496	#538
@1@1262			Near   _TEXT:0203		   555	#560
@1@1290			Near   _TEXT:020A		   544	#569
@1@1374			Near   _TEXT:0227		   586	#592
@1@142			Near   _TEXT:00FD		   #303	 308
@1@1430			Near   _TEXT:0234		   598	#604
@1@1458			Near   _TEXT:023A		   537	568  576  591  603  #610
@1@1514			Near   _TEXT:0242		   #621	 634
@1@1542			Near   _TEXT:0246		   620	#632
@1@1598			Near   _TEXT:0278		   486	619  #669
@1@1626			Near   _TEXT:027B		   #676	 1259
@1@1766			Near   _TEXT:02A6		   700	#706
@1@1794			Near   _TEXT:02AC		   705	#712
@1@1822			Near   _TEXT:02AE		   693	#717
@1@1878			Near   _TEXT:02BF		   727	#732
@1@1934			Near   _TEXT:02CE		   716	738  #743
@1@1962			Near   _TEXT:02D0		   #745	 759
@1@1990			Near   _TEXT:02D4		   744	#757
@1@2074			Near   _TEXT:030D		   683	687  765  #799
@1@2102			Near   _TEXT:030F		   382	457  478  675  805  #806
@1@2130			Near   _TEXT:0312		   #812	 1274
@1@2158			Near   _TEXT:0337		   #843	 1008
@1@2186			Near   _TEXT:0339		   #845	 858  861
@1@2214			Near   _TEXT:033C		   844	#852
@1@226			Near   _TEXT:010D		   306	#310
@1@2298			Near   _TEXT:0357		   855	#862
@1@2354			Near   _TEXT:0363		   868	#873
@1@2382			Near   _TEXT:0367		   #879	 901
@1@2410			Near   _TEXT:0375		   878	#892
@1@2494			Near   _TEXT:0390		   895	898  #902
@1@254			Near   _TEXT:0111		   #312	 1273
@1@2578			Near   _TEXT:03D3		   929	#954
@1@2606			Near   _TEXT:03D5		   912	953  #960
@1@2662			Near   _TEXT:0411		   997	#1002
@1@2690			Near   _TEXT:0414		   959	#1007
@1@2718			Near   _TEXT:0417		   872	1001  #1009
@1@2774			Near   _TEXT:0423		   1016	 #1025
@1@282			Near   _TEXT:0114		   #318	 1272
@1@2830			Near   _TEXT:0448		   1046	 #1052
@1@2886			Near   _TEXT:0457		   1058	 #1064
@1@2914			Near   _TEXT:045B		   1051	 1063  #1070
@1@2970			Near   _TEXT:046A		   1076	 #1082
@1@2998			Near   _TEXT:046E		   1081	 #1088
@1@3026			Near   _TEXT:0477		   #1099  1127
@1@3082			Near   _TEXT:049E		   1114	 #1123
@1@3110			Near   _TEXT:049F		   1098	 #1125
@1@3138			Near   _TEXT:04A4		   1122	 #1128
@1@3194			Near   _TEXT:04E3		   1137	 #1176
@1@3222			Near   _TEXT:04ED		   1175	 #1187
@1@3278			Near   _TEXT:04F7		   1193	 #1198
@1@3306			Near   _TEXT:04FB		   309	#1208
@1@3362			Near   _TEXT:0511		   286	317  338  360  811  1024  1207	1214  #1229
@1@338			Near   _TEXT:011C		   324	#333
@1@366			Near   _TEXT:011F		   #339	 1275
@1@394			Near   _TEXT:0121		   #341	 355
@1@422			Near   _TEXT:0125		   340	#353
@1@478			Near   _TEXT:012C		   #361	 1271
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 103
Symbol Table



@1@562			Near   _TEXT:013F		   #376	 381
@1@58			Near   _TEXT:00EA		   #287	 1232
@1@646			Near   _TEXT:014F		   379	#383
@1@674			Near   _TEXT:0153		   #385	 1256
@1@702			Near   _TEXT:015B		   #392	 405
@1@730			Near   _TEXT:015F		   391	#403
@1@786			Near   _TEXT:016F		   #420	 448
@1@842			Near   _TEXT:0194		   419	#446
@1@898			Near   _TEXT:01A0		   #458	 1258
@1@954			Near   _TEXT:01A8		   464	#473
@1@982			Near   _TEXT:01AB		   #479	 1257
@1@C3234		Word   _TEXT:0531		   302	#1260
@1@C3330		Word   _TEXT:0521		   375	#1247
@20@114			Near   _TEXT:0CC3		   #3106  3204
@20@142			Near   _TEXT:0CC5		   3096	 #3108
@20@198			Near   _TEXT:0CE0		   3114	 #3127
@20@254			Near   _TEXT:0CFC		   3132	 #3144
@20@282			Near   _TEXT:0D01		   3126	 3143  #3150
@20@366			Near   _TEXT:0D13		   #3160  3223
@20@394			Near   _TEXT:0D19		   #3168  3222
@20@422			Near   _TEXT:0D1F		   #3177  3221
@20@450			Near   _TEXT:0D25		   #3187  3220
@20@478			Near   _TEXT:0D29		   3167	 3176  3186  #3195
@20@506			Near   _TEXT:0D34		   3157	 #3205
@20@534			Near   _TEXT:0D36		   3107	 #3207
@20@86			Near   _TEXT:0CC1		   #3104  3206
@20@C482		Word   _TEXT:0D3C		   3159	 #3219
@21@114			Near   _TEXT:0D5D		   #3254  3286
@21@142			Near   _TEXT:0D5F		   3239	 #3256
@21@198			Near   _TEXT:0D7C		   3272	 #3279
@21@226			Near   _TEXT:0D80		   3255	 #3287
@21@86			Near   _TEXT:0D54		   #3245  3278
@22@114			Near   _TEXT:0DB6		   3328	 #3334
@22@142			Near   _TEXT:0DC1		   3333	 #3344
@22@170			Near   _TEXT:0DC6		   #3350  3381
@22@226			Near   _TEXT:0DD1		   3355	 #3358
@22@254			Near   _TEXT:0DD9		   3357	 #3366
@22@310			Near   _TEXT:0DEA		   3349	 #3379
@22@338			Near   _TEXT:0DEF		   3316	 #3382
@22@394			Near   _TEXT:0DFD		   3389	 #3397
@22@422			Near   _TEXT:0E01		   3402	 #3403
@23@114			Near   _TEXT:0ECA		   3540	 #3569
@23@170			Near   _TEXT:0ED4		   #3578  3608
@23@226			Near   _TEXT:0EFD		   3577	 #3606
@23@282			Near   _TEXT:0F07		   #3615  3645
@23@338			Near   _TEXT:0F30		   3614	 #3643
@23@394			Near   _TEXT:0F3A		   #3652  3682
@23@450			Near   _TEXT:0F63		   3651	 #3680
@23@506			Near   _TEXT:0F6D		   #3689  3719
@23@562			Near   _TEXT:0F96		   3688	 #3717
@23@58			Near   _TEXT:0EA1		   #3541  3571
@23@618			Near   _TEXT:0FA0		   #3726  3756
@23@674			Near   _TEXT:0FC9		   3725	 #3754
@24@114			Near   _TEXT:0FF2		   #3802  3852
@24@142			Near   _TEXT:0FF4		   3787	 #3804
@24@198			Near   _TEXT:1006		   3814	 #3819
@24@254			Near   _TEXT:102A		   3838	 #3845
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 104
Symbol Table



@24@282			Near   _TEXT:102E		   3803	 #3853
@24@86			Near   _TEXT:0FE9		   #3793  3844
@25@114			Near   _TEXT:104C		   3878	 #3894
@25@142			Near   _TEXT:10BA		   3893	 #3984
@25@86			Near   _TEXT:104A		   #3892  3983
@26@58			Near   _TEXT:1131		   4096	 #4097
@27@114			Near   _TEXT:11F0		   4158	 #4261
@27@142			Near   _TEXT:11F1		   4148	 #4263
@27@198			Near   _TEXT:1227		   4309	 #4310
@27@58			Near   _TEXT:115C		   #4149  4266
@28@114			Near   _TEXT:1248		   #4354  4450
@28@142			Near   _TEXT:124A		   4339	 #4356
@28@198			Near   _TEXT:1268		   4379	 #4381
@28@226			Near   _TEXT:12B6		   4355	 #4451
@28@86			Near   _TEXT:1245		   #4352  4380
@29@114			Near   _TEXT:1379		   4572	 #4601
@29@170			Near   _TEXT:1389		   #4612  4643
@29@226			Near   _TEXT:13B2		   4611	 #4641
@29@58			Near   _TEXT:1350		   #4573  4603
@30@114			Near   _TEXT:13DB		   #4691  4741
@30@142			Near   _TEXT:13DD		   4676	 #4693
@30@198			Near   _TEXT:1400		   4713	 #4718
@30@254			Near   _TEXT:1413		   4727	 #4734
@30@282			Near   _TEXT:1417		   4692	 #4742
@30@86			Near   _TEXT:13D2		   #4682  4733
@31@114			Near   _TEXT:1434		   4764	 #4780
@31@142			Near   _TEXT:144E		   4779	 #4799
@31@86			Near   _TEXT:1432		   #4778  4798
@32@114			Near   _TEXT:146D		   4822	 #4838
@32@142			Near   _TEXT:1487		   4837	 #4857
@32@86			Near   _TEXT:146B		   #4836  4856
@3@86			Near   _TEXT:05AF		   1361	 #1390
@4@114			Near   _TEXT:05DF		   1420	 #1439
@4@58			Near   _TEXT:05C2		   #1421  1441
@5@114			Near   _TEXT:05FB		   1467	 #1475
@5@142			Near   _TEXT:05FF		   #1481  1500
@5@198			Near   _TEXT:0613		   1490	 #1496
@5@226			Near   _TEXT:0614		   1480	 #1498
@5@282			Near   _TEXT:061B		   1474	 #1502
@5@58			Near   _TEXT:05F6		   #1468  1501
@5@86			Near   _TEXT:05F9		   #1473  1495
@6@114			Near   _TEXT:0681		   1542	 #1596
@6@142			Near   _TEXT:0682		   1532	 #1598
@6@58			Near   _TEXT:062E		   #1533  1600
@7@114			Near   _TEXT:069E		   1627	 #1635
@7@142			Near   _TEXT:06A2		   #1641  1666
@7@198			Near   _TEXT:06C2		   1656	 #1662
@7@226			Near   _TEXT:06C3		   1640	 #1664
@7@282			Near   _TEXT:06CA		   1634	 #1668
@7@58			Near   _TEXT:0699		   #1628  1667
@7@86			Near   _TEXT:069C		   #1633  1661
@8@114			Near   _TEXT:06E8		   1702	 #1709
@8@142			Near   _TEXT:070C		   1708	 #1735
@8@86			Near   _TEXT:06E6		   #1707  1734
@9@114			Near   _TEXT:072B		   1767	 #1775
@9@142			Near   _TEXT:0739		   1774	 #1785
@9@86			Near   _TEXT:0729		   #1773  1784
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 105
Symbol Table



@@0			Near   _TEXT:01B5		   485	#487
@@1			Near   _TEXT:0285		   682	#684
@@2			Near   _TEXT:028F		   686	#688
@@3			Near   _TEXT:051B		   1231	 #1233
@@4			Near   _TEXT:09F8		   2488	 #2490
@@5			Near   _TEXT:0C4D		   2962	 #2964
@@6			Near   _TEXT:116C		   4157	 #4159
@@7			Near   _TEXT:11F9		   4265	 #4267
@CPU			Text   0101H
@CURSEG			Text   _TEXT			   #10	#14  #18  #22  #97  #2437  #2440  #3414	 #3422	#4866  #4894	  +
							   #5613
@FILENAME		Text   COMMAND
@WORDSIZE		Text   2			   #10	#14  #18  #22  #97  #2437  #2440  #3414	 #3422	#4866  #4894	  +
							   #5613
ARGLINE			Byte   _BSS:0388		   971	979  #4883
ARGV			Dword  _BSS:0348		   983	984  1109  1110	 1141  #4881
B@			Byte   _BSS:0000		   #19
B@W			Word   _BSS:0000		   #20	2496  2504  2529  2552	2560  2585  2608  2616	2641  2742  2750  +
							   2775	 2799  2807  2832  2856	 2864  2889  2913  2921	 2946
CMDLINE			Byte   _BSS:0606		   646	654  663  776  784  793	 828  834  1032	 1227  #4887
COMMANDS		Word   _DATA:0002		   #26	1108  1148  2020  2032
COMMAND_BACKSPACE	Near   _TEXT:0545		   332	352  402  472  631  756	 #1280
COMMAND_SHOWPROMPT	Near   _TEXT:056F		   285	453  1020  1197	 #1337
COMMAND_VAR_INIT	Near   _TEXT:05BB		   258	#1410
COMMAND_VAR_LIST	Near   _TEXT:061D		   #1514  3100
COMMAND_VAR_NEXTFREE	Near   _TEXT:05EC		   #1457  1854
COMMAND_VAR_SEARCH	Near   _TEXT:068C		   #1615  1694	1759  1842
COMMAND_VAR_SET		Near   _TEXT:073C		   268	279  1170  #1797  3123	3140
COMMAND_VAR_UNSET	Near   _TEXT:06CD		   #1682  3264
COMMAND_VAR_VALUE	Near   _TEXT:070F		   919	1351  #1747
D@			Byte   _DATA:0000		   #15
D@W			Word   _DATA:0000		   #16
DEMO			Near   _TEXT:0E07		   #3427  3833
DEMO_LINHA		Word   _DATA:008C		   #3415  3440	3809  3813  3818  4478	4708  4712  4717
END_COMMAND		Word   _BSS:0625		   123	1192  1230  1963  #4889
EXITCODE		Word   _DATA:008E		   #3418  3445	3829
HISTORY			Byte   _BSS:0212		   433	643  773  1038	#4879
HISTORY_INI		Word   _BSS:020E		   127	425  575  585  1057  1062  1069	 #4875
HISTORY_LEN		Word   _BSS:0210		   447	484  495  681  692  697	 1045  1050  #4877
HISTORY_NXT		Word   _BSS:020C		   131	505  548  737  1035  1075  1080	 1087  #4873
HISTORY_POS		Word   _BSS:020A		   135	390  500  507  521  526	 543  550  554	559  574  584  590  597	  +
							   602	609  640  685  699  704	 711  722  726	731  736  742  764  770	  +
							   817	#4871
NUM_VAR			Word   _DATA:0000		   #23	1446  1466  1729
PALAVRA			Byte   _BSS:05E7		   886	907  911  917  936  944	 967  #4885
S@			Byte   _DATA:0090		   27  28  30  31  33  34  36  37  39  40  42  43  45  46  48  49  51  52 +
							   54  55  57  58  60  61  63  64  66  67  69  70  72  73  75  76  78  79 +
							   81  82  84  85  87  88  90  91  93  94  159	169  179  193  203  209	  +
							   215	229  239  249  263  266	 274  277  1168	 1182  1349  2001  2401	  +
							   2410	 2469  2538  2594  2650	 2673  2685  2692  2699	 2706  2713  2720 +
							   2728	 2785  2842  2899  3018	 3058  3119  3166  3175	 3185  3194  3244 +
							   3277	 3321  3452  3463  3476	 3489  3502  3792  3843	 3883  3920  3947 +
							   3974	 4033  4060  4087  4139	 4164  4194  4224  4273	 4300  4344  4387 +
							   4414	 4441  4485  4496  4509	 4522  4535  4681  4732	 4769  4827  #4895
VAR			Word   _BSS:0016		   1429	 1437  1489  1541  1550	 1576  1649  1717  1725	 1782  1876  1891 +
							   #4869
_ARGLINE		Alias  ARGLINE			   #5631
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 106
Symbol Table



_ARGV			Alias  ARGV			   #5630
_ATOI			Near   ----:---- Extern		   3038	 3826  3902  4364  4701	 4788  4846  #5648
_CLRSCR			Near   ----:---- Extern		   147	2364  #5661
_CMDLINE		Alias  CMDLINE			   #5633
_CMD_CLS		Near   _TEXT:0980		   44  47  #2347  5678
_CMD_DATE		Near   _TEXT:0845		   38  #2066  5680
_CMD_DEMO		Near   _TEXT:0FDC		   65  #3777  5674
_CMD_ECHO		Near   _TEXT:0D84		   74  #3299  5671
_CMD_EXIT		Near   _TEXT:07D8		   53  56  #1948  5683
_CMD_HELP		Near   _TEXT:07ED		   29  32  #1980  5681
_CMD_KILL		Near   _TEXT:0C63		   62  #2993  5675
_CMD_PS			Near   _TEXT:09C5		   59  #2445  5676
_CMD_REBOOT		Near   _TEXT:07C2		   50  #1912  5682
_CMD_SEMCREATE		Near   _TEXT:122D		   86  #4324  5667
_CMD_SEMDESTROY		Near   _TEXT:1452		   95  #4811  5664
_CMD_SEMLS		Near   _TEXT:1137		   83  #4111  5668
_CMD_SEMTEST		Near   _TEXT:13C5		   89  #4665  5666
_CMD_SEMUP		Near   _TEXT:1419		   92  #4753  5665
_CMD_SET		Near   _TEXT:0CAB		   68  #3081  5673
_CMD_TIME		Near   _TEXT:08E0		   41  #2206  5679
_CMD_UNSET		Near   _TEXT:0D44		   71  #3228  5672
_CMD_VER		Near   _TEXT:0996		   35  #2383  5677
_CMD_WAIT		Near   _TEXT:10BF		   80  #3997  5670
_CMD_WAITPID		Near   _TEXT:1030		   77  #3864  5669
_COMMAND		Near   _TEXT:0000		   #102	 5693
_COMMANDS		Alias  COMMANDS			   #5622
_COMMAND_BACKSPACE	Alias  COMMAND_BACKSPACE	   #5692
_COMMAND_SHOWPROMPT	Alias  COMMAND_SHOWPROMPT	   #5691
_COMMAND_VAR_INIT	Alias  COMMAND_VAR_INIT		   #5690
_COMMAND_VAR_LIST	Alias  COMMAND_VAR_LIST		   #5688
_COMMAND_VAR_NEXTFREE	Alias  COMMAND_VAR_NEXTFREE	   #5689
_COMMAND_VAR_SEARCH	Alias  COMMAND_VAR_SEARCH	   #5687
_COMMAND_VAR_SET	Alias  COMMAND_VAR_SET		   #5684
_COMMAND_VAR_UNSET	Alias  COMMAND_VAR_UNSET	   #5686
_COMMAND_VAR_VALUE	Alias  COMMAND_VAR_VALUE	   #5685
_DEMO			Alias  DEMO			   #5620
_DEMO_LINHA		Alias  DEMO_LINHA		   #5619
_END_COMMAND		Alias  END_COMMAND		   #5634
_EXIT			Near   ----:---- Extern		   3762	 4650  #5640
_EXITCODE		Alias  EXITCODE			   #5618
_FORK			Near   ----:---- Extern		   3835	 4724  #5644
_GETCH			Near   ----:---- Extern		   293	366  #5662
_GETCOLOR		Near   ----:---- Extern		   1365	 1526  #5658
_GETDATE		Near   ----:---- Extern		   2093	 #5653
_GETPID			Near   ----:---- Extern		   3515	 4548  #5639
_GETTIME		Near   ----:---- Extern		   2230	 #5652
_GOTOXY			Near   ----:---- Extern		   1307	 1322  #5654
_HISTORY		Alias  HISTORY			   #5629
_HISTORY_INI		Alias  HISTORY_INI		   #5627
_HISTORY_LEN		Alias  HISTORY_LEN		   #5628
_HISTORY_NXT		Alias  HISTORY_NXT		   #5626
_HISTORY_POS		Alias  HISTORY_POS		   #5625
_INTTOSTR		Near   ----:---- Extern		   1159	 2498  2554  2610  2744	 2801  2858  2915  3520	 3932  3959  4045 +
							   4072	 4179  4209  4239  4285	 4399  4426  4553  #5646
_KILL			Near   ----:---- Extern		   3046	 #5643
_MINISO_SEM		Word   ----:---- Extern		   4156	 4175  4205  4235  #5617
_MINISO_THREAD		Word   ----:---- Extern		   2487	 2550  2606  2662  2740	 2797  2854  2911  #5621
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 107
Symbol Table



_NUM_VAR		Alias  NUM_VAR			   #5624
_PALAVRA		Alias  PALAVRA			   #5632
_PUTCH			Near   ----:---- Extern		   412	443  823  1221	1315  1397  1560  1594	2041  2125  2156  2185	  +
							   2262	 2295  2326  2420  2518	 2574  2630  2764  2821	 2878  2935  2956 +
							   3364	 3395  4255  #5663
_PUTSTR			Near   ----:---- Extern		   161	171  181  195  205  211	 217  231  241	251  435  656  786  1184  +
							   1379	 1552  1578  2003  2021	 2033  2117  2148  2177	 2254  2287  2318 +
							   2403	 2412  2471  2531  2540	 2587  2596  2643  2652	 2676  2730  2777 +
							   2787	 2834  2844  2891  2901	 2948  3021  3197  3247	 3341  3375  3795 +
							   3885	 3922  3940  3949  3967	 3976  4035  4053  4062	 4080  4089  4141 +
							   4166	 4187  4196  4217  4226	 4247  4275  4293  4302	 4346  4389  4407 +
							   4416	 4434  4443  4684  4771	 4829  #5660
_PUTSTRXY		Near   ----:---- Extern		   3457	 3470  3483  3496  3509	 3533  3566  3603  3640	 3677  3714  3751 +
							   4490	 4503  4516  4529  4542	 4566  4598  4638  #5659
_REBOOT			Near   ----:---- Extern		   1929	 #5645
_S@			Alias  S@			   #5694
_SEMCREATE		Near   ----:---- Extern		   4372	 #5638
_SEMDESTROY		Near   ----:---- Extern		   4854	 #5635
_SEMDOWN		Near   ----:---- Extern		   4609	 #5636
_SEMID			Word   _BSS:0014		   4608	 4704  #4867  5616
_SEMUP			Near   ----:---- Extern		   4796	 #5637
_SEM_APLIC		Near   _TEXT:12BC		   #4465  4722	5615
_SETCOLOR		Near   ----:---- Extern		   142	153  176  186  200  222	 236  1372  1388  1567	1587  #5657
_STRCMP			Near   ----:---- Extern		   1111	 1653  3325  #5650
_STRCPY			Near   ----:---- Extern		   648	778  938  973  1040  1878  1893	 #5651
_STRLEN			Near   ----:---- Extern		   665	795  946  1809	1826  2506  2562  2618	2752  2809  2866  2923	  +
							   #5649
_UNSIGNEDTOSTR		Near   ----:---- Extern		   2109	 2140  2169  2246  2279	 2310  3553  3590  3627	 3664  3701  3738 +
							   4585	 4625  #5647
_VAR			Alias  VAR			   #5623
_WAIT			Near   ----:---- Extern		   4025	 #5642
_WAITPID		Near   ----:---- Extern		   3913	 #5641
_WHEREX			Near   ----:---- Extern		   1291	 #5656
_WHEREY			Near   ----:---- Extern		   1296	 #5655

Macro Name						   Cref	(defined at #)

$COMM							   #1

Groups & Segments	Bit Size Align	Combine	Class	   Cref	(defined at #)

DGROUP			Group				   #12	13  27	28  30	31  33	34  36	37  39	40  42	43  45	46  48	49+
							   51  52  54  55  57  58  60  61  63  64  66  67  69  70  72  73  75  76 +
							   78  79  81  82  84  85  87  88  90  91  93  94  123	127  131  135  159+
							   169	179  193  203  209  215	 229  239  249	263  266  274  277  390	  +
							   425	433  447  484  495  500	 505  507  521	526  543  548  550  554	  +
							   559	574  575  584  585  590	 597  602  609	640  643  646  654  663	  +
							   681	685  692  697  699  704	 711  722  726	731  736  737  742  764	  +
							   770	773  776  784  793  817	 828  834  886	907  911  917  936  944	  +
							   967	971  979  983  984  1032  1035	1038  1045  1050  1057	1062  1069+
							   1075	 1080  1087  1108  1109	 1110  1141  1148  1168	 1182  1192  1227 +
							   1230	 1349  1429  1437  1446	 1466  1489  1541  1550	 1576  1649  1717 +
							   1725	 1729  1782  1876  1891	 1963  2001  2020  2032	 2401  2410  2469 +
							   2487	 2496  2504  2529  2538	 2550  2552  2560  2585	 2594  2606  2608 +
							   2616	 2641  2650  2662  2673	 2685  2692  2699  2706	 2713  2720  2728 +
							   2740	 2742  2750
  _BSS			16  0627 Word	Public	BSS	   12  #18  #2437  #4866
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 108
Symbol Table



  _DATA			16  0B1C Word	Public	DATA	   12  #14  #22	 #3414	#4894
_TEXT			16  148B Byte	Public	CODE	   #10	13  #97	 101  1279  1336  1409	1456  1513  1614  1681	1746  1796+
							   1911	 1947  1979  2065  2205	 2346  2382  #2440  2444  2992	3080  3227+
							   3298	 #3422	3426  3776  3863  3996	4110  4323  4464  4664	4752  4810+
							   #5613
Turbo Assembler	 Version 3.1	    11/01/17 22:46:18	    Page 109
Error Summary



*Warning* command.ASM(3425) Reserved word used as symbol: EXITCODE
