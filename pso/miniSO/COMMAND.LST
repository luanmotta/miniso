Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 1
command.ASM



      1				     $comm   macro   name,dist,size,count
      2					     comm    dist name[size]:BYTE:count
      3					     endm
      4					     ?debug  V 300h
      5					     ?debug  S "command.c"
      6					     ?debug  C E969AE6C4B09636F6D6D616E642E63
      7					     ?debug  C E94FAE6C4B086D696E69534F2E68
      8					     ?debug  C E9BA9C6C4B09636F6D6D616E642E68
      9					     ?debug  C E990AC6C4B056C69622E68
     10	0000			     _TEXT   segment byte public 'CODE'
     11	0000			     _TEXT   ends
     12				     DGROUP  group   _DATA,_BSS
     13					     assume  cs:_TEXT,ds:DGROUP
     14	0000			     _DATA   segment word public 'DATA'
     15	0000			     d@	     label   byte
     16	0000			     d@w     label   word
     17	0000			     _DATA   ends
     18	0000			     _BSS    segment word public 'BSS'
     19	0000			     b@	     label   byte
     20	0000			     b@w     label   word
     21	0000			     _BSS    ends
     22	0000			     _DATA   segment word public 'DATA'
     23	0000			     num_var label   word
     24	0000  00			     db	     0
     25	0001  00			     db	     0
     26	0002			     commands	     label   word
     27	0002  009Cr			     dw	     DGROUP:s@
     28	0004  009Er			     dw	     DGROUP:s@+2
     29	0006  07EDr			     dw	     _cmd_help
     30	0008  00C9r			     dw	     DGROUP:s@+45
     31	000A  00CEr			     dw	     DGROUP:s@+50
     32	000C  07EDr			     dw	     _cmd_help
     33	000E  00F6r			     dw	     DGROUP:s@+90
     34	0010  00FAr			     dw	     DGROUP:s@+94
     35	0012  0996r			     dw	     _cmd_ver
     36	0014  0122r			     dw	     DGROUP:s@+134
     37	0016  0127r			     dw	     DGROUP:s@+139
     38	0018  0845r			     dw	     _cmd_date
     39	001A  0145r			     dw	     DGROUP:s@+169
     40	001C  014Ar			     dw	     DGROUP:s@+174
     41	001E  08E0r			     dw	     _cmd_time
     42	0020  0168r			     dw	     DGROUP:s@+204
     43	0022  016Cr			     dw	     DGROUP:s@+208
     44	0024  0980r			     dw	     _cmd_cls
     45	0026  018Ar			     dw	     DGROUP:s@+238
     46	0028  0190r			     dw	     DGROUP:s@+244
     47	002A  0980r			     dw	     _cmd_cls
     48	002C  01ACr			     dw	     DGROUP:s@+272
     49	002E  01B3r			     dw	     DGROUP:s@+279
     50	0030  07C2r			     dw	     _cmd_reboot
     51	0032  01D8r			     dw	     DGROUP:s@+316
     52	0034  01DDr			     dw	     DGROUP:s@+321
     53	0036  07D8r			     dw	     _cmd_exit
     54	0038  0200r			     dw	     DGROUP:s@+356
     55	003A  0205r			     dw	     DGROUP:s@+361
     56	003C  07D8r			     dw	     _cmd_exit
     57	003E  0228r			     dw	     DGROUP:s@+396
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 2
command.ASM



     58	0040  022Br			     dw	     DGROUP:s@+399
     59	0042  09C5r			     dw	     _cmd_ps
     60	0044  0261r			     dw	     DGROUP:s@+453
     61	0046  0266r			     dw	     DGROUP:s@+458
     62	0048  0C6Br			     dw	     _cmd_kill
     63	004A  0291r			     dw	     DGROUP:s@+501
     64	004C  0296r			     dw	     DGROUP:s@+506
     65	004E  0FE4r			     dw	     _cmd_demo
     66	0050  02CFr			     dw	     DGROUP:s@+563
     67	0052  02D3r			     dw	     DGROUP:s@+567
     68	0054  0CB3r			     dw	     _cmd_set
     69	0056  0312r			     dw	     DGROUP:s@+630
     70	0058  0318r			     dw	     DGROUP:s@+636
     71	005A  0D4Cr			     dw	     _cmd_unset
     72	005C  0338r			     dw	     DGROUP:s@+668
     73	005E  033Dr			     dw	     DGROUP:s@+673
     74	0060  0D8Cr			     dw	     _cmd_echo
     75	0062  0360r			     dw	     DGROUP:s@+708
     76	0064  0368r			     dw	     DGROUP:s@+716
     77	0066  1038r			     dw	     _cmd_waitpid
     78	0068  0399r			     dw	     DGROUP:s@+765
     79	006A  039Er			     dw	     DGROUP:s@+770
     80	006C  10C7r			     dw	     _cmd_wait
     81	006E  03CBr			     dw	     DGROUP:s@+815
     82	0070  03D1r			     dw	     DGROUP:s@+821
     83	0072  113Fr			     dw	     _cmd_semls
     84	0074  03FAr			     dw	     DGROUP:s@+862
     85	0076  0404r			     dw	     DGROUP:s@+872
     86	0078  1235r			     dw	     _cmd_semcreate
     87	007A  0420r			     dw	     DGROUP:s@+900
     88	007C  0428r			     dw	     DGROUP:s@+908
     89	007E  13CDr			     dw	     _cmd_semtest
     90	0080  0457r			     dw	     DGROUP:s@+955
     91	0082  045Dr			     dw	     DGROUP:s@+961
     92	0084  1421r			     dw	     _cmd_semup
     93	0086  048Er			     dw	     DGROUP:s@+1010
     94	0088  0499r			     dw	     DGROUP:s@+1021
     95	008A  145Ar			     dw	     _cmd_semdestroy
     96	008C  04B7r			     dw	     DGROUP:s@+1051
     97	008E  04BCr			     dw	     DGROUP:s@+1056
     98	0090  1493r			     dw	     _cmd_stop
     99	0092  04E7r			     dw	     DGROUP:s@+1099
    100	0094  04EEr			     dw	     DGROUP:s@+1106
    101	0096  14DFr			     dw	     _cmd_resume
    102	0098			     _DATA   ends
    103	0000			     _TEXT   segment byte public 'CODE'
    104					;
    105					;    void command()
    106					;
    107					     assume  cs:_TEXT
    108	0000			     _command	     proc    near
    109	0000  55			     push    bp
    110	0001  8B EC			     mov     bp,sp
    111	0003  83 EC 22			     sub     sp,34
    112	0006  56			     push    si
    113	0007  57			     push    di
    114					;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 3
command.ASM



    115					;    {
    116					;      char car,str[10];
    117					;      int numcar;
    118					;      int i,achou,pos;
    119					;      int novalinha,res,argc;
    120					;      char far	*ptrline,far *var;
    121					;
    122					;      /* InicializaÁıes... */
    123					;      numcar =	0;
    124					;
    125	0008  33 F6			     xor     si,si
    126					;
    127					;      end_command = 0;
    128					;
    129	000A  C7 06 0625r 0000		     mov     word ptr DGROUP:end_command,0
    130					;
    131					;      history_ini = 0;
    132					;
    133	0010  C7 06 020Er 0000		     mov     word ptr DGROUP:history_ini,0
    134					;
    135					;      history_nxt = 0;
    136					;
    137	0016  C7 06 020Cr 0000		     mov     word ptr DGROUP:history_nxt,0
    138					;
    139					;      history_pos = -1;
    140					;
    141	001C  C7 06 020Ar FFFF		     mov     word ptr DGROUP:history_pos,-1
    142					;
    143					;      /* Mensagem inicial */
    144					;      setcolor(7);
    145					;
    146	0022  B8 0007			     mov     ax,7
    147	0025  50			     push    ax
    148	0026  E8 0000e			     call    near ptr _setcolor
    149	0029  59			     pop     cx
    150					;
    151					;      clrscr();
    152					;
    153	002A  E8 0000e			     call    near ptr _clrscr
    154					;
    155					;      setcolor(LOGOCOLOR);
    156					;
    157	002D  B8 0001			     mov     ax,1
    158	0030  50			     push    ax
    159	0031  E8 0000e			     call    near ptr _setcolor
    160	0034  59			     pop     cx
    161					;
    162					;      putstr("			 ‹‹‹‹‹‹‹  ‹‹‹‹‹‹\n");
    163					;
    164	0035  1E			     push    ds
    165	0036  B8 0517r			     mov     ax,offset DGROUP:s@+1147
    166	0039  50			     push    ax
    167	003A  E8 0000e			     call    near ptr _putstr
    168	003D  59			     pop     cx
    169	003E  59			     pop     cx
    170					;
    171					;      putstr("	‹‹‹‹‹  ‹  ‹‹‹  ‹ €€   ﬂﬂ  €€  €€  "); setcolor(7); putstr("MinisSistema	    +
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 4
command.ASM



    172				     Operacional\n"); setcolor(LOGOCOLOR);
    173					;
    174	003F  1E			     push    ds
    175	0040  B8 053Ar			     mov     ax,offset DGROUP:s@+1182
    176	0043  50			     push    ax
    177	0044  E8 0000e			     call    near ptr _putstr
    178	0047  59			     pop     cx
    179	0048  59			     pop     cx
    180	0049  B8 0007			     mov     ax,7
    181	004C  50			     push    ax
    182	004D  E8 0000e			     call    near ptr _setcolor
    183	0050  59			     pop     cx
    184	0051  1E			     push    ds
    185	0052  B8 055Er			     mov     ax,offset DGROUP:s@+1218
    186	0055  50			     push    ax
    187	0056  E8 0000e			     call    near ptr _putstr
    188	0059  59			     pop     cx
    189	005A  59			     pop     cx
    190	005B  B8 0001			     mov     ax,1
    191	005E  50			     push    ax
    192	005F  E8 0000e			     call    near ptr _setcolor
    193	0062  59			     pop     cx
    194					;
    195					;      putstr("‹€ € € ‹€ ‹€ € ‹€ ﬂﬂﬂﬂ€€€ €€€  €€  "); setcolor(7); putstr("Vs "); putstr    +
    196				     (miniSO_VERSION); putstr("\n"); setcolor(LOGO
    197					;
    198	0063  1E			     push    ds
    199	0064  B8 0578r			     mov     ax,offset DGROUP:s@+1244
    200	0067  50			     push    ax
    201	0068  E8 0000e			     call    near ptr _putstr
    202	006B  59			     pop     cx
    203	006C  59			     pop     cx
    204	006D  B8 0007			     mov     ax,7
    205	0070  50			     push    ax
    206	0071  E8 0000e			     call    near ptr _setcolor
    207	0074  59			     pop     cx
    208	0075  1E			     push    ds
    209	0076  B8 059Cr			     mov     ax,offset DGROUP:s@+1280
    210	0079  50			     push    ax
    211	007A  E8 0000e			     call    near ptr _putstr
    212	007D  59			     pop     cx
    213	007E  59			     pop     cx
    214	007F  1E			     push    ds
    215	0080  B8 05A0r			     mov     ax,offset DGROUP:s@+1284
    216	0083  50			     push    ax
    217	0084  E8 0000e			     call    near ptr _putstr
    218	0087  59			     pop     cx
    219	0088  59			     pop     cx
    220	0089  1E			     push    ds
    221	008A  B8 05A5r			     mov     ax,offset DGROUP:s@+1289
    222	008D  50			     push    ax
    223	008E  E8 0000e			     call    near ptr _putstr
    224	0091  59			     pop     cx
    225	0092  59			     pop     cx
    226	0093  B8 0001			     mov     ax,1
    227	0096  50			     push    ax
    228	0097  E8 0000e			     call    near ptr _setcolor
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 5
command.ASM



    229	009A  59			     pop     cx
    230					;
    231					;      putstr("€€ € € €€ €€ € €€ €€‹‹€€€ €€€‹‹€€  "); setcolor(7); putstr("por Roland	    +
    232				     Teodorowitsch\n");
    233					;
    234	009B  1E			     push    ds
    235	009C  B8 05A7r			     mov     ax,offset DGROUP:s@+1291
    236	009F  50			     push    ax
    237	00A0  E8 0000e			     call    near ptr _putstr
    238	00A3  59			     pop     cx
    239	00A4  59			     pop     cx
    240	00A5  B8 0007			     mov     ax,7
    241	00A8  50			     push    ax
    242	00A9  E8 0000e			     call    near ptr _setcolor
    243	00AC  59			     pop     cx
    244	00AD  1E			     push    ds
    245	00AE  B8 05CBr			     mov     ax,offset DGROUP:s@+1327
    246	00B1  50			     push    ax
    247	00B2  E8 0000e			     call    near ptr _putstr
    248	00B5  59			     pop     cx
    249	00B6  59			     pop     cx
    250					;
    251					;
    252					;      putstr("\nDigite	'help' ou '?' para ajuda...\n\n");
    253					;
    254	00B7  1E			     push    ds
    255	00B8  B8 05E5r			     mov     ax,offset DGROUP:s@+1353
    256	00BB  50			     push    ax
    257	00BC  E8 0000e			     call    near ptr _putstr
    258	00BF  59			     pop     cx
    259	00C0  59			     pop     cx
    260					;
    261					;      /* Inicializa vari·veis de ambiente */
    262					;      command_var_init();
    263					;
    264	00C1  E8 04F7			     call    near ptr command_var_init
    265					;
    266					;      command_var_set("PROMPT","miniSO>");
    267					;
    268	00C4  1E			     push    ds
    269	00C5  B8 0612r			     mov     ax,offset DGROUP:s@+1398
    270	00C8  50			     push    ax
    271	00C9  1E			     push    ds
    272	00CA  B8 060Br			     mov     ax,offset DGROUP:s@+1391
    273	00CD  50			     push    ax
    274	00CE  E8 066B			     call    near ptr command_var_set
    275	00D1  83 C4 08			     add     sp,8
    276					;
    277					;      command_var_set("ERRORLEVEL","0");
    278					;
    279	00D4  1E			     push    ds
    280	00D5  B8 0625r			     mov     ax,offset DGROUP:s@+1417
    281	00D8  50			     push    ax
    282	00D9  1E			     push    ds
    283	00DA  B8 061Ar			     mov     ax,offset DGROUP:s@+1406
    284	00DD  50			     push    ax
    285	00DE  E8 065B			     call    near ptr command_var_set
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 6
command.ASM



    286	00E1  83 C4 08			     add     sp,8
    287					;
    288					;      /* Imprime sinal	de pronto */
    289					;      command_showprompt();
    290					;
    291	00E4  E8 0488			     call    near ptr command_showprompt
    292	00E7  E9 0427			     jmp     @1@3362
    293	00EA			     @1@58:
    294					;
    295					;      /* LaÁo para interpretaÁ„o de comandos */
    296					;      while ( !end_command )  {
    297					;	     car=getch();
    298					;
    299	00EA  E8 0000e			     call    near ptr _getch
    300	00ED  88 46 FF			     mov     byte ptr [bp-1],al
    301					;
    302					;	     switch (car)  {
    303					;
    304	00F0  8A 46 FF			     mov     al,byte ptr [bp-1]
    305	00F3  98			     cbw
    306	00F4  89 46 E0			     mov     word ptr [bp-32],ax
    307	00F7  B9 0005			     mov     cx,5
    308	00FA  BB 0531r			     mov     bx,offset @1@C3234
    309	00FD			     @1@142:
    310	00FD  2E: 8B 07			     mov     ax,word ptr cs:[bx]
    311	0100  3B 46 E0			     cmp     ax,word ptr [bp-32]
    312	0103  74 08			     je	     short @1@226
    313	0105  83 C3 02			     add     bx,2
    314	0108  E2 F3			     loop    short @1@142
    315	010A  E9 03EE			     jmp     @1@3306
    316	010D			     @1@226:
    317	010D  2E: FF 67	0A		     jmp     word ptr cs:[bx+10]
    318	0111			     @1@254:
    319					;
    320					;		    case 9:
    321					;			 break;
    322					;
    323	0111  E9 03FD			     jmp     @1@3362
    324	0114			     @1@282:
    325					;
    326					;		    case 8:
    327					;			 if (numcar>0)	{
    328					;
    329	0114  0B F6			     or	     si,si
    330	0116  7E 04			     jle     short @1@338
    331					;
    332					;			    --numcar;
    333					;
    334	0118  4E			     dec     si
    335					;
    336					;			    command_backspace();
    337					;
    338	0119  E8 0429			     call    near ptr command_backspace
    339	011C			     @1@338:
    340					;
    341					;			 }
    342					;			 break;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 7
command.ASM



    343					;
    344	011C  E9 03F2			     jmp     @1@3362
    345	011F			     @1@366:
    346	011F  EB 04			     jmp     short @1@422
    347	0121			     @1@394:
    348					;
    349					;		    case 27:
    350					;			 /* Limpa a linha de comandos */
    351					;			 while (numcar>0)  {
    352					;			       --numcar;
    353					;
    354	0121  4E			     dec     si
    355					;
    356					;			       command_backspace();
    357					;
    358	0122  E8 0420			     call    near ptr command_backspace
    359	0125			     @1@422:
    360	0125  0B F6			     or	     si,si
    361	0127  7F F8			     jg	     short @1@394
    362					;
    363					;			 }
    364					;			 break;
    365					;
    366	0129  E9 03E5			     jmp     @1@3362
    367	012C			     @1@478:
    368					;
    369					;		    case 0:
    370					;			 car=getch();
    371					;
    372	012C  E8 0000e			     call    near ptr _getch
    373	012F  88 46 FF			     mov     byte ptr [bp-1],al
    374					;
    375					;			 switch	(car)  {
    376					;
    377	0132  8A 46 FF			     mov     al,byte ptr [bp-1]
    378	0135  98			     cbw
    379	0136  89 46 DE			     mov     word ptr [bp-34],ax
    380	0139  B9 0004			     mov     cx,4
    381	013C  BB 0521r			     mov     bx,offset @1@C3330
    382	013F			     @1@562:
    383	013F  2E: 8B 07			     mov     ax,word ptr cs:[bx]
    384	0142  3B 46 DE			     cmp     ax,word ptr [bp-34]
    385	0145  74 08			     je	     short @1@646
    386	0147  83 C3 02			     add     bx,2
    387	014A  E2 F3			     loop    short @1@562
    388	014C  E9 01C0			     jmp     @1@2102
    389	014F			     @1@646:
    390	014F  2E: FF 67	08		     jmp     word ptr cs:[bx+8]
    391	0153			     @1@674:
    392					;
    393					;				case 65: /* F7 */
    394					;				     history_pos = -1;
    395					;
    396	0153  C7 06 020Ar FFFF		     mov     word ptr DGROUP:history_pos,-1
    397	0159  EB 04			     jmp     short @1@730
    398	015B			     @1@702:
    399					;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 8
command.ASM



    400					;				     /*	Limpa a	linha de comandos */
    401					;				     while (numcar>0)  {
    402					;					   --numcar;
    403					;
    404	015B  4E			     dec     si
    405					;
    406					;					   command_backspace();
    407					;
    408	015C  E8 03E6			     call    near ptr command_backspace
    409	015F			     @1@730:
    410	015F  0B F6			     or	     si,si
    411	0161  7F F8			     jg	     short @1@702
    412					;
    413					;				     }
    414					;				     putch('\n');
    415					;
    416	0163  B8 000A			     mov     ax,10
    417	0166  50			     push    ax
    418	0167  E8 0000e			     call    near ptr _putch
    419	016A  59			     pop     cx
    420					;
    421					;				     /*	Imprime	o histÛrico */
    422					;				     for (i=0;i<history_len;++i)  {
    423					;
    424	016B  33 FF			     xor     di,di
    425	016D  EB 25			     jmp     short @1@842
    426	016F			     @1@786:
    427					;
    428					;					 putstr(history[(history_ini+i)%MAXHISTORY]);
    429					;
    430	016F  1E			     push    ds
    431	0170  A1 020Er			     mov     ax,word ptr DGROUP:history_ini
    432	0173  03 C7			     add     ax,di
    433	0175  BB 000A			     mov     bx,10
    434	0178  99			     cwd
    435	0179  F7 FB			     idiv    bx
    436	017B  BB 001F			     mov     bx,31
    437	017E  8B C2			     mov     ax,dx
    438	0180  F7 EB			     imul    bx
    439	0182  05 0212r			     add     ax,offset DGROUP:history
    440	0185  50			     push    ax
    441	0186  E8 0000e			     call    near ptr _putstr
    442	0189  59			     pop     cx
    443	018A  59			     pop     cx
    444					;
    445					;					 putch('\n');
    446					;
    447	018B  B8 000A			     mov     ax,10
    448	018E  50			     push    ax
    449	018F  E8 0000e			     call    near ptr _putch
    450	0192  59			     pop     cx
    451	0193  47			     inc     di
    452	0194			     @1@842:
    453	0194  3B 3E 0210r		     cmp     di,word ptr DGROUP:history_len
    454	0198  7C D5			     jl	     short @1@786
    455					;
    456					;				     }
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 9
command.ASM



    457					;				     command_showprompt();
    458					;
    459	019A  E8 03D2			     call    near ptr command_showprompt
    460					;
    461					;				     break;
    462					;
    463	019D  E9 016F			     jmp     @1@2102
    464	01A0			     @1@898:
    465					;
    466					;				case 75: /* Seta para esquerda */
    467					;				     if	(numcar>0)  {
    468					;
    469	01A0  0B F6			     or	     si,si
    470	01A2  7E 04			     jle     short @1@954
    471					;
    472					;					--numcar;
    473					;
    474	01A4  4E			     dec     si
    475					;
    476					;					command_backspace();
    477					;
    478	01A5  E8 039D			     call    near ptr command_backspace
    479	01A8			     @1@954:
    480					;
    481					;				     }
    482					;				     break;
    483					;
    484	01A8  E9 0164			     jmp     @1@2102
    485	01AB			     @1@982:
    486					;
    487					;				case 72: /* Seta para cima */
    488					;				     if	(history_len>0)	 {
    489					;
    490	01AB  83 3E 0210r 00		     cmp     word ptr DGROUP:history_len,0
    491	01B0  7F 03			     jg	     @@0
    492	01B2  E9 00C3			     jmp     @1@1598
    493	01B5			     @@0:
    494					;
    495					;					novalinha=0;
    496					;
    497	01B5  C7 46 EE 0000		     mov     word ptr [bp-18],0
    498					;
    499					;					if (history_len<MAXHISTORY)  {
    500					;
    501	01BA  83 3E 0210r 0A		     cmp     word ptr DGROUP:history_len,10
    502	01BF  7D 27			     jge     short @1@1178
    503					;
    504					;					   if (history_pos==-1)	 {
    505					;
    506	01C1  83 3E 020Ar FF		     cmp     word ptr DGROUP:history_pos,-1
    507	01C6  75 0E			     jne     short @1@1094
    508					;
    509					;					      history_pos=history_nxt-1;
    510					;
    511	01C8  A1 020Cr			     mov     ax,word ptr DGROUP:history_nxt
    512	01CB  48			     dec     ax
    513	01CC  A3 020Ar			     mov     word ptr DGROUP:history_pos,ax
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 10
command.ASM



    514					;
    515					;					      novalinha=1;
    516					;
    517	01CF  C7 46 EE 0001		     mov     word ptr [bp-18],1
    518					;
    519					;					   }
    520					;
    521	01D4  EB 10			     jmp     short @1@1150
    522	01D6			     @1@1094:
    523					;
    524					;					   else	 {
    525					;					      if (history_pos>0)  {
    526					;
    527	01D6  83 3E 020Ar 00		     cmp     word ptr DGROUP:history_pos,0
    528	01DB  7E 09			     jle     short @1@1150
    529					;
    530					;						 history_pos--;
    531					;
    532	01DD  FF 0E 020Ar		     dec     word ptr DGROUP:history_pos
    533					;
    534					;						 novalinha=1;
    535					;
    536	01E1  C7 46 EE 0001		     mov     word ptr [bp-18],1
    537	01E6			     @1@1150:
    538					;
    539					;					      }
    540					;					   }
    541					;					}
    542					;
    543	01E6  EB 52			     jmp     short @1@1458
    544	01E8			     @1@1178:
    545					;
    546					;					else  {
    547					;					   if (history_pos==-1)	 {
    548					;
    549	01E8  83 3E 020Ar FF		     cmp     word ptr DGROUP:history_pos,-1
    550	01ED  75 1B			     jne     short @1@1290
    551					;
    552					;					      history_pos=history_nxt-1;
    553					;
    554	01EF  A1 020Cr			     mov     ax,word ptr DGROUP:history_nxt
    555	01F2  48			     dec     ax
    556	01F3  A3 020Ar			     mov     word ptr DGROUP:history_pos,ax
    557					;
    558					;					      if (history_pos<0)
    559					;
    560	01F6  83 3E 020Ar 00		     cmp     word ptr DGROUP:history_pos,0
    561	01FB  7D 06			     jge     short @1@1262
    562					;
    563					;						 history_pos=MAXHISTORY-1;
    564					;
    565	01FD  C7 06 020Ar 0009		     mov     word ptr DGROUP:history_pos,9
    566	0203			     @1@1262:
    567					;
    568					;					      novalinha=1;
    569					;
    570	0203  C7 46 EE 0001		     mov     word ptr [bp-18],1
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 11
command.ASM



    571					;
    572					;					   }
    573					;
    574	0208  EB 30			     jmp     short @1@1458
    575	020A			     @1@1290:
    576					;
    577					;					   else	 {
    578					;					      if (history_pos!=history_ini)  {
    579					;
    580	020A  A1 020Ar			     mov     ax,word ptr DGROUP:history_pos
    581	020D  3B 06 020Er		     cmp     ax,word ptr DGROUP:history_ini
    582	0211  74 27			     je	     short @1@1458
    583					;
    584					;						 novalinha=1;
    585					;
    586	0213  C7 46 EE 0001		     mov     word ptr [bp-18],1
    587					;
    588					;						 if (history_pos>history_ini)
    589					;
    590	0218  A1 020Ar			     mov     ax,word ptr DGROUP:history_pos
    591	021B  3B 06 020Er		     cmp     ax,word ptr DGROUP:history_ini
    592	021F  7E 06			     jle     short @1@1374
    593					;
    594					;						    --history_pos;
    595					;
    596	0221  FF 0E 020Ar		     dec     word ptr DGROUP:history_pos
    597	0225  EB 13			     jmp     short @1@1458
    598	0227			     @1@1374:
    599					;
    600					;						 else  {  /* history_pos<history_ini */
    601					;						    if (history_pos>0)
    602					;
    603	0227  83 3E 020Ar 00		     cmp     word ptr DGROUP:history_pos,0
    604	022C  7E 06			     jle     short @1@1430
    605					;
    606					;						       history_pos--;
    607					;
    608	022E  FF 0E 020Ar		     dec     word ptr DGROUP:history_pos
    609	0232  EB 06			     jmp     short @1@1458
    610	0234			     @1@1430:
    611					;
    612					;						    else
    613					;						       history_pos=MAXHISTORY-1;
    614					;
    615	0234  C7 06 020Ar 0009		     mov     word ptr DGROUP:history_pos,9
    616	023A			     @1@1458:
    617					;
    618					;						  }
    619					;					      }
    620					;					   }
    621					;					}
    622					;					if (novalinha)	{
    623					;
    624	023A  83 7E EE 00		     cmp     word ptr [bp-18],0
    625	023E  74 38			     je	     short @1@1598
    626	0240  EB 04			     jmp     short @1@1542
    627	0242			     @1@1514:
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 12
command.ASM



    628					;
    629					;					   /* Limpa a linha de comandos	*/
    630					;					   while (numcar>0)  {
    631					;						 --numcar;
    632					;
    633	0242  4E			     dec     si
    634					;
    635					;						 command_backspace();
    636					;
    637	0243  E8 02FF			     call    near ptr command_backspace
    638	0246			     @1@1542:
    639	0246  0B F6			     or	     si,si
    640	0248  7F F8			     jg	     short @1@1514
    641					;
    642					;					   }
    643					;					   strcpy(cmdline,history[history_pos]);
    644					;
    645	024A  1E			     push    ds
    646	024B  A1 020Ar			     mov     ax,word ptr DGROUP:history_pos
    647	024E  BA 001F			     mov     dx,31
    648	0251  F7 EA			     imul    dx
    649	0253  05 0212r			     add     ax,offset DGROUP:history
    650	0256  50			     push    ax
    651	0257  1E			     push    ds
    652	0258  B8 0606r			     mov     ax,offset DGROUP:cmdline
    653	025B  50			     push    ax
    654	025C  E8 0000e			     call    near ptr _strcpy
    655	025F  83 C4 08			     add     sp,8
    656					;
    657					;					   putstr(cmdline);
    658					;
    659	0262  1E			     push    ds
    660	0263  B8 0606r			     mov     ax,offset DGROUP:cmdline
    661	0266  50			     push    ax
    662	0267  E8 0000e			     call    near ptr _putstr
    663	026A  59			     pop     cx
    664	026B  59			     pop     cx
    665					;
    666					;					   numcar=strlen(cmdline);
    667					;
    668	026C  1E			     push    ds
    669	026D  B8 0606r			     mov     ax,offset DGROUP:cmdline
    670	0270  50			     push    ax
    671	0271  E8 0000e			     call    near ptr _strlen
    672	0274  59			     pop     cx
    673	0275  59			     pop     cx
    674	0276  8B F0			     mov     si,ax
    675	0278			     @1@1598:
    676					;
    677					;					}
    678					;				     }
    679					;				     break;
    680					;
    681	0278  E9 0094			     jmp     @1@2102
    682	027B			     @1@1626:
    683					;
    684					;				case 80: /* Seta para baixo */
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 13
command.ASM



    685					;				     if	(history_len>0 && history_pos!=-1)  {
    686					;
    687	027B  83 3E 0210r 00		     cmp     word ptr DGROUP:history_len,0
    688	0280  7F 03			     jg	     @@1
    689	0282  E9 0088			     jmp     @1@2074
    690	0285			     @@1:
    691	0285  83 3E 020Ar FF		     cmp     word ptr DGROUP:history_pos,-1
    692	028A  75 03			     jne     @@2
    693	028C  EB 7F 90			     jmp     @1@2074
    694	028F			     @@2:
    695					;
    696					;					if (history_len<MAXHISTORY)  {
    697					;
    698	028F  83 3E 0210r 0A		     cmp     word ptr DGROUP:history_len,10
    699	0294  7D 18			     jge     short @1@1822
    700					;
    701					;					   if (history_pos<history_len-1)
    702					;
    703	0296  A1 0210r			     mov     ax,word ptr DGROUP:history_len
    704	0299  48			     dec     ax
    705	029A  3B 06 020Ar		     cmp     ax,word ptr DGROUP:history_pos
    706	029E  7E 06			     jle     short @1@1766
    707					;
    708					;					      history_pos++;
    709					;
    710	02A0  FF 06 020Ar		     inc     word ptr DGROUP:history_pos
    711	02A4  EB 06			     jmp     short @1@1794
    712	02A6			     @1@1766:
    713					;
    714					;					   else
    715					;					      history_pos = -1;
    716					;
    717	02A6  C7 06 020Ar FFFF		     mov     word ptr DGROUP:history_pos,-1
    718	02AC			     @1@1794:
    719					;
    720					;					}
    721					;
    722	02AC  EB 20			     jmp     short @1@1934
    723	02AE			     @1@1822:
    724					;
    725					;					else  {
    726					;					   history_pos++;
    727					;
    728	02AE  FF 06 020Ar		     inc     word ptr DGROUP:history_pos
    729					;
    730					;					   if (history_pos>=MAXHISTORY)
    731					;
    732	02B2  83 3E 020Ar 0A		     cmp     word ptr DGROUP:history_pos,10
    733	02B7  7C 06			     jl	     short @1@1878
    734					;
    735					;					      history_pos = 0;
    736					;
    737	02B9  C7 06 020Ar 0000		     mov     word ptr DGROUP:history_pos,0
    738	02BF			     @1@1878:
    739					;
    740					;					   if (history_pos==history_nxt)
    741					;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 14
command.ASM



    742	02BF  A1 020Ar			     mov     ax,word ptr DGROUP:history_pos
    743	02C2  3B 06 020Cr		     cmp     ax,word ptr DGROUP:history_nxt
    744	02C6  75 06			     jne     short @1@1934
    745					;
    746					;					      history_pos = -1;
    747					;
    748	02C8  C7 06 020Ar FFFF		     mov     word ptr DGROUP:history_pos,-1
    749	02CE			     @1@1934:
    750	02CE  EB 04			     jmp     short @1@1990
    751	02D0			     @1@1962:
    752					;
    753					;					}
    754					;					/* Limpa a linha de comandos */
    755					;					while (numcar>0)  {
    756					;					      --numcar;
    757					;
    758	02D0  4E			     dec     si
    759					;
    760					;					      command_backspace();
    761					;
    762	02D1  E8 0271			     call    near ptr command_backspace
    763	02D4			     @1@1990:
    764	02D4  0B F6			     or	     si,si
    765	02D6  7F F8			     jg	     short @1@1962
    766					;
    767					;					}
    768					;					if (history_pos!=-1)  {
    769					;
    770	02D8  83 3E 020Ar FF		     cmp     word ptr DGROUP:history_pos,-1
    771	02DD  74 2E			     je	     short @1@2074
    772					;
    773					;					   strcpy(cmdline,history[history_pos]);
    774					;
    775	02DF  1E			     push    ds
    776	02E0  A1 020Ar			     mov     ax,word ptr DGROUP:history_pos
    777	02E3  BA 001F			     mov     dx,31
    778	02E6  F7 EA			     imul    dx
    779	02E8  05 0212r			     add     ax,offset DGROUP:history
    780	02EB  50			     push    ax
    781	02EC  1E			     push    ds
    782	02ED  B8 0606r			     mov     ax,offset DGROUP:cmdline
    783	02F0  50			     push    ax
    784	02F1  E8 0000e			     call    near ptr _strcpy
    785	02F4  83 C4 08			     add     sp,8
    786					;
    787					;					   putstr(cmdline);
    788					;
    789	02F7  1E			     push    ds
    790	02F8  B8 0606r			     mov     ax,offset DGROUP:cmdline
    791	02FB  50			     push    ax
    792	02FC  E8 0000e			     call    near ptr _putstr
    793	02FF  59			     pop     cx
    794	0300  59			     pop     cx
    795					;
    796					;					   numcar=strlen(cmdline);
    797					;
    798	0301  1E			     push    ds
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 15
command.ASM



    799	0302  B8 0606r			     mov     ax,offset DGROUP:cmdline
    800	0305  50			     push    ax
    801	0306  E8 0000e			     call    near ptr _strlen
    802	0309  59			     pop     cx
    803	030A  59			     pop     cx
    804	030B  8B F0			     mov     si,ax
    805	030D			     @1@2074:
    806					;
    807					;					}
    808					;				     }
    809					;				     break;
    810					;
    811	030D  EB 00			     jmp     short @1@2102
    812	030F			     @1@2102:
    813					;
    814					;			 }
    815					;			 break;
    816					;
    817	030F  E9 01FF			     jmp     @1@3362
    818	0312			     @1@2130:
    819					;
    820					;		    case 13:
    821					;			 history_pos = -1;
    822					;
    823	0312  C7 06 020Ar FFFF		     mov     word ptr DGROUP:history_pos,-1
    824					;
    825					;			 putch('\n');
    826					;
    827	0318  B8 000A			     mov     ax,10
    828	031B  50			     push    ax
    829	031C  E8 0000e			     call    near ptr _putch
    830	031F  59			     pop     cx
    831					;
    832					;			 cmdline[numcar]='\0';
    833					;
    834	0320  C6 84 0606r 00		     mov     byte ptr DGROUP:cmdline[si],0
    835					;
    836					;			 /* Divide a linha de comandos em comando e opÁıes */
    837					;			 ptrline = cmdline;
    838					;
    839	0325  8C 5E E8			     mov     word ptr [bp-24],ds
    840	0328  C7 46 E6 0606r		     mov     word ptr [bp-26],offset DGROUP:cmdline
    841					;
    842					;			 argc =	0;
    843					;
    844	032D  C7 46 EA 0000		     mov     word ptr [bp-22],0
    845					;
    846					;			 pos = 0;
    847					;
    848	0332  C7 46 F0 0000		     mov     word ptr [bp-16],0
    849	0337			     @1@2158:
    850	0337  EB 03			     jmp     short @1@2214
    851	0339			     @1@2186:
    852					;
    853					;			 while (1) {
    854					;			       while (*ptrline!='\0' &&	(*ptrline==' ' || *ptrline=='\t'))
    855					;				     ++ptrline;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 16
command.ASM



    856					;
    857	0339  FF 46 E6			     inc     word ptr [bp-26]
    858	033C			     @1@2214:
    859	033C  C4 5E E6			     les     bx,dword ptr [bp-26]
    860	033F  26: 80 3F	00		     cmp     byte ptr es:[bx],0
    861	0343  74 12			     je	     short @1@2298
    862	0345  C4 5E E6			     les     bx,dword ptr [bp-26]
    863	0348  26: 80 3F	20		     cmp     byte ptr es:[bx],32
    864	034C  74 EB			     je	     short @1@2186
    865	034E  C4 5E E6			     les     bx,dword ptr [bp-26]
    866	0351  26: 80 3F	09		     cmp     byte ptr es:[bx],9
    867	0355  74 E2			     je	     short @1@2186
    868	0357			     @1@2298:
    869					;
    870					;			       if (*ptrline=='\0')
    871					;
    872	0357  C4 5E E6			     les     bx,dword ptr [bp-26]
    873	035A  26: 80 3F	00		     cmp     byte ptr es:[bx],0
    874	035E  75 03			     jne     short @1@2354
    875					;
    876					;				  break;
    877					;
    878	0360  E9 00B4			     jmp     @1@2718
    879	0363			     @1@2354:
    880					;
    881					;			       i = 0;
    882					;
    883	0363  33 FF			     xor     di,di
    884	0365  EB 0E			     jmp     short @1@2410
    885	0367			     @1@2382:
    886					;
    887					;			       while (*ptrline!='\0' &&	*ptrline!=' ' && *ptrline!='\t')  {
    888					;				     palavra[i++] = *ptrline;
    889					;
    890	0367  C4 5E E6			     les     bx,dword ptr [bp-26]
    891	036A  26: 8A 07			     mov     al,byte ptr es:[bx]
    892	036D  88 85 05E7r		     mov     byte ptr DGROUP:palavra[di],al
    893	0371  47			     inc     di
    894					;
    895					;				     ++ptrline;
    896					;
    897	0372  FF 46 E6			     inc     word ptr [bp-26]
    898	0375			     @1@2410:
    899	0375  C4 5E E6			     les     bx,dword ptr [bp-26]
    900	0378  26: 80 3F	00		     cmp     byte ptr es:[bx],0
    901	037C  74 12			     je	     short @1@2494
    902	037E  C4 5E E6			     les     bx,dword ptr [bp-26]
    903	0381  26: 80 3F	20		     cmp     byte ptr es:[bx],32
    904	0385  74 09			     je	     short @1@2494
    905	0387  C4 5E E6			     les     bx,dword ptr [bp-26]
    906	038A  26: 80 3F	09		     cmp     byte ptr es:[bx],9
    907	038E  75 D7			     jne     short @1@2382
    908	0390			     @1@2494:
    909					;
    910					;			       }
    911					;			       palavra[i] = '\0';
    912					;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 17
command.ASM



    913	0390  C6 85 05E7r 00		     mov     byte ptr DGROUP:palavra[di],0
    914					;
    915					;			       if (palavra[0]=='$')  {
    916					;
    917	0395  80 3E 05E7r 24		     cmp     byte ptr DGROUP:palavra,36
    918	039A  75 39			     jne     short @1@2606
    919					;
    920					;				  var =	command_var_value(&palavra[1]);
    921					;
    922	039C  1E			     push    ds
    923	039D  B8 05E8r			     mov     ax,offset DGROUP:palavra+1
    924	03A0  50			     push    ax
    925	03A1  E8 036B			     call    near ptr command_var_value
    926	03A4  59			     pop     cx
    927	03A5  59			     pop     cx
    928	03A6  89 56 E4			     mov     word ptr [bp-28],dx
    929	03A9  89 46 E2			     mov     word ptr [bp-30],ax
    930					;
    931					;				  if (var!=NULL)  {
    932					;
    933	03AC  8B 46 E2			     mov     ax,word ptr [bp-30]
    934	03AF  0B 46 E4			     or	     ax,word ptr [bp-28]
    935	03B2  74 1F			     je	     short @1@2578
    936					;
    937					;				     strcpy(palavra,var);
    938					;
    939	03B4  FF 76 E4			     push    word ptr [bp-28]
    940	03B7  FF 76 E2			     push    word ptr [bp-30]
    941	03BA  1E			     push    ds
    942	03BB  B8 05E7r			     mov     ax,offset DGROUP:palavra
    943	03BE  50			     push    ax
    944	03BF  E8 0000e			     call    near ptr _strcpy
    945	03C2  83 C4 08			     add     sp,8
    946					;
    947					;				     i = strlen(palavra);
    948					;
    949	03C5  1E			     push    ds
    950	03C6  B8 05E7r			     mov     ax,offset DGROUP:palavra
    951	03C9  50			     push    ax
    952	03CA  E8 0000e			     call    near ptr _strlen
    953	03CD  59			     pop     cx
    954	03CE  59			     pop     cx
    955	03CF  8B F8			     mov     di,ax
    956					;
    957					;				  }
    958					;
    959	03D1  EB 02			     jmp     short @1@2606
    960	03D3			     @1@2578:
    961					;
    962					;				  else
    963					;				     continue;
    964					;
    965	03D3  EB 3F			     jmp     short @1@2690
    966	03D5			     @1@2606:
    967					;
    968					;
    969					;			       }
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 18
command.ASM



    970					;			       strcpy(&argline[pos],palavra);
    971					;
    972	03D5  1E			     push    ds
    973	03D6  B8 05E7r			     mov     ax,offset DGROUP:palavra
    974	03D9  50			     push    ax
    975	03DA  1E			     push    ds
    976	03DB  8B 46 F0			     mov     ax,word ptr [bp-16]
    977	03DE  05 0388r			     add     ax,offset DGROUP:argline
    978	03E1  50			     push    ax
    979	03E2  E8 0000e			     call    near ptr _strcpy
    980	03E5  83 C4 08			     add     sp,8
    981					;
    982					;			       argv[argc++] = &argline[pos];
    983					;
    984	03E8  8B 46 F0			     mov     ax,word ptr [bp-16]
    985	03EB  05 0388r			     add     ax,offset DGROUP:argline
    986	03EE  8B 5E EA			     mov     bx,word ptr [bp-22]
    987	03F1  B1 02			     mov     cl,2
    988	03F3  D3 E3			     shl     bx,cl
    989	03F5  8C 9F 034Ar		     mov     word ptr DGROUP:argv[bx+2],ds
    990	03F9  89 87 0348r		     mov     word ptr DGROUP:argv[bx],ax
    991	03FD  FF 46 EA			     inc     word ptr [bp-22]
    992					;
    993					;			       pos+= (i+1);
    994					;
    995	0400  8B C7			     mov     ax,di
    996	0402  40			     inc     ax
    997	0403  01 46 F0			     add     word ptr [bp-16],ax
    998					;
    999					;			       if (*ptrline=='\0')
   1000					;
   1001	0406  C4 5E E6			     les     bx,dword ptr [bp-26]
   1002	0409  26: 80 3F	00		     cmp     byte ptr es:[bx],0
   1003	040D  75 02			     jne     short @1@2662
   1004					;
   1005					;				  break;
   1006					;
   1007	040F  EB 06			     jmp     short @1@2718
   1008	0411			     @1@2662:
   1009					;
   1010					;			       ++ptrline;
   1011					;
   1012	0411  FF 46 E6			     inc     word ptr [bp-26]
   1013	0414			     @1@2690:
   1014	0414  E9 FF20			     jmp     @1@2158
   1015	0417			     @1@2718:
   1016					;
   1017					;			 }
   1018					;			 /* Se È comando vazio n„o faz nada */
   1019					;			 if (argc==0)  {
   1020					;
   1021	0417  83 7E EA 00		     cmp     word ptr [bp-22],0
   1022	041B  75 06			     jne     short @1@2774
   1023					;
   1024					;			    command_showprompt();
   1025					;
   1026	041D  E8 014F			     call    near ptr command_showprompt
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 19
command.ASM



   1027					;
   1028					;			    break;
   1029					;
   1030	0420  E9 00EE			     jmp     @1@3362
   1031	0423			     @1@2774:
   1032					;
   1033					;			 }
   1034					;			 /* Salva linha	de comando no histÛrico	*/
   1035					;			 strcpy	(history[history_nxt],cmdline);
   1036					;
   1037	0423  1E			     push    ds
   1038	0424  B8 0606r			     mov     ax,offset DGROUP:cmdline
   1039	0427  50			     push    ax
   1040	0428  1E			     push    ds
   1041	0429  A1 020Cr			     mov     ax,word ptr DGROUP:history_nxt
   1042	042C  BA 001F			     mov     dx,31
   1043	042F  F7 EA			     imul    dx
   1044	0431  05 0212r			     add     ax,offset DGROUP:history
   1045	0434  50			     push    ax
   1046	0435  E8 0000e			     call    near ptr _strcpy
   1047	0438  83 C4 08			     add     sp,8
   1048					;
   1049					;			 if (history_len<MAXHISTORY)
   1050					;
   1051	043B  83 3E 0210r 0A		     cmp     word ptr DGROUP:history_len,10
   1052	0440  7D 06			     jge     short @1@2830
   1053					;
   1054					;			    ++history_len;
   1055					;
   1056	0442  FF 06 0210r		     inc     word ptr DGROUP:history_len
   1057	0446  EB 13			     jmp     short @1@2914
   1058	0448			     @1@2830:
   1059					;
   1060					;			 else  {
   1061					;			    if (history_ini==MAXHISTORY-1)
   1062					;
   1063	0448  83 3E 020Er 09		     cmp     word ptr DGROUP:history_ini,9
   1064	044D  75 08			     jne     short @1@2886
   1065					;
   1066					;			       history_ini = 0;
   1067					;
   1068	044F  C7 06 020Er 0000		     mov     word ptr DGROUP:history_ini,0
   1069	0455  EB 04			     jmp     short @1@2914
   1070	0457			     @1@2886:
   1071					;
   1072					;			    else
   1073					;			       ++history_ini;
   1074					;
   1075	0457  FF 06 020Er		     inc     word ptr DGROUP:history_ini
   1076	045B			     @1@2914:
   1077					;
   1078					;			 }
   1079					;			 if (history_nxt==MAXHISTORY-1)
   1080					;
   1081	045B  83 3E 020Cr 09		     cmp     word ptr DGROUP:history_nxt,9
   1082	0460  75 08			     jne     short @1@2970
   1083					;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 20
command.ASM



   1084					;			    history_nxt	= 0;
   1085					;
   1086	0462  C7 06 020Cr 0000		     mov     word ptr DGROUP:history_nxt,0
   1087	0468  EB 04			     jmp     short @1@2998
   1088	046A			     @1@2970:
   1089					;
   1090					;			 else
   1091					;			    ++history_nxt;
   1092					;
   1093	046A  FF 06 020Cr		     inc     word ptr DGROUP:history_nxt
   1094	046E			     @1@2998:
   1095					;
   1096					;			 /* Verifica qual È o comando ... */
   1097					;			 achou = 0;
   1098					;
   1099	046E  C7 46 F2 0000		     mov     word ptr [bp-14],0
   1100					;
   1101					;			 for (i=0;i<MAXCOMMANDS;++i)  {
   1102					;
   1103	0473  33 FF			     xor     di,di
   1104	0475  EB 28			     jmp     short @1@3110
   1105	0477			     @1@3026:
   1106					;
   1107					;			     if	(strcmp(argv[0],commands[i].name)==0)  {
   1108					;
   1109	0477  1E			     push    ds
   1110	0478  8B C7			     mov     ax,di
   1111	047A  BA 0006			     mov     dx,6
   1112	047D  F7 EA			     imul    dx
   1113	047F  8B D8			     mov     bx,ax
   1114	0481  FF B7 0002r		     push    word ptr DGROUP:commands[bx]
   1115	0485  FF 36 034Ar		     push    word ptr DGROUP:argv+2
   1116	0489  FF 36 0348r		     push    word ptr DGROUP:argv
   1117	048D  E8 0000e			     call    near ptr _strcmp
   1118	0490  83 C4 08			     add     sp,8
   1119	0493  0B C0			     or	     ax,ax
   1120	0495  75 07			     jne     short @1@3082
   1121					;
   1122					;				achou=1;
   1123					;
   1124	0497  C7 46 F2 0001		     mov     word ptr [bp-14],1
   1125					;
   1126					;				break;
   1127					;
   1128	049C  EB 06			     jmp     short @1@3138
   1129	049E			     @1@3082:
   1130	049E  47			     inc     di
   1131	049F			     @1@3110:
   1132	049F  83 FF 19			     cmp     di,25
   1133	04A2  7C D3			     jl	     short @1@3026
   1134	04A4			     @1@3138:
   1135					;
   1136					;			     }
   1137					;			 }
   1138					;
   1139					;			 /* Executa o comando */
   1140					;			 if (achou)  {
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 21
command.ASM



   1141					;
   1142	04A4  83 7E F2 00		     cmp     word ptr [bp-14],0
   1143	04A8  74 39			     je	     short @1@3194
   1144					;
   1145					;			    res	= commands[i].code(argc,argv);
   1146					;
   1147	04AA  B8 0348r			     mov     ax,offset DGROUP:argv
   1148	04AD  50			     push    ax
   1149	04AE  FF 76 EA			     push    word ptr [bp-22]
   1150	04B1  8B C7			     mov     ax,di
   1151	04B3  BA 0006			     mov     dx,6
   1152	04B6  F7 EA			     imul    dx
   1153	04B8  8B D8			     mov     bx,ax
   1154	04BA  FF 97 0006r		     call    word ptr DGROUP:commands[bx+4]
   1155	04BE  59			     pop     cx
   1156	04BF  59			     pop     cx
   1157	04C0  89 46 EC			     mov     word ptr [bp-20],ax
   1158					;
   1159					;			    inttostr(str,res);
   1160					;
   1161	04C3  FF 76 EC			     push    word ptr [bp-20]
   1162	04C6  16			     push    ss
   1163	04C7  8D 46 F4			     lea     ax,word ptr [bp-12]
   1164	04CA  50			     push    ax
   1165	04CB  E8 0000e			     call    near ptr _inttostr
   1166	04CE  83 C4 06			     add     sp,6
   1167					;
   1168					;			    command_var_set("ERRORLEVEL",str);
   1169					;
   1170	04D1  16			     push    ss
   1171	04D2  8D 46 F4			     lea     ax,word ptr [bp-12]
   1172	04D5  50			     push    ax
   1173	04D6  1E			     push    ds
   1174	04D7  B8 0627r			     mov     ax,offset DGROUP:s@+1419
   1175	04DA  50			     push    ax
   1176	04DB  E8 025E			     call    near ptr command_var_set
   1177	04DE  83 C4 08			     add     sp,8
   1178					;
   1179					;			 }
   1180					;
   1181	04E1  EB 0A			     jmp     short @1@3222
   1182	04E3			     @1@3194:
   1183					;
   1184					;			 else
   1185					;			    putstr("Erro: comando desconhecido!\n");
   1186					;
   1187	04E3  1E			     push    ds
   1188	04E4  B8 0632r			     mov     ax,offset DGROUP:s@+1430
   1189	04E7  50			     push    ax
   1190	04E8  E8 0000e			     call    near ptr _putstr
   1191	04EB  59			     pop     cx
   1192	04EC  59			     pop     cx
   1193	04ED			     @1@3222:
   1194					;
   1195					;
   1196					;			 if (!end_command)
   1197					;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 22
command.ASM



   1198	04ED  83 3E 0625r 00		     cmp     word ptr DGROUP:end_command,0
   1199	04F2  75 03			     jne     short @1@3278
   1200					;
   1201					;			    command_showprompt();
   1202					;
   1203	04F4  E8 0078			     call    near ptr command_showprompt
   1204	04F7			     @1@3278:
   1205					;
   1206					;
   1207					;			 numcar=0;
   1208					;
   1209	04F7  33 F6			     xor     si,si
   1210					;
   1211					;			 break;
   1212					;
   1213	04F9  EB 16			     jmp     short @1@3362
   1214	04FB			     @1@3306:
   1215					;
   1216					;		    default:
   1217					;			 if (numcar<MAXLINE)  {
   1218					;
   1219	04FB  83 FE 1E			     cmp     si,30
   1220	04FE  7D 11			     jge     short @1@3362
   1221					;
   1222					;			    putch(car);
   1223					;
   1224	0500  8A 46 FF			     mov     al,byte ptr [bp-1]
   1225	0503  98			     cbw
   1226	0504  50			     push    ax
   1227	0505  E8 0000e			     call    near ptr _putch
   1228	0508  59			     pop     cx
   1229					;
   1230					;			    cmdline[numcar++]=car;
   1231					;
   1232	0509  8A 46 FF			     mov     al,byte ptr [bp-1]
   1233	050C  88 84 0606r		     mov     byte ptr DGROUP:cmdline[si],al
   1234	0510  46			     inc     si
   1235	0511			     @1@3362:
   1236	0511  83 3E 0625r 00		     cmp     word ptr DGROUP:end_command,0
   1237	0516  75 03			     jne     @@3
   1238	0518  E9 FBCF			     jmp     @1@58
   1239	051B			     @@3:
   1240					;
   1241					;			 }
   1242					;	     }
   1243					;      }
   1244					;
   1245					;    }
   1246					;
   1247	051B  5F			     pop     di
   1248	051C  5E			     pop     si
   1249	051D  8B E5			     mov     sp,bp
   1250	051F  5D			     pop     bp
   1251	0520  C3			     ret
   1252	0521			     _command	     endp
   1253	0521			     @1@C3330	     label   word
   1254	0521  41			     db	     65
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 23
command.ASM



   1255	0522  00			     db	     0
   1256	0523  48			     db	     72
   1257	0524  00			     db	     0
   1258	0525  4B			     db	     75
   1259	0526  00			     db	     0
   1260	0527  50			     db	     80
   1261	0528  00			     db	     0
   1262	0529  0153r			     dw	     @1@674
   1263	052B  01ABr			     dw	     @1@982
   1264	052D  01A0r			     dw	     @1@898
   1265	052F  027Br			     dw	     @1@1626
   1266	0531			     @1@C3234	     label   word
   1267	0531  00			     db	     0
   1268	0532  00			     db	     0
   1269	0533  08			     db	     8
   1270	0534  00			     db	     0
   1271	0535  09			     db	     9
   1272	0536  00			     db	     0
   1273	0537  0D			     db	     13
   1274	0538  00			     db	     0
   1275	0539  1B			     db	     27
   1276	053A  00			     db	     0
   1277	053B  012Cr			     dw	     @1@478
   1278	053D  0114r			     dw	     @1@282
   1279	053F  0111r			     dw	     @1@254
   1280	0541  0312r			     dw	     @1@2130
   1281	0543  011Fr			     dw	     @1@366
   1282					;
   1283					;    static void command_backspace()
   1284					;
   1285					     assume  cs:_TEXT
   1286	0545			     command_backspace	     proc    near
   1287	0545  55			     push    bp
   1288	0546  8B EC			     mov     bp,sp
   1289	0548  56			     push    si
   1290	0549  57			     push    di
   1291					;
   1292					;    {
   1293					;      int x,y;
   1294					;
   1295					;      x = wherex();
   1296					;
   1297	054A  E8 0000e			     call    near ptr _wherex
   1298	054D  8B F0			     mov     si,ax
   1299					;
   1300					;      y = wherey();
   1301					;
   1302	054F  E8 0000e			     call    near ptr _wherey
   1303	0552  8B F8			     mov     di,ax
   1304					;
   1305					;      --x;
   1306					;
   1307	0554  4E			     dec     si
   1308					;
   1309					;      gotoxy(x,y);
   1310					;
   1311	0555  57			     push    di
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 24
command.ASM



   1312	0556  56			     push    si
   1313	0557  E8 0000e			     call    near ptr _gotoxy
   1314	055A  59			     pop     cx
   1315	055B  59			     pop     cx
   1316					;
   1317					;      putch(' ');
   1318					;
   1319	055C  B8 0020			     mov     ax,32
   1320	055F  50			     push    ax
   1321	0560  E8 0000e			     call    near ptr _putch
   1322	0563  59			     pop     cx
   1323					;
   1324					;      gotoxy(x,y);
   1325					;
   1326	0564  57			     push    di
   1327	0565  56			     push    si
   1328	0566  E8 0000e			     call    near ptr _gotoxy
   1329	0569  59			     pop     cx
   1330	056A  59			     pop     cx
   1331					;
   1332					;    }
   1333					;
   1334	056B  5F			     pop     di
   1335	056C  5E			     pop     si
   1336	056D  5D			     pop     bp
   1337	056E  C3			     ret
   1338	056F			     command_backspace	     endp
   1339					;
   1340					;    static void command_showprompt()
   1341					;
   1342					     assume  cs:_TEXT
   1343	056F			     command_showprompt	     proc    near
   1344	056F  55			     push    bp
   1345	0570  8B EC			     mov     bp,sp
   1346	0572  83 EC 06			     sub     sp,6
   1347					;
   1348					;    {
   1349					;      char cor;
   1350					;      char far	*prompt;
   1351					;
   1352					;      prompt =	command_var_value("PROMPT");
   1353					;
   1354	0575  1E			     push    ds
   1355	0576  B8 064Fr			     mov     ax,offset DGROUP:s@+1459
   1356	0579  50			     push    ax
   1357	057A  E8 0192			     call    near ptr command_var_value
   1358	057D  59			     pop     cx
   1359	057E  59			     pop     cx
   1360	057F  89 56 FC			     mov     word ptr [bp-4],dx
   1361	0582  89 46 FA			     mov     word ptr [bp-6],ax
   1362					;
   1363					;      if (prompt!=NULL)  {
   1364					;
   1365	0585  8B 46 FA			     mov     ax,word ptr [bp-6]
   1366	0588  0B 46 FC			     or	     ax,word ptr [bp-4]
   1367	058B  74 22			     je	     short @3@86
   1368					;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 25
command.ASM



   1369					;	  cor =	getcolor();
   1370					;
   1371	058D  E8 0000e			     call    near ptr _getcolor
   1372	0590  88 46 FF			     mov     byte ptr [bp-1],al
   1373					;
   1374					;	  setcolor(PROMPTCOLOR);
   1375					;
   1376	0593  B8 0009			     mov     ax,9
   1377	0596  50			     push    ax
   1378	0597  E8 0000e			     call    near ptr _setcolor
   1379	059A  59			     pop     cx
   1380					;
   1381					;	  putstr(prompt);
   1382					;
   1383	059B  FF 76 FC			     push    word ptr [bp-4]
   1384	059E  FF 76 FA			     push    word ptr [bp-6]
   1385	05A1  E8 0000e			     call    near ptr _putstr
   1386	05A4  59			     pop     cx
   1387	05A5  59			     pop     cx
   1388					;
   1389					;	  setcolor(cor);
   1390					;
   1391	05A6  8A 46 FF			     mov     al,byte ptr [bp-1]
   1392	05A9  98			     cbw
   1393	05AA  50			     push    ax
   1394	05AB  E8 0000e			     call    near ptr _setcolor
   1395	05AE  59			     pop     cx
   1396	05AF			     @3@86:
   1397					;
   1398					;      }
   1399					;      putch(' ');
   1400					;
   1401	05AF  B8 0020			     mov     ax,32
   1402	05B2  50			     push    ax
   1403	05B3  E8 0000e			     call    near ptr _putch
   1404	05B6  59			     pop     cx
   1405					;
   1406					;    }
   1407					;
   1408	05B7  8B E5			     mov     sp,bp
   1409	05B9  5D			     pop     bp
   1410	05BA  C3			     ret
   1411	05BB			     command_showprompt	     endp
   1412					;
   1413					;    static void command_var_init()
   1414					;
   1415					     assume  cs:_TEXT
   1416	05BB			     command_var_init	     proc    near
   1417	05BB  55			     push    bp
   1418	05BC  8B EC			     mov     bp,sp
   1419					;
   1420					;    {
   1421					;      int i;
   1422					;
   1423					;      for (i=0;i<VAR_MAX;++i)	{
   1424					;
   1425	05BE  33 C9			     xor     cx,cx
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 26
command.ASM



   1426	05C0  EB 1D			     jmp     short @4@114
   1427	05C2			     @4@58:
   1428					;
   1429					;	   var[i].name[0]='\0';
   1430					;
   1431	05C2  8B C1			     mov     ax,cx
   1432	05C4  BA 0032			     mov     dx,50
   1433	05C7  F7 EA			     imul    dx
   1434	05C9  8B D8			     mov     bx,ax
   1435	05CB  C6 87 0016r 00		     mov     byte ptr DGROUP:var[bx],0
   1436					;
   1437					;	   var[i].value[0]='\0';
   1438					;
   1439	05D0  8B C1			     mov     ax,cx
   1440	05D2  BA 0032			     mov     dx,50
   1441	05D5  F7 EA			     imul    dx
   1442	05D7  8B D8			     mov     bx,ax
   1443	05D9  C6 87 0023r 00		     mov     byte ptr DGROUP:var[bx+13],0
   1444	05DE  41			     inc     cx
   1445	05DF			     @4@114:
   1446	05DF  83 F9 0A			     cmp     cx,10
   1447	05E2  7C DE			     jl	     short @4@58
   1448					;
   1449					;      }
   1450					;      num_var = 0;
   1451					;
   1452	05E4  C7 06 0000r 0000		     mov     word ptr DGROUP:num_var,0
   1453					;
   1454					;    }
   1455					;
   1456	05EA  5D			     pop     bp
   1457	05EB  C3			     ret
   1458	05EC			     command_var_init	     endp
   1459					;
   1460					;    static int	command_var_nextfree()
   1461					;
   1462					     assume  cs:_TEXT
   1463	05EC			     command_var_nextfree    proc    near
   1464	05EC  55			     push    bp
   1465	05ED  8B EC			     mov     bp,sp
   1466					;
   1467					;    {
   1468					;      int i;
   1469					;
   1470					;      if (num_var>=VAR_MAX)
   1471					;
   1472	05EF  83 3E 0000r 0A		     cmp     word ptr DGROUP:num_var,10
   1473	05F4  7C 05			     jl	     short @5@114
   1474	05F6			     @5@58:
   1475					;
   1476					;	  return -1;
   1477					;
   1478	05F6  B8 FFFF			     mov     ax,-1
   1479	05F9			     @5@86:
   1480	05F9  EB 20			     jmp     short @5@282
   1481	05FB			     @5@114:
   1482					;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 27
command.ASM



   1483					;      for (i=0;i<VAR_MAX;++i)
   1484					;
   1485	05FB  33 C9			     xor     cx,cx
   1486	05FD  EB 15			     jmp     short @5@226
   1487	05FF			     @5@142:
   1488					;
   1489					;	   if (var[i].name[0]=='\0')
   1490					;
   1491	05FF  8B C1			     mov     ax,cx
   1492	0601  BA 0032			     mov     dx,50
   1493	0604  F7 EA			     imul    dx
   1494	0606  8B D8			     mov     bx,ax
   1495	0608  80 BF 0016r 00		     cmp     byte ptr DGROUP:var[bx],0
   1496	060D  75 04			     jne     short @5@198
   1497					;
   1498					;	      return i;
   1499					;
   1500	060F  8B C1			     mov     ax,cx
   1501	0611  EB E6			     jmp     short @5@86
   1502	0613			     @5@198:
   1503	0613  41			     inc     cx
   1504	0614			     @5@226:
   1505	0614  83 F9 0A			     cmp     cx,10
   1506	0617  7C E6			     jl	     short @5@142
   1507	0619  EB DB			     jmp     short @5@58
   1508	061B			     @5@282:
   1509					;
   1510					;      return -1;
   1511					;    }
   1512					;
   1513	061B  5D			     pop     bp
   1514	061C  C3			     ret
   1515	061D			     command_var_nextfree    endp
   1516					;
   1517					;    static void command_var_list()
   1518					;
   1519					     assume  cs:_TEXT
   1520	061D			     command_var_list	     proc    near
   1521	061D  55			     push    bp
   1522	061E  8B EC			     mov     bp,sp
   1523	0620  83 EC 02			     sub     sp,2
   1524	0623  56			     push    si
   1525					;
   1526					;    {
   1527					;      int i;
   1528					;      char cor;
   1529					;
   1530					;      cor = getcolor();
   1531					;
   1532	0624  E8 0000e			     call    near ptr _getcolor
   1533	0627  88 46 FF			     mov     byte ptr [bp-1],al
   1534					;
   1535					;      for (i=0;i<VAR_MAX;++i)	{
   1536					;
   1537	062A  33 F6			     xor     si,si
   1538	062C  EB 54			     jmp     short @6@142
   1539	062E			     @6@58:
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 28
command.ASM



   1540					;
   1541					;	   if (var[i].name[0]!='\0')  {
   1542					;
   1543	062E  8B C6			     mov     ax,si
   1544	0630  BA 0032			     mov     dx,50
   1545	0633  F7 EA			     imul    dx
   1546	0635  8B D8			     mov     bx,ax
   1547	0637  80 BF 0016r 00		     cmp     byte ptr DGROUP:var[bx],0
   1548	063C  74 43			     je	     short @6@114
   1549					;
   1550					;	      putstr(var[i].name);
   1551					;
   1552	063E  1E			     push    ds
   1553	063F  8B C6			     mov     ax,si
   1554	0641  BA 0032			     mov     dx,50
   1555	0644  F7 EA			     imul    dx
   1556	0646  05 0016r			     add     ax,offset DGROUP:var
   1557	0649  50			     push    ax
   1558	064A  E8 0000e			     call    near ptr _putstr
   1559	064D  59			     pop     cx
   1560	064E  59			     pop     cx
   1561					;
   1562					;	      putch('=');
   1563					;
   1564	064F  B8 003D			     mov     ax,61
   1565	0652  50			     push    ax
   1566	0653  E8 0000e			     call    near ptr _putch
   1567	0656  59			     pop     cx
   1568					;
   1569					;	      setcolor(VARCOLOR);
   1570					;
   1571	0657  B8 000E			     mov     ax,14
   1572	065A  50			     push    ax
   1573	065B  E8 0000e			     call    near ptr _setcolor
   1574	065E  59			     pop     cx
   1575					;
   1576					;	      putstr(var[i].value);
   1577					;
   1578	065F  1E			     push    ds
   1579	0660  8B C6			     mov     ax,si
   1580	0662  BA 0032			     mov     dx,50
   1581	0665  F7 EA			     imul    dx
   1582	0667  05 0023r			     add     ax,offset DGROUP:var+13
   1583	066A  50			     push    ax
   1584	066B  E8 0000e			     call    near ptr _putstr
   1585	066E  59			     pop     cx
   1586	066F  59			     pop     cx
   1587					;
   1588					;	      setcolor(cor);
   1589					;
   1590	0670  8A 46 FF			     mov     al,byte ptr [bp-1]
   1591	0673  98			     cbw
   1592	0674  50			     push    ax
   1593	0675  E8 0000e			     call    near ptr _setcolor
   1594	0678  59			     pop     cx
   1595					;
   1596					;	      putch('\n');
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 29
command.ASM



   1597					;
   1598	0679  B8 000A			     mov     ax,10
   1599	067C  50			     push    ax
   1600	067D  E8 0000e			     call    near ptr _putch
   1601	0680  59			     pop     cx
   1602	0681			     @6@114:
   1603	0681  46			     inc     si
   1604	0682			     @6@142:
   1605	0682  83 FE 0A			     cmp     si,10
   1606	0685  7C A7			     jl	     short @6@58
   1607					;
   1608					;	   }
   1609					;      }
   1610					;    }
   1611					;
   1612	0687  5E			     pop     si
   1613	0688  8B E5			     mov     sp,bp
   1614	068A  5D			     pop     bp
   1615	068B  C3			     ret
   1616	068C			     command_var_list	     endp
   1617					;
   1618					;    static int	 command_var_search(char far *nome)
   1619					;
   1620					     assume  cs:_TEXT
   1621	068C			     command_var_search	     proc    near
   1622	068C  55			     push    bp
   1623	068D  8B EC			     mov     bp,sp
   1624	068F  56			     push    si
   1625					;
   1626					;    {
   1627					;      int i;
   1628					;
   1629					;      if (nome[0] == '\0')
   1630					;
   1631	0690  C4 5E 04			     les     bx,dword ptr [bp+4]
   1632	0693  26: 80 3F	00		     cmp     byte ptr es:[bx],0
   1633	0697  75 05			     jne     short @7@114
   1634	0699			     @7@58:
   1635					;
   1636					;	  return -1;
   1637					;
   1638	0699  B8 FFFF			     mov     ax,-1
   1639	069C			     @7@86:
   1640	069C  EB 2C			     jmp     short @7@282
   1641	069E			     @7@114:
   1642					;
   1643					;      for (i=0;i<VAR_MAX;++i)	{
   1644					;
   1645	069E  33 F6			     xor     si,si
   1646	06A0  EB 21			     jmp     short @7@226
   1647	06A2			     @7@142:
   1648					;
   1649					;	   if (strcmp(nome,var[i].name)==0)
   1650					;
   1651	06A2  1E			     push    ds
   1652	06A3  8B C6			     mov     ax,si
   1653	06A5  BA 0032			     mov     dx,50
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 30
command.ASM



   1654	06A8  F7 EA			     imul    dx
   1655	06AA  05 0016r			     add     ax,offset DGROUP:var
   1656	06AD  50			     push    ax
   1657	06AE  FF 76 06			     push    word ptr [bp+6]
   1658	06B1  FF 76 04			     push    word ptr [bp+4]
   1659	06B4  E8 0000e			     call    near ptr _strcmp
   1660	06B7  83 C4 08			     add     sp,8
   1661	06BA  0B C0			     or	     ax,ax
   1662	06BC  75 04			     jne     short @7@198
   1663					;
   1664					;	      return i;
   1665					;
   1666	06BE  8B C6			     mov     ax,si
   1667	06C0  EB DA			     jmp     short @7@86
   1668	06C2			     @7@198:
   1669	06C2  46			     inc     si
   1670	06C3			     @7@226:
   1671	06C3  83 FE 0A			     cmp     si,10
   1672	06C6  7C DA			     jl	     short @7@142
   1673	06C8  EB CF			     jmp     short @7@58
   1674	06CA			     @7@282:
   1675					;
   1676					;      }
   1677					;      return -1;
   1678					;    }
   1679					;
   1680	06CA  5E			     pop     si
   1681	06CB  5D			     pop     bp
   1682	06CC  C3			     ret
   1683	06CD			     command_var_search	     endp
   1684					;
   1685					;    static int	 command_var_unset(char	far *nome)
   1686					;
   1687					     assume  cs:_TEXT
   1688	06CD			     command_var_unset	     proc    near
   1689	06CD  55			     push    bp
   1690	06CE  8B EC			     mov     bp,sp
   1691	06D0  56			     push    si
   1692					;
   1693					;    {
   1694					;      int i;
   1695					;
   1696					;      i = command_var_search(nome);
   1697					;
   1698	06D1  FF 76 06			     push    word ptr [bp+6]
   1699	06D4  FF 76 04			     push    word ptr [bp+4]
   1700	06D7  E8 FFB2			     call    near ptr command_var_search
   1701	06DA  59			     pop     cx
   1702	06DB  59			     pop     cx
   1703	06DC  8B F0			     mov     si,ax
   1704					;
   1705					;      if (i==-1)
   1706					;
   1707	06DE  83 FE FF			     cmp     si,-1
   1708	06E1  75 05			     jne     short @8@114
   1709					;
   1710					;	  return -1;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 31
command.ASM



   1711					;
   1712	06E3  B8 FFFF			     mov     ax,-1
   1713	06E6			     @8@86:
   1714	06E6  EB 24			     jmp     short @8@142
   1715	06E8			     @8@114:
   1716					;
   1717					;      var[i].name[0]='\0';
   1718					;
   1719	06E8  8B C6			     mov     ax,si
   1720	06EA  BA 0032			     mov     dx,50
   1721	06ED  F7 EA			     imul    dx
   1722	06EF  8B D8			     mov     bx,ax
   1723	06F1  C6 87 0016r 00		     mov     byte ptr DGROUP:var[bx],0
   1724					;
   1725					;      var[i].value[0]='\0';
   1726					;
   1727	06F6  8B C6			     mov     ax,si
   1728	06F8  BA 0032			     mov     dx,50
   1729	06FB  F7 EA			     imul    dx
   1730	06FD  8B D8			     mov     bx,ax
   1731	06FF  C6 87 0023r 00		     mov     byte ptr DGROUP:var[bx+13],0
   1732					;
   1733					;      --num_var;
   1734					;
   1735	0704  FF 0E 0000r		     dec     word ptr DGROUP:num_var
   1736					;
   1737					;      return 0;
   1738					;
   1739	0708  33 C0			     xor     ax,ax
   1740	070A  EB DA			     jmp     short @8@86
   1741	070C			     @8@142:
   1742					;
   1743					;    }
   1744					;
   1745	070C  5E			     pop     si
   1746	070D  5D			     pop     bp
   1747	070E  C3			     ret
   1748	070F			     command_var_unset	     endp
   1749					;
   1750					;    static char far *command_var_value(char far *nome)
   1751					;
   1752					     assume  cs:_TEXT
   1753	070F			     command_var_value	     proc    near
   1754	070F  55			     push    bp
   1755	0710  8B EC			     mov     bp,sp
   1756	0712  56			     push    si
   1757					;
   1758					;    {
   1759					;      int i;
   1760					;
   1761					;      i = command_var_search(nome);
   1762					;
   1763	0713  FF 76 06			     push    word ptr [bp+6]
   1764	0716  FF 76 04			     push    word ptr [bp+4]
   1765	0719  E8 FF70			     call    near ptr command_var_search
   1766	071C  59			     pop     cx
   1767	071D  59			     pop     cx
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 32
command.ASM



   1768	071E  8B F0			     mov     si,ax
   1769					;
   1770					;      if (i==-1)
   1771					;
   1772	0720  83 FE FF			     cmp     si,-1
   1773	0723  75 06			     jne     short @9@114
   1774					;
   1775					;	  return NULL;
   1776					;
   1777	0725  33 D2			     xor     dx,dx
   1778	0727  33 C0			     xor     ax,ax
   1779	0729			     @9@86:
   1780	0729  EB 0E			     jmp     short @9@142
   1781	072B			     @9@114:
   1782					;
   1783					;      return var[i].value;
   1784					;
   1785	072B  8B C6			     mov     ax,si
   1786	072D  BA 0032			     mov     dx,50
   1787	0730  F7 EA			     imul    dx
   1788	0732  05 0023r			     add     ax,offset DGROUP:var+13
   1789	0735  8C DA			     mov     dx,ds
   1790	0737  EB F0			     jmp     short @9@86
   1791	0739			     @9@142:
   1792					;
   1793					;    }
   1794					;
   1795	0739  5E			     pop     si
   1796	073A  5D			     pop     bp
   1797	073B  C3			     ret
   1798	073C			     command_var_value	     endp
   1799					;
   1800					;    static int	command_var_set(char far *nome,char far	*valor)
   1801					;
   1802					     assume  cs:_TEXT
   1803	073C			     command_var_set proc    near
   1804	073C  55			     push    bp
   1805	073D  8B EC			     mov     bp,sp
   1806	073F  56			     push    si
   1807					;
   1808					;    {
   1809					;      int i;
   1810					;
   1811					;      if (strlen(nome)>VAR_NOME_TAM)
   1812					;
   1813	0740  FF 76 06			     push    word ptr [bp+6]
   1814	0743  FF 76 04			     push    word ptr [bp+4]
   1815	0746  E8 0000e			     call    near ptr _strlen
   1816	0749  59			     pop     cx
   1817	074A  59			     pop     cx
   1818	074B  3D 000C			     cmp     ax,12
   1819	074E  76 05			     jbe     short @10@114
   1820					;
   1821					;	  return -3;
   1822					;
   1823	0750  B8 FFFD			     mov     ax,-3
   1824	0753			     @10@86:
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 33
command.ASM



   1825	0753  EB 6A			     jmp     short @10@310
   1826	0755			     @10@114:
   1827					;
   1828					;      if (strlen(valor)>VAR_VALOR_TAM)
   1829					;
   1830	0755  FF 76 0A			     push    word ptr [bp+10]
   1831	0758  FF 76 08			     push    word ptr [bp+8]
   1832	075B  E8 0000e			     call    near ptr _strlen
   1833	075E  59			     pop     cx
   1834	075F  59			     pop     cx
   1835	0760  3D 0024			     cmp     ax,36
   1836	0763  76 05			     jbe     short @10@170
   1837					;
   1838					;	  return -4;
   1839					;
   1840	0765  B8 FFFC			     mov     ax,-4
   1841	0768  EB E9			     jmp     short @10@86
   1842	076A			     @10@170:
   1843					;
   1844					;      i = command_var_search(nome);
   1845					;
   1846	076A  FF 76 06			     push    word ptr [bp+6]
   1847	076D  FF 76 04			     push    word ptr [bp+4]
   1848	0770  E8 FF19			     call    near ptr command_var_search
   1849	0773  59			     pop     cx
   1850	0774  59			     pop     cx
   1851	0775  8B F0			     mov     si,ax
   1852					;
   1853					;      if (i==-1)  {
   1854					;
   1855	0777  83 FE FF			     cmp     si,-1
   1856	077A  75 27			     jne     short @10@282
   1857					;
   1858					;	  i = command_var_nextfree();
   1859					;
   1860	077C  E8 FE6D			     call    near ptr command_var_nextfree
   1861	077F  8B F0			     mov     si,ax
   1862					;
   1863					;	  if (i==-1)
   1864					;
   1865	0781  83 FE FF			     cmp     si,-1
   1866	0784  75 05			     jne     short @10@254
   1867					;
   1868					;	     return -2;
   1869					;
   1870	0786  B8 FFFE			     mov     ax,-2
   1871	0789  EB C8			     jmp     short @10@86
   1872	078B			     @10@254:
   1873					;
   1874					;	  strcpy(var[i].name,nome);
   1875					;
   1876	078B  FF 76 06			     push    word ptr [bp+6]
   1877	078E  FF 76 04			     push    word ptr [bp+4]
   1878	0791  1E			     push    ds
   1879	0792  8B C6			     mov     ax,si
   1880	0794  BA 0032			     mov     dx,50
   1881	0797  F7 EA			     imul    dx
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 34
command.ASM



   1882	0799  05 0016r			     add     ax,offset DGROUP:var
   1883	079C  50			     push    ax
   1884	079D  E8 0000e			     call    near ptr _strcpy
   1885	07A0  83 C4 08			     add     sp,8
   1886	07A3			     @10@282:
   1887					;
   1888					;      }
   1889					;      strcpy(var[i].value,valor);
   1890					;
   1891	07A3  FF 76 0A			     push    word ptr [bp+10]
   1892	07A6  FF 76 08			     push    word ptr [bp+8]
   1893	07A9  1E			     push    ds
   1894	07AA  8B C6			     mov     ax,si
   1895	07AC  BA 0032			     mov     dx,50
   1896	07AF  F7 EA			     imul    dx
   1897	07B1  05 0023r			     add     ax,offset DGROUP:var+13
   1898	07B4  50			     push    ax
   1899	07B5  E8 0000e			     call    near ptr _strcpy
   1900	07B8  83 C4 08			     add     sp,8
   1901					;
   1902					;      return 0;
   1903					;
   1904	07BB  33 C0			     xor     ax,ax
   1905	07BD  EB 94			     jmp     short @10@86
   1906	07BF			     @10@310:
   1907					;
   1908					;    }
   1909					;
   1910	07BF  5E			     pop     si
   1911	07C0  5D			     pop     bp
   1912	07C1  C3			     ret
   1913	07C2			     command_var_set endp
   1914					;
   1915					;    int cmd_reboot(int	argc, char far *argv[])
   1916					;
   1917					     assume  cs:_TEXT
   1918	07C2			     _cmd_reboot     proc    near
   1919	07C2  55			     push    bp
   1920	07C3  8B EC			     mov     bp,sp
   1921	07C5  56			     push    si
   1922	07C6  57			     push    di
   1923	07C7  8B 76 04			     mov     si,word ptr [bp+4]
   1924	07CA  8B 7E 06			     mov     di,word ptr [bp+6]
   1925					;
   1926					;    {
   1927					;      argc=argc;
   1928					;
   1929					;
   1930					;      argv=argv;
   1931					;
   1932					;
   1933					;      reboot();
   1934					;
   1935	07CD  E8 0000e			     call    near ptr _reboot
   1936					;
   1937					;      return 0;
   1938					;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 35
command.ASM



   1939	07D0  33 C0			     xor     ax,ax
   1940	07D2  EB 00			     jmp     short @11@58
   1941	07D4			     @11@58:
   1942					;
   1943					;    }
   1944					;
   1945	07D4  5F			     pop     di
   1946	07D5  5E			     pop     si
   1947	07D6  5D			     pop     bp
   1948	07D7  C3			     ret
   1949	07D8			     _cmd_reboot     endp
   1950					;
   1951					;    int cmd_exit(int argc, char far *argv[])
   1952					;
   1953					     assume  cs:_TEXT
   1954	07D8			     _cmd_exit	     proc    near
   1955	07D8  55			     push    bp
   1956	07D9  8B EC			     mov     bp,sp
   1957	07DB  8B 56 04			     mov     dx,word ptr [bp+4]
   1958	07DE  8B 5E 06			     mov     bx,word ptr [bp+6]
   1959					;
   1960					;    {
   1961					;      argc=argc;
   1962					;
   1963					;
   1964					;      argv=argv;
   1965					;
   1966					;
   1967					;      end_command = 1;
   1968					;
   1969	07E1  C7 06 0625r 0001		     mov     word ptr DGROUP:end_command,1
   1970					;
   1971					;      return 0;
   1972					;
   1973	07E7  33 C0			     xor     ax,ax
   1974	07E9  EB 00			     jmp     short @12@58
   1975	07EB			     @12@58:
   1976					;
   1977					;    }
   1978					;
   1979	07EB  5D			     pop     bp
   1980	07EC  C3			     ret
   1981	07ED			     _cmd_exit	     endp
   1982					;
   1983					;    int cmd_help(int argc, char far *argv[])
   1984					;
   1985					     assume  cs:_TEXT
   1986	07ED			     _cmd_help	     proc    near
   1987	07ED  55			     push    bp
   1988	07EE  8B EC			     mov     bp,sp
   1989	07F0  56			     push    si
   1990	07F1  57			     push    di
   1991	07F2  8B 7E 04			     mov     di,word ptr [bp+4]
   1992					;
   1993					;    {
   1994					;      int i;
   1995					;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 36
command.ASM



   1996					;      argc=argc;
   1997					;
   1998					;
   1999					;      argv=argv;
   2000					;
   2001	07F5  8B 46 06			     mov     ax,word ptr [bp+6]
   2002	07F8  89 46 06			     mov     word ptr [bp+6],ax
   2003					;
   2004					;      putstr("Comandos	do minisSistema	Operacional:\n");
   2005					;
   2006	07FB  1E			     push    ds
   2007	07FC  B8 0656r			     mov     ax,offset DGROUP:s@+1466
   2008	07FF  50			     push    ax
   2009	0800  E8 0000e			     call    near ptr _putstr
   2010	0803  59			     pop     cx
   2011	0804  59			     pop     cx
   2012					;
   2013					;      for (i=0;i<MAXCOMMANDS;++i)  {
   2014					;
   2015	0805  33 F6			     xor     si,si
   2016	0807  EB 2F			     jmp     short @13@114
   2017	0809			     @13@58:
   2018					;
   2019					;	   putstr(commands[i].name);
   2020					;
   2021	0809  1E			     push    ds
   2022	080A  8B C6			     mov     ax,si
   2023	080C  BA 0006			     mov     dx,6
   2024	080F  F7 EA			     imul    dx
   2025	0811  8B D8			     mov     bx,ax
   2026	0813  FF B7 0002r		     push    word ptr DGROUP:commands[bx]
   2027	0817  E8 0000e			     call    near ptr _putstr
   2028	081A  59			     pop     cx
   2029	081B  59			     pop     cx
   2030					;
   2031					;	   putstr(commands[i].help);
   2032					;
   2033	081C  1E			     push    ds
   2034	081D  8B C6			     mov     ax,si
   2035	081F  BA 0006			     mov     dx,6
   2036	0822  F7 EA			     imul    dx
   2037	0824  8B D8			     mov     bx,ax
   2038	0826  FF B7 0004r		     push    word ptr DGROUP:commands[bx+2]
   2039	082A  E8 0000e			     call    near ptr _putstr
   2040	082D  59			     pop     cx
   2041	082E  59			     pop     cx
   2042					;
   2043					;	   putch('\n');
   2044					;
   2045	082F  B8 000A			     mov     ax,10
   2046	0832  50			     push    ax
   2047	0833  E8 0000e			     call    near ptr _putch
   2048	0836  59			     pop     cx
   2049	0837  46			     inc     si
   2050	0838			     @13@114:
   2051	0838  83 FE 19			     cmp     si,25
   2052	083B  7C CC			     jl	     short @13@58
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 37
command.ASM



   2053					;
   2054					;      }
   2055					;      return 0;
   2056					;
   2057	083D  33 C0			     xor     ax,ax
   2058	083F  EB 00			     jmp     short @13@170
   2059	0841			     @13@170:
   2060					;
   2061					;    }
   2062					;
   2063	0841  5F			     pop     di
   2064	0842  5E			     pop     si
   2065	0843  5D			     pop     bp
   2066	0844  C3			     ret
   2067	0845			     _cmd_help	     endp
   2068					;
   2069					;    int cmd_date(int argc, char far *argv[])
   2070					;
   2071					     assume  cs:_TEXT
   2072	0845			     _cmd_date	     proc    near
   2073	0845  55			     push    bp
   2074	0846  8B EC			     mov     bp,sp
   2075	0848  83 EC 18			     sub     sp,24
   2076	084B  56			     push    si
   2077	084C  57			     push    di
   2078	084D  8B 76 04			     mov     si,word ptr [bp+4]
   2079	0850  8B 7E 06			     mov     di,word ptr [bp+6]
   2080					;
   2081					;    {
   2082					;      struct date d;
   2083					;      char str[20];
   2084					;
   2085					;      argc=argc;
   2086					;
   2087					;
   2088					;      argv=argv;
   2089					;
   2090					;
   2091					;
   2092					;
   2093					;
   2094					;      getdate(&d);
   2095					;
   2096	0853  16			     push    ss
   2097	0854  8D 46 FC			     lea     ax,word ptr [bp-4]
   2098	0857  50			     push    ax
   2099	0858  E8 0000e			     call    near ptr _getdate
   2100	085B  59			     pop     cx
   2101	085C  59			     pop     cx
   2102					;
   2103					;      unsignedtostr(str,d.da_day,2,'0');
   2104					;
   2105	085D  B0 30			     mov     al,48
   2106	085F  50			     push    ax
   2107	0860  B8 0002			     mov     ax,2
   2108	0863  50			     push    ax
   2109	0864  8A 46 FE			     mov     al,byte ptr [bp-2]
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 38
command.ASM



   2110	0867  98			     cbw
   2111	0868  50			     push    ax
   2112	0869  16			     push    ss
   2113	086A  8D 46 E8			     lea     ax,word ptr [bp-24]
   2114	086D  50			     push    ax
   2115	086E  E8 0000e			     call    near ptr _unsignedtostr
   2116	0871  83 C4 0A			     add     sp,10
   2117					;
   2118					;      putstr(str);
   2119					;
   2120	0874  16			     push    ss
   2121	0875  8D 46 E8			     lea     ax,word ptr [bp-24]
   2122	0878  50			     push    ax
   2123	0879  E8 0000e			     call    near ptr _putstr
   2124	087C  59			     pop     cx
   2125	087D  59			     pop     cx
   2126					;
   2127					;      putch('/');
   2128					;
   2129	087E  B8 002F			     mov     ax,47
   2130	0881  50			     push    ax
   2131	0882  E8 0000e			     call    near ptr _putch
   2132	0885  59			     pop     cx
   2133					;
   2134					;      unsignedtostr(str,d.da_mon,2,'0');
   2135					;
   2136	0886  B0 30			     mov     al,48
   2137	0888  50			     push    ax
   2138	0889  B8 0002			     mov     ax,2
   2139	088C  50			     push    ax
   2140	088D  8A 46 FF			     mov     al,byte ptr [bp-1]
   2141	0890  98			     cbw
   2142	0891  50			     push    ax
   2143	0892  16			     push    ss
   2144	0893  8D 46 E8			     lea     ax,word ptr [bp-24]
   2145	0896  50			     push    ax
   2146	0897  E8 0000e			     call    near ptr _unsignedtostr
   2147	089A  83 C4 0A			     add     sp,10
   2148					;
   2149					;      putstr(str);
   2150					;
   2151	089D  16			     push    ss
   2152	089E  8D 46 E8			     lea     ax,word ptr [bp-24]
   2153	08A1  50			     push    ax
   2154	08A2  E8 0000e			     call    near ptr _putstr
   2155	08A5  59			     pop     cx
   2156	08A6  59			     pop     cx
   2157					;
   2158					;      putch('/');
   2159					;
   2160	08A7  B8 002F			     mov     ax,47
   2161	08AA  50			     push    ax
   2162	08AB  E8 0000e			     call    near ptr _putch
   2163	08AE  59			     pop     cx
   2164					;
   2165					;      unsignedtostr(str,d.da_year,4,'0');
   2166					;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 39
command.ASM



   2167	08AF  B0 30			     mov     al,48
   2168	08B1  50			     push    ax
   2169	08B2  B8 0004			     mov     ax,4
   2170	08B5  50			     push    ax
   2171	08B6  FF 76 FC			     push    word ptr [bp-4]
   2172	08B9  16			     push    ss
   2173	08BA  8D 46 E8			     lea     ax,word ptr [bp-24]
   2174	08BD  50			     push    ax
   2175	08BE  E8 0000e			     call    near ptr _unsignedtostr
   2176	08C1  83 C4 0A			     add     sp,10
   2177					;
   2178					;      putstr(str);
   2179					;
   2180	08C4  16			     push    ss
   2181	08C5  8D 46 E8			     lea     ax,word ptr [bp-24]
   2182	08C8  50			     push    ax
   2183	08C9  E8 0000e			     call    near ptr _putstr
   2184	08CC  59			     pop     cx
   2185	08CD  59			     pop     cx
   2186					;
   2187					;      putch('\n');
   2188					;
   2189	08CE  B8 000A			     mov     ax,10
   2190	08D1  50			     push    ax
   2191	08D2  E8 0000e			     call    near ptr _putch
   2192	08D5  59			     pop     cx
   2193					;
   2194					;      return 0;
   2195					;
   2196	08D6  33 C0			     xor     ax,ax
   2197	08D8  EB 00			     jmp     short @14@58
   2198	08DA			     @14@58:
   2199					;
   2200					;    }
   2201					;
   2202	08DA  5F			     pop     di
   2203	08DB  5E			     pop     si
   2204	08DC  8B E5			     mov     sp,bp
   2205	08DE  5D			     pop     bp
   2206	08DF  C3			     ret
   2207	08E0			     _cmd_date	     endp
   2208					;
   2209					;    int cmd_time(int argc, char far *argv[])
   2210					;
   2211					     assume  cs:_TEXT
   2212	08E0			     _cmd_time	     proc    near
   2213	08E0  55			     push    bp
   2214	08E1  8B EC			     mov     bp,sp
   2215	08E3  83 EC 18			     sub     sp,24
   2216	08E6  56			     push    si
   2217	08E7  57			     push    di
   2218	08E8  8B 76 04			     mov     si,word ptr [bp+4]
   2219	08EB  8B 7E 06			     mov     di,word ptr [bp+6]
   2220					;
   2221					;    {
   2222					;      struct time t;
   2223					;      char str[20];
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 40
command.ASM



   2224					;
   2225					;      argc=argc;
   2226					;
   2227					;
   2228					;      argv=argv;
   2229					;
   2230					;
   2231					;      gettime(&t);
   2232					;
   2233	08EE  16			     push    ss
   2234	08EF  8D 46 FC			     lea     ax,word ptr [bp-4]
   2235	08F2  50			     push    ax
   2236	08F3  E8 0000e			     call    near ptr _gettime
   2237	08F6  59			     pop     cx
   2238	08F7  59			     pop     cx
   2239					;
   2240					;      unsignedtostr(str,t.ti_hour,2,'0');
   2241					;
   2242	08F8  B0 30			     mov     al,48
   2243	08FA  50			     push    ax
   2244	08FB  B8 0002			     mov     ax,2
   2245	08FE  50			     push    ax
   2246	08FF  8A 46 FD			     mov     al,byte ptr [bp-3]
   2247	0902  B4 00			     mov     ah,0
   2248	0904  50			     push    ax
   2249	0905  16			     push    ss
   2250	0906  8D 46 E8			     lea     ax,word ptr [bp-24]
   2251	0909  50			     push    ax
   2252	090A  E8 0000e			     call    near ptr _unsignedtostr
   2253	090D  83 C4 0A			     add     sp,10
   2254					;
   2255					;      putstr(str);
   2256					;
   2257	0910  16			     push    ss
   2258	0911  8D 46 E8			     lea     ax,word ptr [bp-24]
   2259	0914  50			     push    ax
   2260	0915  E8 0000e			     call    near ptr _putstr
   2261	0918  59			     pop     cx
   2262	0919  59			     pop     cx
   2263					;
   2264					;      putch(':');
   2265					;
   2266	091A  B8 003A			     mov     ax,58
   2267	091D  50			     push    ax
   2268	091E  E8 0000e			     call    near ptr _putch
   2269	0921  59			     pop     cx
   2270					;
   2271					;
   2272					;
   2273					;      unsignedtostr(str,t.ti_min,2,'0');
   2274					;
   2275	0922  B0 30			     mov     al,48
   2276	0924  50			     push    ax
   2277	0925  B8 0002			     mov     ax,2
   2278	0928  50			     push    ax
   2279	0929  8A 46 FC			     mov     al,byte ptr [bp-4]
   2280	092C  B4 00			     mov     ah,0
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 41
command.ASM



   2281	092E  50			     push    ax
   2282	092F  16			     push    ss
   2283	0930  8D 46 E8			     lea     ax,word ptr [bp-24]
   2284	0933  50			     push    ax
   2285	0934  E8 0000e			     call    near ptr _unsignedtostr
   2286	0937  83 C4 0A			     add     sp,10
   2287					;
   2288					;      putstr(str);
   2289					;
   2290	093A  16			     push    ss
   2291	093B  8D 46 E8			     lea     ax,word ptr [bp-24]
   2292	093E  50			     push    ax
   2293	093F  E8 0000e			     call    near ptr _putstr
   2294	0942  59			     pop     cx
   2295	0943  59			     pop     cx
   2296					;
   2297					;      putch(':');
   2298					;
   2299	0944  B8 003A			     mov     ax,58
   2300	0947  50			     push    ax
   2301	0948  E8 0000e			     call    near ptr _putch
   2302	094B  59			     pop     cx
   2303					;
   2304					;      unsignedtostr(str,t.ti_sec,2,'0');
   2305					;
   2306	094C  B0 30			     mov     al,48
   2307	094E  50			     push    ax
   2308	094F  B8 0002			     mov     ax,2
   2309	0952  50			     push    ax
   2310	0953  8A 46 FF			     mov     al,byte ptr [bp-1]
   2311	0956  B4 00			     mov     ah,0
   2312	0958  50			     push    ax
   2313	0959  16			     push    ss
   2314	095A  8D 46 E8			     lea     ax,word ptr [bp-24]
   2315	095D  50			     push    ax
   2316	095E  E8 0000e			     call    near ptr _unsignedtostr
   2317	0961  83 C4 0A			     add     sp,10
   2318					;
   2319					;      putstr(str);
   2320					;
   2321	0964  16			     push    ss
   2322	0965  8D 46 E8			     lea     ax,word ptr [bp-24]
   2323	0968  50			     push    ax
   2324	0969  E8 0000e			     call    near ptr _putstr
   2325	096C  59			     pop     cx
   2326	096D  59			     pop     cx
   2327					;
   2328					;      putch('\n');
   2329					;
   2330	096E  B8 000A			     mov     ax,10
   2331	0971  50			     push    ax
   2332	0972  E8 0000e			     call    near ptr _putch
   2333	0975  59			     pop     cx
   2334					;
   2335					;      return 0;
   2336					;
   2337	0976  33 C0			     xor     ax,ax
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 42
command.ASM



   2338	0978  EB 00			     jmp     short @15@58
   2339	097A			     @15@58:
   2340					;
   2341					;    }
   2342					;
   2343	097A  5F			     pop     di
   2344	097B  5E			     pop     si
   2345	097C  8B E5			     mov     sp,bp
   2346	097E  5D			     pop     bp
   2347	097F  C3			     ret
   2348	0980			     _cmd_time	     endp
   2349					;
   2350					;    int cmd_cls(int argc, char	far *argv[])
   2351					;
   2352					     assume  cs:_TEXT
   2353	0980			     _cmd_cls	     proc    near
   2354	0980  55			     push    bp
   2355	0981  8B EC			     mov     bp,sp
   2356	0983  56			     push    si
   2357	0984  57			     push    di
   2358	0985  8B 76 04			     mov     si,word ptr [bp+4]
   2359	0988  8B 7E 06			     mov     di,word ptr [bp+6]
   2360					;
   2361					;    {
   2362					;      argc=argc;
   2363					;
   2364					;
   2365					;      argv=argv;
   2366					;
   2367					;
   2368					;      clrscr();
   2369					;
   2370	098B  E8 0000e			     call    near ptr _clrscr
   2371					;
   2372					;      return 0;
   2373					;
   2374	098E  33 C0			     xor     ax,ax
   2375	0990  EB 00			     jmp     short @16@58
   2376	0992			     @16@58:
   2377					;
   2378					;    }
   2379					;
   2380	0992  5F			     pop     di
   2381	0993  5E			     pop     si
   2382	0994  5D			     pop     bp
   2383	0995  C3			     ret
   2384	0996			     _cmd_cls	     endp
   2385					;
   2386					;    int cmd_ver(int argc, char	far *argv[])
   2387					;
   2388					     assume  cs:_TEXT
   2389	0996			     _cmd_ver	     proc    near
   2390	0996  55			     push    bp
   2391	0997  8B EC			     mov     bp,sp
   2392	0999  56			     push    si
   2393	099A  57			     push    di
   2394	099B  8B 76 04			     mov     si,word ptr [bp+4]
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 43
command.ASM



   2395	099E  8B 7E 06			     mov     di,word ptr [bp+6]
   2396					;
   2397					;    {
   2398					;      argc=argc;
   2399					;
   2400					;
   2401					;      argv=argv;
   2402					;
   2403					;
   2404					;      putstr("minisSistema Operacional	- Vs ");
   2405					;
   2406	09A1  1E			     push    ds
   2407	09A2  B8 067Dr			     mov     ax,offset DGROUP:s@+1505
   2408	09A5  50			     push    ax
   2409	09A6  E8 0000e			     call    near ptr _putstr
   2410	09A9  59			     pop     cx
   2411	09AA  59			     pop     cx
   2412					;
   2413					;      putstr(miniSO_VERSION);
   2414					;
   2415	09AB  1E			     push    ds
   2416	09AC  B8 069Cr			     mov     ax,offset DGROUP:s@+1536
   2417	09AF  50			     push    ax
   2418	09B0  E8 0000e			     call    near ptr _putstr
   2419	09B3  59			     pop     cx
   2420	09B4  59			     pop     cx
   2421					;
   2422					;      putch('\n');
   2423					;
   2424	09B5  B8 000A			     mov     ax,10
   2425	09B8  50			     push    ax
   2426	09B9  E8 0000e			     call    near ptr _putch
   2427	09BC  59			     pop     cx
   2428					;
   2429					;      return 0;
   2430					;
   2431	09BD  33 C0			     xor     ax,ax
   2432	09BF  EB 00			     jmp     short @17@58
   2433	09C1			     @17@58:
   2434					;
   2435					;    }
   2436					;
   2437	09C1  5F			     pop     di
   2438	09C2  5E			     pop     si
   2439	09C3  5D			     pop     bp
   2440	09C4  C3			     ret
   2441	09C5			     _cmd_ver	     endp
   2442	09C5			     _TEXT   ends
   2443	0000			     _BSS    segment word public 'BSS'
   2444	0000  14*(??)			     db	     20	dup (?)
   2445	0014			     _BSS    ends
   2446	09C5			     _TEXT   segment byte public 'CODE'
   2447					;
   2448					;    int cmd_ps(int argc, char far *argv[])
   2449					;
   2450					     assume  cs:_TEXT
   2451	09C5			     _cmd_ps proc    near
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 44
command.ASM



   2452	09C5  55			     push    bp
   2453	09C6  8B EC			     mov     bp,sp
   2454	09C8  56			     push    si
   2455	09C9  57			     push    di
   2456					;
   2457					;    {
   2458					;      int i,l;
   2459					;      static char str[20];
   2460					;      extern miniSO_PCB miniSO_thread[];
   2461					;
   2462					;      argc=argc;
   2463					;
   2464	09CA  8B 46 04			     mov     ax,word ptr [bp+4]
   2465	09CD  89 46 04			     mov     word ptr [bp+4],ax
   2466					;
   2467					;      argv=argv;
   2468					;
   2469	09D0  8B 46 06			     mov     ax,word ptr [bp+6]
   2470	09D3  89 46 06			     mov     word ptr [bp+6],ax
   2471					;
   2472					;      putstr("	BCP   PID   PPID  STATUS   WAIT	  ZLIST	 PREV	NEXT\n");
   2473					;
   2474	09D6  1E			     push    ds
   2475	09D7  B8 06A1r			     mov     ax,offset DGROUP:s@+1541
   2476	09DA  50			     push    ax
   2477	09DB  E8 0000e			     call    near ptr _putstr
   2478	09DE  59			     pop     cx
   2479	09DF  59			     pop     cx
   2480					;
   2481					;      for (i=0;i<miniSO_MAXTHREADS;++i)  {
   2482					;
   2483	09E0  33 FF			     xor     di,di
   2484	09E2  E9 0266			     jmp     @18@1094
   2485	09E5			     @18@58:
   2486					;
   2487					;	   if (miniSO_thread[i].status!=FREE)  {
   2488					;
   2489	09E5  8B C7			     mov     ax,di
   2490	09E7  BA 001A			     mov     dx,26
   2491	09EA  F7 EA			     imul    dx
   2492	09EC  8B D8			     mov     bx,ax
   2493	09EE  83 BF 0004e FF		     cmp     word ptr DGROUP:_miniSO_thread[bx+4],-1
   2494	09F3  75 03			     jne     @@4
   2495	09F5  E9 0252			     jmp     @18@1066
   2496	09F8			     @@4:
   2497					;
   2498					;	      inttostr(str,i);
   2499					;
   2500	09F8  57			     push    di
   2501	09F9  1E			     push    ds
   2502	09FA  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2503	09FD  50			     push    ax
   2504	09FE  E8 0000e			     call    near ptr _inttostr
   2505	0A01  83 C4 06			     add     sp,6
   2506					;
   2507					;	      l=strlen(str);
   2508					;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 45
command.ASM



   2509	0A04  1E			     push    ds
   2510	0A05  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2511	0A08  50			     push    ax
   2512	0A09  E8 0000e			     call    near ptr _strlen
   2513	0A0C  59			     pop     cx
   2514	0A0D  59			     pop     cx
   2515	0A0E  8B F0			     mov     si,ax
   2516	0A10  EB 08			     jmp     short @18@142
   2517	0A12			     @18@114:
   2518					;
   2519					;	      while (l++<3)
   2520					;		    putch(' ');
   2521					;
   2522	0A12  B8 0020			     mov     ax,32
   2523	0A15  50			     push    ax
   2524	0A16  E8 0000e			     call    near ptr _putch
   2525	0A19  59			     pop     cx
   2526	0A1A			     @18@142:
   2527	0A1A  8B C6			     mov     ax,si
   2528	0A1C  46			     inc     si
   2529	0A1D  3D 0003			     cmp     ax,3
   2530	0A20  7C F0			     jl	     short @18@114
   2531					;
   2532					;	      putstr(str);
   2533					;
   2534	0A22  1E			     push    ds
   2535	0A23  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2536	0A26  50			     push    ax
   2537	0A27  E8 0000e			     call    near ptr _putstr
   2538	0A2A  59			     pop     cx
   2539	0A2B  59			     pop     cx
   2540					;
   2541					;	      putstr("	");
   2542					;
   2543	0A2C  1E			     push    ds
   2544	0A2D  B8 06D8r			     mov     ax,offset DGROUP:s@+1596
   2545	0A30  50			     push    ax
   2546	0A31  E8 0000e			     call    near ptr _putstr
   2547	0A34  59			     pop     cx
   2548	0A35  59			     pop     cx
   2549					;
   2550					;	      inttostr(str,miniSO_thread[i].pid);
   2551					;
   2552	0A36  8B C7			     mov     ax,di
   2553	0A38  BA 001A			     mov     dx,26
   2554	0A3B  F7 EA			     imul    dx
   2555	0A3D  8B D8			     mov     bx,ax
   2556	0A3F  FF B7 0000e		     push    word ptr DGROUP:_miniSO_thread[bx]
   2557	0A43  1E			     push    ds
   2558	0A44  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2559	0A47  50			     push    ax
   2560	0A48  E8 0000e			     call    near ptr _inttostr
   2561	0A4B  83 C4 06			     add     sp,6
   2562					;
   2563					;	      l=strlen(str);
   2564					;
   2565	0A4E  1E			     push    ds
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 46
command.ASM



   2566	0A4F  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2567	0A52  50			     push    ax
   2568	0A53  E8 0000e			     call    near ptr _strlen
   2569	0A56  59			     pop     cx
   2570	0A57  59			     pop     cx
   2571	0A58  8B F0			     mov     si,ax
   2572	0A5A  EB 08			     jmp     short @18@226
   2573	0A5C			     @18@198:
   2574					;
   2575					;	      while (l++<5)
   2576					;		    putch(' ');
   2577					;
   2578	0A5C  B8 0020			     mov     ax,32
   2579	0A5F  50			     push    ax
   2580	0A60  E8 0000e			     call    near ptr _putch
   2581	0A63  59			     pop     cx
   2582	0A64			     @18@226:
   2583	0A64  8B C6			     mov     ax,si
   2584	0A66  46			     inc     si
   2585	0A67  3D 0005			     cmp     ax,5
   2586	0A6A  7C F0			     jl	     short @18@198
   2587					;
   2588					;	      putstr(str);
   2589					;
   2590	0A6C  1E			     push    ds
   2591	0A6D  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2592	0A70  50			     push    ax
   2593	0A71  E8 0000e			     call    near ptr _putstr
   2594	0A74  59			     pop     cx
   2595	0A75  59			     pop     cx
   2596					;
   2597					;	      putstr("	");
   2598					;
   2599	0A76  1E			     push    ds
   2600	0A77  B8 06DBr			     mov     ax,offset DGROUP:s@+1599
   2601	0A7A  50			     push    ax
   2602	0A7B  E8 0000e			     call    near ptr _putstr
   2603	0A7E  59			     pop     cx
   2604	0A7F  59			     pop     cx
   2605					;
   2606					;	      inttostr(str,miniSO_thread[i].ppid);
   2607					;
   2608	0A80  8B C7			     mov     ax,di
   2609	0A82  BA 001A			     mov     dx,26
   2610	0A85  F7 EA			     imul    dx
   2611	0A87  8B D8			     mov     bx,ax
   2612	0A89  FF B7 0002e		     push    word ptr DGROUP:_miniSO_thread[bx+2]
   2613	0A8D  1E			     push    ds
   2614	0A8E  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2615	0A91  50			     push    ax
   2616	0A92  E8 0000e			     call    near ptr _inttostr
   2617	0A95  83 C4 06			     add     sp,6
   2618					;
   2619					;	      l=strlen(str);
   2620					;
   2621	0A98  1E			     push    ds
   2622	0A99  B8 0000r			     mov     ax,offset DGROUP:b@w+0
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 47
command.ASM



   2623	0A9C  50			     push    ax
   2624	0A9D  E8 0000e			     call    near ptr _strlen
   2625	0AA0  59			     pop     cx
   2626	0AA1  59			     pop     cx
   2627	0AA2  8B F0			     mov     si,ax
   2628	0AA4  EB 08			     jmp     short @18@310
   2629	0AA6			     @18@282:
   2630					;
   2631					;	      while (l++<5)
   2632					;		    putch(' ');
   2633					;
   2634	0AA6  B8 0020			     mov     ax,32
   2635	0AA9  50			     push    ax
   2636	0AAA  E8 0000e			     call    near ptr _putch
   2637	0AAD  59			     pop     cx
   2638	0AAE			     @18@310:
   2639	0AAE  8B C6			     mov     ax,si
   2640	0AB0  46			     inc     si
   2641	0AB1  3D 0005			     cmp     ax,5
   2642	0AB4  7C F0			     jl	     short @18@282
   2643					;
   2644					;	      putstr(str);
   2645					;
   2646	0AB6  1E			     push    ds
   2647	0AB7  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2648	0ABA  50			     push    ax
   2649	0ABB  E8 0000e			     call    near ptr _putstr
   2650	0ABE  59			     pop     cx
   2651	0ABF  59			     pop     cx
   2652					;
   2653					;	      putstr("	");
   2654					;
   2655	0AC0  1E			     push    ds
   2656	0AC1  B8 06DEr			     mov     ax,offset DGROUP:s@+1602
   2657	0AC4  50			     push    ax
   2658	0AC5  E8 0000e			     call    near ptr _putstr
   2659	0AC8  59			     pop     cx
   2660	0AC9  59			     pop     cx
   2661					;
   2662					;	      switch(miniSO_thread[i].status)  {
   2663					;
   2664	0ACA  8B C7			     mov     ax,di
   2665	0ACC  BA 001A			     mov     dx,26
   2666	0ACF  F7 EA			     imul    dx
   2667	0AD1  8B D8			     mov     bx,ax
   2668	0AD3  8B 9F 0004e		     mov     bx,word ptr DGROUP:_miniSO_thread[bx+4]
   2669	0AD7  43			     inc     bx
   2670	0AD8  83 FB 07			     cmp     bx,7
   2671	0ADB  77 3D			     ja	     short @18@702
   2672	0ADD  D1 E3			     shl     bx,1
   2673	0ADF  2E: FF A7	0C5Br		     jmp     word ptr cs:@18@C1266[bx]
   2674	0AE4			     @18@450:
   2675					;
   2676					;		    case FREE:	  putstr(strFREE);    break;
   2677					;
   2678	0AE4  1E			     push    ds
   2679	0AE5  B8 06E1r			     mov     ax,offset DGROUP:s@+1605
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 48
command.ASM



   2680	0AE8			     @18@478:
   2681	0AE8  50			     push    ax
   2682	0AE9  E8 0000e			     call    near ptr _putstr
   2683	0AEC  59			     pop     cx
   2684	0AED  59			     pop     cx
   2685	0AEE  EB 2A			     jmp     short @18@702
   2686	0AF0			     @18@506:
   2687					;
   2688					;		    case READY:	  putstr(strREADY);   break;
   2689					;
   2690	0AF0  1E			     push    ds
   2691	0AF1  B8 06E9r			     mov     ax,offset DGROUP:s@+1613
   2692	0AF4  EB F2			     jmp     short @18@478
   2693	0AF6			     @18@534:
   2694					;
   2695					;		    case RUNNING: putstr(strRUNNING); break;
   2696					;
   2697	0AF6  1E			     push    ds
   2698	0AF7  B8 06F1r			     mov     ax,offset DGROUP:s@+1621
   2699	0AFA  EB EC			     jmp     short @18@478
   2700	0AFC			     @18@562:
   2701					;
   2702					;		    case ZOMBIE:  putstr(strZOMBIE);  break;
   2703					;
   2704	0AFC  1E			     push    ds
   2705	0AFD  B8 06F9r			     mov     ax,offset DGROUP:s@+1629
   2706	0B00  EB E6			     jmp     short @18@478
   2707	0B02			     @18@590:
   2708					;
   2709					;		    case WAIT:	  putstr(strWAIT);    break;
   2710					;
   2711	0B02  1E			     push    ds
   2712	0B03  B8 0701r			     mov     ax,offset DGROUP:s@+1637
   2713	0B06  EB E0			     jmp     short @18@478
   2714	0B08			     @18@618:
   2715					;
   2716					;		    case WAITSIG: putstr(strWAITSIG); break;
   2717					;
   2718	0B08  1E			     push    ds
   2719	0B09  B8 0709r			     mov     ax,offset DGROUP:s@+1645
   2720	0B0C  EB DA			     jmp     short @18@478
   2721	0B0E			     @18@646:
   2722					;
   2723					;		    case WAITSEM: putstr(strWAITSEM); break;
   2724					;
   2725	0B0E  1E			     push    ds
   2726	0B0F  B8 0711r			     mov     ax,offset DGROUP:s@+1653
   2727	0B12  EB D4			     jmp     short @18@478
   2728	0B14			     @18@674:
   2729					;
   2730					;		    case STOPPED: putstr(strSTOPPED); break;
   2731					;
   2732	0B14  1E			     push    ds
   2733	0B15  B8 0719r			     mov     ax,offset DGROUP:s@+1661
   2734	0B18  EB CE			     jmp     short @18@478
   2735	0B1A			     @18@702:
   2736					;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 49
command.ASM



   2737					;	      }
   2738					;	      putstr("	");
   2739					;
   2740	0B1A  1E			     push    ds
   2741	0B1B  B8 0721r			     mov     ax,offset DGROUP:s@+1669
   2742	0B1E  50			     push    ax
   2743	0B1F  E8 0000e			     call    near ptr _putstr
   2744	0B22  59			     pop     cx
   2745	0B23  59			     pop     cx
   2746					;
   2747					;	      inttostr(str,miniSO_thread[i].wait);
   2748					;
   2749	0B24  8B C7			     mov     ax,di
   2750	0B26  BA 001A			     mov     dx,26
   2751	0B29  F7 EA			     imul    dx
   2752	0B2B  8B D8			     mov     bx,ax
   2753	0B2D  FF B7 000Ee		     push    word ptr DGROUP:_miniSO_thread[bx+14]
   2754	0B31  1E			     push    ds
   2755	0B32  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2756	0B35  50			     push    ax
   2757	0B36  E8 0000e			     call    near ptr _inttostr
   2758	0B39  83 C4 06			     add     sp,6
   2759					;
   2760					;	      l=strlen(str);
   2761					;
   2762	0B3C  1E			     push    ds
   2763	0B3D  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2764	0B40  50			     push    ax
   2765	0B41  E8 0000e			     call    near ptr _strlen
   2766	0B44  59			     pop     cx
   2767	0B45  59			     pop     cx
   2768	0B46  8B F0			     mov     si,ax
   2769	0B48  EB 08			     jmp     short @18@758
   2770	0B4A			     @18@730:
   2771					;
   2772					;	      while (l++<5)
   2773					;		    putch(' ');
   2774					;
   2775	0B4A  B8 0020			     mov     ax,32
   2776	0B4D  50			     push    ax
   2777	0B4E  E8 0000e			     call    near ptr _putch
   2778	0B51  59			     pop     cx
   2779	0B52			     @18@758:
   2780	0B52  8B C6			     mov     ax,si
   2781	0B54  46			     inc     si
   2782	0B55  3D 0005			     cmp     ax,5
   2783	0B58  7C F0			     jl	     short @18@730
   2784					;
   2785					;	      putstr(str);
   2786					;
   2787	0B5A  1E			     push    ds
   2788	0B5B  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2789	0B5E  50			     push    ax
   2790	0B5F  E8 0000e			     call    near ptr _putstr
   2791	0B62  59			     pop     cx
   2792	0B63  59			     pop     cx
   2793					;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 50
command.ASM



   2794					;
   2795					;	      putstr("	");
   2796					;
   2797	0B64  1E			     push    ds
   2798	0B65  B8 0724r			     mov     ax,offset DGROUP:s@+1672
   2799	0B68  50			     push    ax
   2800	0B69  E8 0000e			     call    near ptr _putstr
   2801	0B6C  59			     pop     cx
   2802	0B6D  59			     pop     cx
   2803					;
   2804					;	      inttostr(str,miniSO_thread[i].zombies);
   2805					;
   2806	0B6E  8B C7			     mov     ax,di
   2807	0B70  BA 001A			     mov     dx,26
   2808	0B73  F7 EA			     imul    dx
   2809	0B75  8B D8			     mov     bx,ax
   2810	0B77  FF B7 0014e		     push    word ptr DGROUP:_miniSO_thread[bx+20]
   2811	0B7B  1E			     push    ds
   2812	0B7C  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2813	0B7F  50			     push    ax
   2814	0B80  E8 0000e			     call    near ptr _inttostr
   2815	0B83  83 C4 06			     add     sp,6
   2816					;
   2817					;	      l=strlen(str);
   2818					;
   2819	0B86  1E			     push    ds
   2820	0B87  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2821	0B8A  50			     push    ax
   2822	0B8B  E8 0000e			     call    near ptr _strlen
   2823	0B8E  59			     pop     cx
   2824	0B8F  59			     pop     cx
   2825	0B90  8B F0			     mov     si,ax
   2826	0B92  EB 08			     jmp     short @18@842
   2827	0B94			     @18@814:
   2828					;
   2829					;	      while (l++<5)
   2830					;		    putch(' ');
   2831					;
   2832	0B94  B8 0020			     mov     ax,32
   2833	0B97  50			     push    ax
   2834	0B98  E8 0000e			     call    near ptr _putch
   2835	0B9B  59			     pop     cx
   2836	0B9C			     @18@842:
   2837	0B9C  8B C6			     mov     ax,si
   2838	0B9E  46			     inc     si
   2839	0B9F  3D 0005			     cmp     ax,5
   2840	0BA2  7C F0			     jl	     short @18@814
   2841					;
   2842					;	      putstr(str);
   2843					;
   2844	0BA4  1E			     push    ds
   2845	0BA5  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2846	0BA8  50			     push    ax
   2847	0BA9  E8 0000e			     call    near ptr _putstr
   2848	0BAC  59			     pop     cx
   2849	0BAD  59			     pop     cx
   2850					;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 51
command.ASM



   2851					;
   2852					;	      putstr(" ");
   2853					;
   2854	0BAE  1E			     push    ds
   2855	0BAF  B8 0727r			     mov     ax,offset DGROUP:s@+1675
   2856	0BB2  50			     push    ax
   2857	0BB3  E8 0000e			     call    near ptr _putstr
   2858	0BB6  59			     pop     cx
   2859	0BB7  59			     pop     cx
   2860					;
   2861					;	      inttostr(str,miniSO_thread[i].prev);
   2862					;
   2863	0BB8  8B C7			     mov     ax,di
   2864	0BBA  BA 001A			     mov     dx,26
   2865	0BBD  F7 EA			     imul    dx
   2866	0BBF  8B D8			     mov     bx,ax
   2867	0BC1  FF B7 0016e		     push    word ptr DGROUP:_miniSO_thread[bx+22]
   2868	0BC5  1E			     push    ds
   2869	0BC6  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2870	0BC9  50			     push    ax
   2871	0BCA  E8 0000e			     call    near ptr _inttostr
   2872	0BCD  83 C4 06			     add     sp,6
   2873					;
   2874					;	      l=strlen(str);
   2875					;
   2876	0BD0  1E			     push    ds
   2877	0BD1  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2878	0BD4  50			     push    ax
   2879	0BD5  E8 0000e			     call    near ptr _strlen
   2880	0BD8  59			     pop     cx
   2881	0BD9  59			     pop     cx
   2882	0BDA  8B F0			     mov     si,ax
   2883	0BDC  EB 08			     jmp     short @18@926
   2884	0BDE			     @18@898:
   2885					;
   2886					;	      while (l++<5)
   2887					;		    putch(' ');
   2888					;
   2889	0BDE  B8 0020			     mov     ax,32
   2890	0BE1  50			     push    ax
   2891	0BE2  E8 0000e			     call    near ptr _putch
   2892	0BE5  59			     pop     cx
   2893	0BE6			     @18@926:
   2894	0BE6  8B C6			     mov     ax,si
   2895	0BE8  46			     inc     si
   2896	0BE9  3D 0005			     cmp     ax,5
   2897	0BEC  7C F0			     jl	     short @18@898
   2898					;
   2899					;	      putstr(str);
   2900					;
   2901	0BEE  1E			     push    ds
   2902	0BEF  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2903	0BF2  50			     push    ax
   2904	0BF3  E8 0000e			     call    near ptr _putstr
   2905	0BF6  59			     pop     cx
   2906	0BF7  59			     pop     cx
   2907					;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 52
command.ASM



   2908					;
   2909					;	      putstr("	");
   2910					;
   2911	0BF8  1E			     push    ds
   2912	0BF9  B8 0729r			     mov     ax,offset DGROUP:s@+1677
   2913	0BFC  50			     push    ax
   2914	0BFD  E8 0000e			     call    near ptr _putstr
   2915	0C00  59			     pop     cx
   2916	0C01  59			     pop     cx
   2917					;
   2918					;	      inttostr(str,miniSO_thread[i].next);
   2919					;
   2920	0C02  8B C7			     mov     ax,di
   2921	0C04  BA 001A			     mov     dx,26
   2922	0C07  F7 EA			     imul    dx
   2923	0C09  8B D8			     mov     bx,ax
   2924	0C0B  FF B7 0018e		     push    word ptr DGROUP:_miniSO_thread[bx+24]
   2925	0C0F  1E			     push    ds
   2926	0C10  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2927	0C13  50			     push    ax
   2928	0C14  E8 0000e			     call    near ptr _inttostr
   2929	0C17  83 C4 06			     add     sp,6
   2930					;
   2931					;	      l=strlen(str);
   2932					;
   2933	0C1A  1E			     push    ds
   2934	0C1B  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2935	0C1E  50			     push    ax
   2936	0C1F  E8 0000e			     call    near ptr _strlen
   2937	0C22  59			     pop     cx
   2938	0C23  59			     pop     cx
   2939	0C24  8B F0			     mov     si,ax
   2940	0C26  EB 08			     jmp     short @18@1010
   2941	0C28			     @18@982:
   2942					;
   2943					;	      while (l++<5)
   2944					;		    putch(' ');
   2945					;
   2946	0C28  B8 0020			     mov     ax,32
   2947	0C2B  50			     push    ax
   2948	0C2C  E8 0000e			     call    near ptr _putch
   2949	0C2F  59			     pop     cx
   2950	0C30			     @18@1010:
   2951	0C30  8B C6			     mov     ax,si
   2952	0C32  46			     inc     si
   2953	0C33  3D 0005			     cmp     ax,5
   2954	0C36  7C F0			     jl	     short @18@982
   2955					;
   2956					;	      putstr(str);
   2957					;
   2958	0C38  1E			     push    ds
   2959	0C39  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2960	0C3C  50			     push    ax
   2961	0C3D  E8 0000e			     call    near ptr _putstr
   2962	0C40  59			     pop     cx
   2963	0C41  59			     pop     cx
   2964					;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 53
command.ASM



   2965					;	      putch('\n');
   2966					;
   2967	0C42  B8 000A			     mov     ax,10
   2968	0C45  50			     push    ax
   2969	0C46  E8 0000e			     call    near ptr _putch
   2970	0C49  59			     pop     cx
   2971	0C4A			     @18@1066:
   2972	0C4A  47			     inc     di
   2973	0C4B			     @18@1094:
   2974	0C4B  83 FF 10			     cmp     di,16
   2975	0C4E  7D 03			     jge     @@5
   2976	0C50  E9 FD92			     jmp     @18@58
   2977	0C53			     @@5:
   2978					;
   2979					;	   }
   2980					;      }
   2981					;      return 0;
   2982					;
   2983	0C53  33 C0			     xor     ax,ax
   2984	0C55  EB 00			     jmp     short @18@1150
   2985	0C57			     @18@1150:
   2986					;
   2987					;    }
   2988					;
   2989	0C57  5F			     pop     di
   2990	0C58  5E			     pop     si
   2991	0C59  5D			     pop     bp
   2992	0C5A  C3			     ret
   2993	0C5B			     _cmd_ps endp
   2994	0C5B			     @18@C1266	     label   word
   2995	0C5B  0AE4r			     dw	     @18@450
   2996	0C5D  0AF0r			     dw	     @18@506
   2997	0C5F  0AF6r			     dw	     @18@534
   2998	0C61  0AFCr			     dw	     @18@562
   2999	0C63  0B02r			     dw	     @18@590
   3000	0C65  0B08r			     dw	     @18@618
   3001	0C67  0B0Er			     dw	     @18@646
   3002	0C69  0B14r			     dw	     @18@674
   3003					;
   3004					;    int cmd_kill(int argc, char far *argv[])
   3005					;
   3006					     assume  cs:_TEXT
   3007	0C6B			     _cmd_kill	     proc    near
   3008	0C6B  55			     push    bp
   3009	0C6C  8B EC			     mov     bp,sp
   3010	0C6E  56			     push    si
   3011	0C6F  57			     push    di
   3012					;
   3013					;    {
   3014					;      int t=0;
   3015					;
   3016	0C70  33 F6			     xor     si,si
   3017					;
   3018					;      pid_t pid=0;
   3019					;
   3020	0C72  33 FF			     xor     di,di
   3021					;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 54
command.ASM



   3022					;      char str[10];
   3023					;
   3024					;      if (argc<=1)  {
   3025					;
   3026	0C74  83 7E 04 01		     cmp     word ptr [bp+4],1
   3027	0C78  7F 0F			     jg	     short @19@142
   3028					;
   3029					;	  putstr("Erro em kill:	parametro nao fornecido!\n");
   3030					;
   3031	0C7A  1E			     push    ds
   3032	0C7B  B8 072Cr			     mov     ax,offset DGROUP:s@+1680
   3033	0C7E			     @19@86:
   3034	0C7E  50			     push    ax
   3035	0C7F  E8 0000e			     call    near ptr _putstr
   3036	0C82  59			     pop     cx
   3037	0C83  59			     pop     cx
   3038					;
   3039					;	  return 1;
   3040					;
   3041	0C84  B8 0001			     mov     ax,1
   3042	0C87			     @19@114:
   3043	0C87  EB 26			     jmp     short @19@226
   3044	0C89			     @19@142:
   3045					;
   3046					;      }
   3047					;      pid = atoi(argv[1]);
   3048					;
   3049	0C89  8B 5E 06			     mov     bx,word ptr [bp+6]
   3050	0C8C  FF 77 06			     push    word ptr [bx+6]
   3051	0C8F  FF 77 04			     push    word ptr [bx+4]
   3052	0C92  E8 0000e			     call    near ptr _atoi
   3053	0C95  59			     pop     cx
   3054	0C96  59			     pop     cx
   3055	0C97  8B F8			     mov     di,ax
   3056					;
   3057					;      t = kill(pid);
   3058					;
   3059	0C99  57			     push    di
   3060	0C9A  E8 0000e			     call    near ptr _kill
   3061	0C9D  59			     pop     cx
   3062	0C9E  8B F0			     mov     si,ax
   3063					;
   3064					;      if (t==miniSO_ERROR)  {
   3065					;
   3066	0CA0  83 FE FF			     cmp     si,-1
   3067	0CA3  75 06			     jne     short @19@198
   3068					;
   3069					;	  putstr("kill:	impossivel matar o processo/thread\n");
   3070					;
   3071	0CA5  1E			     push    ds
   3072	0CA6  B8 0754r			     mov     ax,offset DGROUP:s@+1720
   3073	0CA9  EB D3			     jmp     short @19@86
   3074	0CAB			     @19@198:
   3075					;
   3076					;	  return 1;
   3077					;      }
   3078					;      return 0;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 55
command.ASM



   3079					;
   3080	0CAB  33 C0			     xor     ax,ax
   3081	0CAD  EB D8			     jmp     short @19@114
   3082	0CAF			     @19@226:
   3083					;
   3084					;    }
   3085					;
   3086	0CAF  5F			     pop     di
   3087	0CB0  5E			     pop     si
   3088	0CB1  5D			     pop     bp
   3089	0CB2  C3			     ret
   3090	0CB3			     _cmd_kill	     endp
   3091					;
   3092					;    int cmd_set(int argc, char	far *argv[])
   3093					;
   3094					     assume  cs:_TEXT
   3095	0CB3			     _cmd_set	     proc    near
   3096	0CB3  55			     push    bp
   3097	0CB4  8B EC			     mov     bp,sp
   3098	0CB6  83 EC 02			     sub     sp,2
   3099	0CB9  56			     push    si
   3100	0CBA  57			     push    di
   3101	0CBB  8B 76 04			     mov     si,word ptr [bp+4]
   3102	0CBE  8B 7E 06			     mov     di,word ptr [bp+6]
   3103					;
   3104					;    {
   3105					;      int res;
   3106					;
   3107					;      if (argc	== 1)  {
   3108					;
   3109	0CC1  83 FE 01			     cmp     si,1
   3110	0CC4  75 07			     jne     short @20@142
   3111					;
   3112					;	  command_var_list();
   3113					;
   3114	0CC6  E8 F954			     call    near ptr command_var_list
   3115					;
   3116					;	  return 0;
   3117					;
   3118	0CC9			     @20@86:
   3119	0CC9  33 C0			     xor     ax,ax
   3120	0CCB			     @20@114:
   3121	0CCB  EB 71			     jmp     short @20@534
   3122	0CCD			     @20@142:
   3123					;
   3124					;      }
   3125					;      if (argc	== 2)
   3126					;
   3127	0CCD  83 FE 02			     cmp     si,2
   3128	0CD0  75 16			     jne     short @20@198
   3129					;
   3130					;	  res =	command_var_set(argv[1],"");
   3131					;
   3132	0CD2  1E			     push    ds
   3133	0CD3  B8 077Er			     mov     ax,offset DGROUP:s@+1762
   3134	0CD6  50			     push    ax
   3135	0CD7  FF 75 06			     push    word ptr [di+6]
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 56
command.ASM



   3136	0CDA  FF 75 04			     push    word ptr [di+4]
   3137	0CDD  E8 FA5C			     call    near ptr command_var_set
   3138	0CE0  83 C4 08			     add     sp,8
   3139	0CE3  89 46 FE			     mov     word ptr [bp-2],ax
   3140	0CE6  EB 21			     jmp     short @20@282
   3141	0CE8			     @20@198:
   3142					;
   3143					;      else if (argc ==	3)
   3144					;
   3145	0CE8  83 FE 03			     cmp     si,3
   3146	0CEB  75 17			     jne     short @20@254
   3147					;
   3148					;	    res	= command_var_set(argv[1],argv[2]);
   3149					;
   3150	0CED  FF 75 0A			     push    word ptr [di+10]
   3151	0CF0  FF 75 08			     push    word ptr [di+8]
   3152	0CF3  FF 75 06			     push    word ptr [di+6]
   3153	0CF6  FF 75 04			     push    word ptr [di+4]
   3154	0CF9  E8 FA40			     call    near ptr command_var_set
   3155	0CFC  83 C4 08			     add     sp,8
   3156	0CFF  89 46 FE			     mov     word ptr [bp-2],ax
   3157	0D02  EB 05			     jmp     short @20@282
   3158	0D04			     @20@254:
   3159					;
   3160					;      else
   3161					;	  res =	-5;
   3162					;
   3163	0D04  C7 46 FE FFFB		     mov     word ptr [bp-2],-5
   3164	0D09			     @20@282:
   3165					;
   3166					;      switch (res)  {
   3167					;
   3168	0D09  8B 5E FE			     mov     bx,word ptr [bp-2]
   3169	0D0C  83 EB FB			     sub     bx,-5
   3170	0D0F  83 FB 03			     cmp     bx,3
   3171	0D12  77 28			     ja	     short @20@506
   3172	0D14  D1 E3			     shl     bx,1
   3173	0D16  2E: FF A7	0D44r		     jmp     word ptr cs:@20@C482[bx]
   3174	0D1B			     @20@366:
   3175					;
   3176					;	      case -2:
   3177					;		   putstr("Erro	em set:	nao ha espaco para novas variaveis!\n");
   3178					;
   3179	0D1B  1E			     push    ds
   3180	0D1C  B8 077Fr			     mov     ax,offset DGROUP:s@+1763
   3181	0D1F  EB 10			     jmp     short @20@478
   3182	0D21			     @20@394:
   3183					;
   3184					;		   return 1;
   3185					;	      case -3:
   3186					;		   putstr("Erro	em set:	o tamanho do nome da variavel e	muito grande!\n");
   3187					;
   3188	0D21  1E			     push    ds
   3189	0D22  B8 07B1r			     mov     ax,offset DGROUP:s@+1813
   3190	0D25  EB 0A			     jmp     short @20@478
   3191	0D27			     @20@422:
   3192					;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 57
command.ASM



   3193					;		   return 1;
   3194					;	      case -4:
   3195					;		   putstr("Erro	em set:	o tamanho do conteudo da variavel e muito	    +
   3196				     grande!\n");
   3197					;
   3198	0D27  1E			     push    ds
   3199	0D28  B8 07EDr			     mov     ax,offset DGROUP:s@+1873
   3200	0D2B  EB 04			     jmp     short @20@478
   3201	0D2D			     @20@450:
   3202					;
   3203					;		   return 1;
   3204					;	      case -5:
   3205					;		   putstr("Erro	em set:	argumentos demais na linha de comando!\n");
   3206					;
   3207	0D2D  1E			     push    ds
   3208	0D2E  B8 082Dr			     mov     ax,offset DGROUP:s@+1937
   3209	0D31			     @20@478:
   3210	0D31  50			     push    ax
   3211	0D32  E8 0000e			     call    near ptr _putstr
   3212	0D35  59			     pop     cx
   3213	0D36  59			     pop     cx
   3214					;
   3215					;		   return 1;
   3216					;
   3217	0D37  B8 0001			     mov     ax,1
   3218	0D3A  EB 8F			     jmp     short @20@114
   3219	0D3C			     @20@506:
   3220	0D3C  EB 8B			     jmp     short @20@86
   3221	0D3E			     @20@534:
   3222					;
   3223					;      }
   3224					;      return 0;
   3225					;    }
   3226					;
   3227	0D3E  5F			     pop     di
   3228	0D3F  5E			     pop     si
   3229	0D40  8B E5			     mov     sp,bp
   3230	0D42  5D			     pop     bp
   3231	0D43  C3			     ret
   3232	0D44			     _cmd_set	     endp
   3233	0D44			     @20@C482	     label   word
   3234	0D44  0D2Dr			     dw	     @20@450
   3235	0D46  0D27r			     dw	     @20@422
   3236	0D48  0D21r			     dw	     @20@394
   3237	0D4A  0D1Br			     dw	     @20@366
   3238					;
   3239					;    int cmd_unset(int argc, char far *argv[])
   3240					;
   3241					     assume  cs:_TEXT
   3242	0D4C			     _cmd_unset	     proc    near
   3243	0D4C  55			     push    bp
   3244	0D4D  8B EC			     mov     bp,sp
   3245	0D4F  83 EC 02			     sub     sp,2
   3246					;
   3247					;    {
   3248					;      int res;
   3249					;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 58
command.ASM



   3250					;      if (argc	!= 2)  {
   3251					;
   3252	0D52  83 7E 04 02		     cmp     word ptr [bp+4],2
   3253	0D56  74 0F			     je	     short @21@142
   3254					;
   3255					;	  putstr("Erro em unset: numero	invalido de argumentos!\n");
   3256					;
   3257	0D58  1E			     push    ds
   3258	0D59  B8 0862r			     mov     ax,offset DGROUP:s@+1990
   3259	0D5C			     @21@86:
   3260	0D5C  50			     push    ax
   3261	0D5D  E8 0000e			     call    near ptr _putstr
   3262	0D60  59			     pop     cx
   3263	0D61  59			     pop     cx
   3264					;
   3265					;	  return 1;
   3266					;
   3267	0D62  B8 0001			     mov     ax,1
   3268	0D65			     @21@114:
   3269	0D65  EB 21			     jmp     short @21@226
   3270	0D67			     @21@142:
   3271					;
   3272					;      }
   3273					;      res = command_var_unset(argv[1]);
   3274					;
   3275	0D67  8B 5E 06			     mov     bx,word ptr [bp+6]
   3276	0D6A  FF 77 06			     push    word ptr [bx+6]
   3277	0D6D  FF 77 04			     push    word ptr [bx+4]
   3278	0D70  E8 F95A			     call    near ptr command_var_unset
   3279	0D73  59			     pop     cx
   3280	0D74  59			     pop     cx
   3281	0D75  89 46 FE			     mov     word ptr [bp-2],ax
   3282					;
   3283					;      if (res == -1)  {
   3284					;
   3285	0D78  83 7E FE FF		     cmp     word ptr [bp-2],-1
   3286	0D7C  75 06			     jne     short @21@198
   3287					;
   3288					;	  putstr("Erro em unset: variavel inexistente!\n");
   3289					;
   3290	0D7E  1E			     push    ds
   3291	0D7F  B8 0891r			     mov     ax,offset DGROUP:s@+2037
   3292	0D82  EB D8			     jmp     short @21@86
   3293	0D84			     @21@198:
   3294					;
   3295					;	  return 1;
   3296					;      }
   3297					;      return 0;
   3298					;
   3299	0D84  33 C0			     xor     ax,ax
   3300	0D86  EB DD			     jmp     short @21@114
   3301	0D88			     @21@226:
   3302					;
   3303					;    }
   3304					;
   3305	0D88  8B E5			     mov     sp,bp
   3306	0D8A  5D			     pop     bp
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 59
command.ASM



   3307	0D8B  C3			     ret
   3308	0D8C			     _cmd_unset	     endp
   3309					;
   3310					;    int cmd_echo(int argc, char far *argv[])
   3311					;
   3312					     assume  cs:_TEXT
   3313	0D8C			     _cmd_echo	     proc    near
   3314	0D8C  55			     push    bp
   3315	0D8D  8B EC			     mov     bp,sp
   3316	0D8F  83 EC 02			     sub     sp,2
   3317	0D92  56			     push    si
   3318	0D93  57			     push    di
   3319	0D94  8B 7E 06			     mov     di,word ptr [bp+6]
   3320					;
   3321					;    {
   3322					;      int i,control_n=1;
   3323					;
   3324	0D97  C7 46 FE 0001		     mov     word ptr [bp-2],1
   3325					;
   3326					;
   3327					;      if (argc>1)  {
   3328					;
   3329	0D9C  83 7E 04 01		     cmp     word ptr [bp+4],1
   3330	0DA0  7E 55			     jle     short @22@338
   3331					;
   3332					;	  if (strcmp(argv[1],"-n")==0)
   3333					;
   3334	0DA2  1E			     push    ds
   3335	0DA3  B8 08B7r			     mov     ax,offset DGROUP:s@+2075
   3336	0DA6  50			     push    ax
   3337	0DA7  FF 75 06			     push    word ptr [di+6]
   3338	0DAA  FF 75 04			     push    word ptr [di+4]
   3339	0DAD  E8 0000e			     call    near ptr _strcmp
   3340	0DB0  83 C4 08			     add     sp,8
   3341	0DB3  0B C0			     or	     ax,ax
   3342	0DB5  75 07			     jne     short @22@114
   3343					;
   3344					;	     control_n = 0;
   3345					;
   3346	0DB7  C7 46 FE 0000		     mov     word ptr [bp-2],0
   3347	0DBC  EB 0B			     jmp     short @22@142
   3348	0DBE			     @22@114:
   3349					;
   3350					;	  else
   3351					;	     putstr(argv[1]);
   3352					;
   3353	0DBE  FF 75 06			     push    word ptr [di+6]
   3354	0DC1  FF 75 04			     push    word ptr [di+4]
   3355	0DC4  E8 0000e			     call    near ptr _putstr
   3356	0DC7  59			     pop     cx
   3357	0DC8  59			     pop     cx
   3358	0DC9			     @22@142:
   3359					;
   3360					;	  for (i=2;i<argc;++i)	{
   3361					;
   3362	0DC9  BE 0002			     mov     si,2
   3363	0DCC  EB 24			     jmp     short @22@310
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 60
command.ASM



   3364	0DCE			     @22@170:
   3365					;
   3366					;	      if (i!=2 || control_n)
   3367					;
   3368	0DCE  83 FE 02			     cmp     si,2
   3369	0DD1  75 06			     jne     short @22@226
   3370	0DD3  83 7E FE 00		     cmp     word ptr [bp-2],0
   3371	0DD7  74 08			     je	     short @22@254
   3372	0DD9			     @22@226:
   3373					;
   3374					;		 putch(' ');
   3375					;
   3376	0DD9  B8 0020			     mov     ax,32
   3377	0DDC  50			     push    ax
   3378	0DDD  E8 0000e			     call    near ptr _putch
   3379	0DE0  59			     pop     cx
   3380	0DE1			     @22@254:
   3381					;
   3382					;	      putstr(argv[i]);
   3383					;
   3384	0DE1  8B DE			     mov     bx,si
   3385	0DE3  B1 02			     mov     cl,2
   3386	0DE5  D3 E3			     shl     bx,cl
   3387	0DE7  FF 71 02			     push    word ptr [bx+di+2]
   3388	0DEA  FF 31			     push    word ptr [bx+di]
   3389	0DEC  E8 0000e			     call    near ptr _putstr
   3390	0DEF  59			     pop     cx
   3391	0DF0  59			     pop     cx
   3392	0DF1  46			     inc     si
   3393	0DF2			     @22@310:
   3394	0DF2  3B 76 04			     cmp     si,word ptr [bp+4]
   3395	0DF5  7C D7			     jl	     short @22@170
   3396	0DF7			     @22@338:
   3397					;
   3398					;	  }
   3399					;      }
   3400					;      if (control_n)
   3401					;
   3402	0DF7  83 7E FE 00		     cmp     word ptr [bp-2],0
   3403	0DFB  74 08			     je	     short @22@394
   3404					;
   3405					;	  putch('\n');
   3406					;
   3407	0DFD  B8 000A			     mov     ax,10
   3408	0E00  50			     push    ax
   3409	0E01  E8 0000e			     call    near ptr _putch
   3410	0E04  59			     pop     cx
   3411	0E05			     @22@394:
   3412					;
   3413					;      return 0;
   3414					;
   3415	0E05  33 C0			     xor     ax,ax
   3416	0E07  EB 00			     jmp     short @22@422
   3417	0E09			     @22@422:
   3418					;
   3419					;    }
   3420					;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 61
command.ASM



   3421	0E09  5F			     pop     di
   3422	0E0A  5E			     pop     si
   3423	0E0B  8B E5			     mov     sp,bp
   3424	0E0D  5D			     pop     bp
   3425	0E0E  C3			     ret
   3426	0E0F			     _cmd_echo	     endp
   3427	0E0F			     _TEXT   ends
   3428	0098			     _DATA   segment word public 'DATA'
   3429	0098			     demo_linha	     label   word
   3430	0098  FC			     db	     252
   3431	0099  FF			     db	     255
   3432	009A			     exitcode	     label   word
*Warning* command.ASM(3439) Reserved word used as symbol: EXITCODE
   3433	009A  00			     db	     0
   3434	009B  00			     db	     0
   3435	009C			     _DATA   ends
   3436	0E0F			     _TEXT   segment byte public 'CODE'
   3437					;
   3438					;    void demo()
   3439					;
   3440					     assume  cs:_TEXT
   3441	0E0F			     demo    proc    near
   3442	0E0F  55			     push    bp
   3443	0E10  8B EC			     mov     bp,sp
   3444	0E12  83 EC 16			     sub     sp,22
   3445	0E15  56			     push    si
   3446	0E16  57			     push    di
   3447					;
   3448					;    {
   3449					;      extern int demo_linha;
   3450					;      extern int exitcode;
   3451					;      unsigned	i;
   3452					;      int ini = demo_linha;
   3453					;
   3454	0E17  8B 3E 0098r		     mov     di,word ptr DGROUP:demo_linha
   3455					;
   3456					;      char str[20];
   3457					;      int ec =	exitcode;
   3458					;
   3459	0E1B  A1 009Ar			     mov     ax,word ptr DGROUP:exitcode
   3460	0E1E  89 46 FE			     mov     word ptr [bp-2],ax
   3461					;
   3462					;
   3463					;      putstrxy(65,ini+0,"⁄ƒƒ Thread ƒƒƒƒø");
   3464					;
   3465	0E21  1E			     push    ds
   3466	0E22  B8 08BAr			     mov     ax,offset DGROUP:s@+2078
   3467	0E25  50			     push    ax
   3468	0E26  57			     push    di
   3469	0E27  B8 0041			     mov     ax,65
   3470	0E2A  50			     push    ax
   3471	0E2B  E8 0000e			     call    near ptr _putstrxy
   3472	0E2E  83 C4 08			     add     sp,8
   3473					;
   3474					;      putstrxy(65,ini+1,"≥ PID	 =	 ≥");
   3475					;
   3476	0E31  1E			     push    ds
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 62
command.ASM



   3477	0E32  B8 08CBr			     mov     ax,offset DGROUP:s@+2095
   3478	0E35  50			     push    ax
   3479	0E36  8B C7			     mov     ax,di
   3480	0E38  40			     inc     ax
   3481	0E39  50			     push    ax
   3482	0E3A  B8 0041			     mov     ax,65
   3483	0E3D  50			     push    ax
   3484	0E3E  E8 0000e			     call    near ptr _putstrxy
   3485	0E41  83 C4 08			     add     sp,8
   3486					;
   3487					;      putstrxy(65,ini+2,"≥ Execucao:	 ≥");
   3488					;
   3489	0E44  1E			     push    ds
   3490	0E45  B8 08DCr			     mov     ax,offset DGROUP:s@+2112
   3491	0E48  50			     push    ax
   3492	0E49  8B C7			     mov     ax,di
   3493	0E4B  05 0002			     add     ax,2
   3494	0E4E  50			     push    ax
   3495	0E4F  B8 0041			     mov     ax,65
   3496	0E52  50			     push    ax
   3497	0E53  E8 0000e			     call    near ptr _putstrxy
   3498	0E56  83 C4 08			     add     sp,8
   3499					;
   3500					;      putstrxy(65,ini+3,"≥		 ≥");
   3501					;
   3502	0E59  1E			     push    ds
   3503	0E5A  B8 08EDr			     mov     ax,offset DGROUP:s@+2129
   3504	0E5D  50			     push    ax
   3505	0E5E  8B C7			     mov     ax,di
   3506	0E60  05 0003			     add     ax,3
   3507	0E63  50			     push    ax
   3508	0E64  B8 0041			     mov     ax,65
   3509	0E67  50			     push    ax
   3510	0E68  E8 0000e			     call    near ptr _putstrxy
   3511	0E6B  83 C4 08			     add     sp,8
   3512					;
   3513					;      putstrxy(65,ini+4,"¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ");
   3514					;
   3515	0E6E  1E			     push    ds
   3516	0E6F  B8 08FEr			     mov     ax,offset DGROUP:s@+2146
   3517	0E72  50			     push    ax
   3518	0E73  8B C7			     mov     ax,di
   3519	0E75  05 0004			     add     ax,4
   3520	0E78  50			     push    ax
   3521	0E79  B8 0041			     mov     ax,65
   3522	0E7C  50			     push    ax
   3523	0E7D  E8 0000e			     call    near ptr _putstrxy
   3524	0E80  83 C4 08			     add     sp,8
   3525					;
   3526					;
   3527					;      inttostr(str,getpid());
   3528					;
   3529	0E83  E8 0000e			     call    near ptr _getpid
   3530	0E86  50			     push    ax
   3531	0E87  16			     push    ss
   3532	0E88  8D 46 EA			     lea     ax,word ptr [bp-22]
   3533	0E8B  50			     push    ax
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 63
command.ASM



   3534	0E8C  E8 0000e			     call    near ptr _inttostr
   3535	0E8F  83 C4 06			     add     sp,6
   3536					;
   3537					;      putstrxy(74,ini+1,str);
   3538					;
   3539	0E92  16			     push    ss
   3540	0E93  8D 46 EA			     lea     ax,word ptr [bp-22]
   3541	0E96  50			     push    ax
   3542	0E97  8B C7			     mov     ax,di
   3543	0E99  40			     inc     ax
   3544	0E9A  50			     push    ax
   3545	0E9B  B8 004A			     mov     ax,74
   3546	0E9E  50			     push    ax
   3547	0E9F  E8 0000e			     call    near ptr _putstrxy
   3548	0EA2  83 C4 08			     add     sp,8
   3549					;
   3550					;
   3551					;      for (i=0;i<60000U;++i)  {
   3552					;
   3553	0EA5  33 F6			     xor     si,si
   3554	0EA7  EB 29			     jmp     short @23@114
   3555	0EA9			     @23@58:
   3556					;
   3557					;	   unsignedtostr(str,i,5,'0');
   3558					;
   3559	0EA9  B0 30			     mov     al,48
   3560	0EAB  50			     push    ax
   3561	0EAC  B8 0005			     mov     ax,5
   3562	0EAF  50			     push    ax
   3563	0EB0  56			     push    si
   3564	0EB1  16			     push    ss
   3565	0EB2  8D 46 EA			     lea     ax,word ptr [bp-22]
   3566	0EB5  50			     push    ax
   3567	0EB6  E8 0000e			     call    near ptr _unsignedtostr
   3568	0EB9  83 C4 0A			     add     sp,10
   3569					;
   3570					;	   putstrxy(70,ini+3,str);
   3571					;
   3572	0EBC  16			     push    ss
   3573	0EBD  8D 46 EA			     lea     ax,word ptr [bp-22]
   3574	0EC0  50			     push    ax
   3575	0EC1  8B C7			     mov     ax,di
   3576	0EC3  05 0003			     add     ax,3
   3577	0EC6  50			     push    ax
   3578	0EC7  B8 0046			     mov     ax,70
   3579	0ECA  50			     push    ax
   3580	0ECB  E8 0000e			     call    near ptr _putstrxy
   3581	0ECE  83 C4 08			     add     sp,8
   3582	0ED1  46			     inc     si
   3583	0ED2			     @23@114:
   3584	0ED2  81 FE EA60		     cmp     si,-5536
   3585	0ED6  72 D1			     jb	     short @23@58
   3586					;
   3587					;      }
   3588					;      for (i=0;i<60000U;++i)  {
   3589					;
   3590	0ED8  33 F6			     xor     si,si
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 64
command.ASM



   3591	0EDA  EB 29			     jmp     short @23@226
   3592	0EDC			     @23@170:
   3593					;
   3594					;	   unsignedtostr(str,i,5,'0');
   3595					;
   3596	0EDC  B0 30			     mov     al,48
   3597	0EDE  50			     push    ax
   3598	0EDF  B8 0005			     mov     ax,5
   3599	0EE2  50			     push    ax
   3600	0EE3  56			     push    si
   3601	0EE4  16			     push    ss
   3602	0EE5  8D 46 EA			     lea     ax,word ptr [bp-22]
   3603	0EE8  50			     push    ax
   3604	0EE9  E8 0000e			     call    near ptr _unsignedtostr
   3605	0EEC  83 C4 0A			     add     sp,10
   3606					;
   3607					;	   putstrxy(70,ini+3,str);
   3608					;
   3609	0EEF  16			     push    ss
   3610	0EF0  8D 46 EA			     lea     ax,word ptr [bp-22]
   3611	0EF3  50			     push    ax
   3612	0EF4  8B C7			     mov     ax,di
   3613	0EF6  05 0003			     add     ax,3
   3614	0EF9  50			     push    ax
   3615	0EFA  B8 0046			     mov     ax,70
   3616	0EFD  50			     push    ax
   3617	0EFE  E8 0000e			     call    near ptr _putstrxy
   3618	0F01  83 C4 08			     add     sp,8
   3619	0F04  46			     inc     si
   3620	0F05			     @23@226:
   3621	0F05  81 FE EA60		     cmp     si,-5536
   3622	0F09  72 D1			     jb	     short @23@170
   3623					;
   3624					;      }
   3625					;      for (i=0;i<60000U;++i)  {
   3626					;
   3627	0F0B  33 F6			     xor     si,si
   3628	0F0D  EB 29			     jmp     short @23@338
   3629	0F0F			     @23@282:
   3630					;
   3631					;	   unsignedtostr(str,i,5,'0');
   3632					;
   3633	0F0F  B0 30			     mov     al,48
   3634	0F11  50			     push    ax
   3635	0F12  B8 0005			     mov     ax,5
   3636	0F15  50			     push    ax
   3637	0F16  56			     push    si
   3638	0F17  16			     push    ss
   3639	0F18  8D 46 EA			     lea     ax,word ptr [bp-22]
   3640	0F1B  50			     push    ax
   3641	0F1C  E8 0000e			     call    near ptr _unsignedtostr
   3642	0F1F  83 C4 0A			     add     sp,10
   3643					;
   3644					;	   putstrxy(70,ini+3,str);
   3645					;
   3646	0F22  16			     push    ss
   3647	0F23  8D 46 EA			     lea     ax,word ptr [bp-22]
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 65
command.ASM



   3648	0F26  50			     push    ax
   3649	0F27  8B C7			     mov     ax,di
   3650	0F29  05 0003			     add     ax,3
   3651	0F2C  50			     push    ax
   3652	0F2D  B8 0046			     mov     ax,70
   3653	0F30  50			     push    ax
   3654	0F31  E8 0000e			     call    near ptr _putstrxy
   3655	0F34  83 C4 08			     add     sp,8
   3656	0F37  46			     inc     si
   3657	0F38			     @23@338:
   3658	0F38  81 FE EA60		     cmp     si,-5536
   3659	0F3C  72 D1			     jb	     short @23@282
   3660					;
   3661					;      }
   3662					;      for (i=0;i<60000U;++i)  {
   3663					;
   3664	0F3E  33 F6			     xor     si,si
   3665	0F40  EB 29			     jmp     short @23@450
   3666	0F42			     @23@394:
   3667					;
   3668					;	   unsignedtostr(str,i,5,'0');
   3669					;
   3670	0F42  B0 30			     mov     al,48
   3671	0F44  50			     push    ax
   3672	0F45  B8 0005			     mov     ax,5
   3673	0F48  50			     push    ax
   3674	0F49  56			     push    si
   3675	0F4A  16			     push    ss
   3676	0F4B  8D 46 EA			     lea     ax,word ptr [bp-22]
   3677	0F4E  50			     push    ax
   3678	0F4F  E8 0000e			     call    near ptr _unsignedtostr
   3679	0F52  83 C4 0A			     add     sp,10
   3680					;
   3681					;	   putstrxy(70,ini+3,str);
   3682					;
   3683	0F55  16			     push    ss
   3684	0F56  8D 46 EA			     lea     ax,word ptr [bp-22]
   3685	0F59  50			     push    ax
   3686	0F5A  8B C7			     mov     ax,di
   3687	0F5C  05 0003			     add     ax,3
   3688	0F5F  50			     push    ax
   3689	0F60  B8 0046			     mov     ax,70
   3690	0F63  50			     push    ax
   3691	0F64  E8 0000e			     call    near ptr _putstrxy
   3692	0F67  83 C4 08			     add     sp,8
   3693	0F6A  46			     inc     si
   3694	0F6B			     @23@450:
   3695	0F6B  81 FE EA60		     cmp     si,-5536
   3696	0F6F  72 D1			     jb	     short @23@394
   3697					;
   3698					;      }
   3699					;      for (i=0;i<60000U;++i)  {
   3700					;
   3701	0F71  33 F6			     xor     si,si
   3702	0F73  EB 29			     jmp     short @23@562
   3703	0F75			     @23@506:
   3704					;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 66
command.ASM



   3705					;	   unsignedtostr(str,i,5,'0');
   3706					;
   3707	0F75  B0 30			     mov     al,48
   3708	0F77  50			     push    ax
   3709	0F78  B8 0005			     mov     ax,5
   3710	0F7B  50			     push    ax
   3711	0F7C  56			     push    si
   3712	0F7D  16			     push    ss
   3713	0F7E  8D 46 EA			     lea     ax,word ptr [bp-22]
   3714	0F81  50			     push    ax
   3715	0F82  E8 0000e			     call    near ptr _unsignedtostr
   3716	0F85  83 C4 0A			     add     sp,10
   3717					;
   3718					;	   putstrxy(70,ini+3,str);
   3719					;
   3720	0F88  16			     push    ss
   3721	0F89  8D 46 EA			     lea     ax,word ptr [bp-22]
   3722	0F8C  50			     push    ax
   3723	0F8D  8B C7			     mov     ax,di
   3724	0F8F  05 0003			     add     ax,3
   3725	0F92  50			     push    ax
   3726	0F93  B8 0046			     mov     ax,70
   3727	0F96  50			     push    ax
   3728	0F97  E8 0000e			     call    near ptr _putstrxy
   3729	0F9A  83 C4 08			     add     sp,8
   3730	0F9D  46			     inc     si
   3731	0F9E			     @23@562:
   3732	0F9E  81 FE EA60		     cmp     si,-5536
   3733	0FA2  72 D1			     jb	     short @23@506
   3734					;
   3735					;      }
   3736					;      for (i=0;i<60000U;++i)  {
   3737					;
   3738	0FA4  33 F6			     xor     si,si
   3739	0FA6  EB 29			     jmp     short @23@674
   3740	0FA8			     @23@618:
   3741					;
   3742					;	   unsignedtostr(str,i,5,'0');
   3743					;
   3744	0FA8  B0 30			     mov     al,48
   3745	0FAA  50			     push    ax
   3746	0FAB  B8 0005			     mov     ax,5
   3747	0FAE  50			     push    ax
   3748	0FAF  56			     push    si
   3749	0FB0  16			     push    ss
   3750	0FB1  8D 46 EA			     lea     ax,word ptr [bp-22]
   3751	0FB4  50			     push    ax
   3752	0FB5  E8 0000e			     call    near ptr _unsignedtostr
   3753	0FB8  83 C4 0A			     add     sp,10
   3754					;
   3755					;	   putstrxy(70,ini+3,str);
   3756					;
   3757	0FBB  16			     push    ss
   3758	0FBC  8D 46 EA			     lea     ax,word ptr [bp-22]
   3759	0FBF  50			     push    ax
   3760	0FC0  8B C7			     mov     ax,di
   3761	0FC2  05 0003			     add     ax,3
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 67
command.ASM



   3762	0FC5  50			     push    ax
   3763	0FC6  B8 0046			     mov     ax,70
   3764	0FC9  50			     push    ax
   3765	0FCA  E8 0000e			     call    near ptr _putstrxy
   3766	0FCD  83 C4 08			     add     sp,8
   3767	0FD0  46			     inc     si
   3768	0FD1			     @23@674:
   3769	0FD1  81 FE EA60		     cmp     si,-5536
   3770	0FD5  72 D1			     jb	     short @23@618
   3771					;
   3772					;      }
   3773					;      exit(ec);
   3774					;
   3775	0FD7  FF 76 FE			     push    word ptr [bp-2]
   3776	0FDA  E8 0000e			     call    near ptr _exit
   3777	0FDD  59			     pop     cx
   3778					;
   3779					;    }
   3780					;
   3781	0FDE  5F			     pop     di
   3782	0FDF  5E			     pop     si
   3783	0FE0  8B E5			     mov     sp,bp
   3784	0FE2  5D			     pop     bp
   3785	0FE3  C3			     ret
   3786	0FE4			     demo    endp
   3787					;
   3788					;    int cmd_demo(int argc, char far *argv[])
   3789					;
   3790					     assume  cs:_TEXT
   3791	0FE4			     _cmd_demo	     proc    near
   3792	0FE4  55			     push    bp
   3793	0FE5  8B EC			     mov     bp,sp
   3794					;
   3795					;    {
   3796					;	     extern int	demo_linha;
   3797					;
   3798					;	     if	     (argc != 2)  {
   3799					;
   3800	0FE7  83 7E 04 02		     cmp     word ptr [bp+4],2
   3801	0FEB  74 0F			     je	     short @24@142
   3802					;
   3803					;		     putstr("Erro em demo: numero invalido de argumentos!\n");
   3804					;
   3805	0FED  1E			     push    ds
   3806	0FEE  B8 090Fr			     mov     ax,offset DGROUP:s@+2163
   3807	0FF1			     @24@86:
   3808	0FF1  50			     push    ax
   3809	0FF2  E8 0000e			     call    near ptr _putstr
   3810	0FF5  59			     pop     cx
   3811	0FF6  59			     pop     cx
   3812					;
   3813					;		     return 1;
   3814					;
   3815	0FF7  B8 0001			     mov     ax,1
   3816	0FFA			     @24@114:
   3817	0FFA  EB 3A			     jmp     short @24@282
   3818	0FFC			     @24@142:
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 68
command.ASM



   3819					;
   3820					;	     }
   3821					;	     demo_linha	+= 5;
   3822					;
   3823	0FFC  83 06 0098r 05		     add     word ptr DGROUP:demo_linha,5
   3824					;
   3825					;	     if	     (demo_linha >21)
   3826					;
   3827	1001  83 3E 0098r 15		     cmp     word ptr DGROUP:demo_linha,21
   3828	1006  7E 06			     jle     short @24@198
   3829					;
   3830					;		     demo_linha	= 1;
   3831					;
   3832	1008  C7 06 0098r 0001		     mov     word ptr DGROUP:demo_linha,1
   3833	100E			     @24@198:
   3834					;
   3835					;	     exitcode =	atoi(argv[1]);
   3836					;
   3837	100E  8B 5E 06			     mov     bx,word ptr [bp+6]
   3838	1011  FF 77 06			     push    word ptr [bx+6]
   3839	1014  FF 77 04			     push    word ptr [bx+4]
   3840	1017  E8 0000e			     call    near ptr _atoi
   3841	101A  59			     pop     cx
   3842	101B  59			     pop     cx
   3843	101C  A3 009Ar			     mov     word ptr DGROUP:exitcode,ax
   3844					;
   3845					;	     if	     (fork(demo)==miniSO_ERROR)	 {
   3846					;
   3847	101F  B8 0E0Fr			     mov     ax,offset demo
   3848	1022  50			     push    ax
   3849	1023  E8 0000e			     call    near ptr _fork
   3850	1026  59			     pop     cx
   3851	1027  3D FFFF			     cmp     ax,-1
   3852	102A  75 06			     jne     short @24@254
   3853					;
   3854					;		     putstr("Erro em demo: fork() nao conseguiu	criar thread!\n");
   3855					;
   3856	102C  1E			     push    ds
   3857	102D  B8 093Dr			     mov     ax,offset DGROUP:s@+2209
   3858	1030  EB BF			     jmp     short @24@86
   3859	1032			     @24@254:
   3860					;
   3861					;		     return 1;
   3862					;	     }
   3863					;	     return 0;
   3864					;
   3865	1032  33 C0			     xor     ax,ax
   3866	1034  EB C4			     jmp     short @24@114
   3867	1036			     @24@282:
   3868					;
   3869					;    }
   3870					;
   3871	1036  5D			     pop     bp
   3872	1037  C3			     ret
   3873	1038			     _cmd_demo	     endp
   3874					;
   3875					;    int cmd_waitpid(int argc, char far	*argv[])
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 69
command.ASM



   3876					;
   3877					     assume  cs:_TEXT
   3878	1038			     _cmd_waitpid    proc    near
   3879	1038  55			     push    bp
   3880	1039  8B EC			     mov     bp,sp
   3881	103B  83 EC 16			     sub     sp,22
   3882	103E  56			     push    si
   3883					;
   3884					;    {
   3885					;	     int     status;
   3886					;	     pid_t   pid;
   3887					;	     char    str[20];
   3888					;
   3889					;	     if	     (argc != 2)  {
   3890					;
   3891	103F  83 7E 04 02		     cmp     word ptr [bp+4],2
   3892	1043  74 0F			     je	     short @25@114
   3893					;
   3894					;		     putstr("Erro em waitpid: numero invalido de argumentos!\n");
   3895					;
   3896	1045  1E			     push    ds
   3897	1046  B8 096Fr			     mov     ax,offset DGROUP:s@+2259
   3898	1049  50			     push    ax
   3899	104A  E8 0000e			     call    near ptr _putstr
   3900	104D  59			     pop     cx
   3901	104E  59			     pop     cx
   3902					;
   3903					;		     return 1;
   3904					;
   3905	104F  B8 0001			     mov     ax,1
   3906	1052			     @25@86:
   3907	1052  EB 6E			     jmp     short @25@142
   3908	1054			     @25@114:
   3909					;
   3910					;	     }
   3911					;	     pid = atoi(argv[1]);
   3912					;
   3913	1054  8B 5E 06			     mov     bx,word ptr [bp+6]
   3914	1057  FF 77 06			     push    word ptr [bx+6]
   3915	105A  FF 77 04			     push    word ptr [bx+4]
   3916	105D  E8 0000e			     call    near ptr _atoi
   3917	1060  59			     pop     cx
   3918	1061  59			     pop     cx
   3919	1062  8B F0			     mov     si,ax
   3920					;
   3921					;	     pid = waitpid(pid,&status);
   3922					;
   3923	1064  16			     push    ss
   3924	1065  8D 46 FE			     lea     ax,word ptr [bp-2]
   3925	1068  50			     push    ax
   3926	1069  56			     push    si
   3927	106A  E8 0000e			     call    near ptr _waitpid
   3928	106D  83 C4 06			     add     sp,6
   3929	1070  8B F0			     mov     si,ax
   3930					;
   3931					;	     putstr("Processo ");
   3932					;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 70
command.ASM



   3933	1072  1E			     push    ds
   3934	1073  B8 09A0r			     mov     ax,offset DGROUP:s@+2308
   3935	1076  50			     push    ax
   3936	1077  E8 0000e			     call    near ptr _putstr
   3937	107A  59			     pop     cx
   3938	107B  59			     pop     cx
   3939					;
   3940					;	     inttostr(str,pid);
   3941					;
   3942	107C  56			     push    si
   3943	107D  16			     push    ss
   3944	107E  8D 46 EA			     lea     ax,word ptr [bp-22]
   3945	1081  50			     push    ax
   3946	1082  E8 0000e			     call    near ptr _inttostr
   3947	1085  83 C4 06			     add     sp,6
   3948					;
   3949					;	     putstr(str);
   3950					;
   3951	1088  16			     push    ss
   3952	1089  8D 46 EA			     lea     ax,word ptr [bp-22]
   3953	108C  50			     push    ax
   3954	108D  E8 0000e			     call    near ptr _putstr
   3955	1090  59			     pop     cx
   3956	1091  59			     pop     cx
   3957					;
   3958					;	     putstr(" encerrado	com codigo de fim ");
   3959					;
   3960	1092  1E			     push    ds
   3961	1093  B8 09AAr			     mov     ax,offset DGROUP:s@+2318
   3962	1096  50			     push    ax
   3963	1097  E8 0000e			     call    near ptr _putstr
   3964	109A  59			     pop     cx
   3965	109B  59			     pop     cx
   3966					;
   3967					;	     inttostr(str,status);
   3968					;
   3969	109C  FF 76 FE			     push    word ptr [bp-2]
   3970	109F  16			     push    ss
   3971	10A0  8D 46 EA			     lea     ax,word ptr [bp-22]
   3972	10A3  50			     push    ax
   3973	10A4  E8 0000e			     call    near ptr _inttostr
   3974	10A7  83 C4 06			     add     sp,6
   3975					;
   3976					;	     putstr(str);
   3977					;
   3978	10AA  16			     push    ss
   3979	10AB  8D 46 EA			     lea     ax,word ptr [bp-22]
   3980	10AE  50			     push    ax
   3981	10AF  E8 0000e			     call    near ptr _putstr
   3982	10B2  59			     pop     cx
   3983	10B3  59			     pop     cx
   3984					;
   3985					;	     putstr("!\n");
   3986					;
   3987	10B4  1E			     push    ds
   3988	10B5  B8 09C8r			     mov     ax,offset DGROUP:s@+2348
   3989	10B8  50			     push    ax
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 71
command.ASM



   3990	10B9  E8 0000e			     call    near ptr _putstr
   3991	10BC  59			     pop     cx
   3992	10BD  59			     pop     cx
   3993					;
   3994					;	     return 0;
   3995					;
   3996	10BE  33 C0			     xor     ax,ax
   3997	10C0  EB 90			     jmp     short @25@86
   3998	10C2			     @25@142:
   3999					;
   4000					;    }
   4001					;
   4002	10C2  5E			     pop     si
   4003	10C3  8B E5			     mov     sp,bp
   4004	10C5  5D			     pop     bp
   4005	10C6  C3			     ret
   4006	10C7			     _cmd_waitpid    endp
   4007					;
   4008					;    int cmd_wait(int argc, char far *argv[])
   4009					;
   4010					     assume  cs:_TEXT
   4011	10C7			     _cmd_wait	     proc    near
   4012	10C7  55			     push    bp
   4013	10C8  8B EC			     mov     bp,sp
   4014	10CA  83 EC 18			     sub     sp,24
   4015	10CD  56			     push    si
   4016	10CE  57			     push    di
   4017	10CF  8B 76 04			     mov     si,word ptr [bp+4]
   4018	10D2  8B 7E 06			     mov     di,word ptr [bp+6]
   4019					;
   4020					;    {
   4021					;	     int     status=123;
   4022					;
   4023	10D5  C7 46 FE 007B		     mov     word ptr [bp-2],123
   4024					;
   4025					;	     pid_t   pid;
   4026					;	     char    str[20];
   4027					;
   4028					;	     argc=argc;
   4029					;
   4030					;
   4031					;	     argv=argv;
   4032					;
   4033					;
   4034					;	     pid = wait(&status);
   4035					;
   4036	10DA  16			     push    ss
   4037	10DB  8D 46 FE			     lea     ax,word ptr [bp-2]
   4038	10DE  50			     push    ax
   4039	10DF  E8 0000e			     call    near ptr _wait
   4040	10E2  59			     pop     cx
   4041	10E3  59			     pop     cx
   4042	10E4  89 46 FC			     mov     word ptr [bp-4],ax
   4043					;
   4044					;	     putstr("Processo ");
   4045					;
   4046	10E7  1E			     push    ds
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 72
command.ASM



   4047	10E8  B8 09CBr			     mov     ax,offset DGROUP:s@+2351
   4048	10EB  50			     push    ax
   4049	10EC  E8 0000e			     call    near ptr _putstr
   4050	10EF  59			     pop     cx
   4051	10F0  59			     pop     cx
   4052					;
   4053					;	     inttostr(str,pid);
   4054					;
   4055	10F1  FF 76 FC			     push    word ptr [bp-4]
   4056	10F4  16			     push    ss
   4057	10F5  8D 46 E8			     lea     ax,word ptr [bp-24]
   4058	10F8  50			     push    ax
   4059	10F9  E8 0000e			     call    near ptr _inttostr
   4060	10FC  83 C4 06			     add     sp,6
   4061					;
   4062					;	     putstr(str);
   4063					;
   4064	10FF  16			     push    ss
   4065	1100  8D 46 E8			     lea     ax,word ptr [bp-24]
   4066	1103  50			     push    ax
   4067	1104  E8 0000e			     call    near ptr _putstr
   4068	1107  59			     pop     cx
   4069	1108  59			     pop     cx
   4070					;
   4071					;	     putstr(" encerrado	com codigo de fim ");
   4072					;
   4073	1109  1E			     push    ds
   4074	110A  B8 09D5r			     mov     ax,offset DGROUP:s@+2361
   4075	110D  50			     push    ax
   4076	110E  E8 0000e			     call    near ptr _putstr
   4077	1111  59			     pop     cx
   4078	1112  59			     pop     cx
   4079					;
   4080					;	     inttostr(str,status);
   4081					;
   4082	1113  FF 76 FE			     push    word ptr [bp-2]
   4083	1116  16			     push    ss
   4084	1117  8D 46 E8			     lea     ax,word ptr [bp-24]
   4085	111A  50			     push    ax
   4086	111B  E8 0000e			     call    near ptr _inttostr
   4087	111E  83 C4 06			     add     sp,6
   4088					;
   4089					;	     putstr(str);
   4090					;
   4091	1121  16			     push    ss
   4092	1122  8D 46 E8			     lea     ax,word ptr [bp-24]
   4093	1125  50			     push    ax
   4094	1126  E8 0000e			     call    near ptr _putstr
   4095	1129  59			     pop     cx
   4096	112A  59			     pop     cx
   4097					;
   4098					;	     putstr("!\n");
   4099					;
   4100	112B  1E			     push    ds
   4101	112C  B8 09F3r			     mov     ax,offset DGROUP:s@+2391
   4102	112F  50			     push    ax
   4103	1130  E8 0000e			     call    near ptr _putstr
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 73
command.ASM



   4104	1133  59			     pop     cx
   4105	1134  59			     pop     cx
   4106					;
   4107					;	     return 0;
   4108					;
   4109	1135  33 C0			     xor     ax,ax
   4110	1137  EB 00			     jmp     short @26@58
   4111	1139			     @26@58:
   4112					;
   4113					;    }
   4114					;
   4115	1139  5F			     pop     di
   4116	113A  5E			     pop     si
   4117	113B  8B E5			     mov     sp,bp
   4118	113D  5D			     pop     bp
   4119	113E  C3			     ret
   4120	113F			     _cmd_wait	     endp
   4121					;
   4122					;    int cmd_semls(int argc, char far *argv[])
   4123					;
   4124					     assume  cs:_TEXT
   4125	113F			     _cmd_semls	     proc    near
   4126	113F  55			     push    bp
   4127	1140  8B EC			     mov     bp,sp
   4128	1142  83 EC 14			     sub     sp,20
   4129	1145  56			     push    si
   4130	1146  57			     push    di
   4131					;
   4132					;    {
   4133					;	     int i,n=0;
   4134					;
   4135	1147  33 FF			     xor     di,di
   4136					;
   4137					;	     char str[20];
   4138					;	     extern miniSO_SEM miniSO_sem[miniSO_MAXSEMAPHORES];
   4139					;
   4140					;	     argc=argc;
   4141					;
   4142	1149  8B 46 04			     mov     ax,word ptr [bp+4]
   4143	114C  89 46 04			     mov     word ptr [bp+4],ax
   4144					;
   4145					;	     argv=argv;
   4146					;
   4147	114F  8B 46 06			     mov     ax,word ptr [bp+6]
   4148	1152  89 46 06			     mov     word ptr [bp+6],ax
   4149					;
   4150					;	     putstr("Semaphores:\n");
   4151					;
   4152	1155  1E			     push    ds
   4153	1156  B8 09F6r			     mov     ax,offset DGROUP:s@+2394
   4154	1159  50			     push    ax
   4155	115A  E8 0000e			     call    near ptr _putstr
   4156	115D  59			     pop     cx
   4157	115E  59			     pop     cx
   4158					;
   4159					;	     for     (i=0;i<miniSO_MAXSEMAPHORES;++i)
   4160					;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 74
command.ASM



   4161	115F  33 F6			     xor     si,si
   4162	1161  E9 0095			     jmp     @27@142
   4163	1164			     @27@58:
   4164					;
   4165					;		     if	     (miniSO_sem[i].status!=FREE) {
   4166					;
   4167	1164  8B DE			     mov     bx,si
   4168	1166  B1 03			     mov     cl,3
   4169	1168  D3 E3			     shl     bx,cl
   4170	116A  83 BF 0000e FF		     cmp     word ptr DGROUP:_miniSO_sem[bx],-1
   4171	116F  75 03			     jne     @@6
   4172	1171  E9 0084			     jmp     @27@114
   4173	1174			     @@6:
   4174					;
   4175					;			     putstr("- id=");
   4176					;
   4177	1174  1E			     push    ds
   4178	1175  B8 0A03r			     mov     ax,offset DGROUP:s@+2407
   4179	1178  50			     push    ax
   4180	1179  E8 0000e			     call    near ptr _putstr
   4181	117C  59			     pop     cx
   4182	117D  59			     pop     cx
   4183					;
   4184					;			     inttostr(str,miniSO_sem[i].semid);
   4185					;
   4186	117E  8B DE			     mov     bx,si
   4187	1180  B1 03			     mov     cl,3
   4188	1182  D3 E3			     shl     bx,cl
   4189	1184  FF B7 0002e		     push    word ptr DGROUP:_miniSO_sem[bx+2]
   4190	1188  16			     push    ss
   4191	1189  8D 46 EC			     lea     ax,word ptr [bp-20]
   4192	118C  50			     push    ax
   4193	118D  E8 0000e			     call    near ptr _inttostr
   4194	1190  83 C4 06			     add     sp,6
   4195					;
   4196					;			     putstr(str);
   4197					;
   4198	1193  16			     push    ss
   4199	1194  8D 46 EC			     lea     ax,word ptr [bp-20]
   4200	1197  50			     push    ax
   4201	1198  E8 0000e			     call    near ptr _putstr
   4202	119B  59			     pop     cx
   4203	119C  59			     pop     cx
   4204					;
   4205					;			     putstr(" value=");
   4206					;
   4207	119D  1E			     push    ds
   4208	119E  B8 0A09r			     mov     ax,offset DGROUP:s@+2413
   4209	11A1  50			     push    ax
   4210	11A2  E8 0000e			     call    near ptr _putstr
   4211	11A5  59			     pop     cx
   4212	11A6  59			     pop     cx
   4213					;
   4214					;			     inttostr(str,miniSO_sem[i].value);
   4215					;
   4216	11A7  8B DE			     mov     bx,si
   4217	11A9  B1 03			     mov     cl,3
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 75
command.ASM



   4218	11AB  D3 E3			     shl     bx,cl
   4219	11AD  FF B7 0004e		     push    word ptr DGROUP:_miniSO_sem[bx+4]
   4220	11B1  16			     push    ss
   4221	11B2  8D 46 EC			     lea     ax,word ptr [bp-20]
   4222	11B5  50			     push    ax
   4223	11B6  E8 0000e			     call    near ptr _inttostr
   4224	11B9  83 C4 06			     add     sp,6
   4225					;
   4226					;			     putstr(str);
   4227					;
   4228	11BC  16			     push    ss
   4229	11BD  8D 46 EC			     lea     ax,word ptr [bp-20]
   4230	11C0  50			     push    ax
   4231	11C1  E8 0000e			     call    near ptr _putstr
   4232	11C4  59			     pop     cx
   4233	11C5  59			     pop     cx
   4234					;
   4235					;			     putstr(" queue=");
   4236					;
   4237	11C6  1E			     push    ds
   4238	11C7  B8 0A11r			     mov     ax,offset DGROUP:s@+2421
   4239	11CA  50			     push    ax
   4240	11CB  E8 0000e			     call    near ptr _putstr
   4241	11CE  59			     pop     cx
   4242	11CF  59			     pop     cx
   4243					;
   4244					;			     inttostr(str,miniSO_sem[i].queue);
   4245					;
   4246	11D0  8B DE			     mov     bx,si
   4247	11D2  B1 03			     mov     cl,3
   4248	11D4  D3 E3			     shl     bx,cl
   4249	11D6  FF B7 0006e		     push    word ptr DGROUP:_miniSO_sem[bx+6]
   4250	11DA  16			     push    ss
   4251	11DB  8D 46 EC			     lea     ax,word ptr [bp-20]
   4252	11DE  50			     push    ax
   4253	11DF  E8 0000e			     call    near ptr _inttostr
   4254	11E2  83 C4 06			     add     sp,6
   4255					;
   4256					;			     putstr(str);
   4257					;
   4258	11E5  16			     push    ss
   4259	11E6  8D 46 EC			     lea     ax,word ptr [bp-20]
   4260	11E9  50			     push    ax
   4261	11EA  E8 0000e			     call    near ptr _putstr
   4262	11ED  59			     pop     cx
   4263	11EE  59			     pop     cx
   4264					;
   4265					;			     putch('\n');
   4266					;
   4267	11EF  B8 000A			     mov     ax,10
   4268	11F2  50			     push    ax
   4269	11F3  E8 0000e			     call    near ptr _putch
   4270	11F6  59			     pop     cx
   4271					;
   4272					;			     ++n;
   4273					;
   4274	11F7  47			     inc     di
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 76
command.ASM



   4275	11F8			     @27@114:
   4276	11F8  46			     inc     si
   4277	11F9			     @27@142:
   4278	11F9  83 FE 0A			     cmp     si,10
   4279	11FC  7D 03			     jge     @@7
   4280	11FE  E9 FF63			     jmp     @27@58
   4281	1201			     @@7:
   4282					;
   4283					;		     }
   4284					;	     putstr("TOTAL=");
   4285					;
   4286	1201  1E			     push    ds
   4287	1202  B8 0A19r			     mov     ax,offset DGROUP:s@+2429
   4288	1205  50			     push    ax
   4289	1206  E8 0000e			     call    near ptr _putstr
   4290	1209  59			     pop     cx
   4291	120A  59			     pop     cx
   4292					;
   4293					;	     inttostr(str,n);
   4294					;
   4295	120B  57			     push    di
   4296	120C  16			     push    ss
   4297	120D  8D 46 EC			     lea     ax,word ptr [bp-20]
   4298	1210  50			     push    ax
   4299	1211  E8 0000e			     call    near ptr _inttostr
   4300	1214  83 C4 06			     add     sp,6
   4301					;
   4302					;	     putstr(str);
   4303					;
   4304	1217  16			     push    ss
   4305	1218  8D 46 EC			     lea     ax,word ptr [bp-20]
   4306	121B  50			     push    ax
   4307	121C  E8 0000e			     call    near ptr _putstr
   4308	121F  59			     pop     cx
   4309	1220  59			     pop     cx
   4310					;
   4311					;	     putstr("\n\n");
   4312					;
   4313	1221  1E			     push    ds
   4314	1222  B8 0A20r			     mov     ax,offset DGROUP:s@+2436
   4315	1225  50			     push    ax
   4316	1226  E8 0000e			     call    near ptr _putstr
   4317	1229  59			     pop     cx
   4318	122A  59			     pop     cx
   4319					;
   4320					;	     return 0;
   4321					;
   4322	122B  33 C0			     xor     ax,ax
   4323	122D  EB 00			     jmp     short @27@198
   4324	122F			     @27@198:
   4325					;
   4326					;    }
   4327					;
   4328	122F  5F			     pop     di
   4329	1230  5E			     pop     si
   4330	1231  8B E5			     mov     sp,bp
   4331	1233  5D			     pop     bp
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 77
command.ASM



   4332	1234  C3			     ret
   4333	1235			     _cmd_semls	     endp
   4334					;
   4335					;    int cmd_semcreate(int argc, char far *argv[])
   4336					;
   4337					     assume  cs:_TEXT
   4338	1235			     _cmd_semcreate  proc    near
   4339	1235  55			     push    bp
   4340	1236  8B EC			     mov     bp,sp
   4341	1238  83 EC 14			     sub     sp,20
   4342	123B  56			     push    si
   4343	123C  57			     push    di
   4344					;
   4345					;    {
   4346					;	     int     res,value;
   4347					;	     semid_t semid;
   4348					;	     char    str[20];
   4349					;
   4350					;	     if	     (argc != 2)     {
   4351					;
   4352	123D  83 7E 04 02		     cmp     word ptr [bp+4],2
   4353	1241  74 0F			     je	     short @28@142
   4354					;
   4355					;		     putstr("Erro em semcreate:	numero invalido	de argumentos!\n");
   4356					;
   4357	1243  1E			     push    ds
   4358	1244  B8 0A23r			     mov     ax,offset DGROUP:s@+2439
   4359	1247  50			     push    ax
   4360	1248  E8 0000e			     call    near ptr _putstr
   4361	124B  59			     pop     cx
   4362	124C  59			     pop     cx
   4363					;
   4364					;		     return 1;
   4365					;
   4366	124D			     @28@86:
   4367	124D  B8 0001			     mov     ax,1
   4368	1250			     @28@114:
   4369	1250  EB 6C			     jmp     short @28@226
   4370	1252			     @28@142:
   4371					;
   4372					;	     }
   4373					;	     value = atoi(argv[1]);
   4374					;
   4375	1252  8B 5E 06			     mov     bx,word ptr [bp+6]
   4376	1255  FF 77 06			     push    word ptr [bx+6]
   4377	1258  FF 77 04			     push    word ptr [bx+4]
   4378	125B  E8 0000e			     call    near ptr _atoi
   4379	125E  59			     pop     cx
   4380	125F  59			     pop     cx
   4381	1260  8B F0			     mov     si,ax
   4382					;
   4383					;	     semid = semcreate(value);
   4384					;
   4385	1262  56			     push    si
   4386	1263  E8 0000e			     call    near ptr _semcreate
   4387	1266  59			     pop     cx
   4388	1267  8B F8			     mov     di,ax
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 78
command.ASM



   4389					;
   4390					;	     if	     (semid==miniSO_ERROR)
   4391					;
   4392	1269  83 FF FF			     cmp     di,-1
   4393	126C  75 02			     jne     short @28@198
   4394	126E  EB DD			     jmp     short @28@86
   4395	1270			     @28@198:
   4396					;
   4397					;		     return 1;
   4398					;	     putstr("Semaforo id=");
   4399					;
   4400	1270  1E			     push    ds
   4401	1271  B8 0A56r			     mov     ax,offset DGROUP:s@+2490
   4402	1274  50			     push    ax
   4403	1275  E8 0000e			     call    near ptr _putstr
   4404	1278  59			     pop     cx
   4405	1279  59			     pop     cx
   4406					;
   4407					;	     inttostr(str,semid);
   4408					;
   4409	127A  57			     push    di
   4410	127B  16			     push    ss
   4411	127C  8D 46 EC			     lea     ax,word ptr [bp-20]
   4412	127F  50			     push    ax
   4413	1280  E8 0000e			     call    near ptr _inttostr
   4414	1283  83 C4 06			     add     sp,6
   4415					;
   4416					;	     putstr(str);
   4417					;
   4418	1286  16			     push    ss
   4419	1287  8D 46 EC			     lea     ax,word ptr [bp-20]
   4420	128A  50			     push    ax
   4421	128B  E8 0000e			     call    near ptr _putstr
   4422	128E  59			     pop     cx
   4423	128F  59			     pop     cx
   4424					;
   4425					;	     putstr(" criado (value=");
   4426					;
   4427	1290  1E			     push    ds
   4428	1291  B8 0A63r			     mov     ax,offset DGROUP:s@+2503
   4429	1294  50			     push    ax
   4430	1295  E8 0000e			     call    near ptr _putstr
   4431	1298  59			     pop     cx
   4432	1299  59			     pop     cx
   4433					;
   4434					;	     inttostr(str,value);
   4435					;
   4436	129A  56			     push    si
   4437	129B  16			     push    ss
   4438	129C  8D 46 EC			     lea     ax,word ptr [bp-20]
   4439	129F  50			     push    ax
   4440	12A0  E8 0000e			     call    near ptr _inttostr
   4441	12A3  83 C4 06			     add     sp,6
   4442					;
   4443					;	     putstr(str);
   4444					;
   4445	12A6  16			     push    ss
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 79
command.ASM



   4446	12A7  8D 46 EC			     lea     ax,word ptr [bp-20]
   4447	12AA  50			     push    ax
   4448	12AB  E8 0000e			     call    near ptr _putstr
   4449	12AE  59			     pop     cx
   4450	12AF  59			     pop     cx
   4451					;
   4452					;	     putstr(")\n");
   4453					;
   4454	12B0  1E			     push    ds
   4455	12B1  B8 0A73r			     mov     ax,offset DGROUP:s@+2519
   4456	12B4  50			     push    ax
   4457	12B5  E8 0000e			     call    near ptr _putstr
   4458	12B8  59			     pop     cx
   4459	12B9  59			     pop     cx
   4460					;
   4461					;	     return 0;
   4462					;
   4463	12BA  33 C0			     xor     ax,ax
   4464	12BC  EB 92			     jmp     short @28@114
   4465	12BE			     @28@226:
   4466					;
   4467					;    }
   4468					;
   4469	12BE  5F			     pop     di
   4470	12BF  5E			     pop     si
   4471	12C0  8B E5			     mov     sp,bp
   4472	12C2  5D			     pop     bp
   4473	12C3  C3			     ret
   4474	12C4			     _cmd_semcreate  endp
   4475					;
   4476					;    void sem_aplic()
   4477					;
   4478					     assume  cs:_TEXT
   4479	12C4			     _sem_aplic	     proc    near
   4480	12C4  55			     push    bp
   4481	12C5  8B EC			     mov     bp,sp
   4482	12C7  83 EC 14			     sub     sp,20
   4483	12CA  56			     push    si
   4484	12CB  57			     push    di
   4485					;
   4486					;    {
   4487					;	     extern int	demo_linha;
   4488					;	     extern semid_t semid;
   4489					;	     unsigned i;
   4490					;	     int ini = demo_linha;
   4491					;
   4492	12CC  8B 3E 0098r		     mov     di,word ptr DGROUP:demo_linha
   4493					;
   4494					;	     char str[20];
   4495					;
   4496					;	     putstrxy(65,ini+0,"⁄ƒƒ Thread ƒƒƒƒø");
   4497					;
   4498	12D0  1E			     push    ds
   4499	12D1  B8 0A76r			     mov     ax,offset DGROUP:s@+2522
   4500	12D4  50			     push    ax
   4501	12D5  57			     push    di
   4502	12D6  B8 0041			     mov     ax,65
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 80
command.ASM



   4503	12D9  50			     push    ax
   4504	12DA  E8 0000e			     call    near ptr _putstrxy
   4505	12DD  83 C4 08			     add     sp,8
   4506					;
   4507					;	     putstrxy(65,ini+1,"≥ PID  =       ≥");
   4508					;
   4509	12E0  1E			     push    ds
   4510	12E1  B8 0A87r			     mov     ax,offset DGROUP:s@+2539
   4511	12E4  50			     push    ax
   4512	12E5  8B C7			     mov     ax,di
   4513	12E7  40			     inc     ax
   4514	12E8  50			     push    ax
   4515	12E9  B8 0041			     mov     ax,65
   4516	12EC  50			     push    ax
   4517	12ED  E8 0000e			     call    near ptr _putstrxy
   4518	12F0  83 C4 08			     add     sp,8
   4519					;
   4520					;	     putstrxy(65,ini+2,"≥ Execucao:    ≥");
   4521					;
   4522	12F3  1E			     push    ds
   4523	12F4  B8 0A98r			     mov     ax,offset DGROUP:s@+2556
   4524	12F7  50			     push    ax
   4525	12F8  8B C7			     mov     ax,di
   4526	12FA  05 0002			     add     ax,2
   4527	12FD  50			     push    ax
   4528	12FE  B8 0041			     mov     ax,65
   4529	1301  50			     push    ax
   4530	1302  E8 0000e			     call    near ptr _putstrxy
   4531	1305  83 C4 08			     add     sp,8
   4532					;
   4533					;	     putstrxy(65,ini+3,"≥	       ≥");
   4534					;
   4535	1308  1E			     push    ds
   4536	1309  B8 0AA9r			     mov     ax,offset DGROUP:s@+2573
   4537	130C  50			     push    ax
   4538	130D  8B C7			     mov     ax,di
   4539	130F  05 0003			     add     ax,3
   4540	1312  50			     push    ax
   4541	1313  B8 0041			     mov     ax,65
   4542	1316  50			     push    ax
   4543	1317  E8 0000e			     call    near ptr _putstrxy
   4544	131A  83 C4 08			     add     sp,8
   4545					;
   4546					;	     putstrxy(65,ini+4,"¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ");
   4547					;
   4548	131D  1E			     push    ds
   4549	131E  B8 0ABAr			     mov     ax,offset DGROUP:s@+2590
   4550	1321  50			     push    ax
   4551	1322  8B C7			     mov     ax,di
   4552	1324  05 0004			     add     ax,4
   4553	1327  50			     push    ax
   4554	1328  B8 0041			     mov     ax,65
   4555	132B  50			     push    ax
   4556	132C  E8 0000e			     call    near ptr _putstrxy
   4557	132F  83 C4 08			     add     sp,8
   4558					;
   4559					;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 81
command.ASM



   4560					;	     inttostr(str,getpid());
   4561					;
   4562	1332  E8 0000e			     call    near ptr _getpid
   4563	1335  50			     push    ax
   4564	1336  16			     push    ss
   4565	1337  8D 46 EC			     lea     ax,word ptr [bp-20]
   4566	133A  50			     push    ax
   4567	133B  E8 0000e			     call    near ptr _inttostr
   4568	133E  83 C4 06			     add     sp,6
   4569					;
   4570					;	     putstrxy(74,ini+1,str);
   4571					;
   4572	1341  16			     push    ss
   4573	1342  8D 46 EC			     lea     ax,word ptr [bp-20]
   4574	1345  50			     push    ax
   4575	1346  8B C7			     mov     ax,di
   4576	1348  40			     inc     ax
   4577	1349  50			     push    ax
   4578	134A  B8 004A			     mov     ax,74
   4579	134D  50			     push    ax
   4580	134E  E8 0000e			     call    near ptr _putstrxy
   4581	1351  83 C4 08			     add     sp,8
   4582					;
   4583					;	     for     (i=0;i<30000U;++i)	 {
   4584					;
   4585	1354  33 F6			     xor     si,si
   4586	1356  EB 29			     jmp     short @29@114
   4587	1358			     @29@58:
   4588					;
   4589					;		     unsignedtostr(str,i,5,'0');
   4590					;
   4591	1358  B0 30			     mov     al,48
   4592	135A  50			     push    ax
   4593	135B  B8 0005			     mov     ax,5
   4594	135E  50			     push    ax
   4595	135F  56			     push    si
   4596	1360  16			     push    ss
   4597	1361  8D 46 EC			     lea     ax,word ptr [bp-20]
   4598	1364  50			     push    ax
   4599	1365  E8 0000e			     call    near ptr _unsignedtostr
   4600	1368  83 C4 0A			     add     sp,10
   4601					;
   4602					;		     putstrxy(70,ini+3,str);
   4603					;
   4604	136B  16			     push    ss
   4605	136C  8D 46 EC			     lea     ax,word ptr [bp-20]
   4606	136F  50			     push    ax
   4607	1370  8B C7			     mov     ax,di
   4608	1372  05 0003			     add     ax,3
   4609	1375  50			     push    ax
   4610	1376  B8 0046			     mov     ax,70
   4611	1379  50			     push    ax
   4612	137A  E8 0000e			     call    near ptr _putstrxy
   4613	137D  83 C4 08			     add     sp,8
   4614	1380  46			     inc     si
   4615	1381			     @29@114:
   4616	1381  81 FE 7530		     cmp     si,30000
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 82
command.ASM



   4617	1385  72 D1			     jb	     short @29@58
   4618					;
   4619					;	     }
   4620					;	     semdown(semid);
   4621					;
   4622	1387  FF 36 0014r		     push    word ptr DGROUP:_semid
   4623	138B  E8 0000e			     call    near ptr _semdown
   4624	138E  59			     pop     cx
   4625	138F  EB 29			     jmp     short @29@226
   4626	1391			     @29@170:
   4627					;
   4628					;	     for     (;i<60000U;++i)  {
   4629					;		     unsignedtostr(str,i,5,'0');
   4630					;
   4631	1391  B0 30			     mov     al,48
   4632	1393  50			     push    ax
   4633	1394  B8 0005			     mov     ax,5
   4634	1397  50			     push    ax
   4635	1398  56			     push    si
   4636	1399  16			     push    ss
   4637	139A  8D 46 EC			     lea     ax,word ptr [bp-20]
   4638	139D  50			     push    ax
   4639	139E  E8 0000e			     call    near ptr _unsignedtostr
   4640	13A1  83 C4 0A			     add     sp,10
   4641					;
   4642					;		     putstrxy(70,ini+3,str);
   4643					;
   4644	13A4  16			     push    ss
   4645	13A5  8D 46 EC			     lea     ax,word ptr [bp-20]
   4646	13A8  50			     push    ax
   4647	13A9  8B C7			     mov     ax,di
   4648	13AB  05 0003			     add     ax,3
   4649	13AE  50			     push    ax
   4650	13AF  B8 0046			     mov     ax,70
   4651	13B2  50			     push    ax
   4652	13B3  E8 0000e			     call    near ptr _putstrxy
   4653	13B6  83 C4 08			     add     sp,8
   4654	13B9  46			     inc     si
   4655	13BA			     @29@226:
   4656	13BA  81 FE EA60		     cmp     si,-5536
   4657	13BE  72 D1			     jb	     short @29@170
   4658					;
   4659					;	     }
   4660					;	     exit(0);
   4661					;
   4662	13C0  33 C0			     xor     ax,ax
   4663	13C2  50			     push    ax
   4664	13C3  E8 0000e			     call    near ptr _exit
   4665	13C6  59			     pop     cx
   4666					;
   4667					;    }
   4668					;
   4669	13C7  5F			     pop     di
   4670	13C8  5E			     pop     si
   4671	13C9  8B E5			     mov     sp,bp
   4672	13CB  5D			     pop     bp
   4673	13CC  C3			     ret
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 83
command.ASM



   4674	13CD			     _sem_aplic	     endp
   4675					;
   4676					;    int cmd_semtest(int argc, char far	*argv[])
   4677					;
   4678					     assume  cs:_TEXT
   4679	13CD			     _cmd_semtest    proc    near
   4680	13CD  55			     push    bp
   4681	13CE  8B EC			     mov     bp,sp
   4682					;
   4683					;    {
   4684					;	     extern int	demo_linha;
   4685					;	     extern semid_t semid;
   4686					;
   4687					;	     if	     (argc != 2)     {
   4688					;
   4689	13D0  83 7E 04 02		     cmp     word ptr [bp+4],2
   4690	13D4  74 0F			     je	     short @30@142
   4691					;
   4692					;		     putstr("Erro em semtest: numero invalido de argumentos!\n");
   4693					;
   4694	13D6  1E			     push    ds
   4695	13D7  B8 0ACBr			     mov     ax,offset DGROUP:s@+2607
   4696	13DA			     @30@86:
   4697	13DA  50			     push    ax
   4698	13DB  E8 0000e			     call    near ptr _putstr
   4699	13DE  59			     pop     cx
   4700	13DF  59			     pop     cx
   4701					;
   4702					;		     return 1;
   4703					;
   4704	13E0  B8 0001			     mov     ax,1
   4705	13E3			     @30@114:
   4706	13E3  EB 3A			     jmp     short @30@282
   4707	13E5			     @30@142:
   4708					;
   4709					;	     }
   4710					;	     semid = atoi(argv[1]);
   4711					;
   4712	13E5  8B 5E 06			     mov     bx,word ptr [bp+6]
   4713	13E8  FF 77 06			     push    word ptr [bx+6]
   4714	13EB  FF 77 04			     push    word ptr [bx+4]
   4715	13EE  E8 0000e			     call    near ptr _atoi
   4716	13F1  59			     pop     cx
   4717	13F2  59			     pop     cx
   4718	13F3  A3 0014r			     mov     word ptr DGROUP:_semid,ax
   4719					;
   4720					;	     demo_linha	+= 5;
   4721					;
   4722	13F6  83 06 0098r 05		     add     word ptr DGROUP:demo_linha,5
   4723					;
   4724					;	     if	     (demo_linha >21)
   4725					;
   4726	13FB  83 3E 0098r 15		     cmp     word ptr DGROUP:demo_linha,21
   4727	1400  7E 06			     jle     short @30@198
   4728					;
   4729					;		     demo_linha	= 1;
   4730					;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 84
command.ASM



   4731	1402  C7 06 0098r 0001		     mov     word ptr DGROUP:demo_linha,1
   4732	1408			     @30@198:
   4733					;
   4734					;	     if	     (fork(sem_aplic)==miniSO_ERROR)  {
   4735					;
   4736	1408  B8 12C4r			     mov     ax,offset _sem_aplic
   4737	140B  50			     push    ax
   4738	140C  E8 0000e			     call    near ptr _fork
   4739	140F  59			     pop     cx
   4740	1410  3D FFFF			     cmp     ax,-1
   4741	1413  75 06			     jne     short @30@254
   4742					;
   4743					;		     putstr("Erro em demo: fork() nao conseguiu	criar thread!\n");
   4744					;
   4745	1415  1E			     push    ds
   4746	1416  B8 0AFCr			     mov     ax,offset DGROUP:s@+2656
   4747	1419  EB BF			     jmp     short @30@86
   4748	141B			     @30@254:
   4749					;
   4750					;		     return 1;
   4751					;	     }
   4752					;	     return 0;
   4753					;
   4754	141B  33 C0			     xor     ax,ax
   4755	141D  EB C4			     jmp     short @30@114
   4756	141F			     @30@282:
   4757					;
   4758					;    }
   4759					;
   4760	141F  5D			     pop     bp
   4761	1420  C3			     ret
   4762	1421			     _cmd_semtest    endp
   4763					;
   4764					;    int cmd_semup(int argc, char far *argv[])
   4765					;
   4766					     assume  cs:_TEXT
   4767	1421			     _cmd_semup	     proc    near
   4768	1421  55			     push    bp
   4769	1422  8B EC			     mov     bp,sp
   4770	1424  83 EC 02			     sub     sp,2
   4771					;
   4772					;    {
   4773					;	     semid_t semid;
   4774					;
   4775					;	     if	     (argc != 2)     {
   4776					;
   4777	1427  83 7E 04 02		     cmp     word ptr [bp+4],2
   4778	142B  74 0F			     je	     short @31@114
   4779					;
   4780					;		     putstr("Erro em semtest: numero invalido de argumentos!\n");
   4781					;
   4782	142D  1E			     push    ds
   4783	142E  B8 0B2Er			     mov     ax,offset DGROUP:s@+2706
   4784	1431  50			     push    ax
   4785	1432  E8 0000e			     call    near ptr _putstr
   4786	1435  59			     pop     cx
   4787	1436  59			     pop     cx
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 85
command.ASM



   4788					;
   4789					;		     return 1;
   4790					;
   4791	1437  B8 0001			     mov     ax,1
   4792	143A			     @31@86:
   4793	143A  EB 1A			     jmp     short @31@142
   4794	143C			     @31@114:
   4795					;
   4796					;	     }
   4797					;	     semid = atoi(argv[1]);
   4798					;
   4799	143C  8B 5E 06			     mov     bx,word ptr [bp+6]
   4800	143F  FF 77 06			     push    word ptr [bx+6]
   4801	1442  FF 77 04			     push    word ptr [bx+4]
   4802	1445  E8 0000e			     call    near ptr _atoi
   4803	1448  59			     pop     cx
   4804	1449  59			     pop     cx
   4805	144A  89 46 FE			     mov     word ptr [bp-2],ax
   4806					;
   4807					;	     return semup(semid);
   4808					;
   4809	144D  FF 76 FE			     push    word ptr [bp-2]
   4810	1450  E8 0000e			     call    near ptr _semup
   4811	1453  59			     pop     cx
   4812	1454  EB E4			     jmp     short @31@86
   4813	1456			     @31@142:
   4814					;
   4815					;    }
   4816					;
   4817	1456  8B E5			     mov     sp,bp
   4818	1458  5D			     pop     bp
   4819	1459  C3			     ret
   4820	145A			     _cmd_semup	     endp
   4821					;
   4822					;    int cmd_semdestroy(int argc, char far *argv[])
   4823					;
   4824					     assume  cs:_TEXT
   4825	145A			     _cmd_semdestroy proc    near
   4826	145A  55			     push    bp
   4827	145B  8B EC			     mov     bp,sp
   4828	145D  83 EC 02			     sub     sp,2
   4829					;
   4830					;    {
   4831					;	     semid_t semid;
   4832					;
   4833					;	     if	     (argc != 2)     {
   4834					;
   4835	1460  83 7E 04 02		     cmp     word ptr [bp+4],2
   4836	1464  74 0F			     je	     short @32@114
   4837					;
   4838					;		     putstr("Erro em semtest: numero invalido de argumentos!\n");
   4839					;
   4840	1466  1E			     push    ds
   4841	1467  B8 0B5Fr			     mov     ax,offset DGROUP:s@+2755
   4842	146A  50			     push    ax
   4843	146B  E8 0000e			     call    near ptr _putstr
   4844	146E  59			     pop     cx
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 86
command.ASM



   4845	146F  59			     pop     cx
   4846					;
   4847					;		     return 1;
   4848					;
   4849	1470  B8 0001			     mov     ax,1
   4850	1473			     @32@86:
   4851	1473  EB 1A			     jmp     short @32@142
   4852	1475			     @32@114:
   4853					;
   4854					;	     }
   4855					;	     semid = atoi(argv[1]);
   4856					;
   4857	1475  8B 5E 06			     mov     bx,word ptr [bp+6]
   4858	1478  FF 77 06			     push    word ptr [bx+6]
   4859	147B  FF 77 04			     push    word ptr [bx+4]
   4860	147E  E8 0000e			     call    near ptr _atoi
   4861	1481  59			     pop     cx
   4862	1482  59			     pop     cx
   4863	1483  89 46 FE			     mov     word ptr [bp-2],ax
   4864					;
   4865					;	     return semdestroy(semid);
   4866					;
   4867	1486  FF 76 FE			     push    word ptr [bp-2]
   4868	1489  E8 0000e			     call    near ptr _semdestroy
   4869	148C  59			     pop     cx
   4870	148D  EB E4			     jmp     short @32@86
   4871	148F			     @32@142:
   4872					;
   4873					;    }
   4874					;
   4875	148F  8B E5			     mov     sp,bp
   4876	1491  5D			     pop     bp
   4877	1492  C3			     ret
   4878	1493			     _cmd_semdestroy endp
   4879					;
   4880					;    int cmd_stop(int argc, char far *argv[])
   4881					;
   4882					     assume  cs:_TEXT
   4883	1493			     _cmd_stop	     proc    near
   4884	1493  55			     push    bp
   4885	1494  8B EC			     mov     bp,sp
   4886	1496  56			     push    si
   4887	1497  57			     push    di
   4888					;
   4889					;    {
   4890					;	 int t=0;
   4891					;
   4892	1498  33 F6			     xor     si,si
   4893					;
   4894					;	 pid_t pid=0;
   4895					;
   4896	149A  33 FF			     xor     di,di
   4897					;
   4898					;
   4899					;	 if (argc<2) {
   4900					;
   4901	149C  83 7E 04 02		     cmp     word ptr [bp+4],2
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 87
command.ASM



   4902	14A0  7D 0F			     jge     short @33@114
   4903					;
   4904					;	     putstr("stop: nenhum parametro foi	fornecido\n");
   4905					;
   4906	14A2  1E			     push    ds
   4907	14A3  B8 0B90r			     mov     ax,offset DGROUP:s@+2804
   4908	14A6  50			     push    ax
   4909	14A7  E8 0000e			     call    near ptr _putstr
   4910	14AA  59			     pop     cx
   4911	14AB  59			     pop     cx
   4912					;
   4913					;	     return miniSO_ERROR;
   4914					;
   4915	14AC  B8 FFFF			     mov     ax,-1
   4916	14AF			     @33@86:
   4917	14AF  EB 2A			     jmp     short @33@198
   4918	14B1			     @33@114:
   4919					;
   4920					;	 }
   4921					;	 pid = atoi(argv[1]);
   4922					;
   4923	14B1  8B 5E 06			     mov     bx,word ptr [bp+6]
   4924	14B4  FF 77 06			     push    word ptr [bx+6]
   4925	14B7  FF 77 04			     push    word ptr [bx+4]
   4926	14BA  E8 0000e			     call    near ptr _atoi
   4927	14BD  59			     pop     cx
   4928	14BE  59			     pop     cx
   4929	14BF  8B F8			     mov     di,ax
   4930					;
   4931					;	 t = stop(pid);
   4932					;
   4933	14C1  57			     push    di
   4934	14C2  E8 0000e			     call    near ptr _stop
   4935	14C5  59			     pop     cx
   4936	14C6  8B F0			     mov     si,ax
   4937					;
   4938					;	 if (t==miniSO_ERROR)
   4939					;
   4940	14C8  83 FE FF			     cmp     si,-1
   4941	14CB  75 0A			     jne     short @33@170
   4942					;
   4943					;	     putstr("stop: impossivel suspender	a thread\n");
   4944					;
   4945	14CD  1E			     push    ds
   4946	14CE  B8 0BB6r			     mov     ax,offset DGROUP:s@+2842
   4947	14D1  50			     push    ax
   4948	14D2  E8 0000e			     call    near ptr _putstr
   4949	14D5  59			     pop     cx
   4950	14D6  59			     pop     cx
   4951	14D7			     @33@170:
   4952					;
   4953					;	 return	t;
   4954					;
   4955	14D7  8B C6			     mov     ax,si
   4956	14D9  EB D4			     jmp     short @33@86
   4957	14DB			     @33@198:
   4958					;
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 88
command.ASM



   4959					;    }
   4960					;
   4961	14DB  5F			     pop     di
   4962	14DC  5E			     pop     si
   4963	14DD  5D			     pop     bp
   4964	14DE  C3			     ret
   4965	14DF			     _cmd_stop	     endp
   4966					;
   4967					;    int cmd_resume(int	argc, char far *argv[])
   4968					;
   4969					     assume  cs:_TEXT
   4970	14DF			     _cmd_resume     proc    near
   4971	14DF  55			     push    bp
   4972	14E0  8B EC			     mov     bp,sp
   4973	14E2  56			     push    si
   4974	14E3  57			     push    di
   4975					;
   4976					;    {
   4977					;	 int t=0;
   4978					;
   4979	14E4  33 F6			     xor     si,si
   4980					;
   4981					;	 pid_t pid=0;
   4982					;
   4983	14E6  33 FF			     xor     di,di
   4984					;
   4985					;
   4986					;	 if (argc<2) {
   4987					;
   4988	14E8  83 7E 04 02		     cmp     word ptr [bp+4],2
   4989	14EC  7D 0F			     jge     short @34@114
   4990					;
   4991					;	     putstr("resume: nenhum parametro foi fornecido\n");
   4992					;
   4993	14EE  1E			     push    ds
   4994	14EF  B8 0BDBr			     mov     ax,offset DGROUP:s@+2879
   4995	14F2  50			     push    ax
   4996	14F3  E8 0000e			     call    near ptr _putstr
   4997	14F6  59			     pop     cx
   4998	14F7  59			     pop     cx
   4999					;
   5000					;	     return miniSO_ERROR;
   5001					;
   5002	14F8  B8 FFFF			     mov     ax,-1
   5003	14FB			     @34@86:
   5004	14FB  EB 2A			     jmp     short @34@198
   5005	14FD			     @34@114:
   5006					;
   5007					;	 }
   5008					;	 pid = atoi(argv[1]);
   5009					;
   5010	14FD  8B 5E 06			     mov     bx,word ptr [bp+6]
   5011	1500  FF 77 06			     push    word ptr [bx+6]
   5012	1503  FF 77 04			     push    word ptr [bx+4]
   5013	1506  E8 0000e			     call    near ptr _atoi
   5014	1509  59			     pop     cx
   5015	150A  59			     pop     cx
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 89
command.ASM



   5016	150B  8B F8			     mov     di,ax
   5017					;
   5018					;	 t = resume(pid);
   5019					;
   5020	150D  57			     push    di
   5021	150E  E8 0000e			     call    near ptr _resume
   5022	1511  59			     pop     cx
   5023	1512  8B F0			     mov     si,ax
   5024					;
   5025					;	 if (t==miniSO_ERROR)
   5026					;
   5027	1514  83 FE FF			     cmp     si,-1
   5028	1517  75 0A			     jne     short @34@170
   5029					;
   5030					;	     putstr("resume: impossivel	reiniciar a thread\n");
   5031					;
   5032	1519  1E			     push    ds
   5033	151A  B8 0C03r			     mov     ax,offset DGROUP:s@+2919
   5034	151D  50			     push    ax
   5035	151E  E8 0000e			     call    near ptr _putstr
   5036	1521  59			     pop     cx
   5037	1522  59			     pop     cx
   5038	1523			     @34@170:
   5039					;
   5040					;	 return	t;
   5041					;
   5042	1523  8B C6			     mov     ax,si
   5043	1525  EB D4			     jmp     short @34@86
   5044	1527			     @34@198:
   5045					;
   5046					;    }
   5047					;
   5048	1527  5F			     pop     di
   5049	1528  5E			     pop     si
   5050	1529  5D			     pop     bp
   5051	152A  C3			     ret
   5052	152B			     _cmd_resume     endp
   5053	152B			     _TEXT   ends
   5054	0014			     _BSS    segment word public 'BSS'
   5055	0014			     _semid  label   word
   5056	0014  02*(??)			     db	     2 dup (?)
   5057	0016			     var     label   word
   5058	0016  01F4*(??)			     db	     500 dup (?)
   5059	020A			     history_pos     label   word
   5060	020A  02*(??)			     db	     2 dup (?)
   5061	020C			     history_nxt     label   word
   5062	020C  02*(??)			     db	     2 dup (?)
   5063	020E			     history_ini     label   word
   5064	020E  02*(??)			     db	     2 dup (?)
   5065	0210			     history_len     label   word
   5066	0210  02*(??)			     db	     2 dup (?)
   5067	0212			     history label   byte
   5068	0212  0136*(??)			     db	     310 dup (?)
   5069	0348			     argv    label   dword
   5070	0348  40*(??)			     db	     64	dup (?)
   5071	0388			     argline label   byte
   5072	0388  025F*(??)			     db	     607 dup (?)
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 90
command.ASM



   5073	05E7			     palavra label   byte
   5074	05E7  1F*(??)			     db	     31	dup (?)
   5075	0606			     cmdline label   byte
   5076	0606  1F*(??)			     db	     31	dup (?)
   5077	0625			     end_command     label   word
   5078	0625  02*(??)			     db	     2 dup (?)
   5079					     ?debug  C E9
   5080					     ?debug  C FA00000000
   5081	0627			     _BSS    ends
   5082	009C			     _DATA   segment word public 'DATA'
   5083	009C			     s@	     label   byte
   5084	009C  3F			     db	     '?'
   5085	009D  00			     db	     0
   5086	009E  20 20 20 20 20 20	20+	     db	     '			 exibe estas informacoes'
   5087	      20 20 20 20 20 20	20+
   5088	      20 20 20 20 20 65	78+
   5089	      69 62 65 20 65 73	74+
   5090	      61 73 20 69 6E 66	6F+
   5091	      72 6D 61 63 6F 65	73
   5092	00C8  00			     db	     0
   5093	00C9  68 65 6C 70		     db	     'help'
   5094	00CD  00			     db	     0
   5095	00CE  20 20 20 20 20 20	20+	     db	     '		      exibe estas informacoes'
   5096	      20 20 20 20 20 20	20+
   5097	      20 20 65 78 69 62	65+
   5098	      20 65 73 74 61 73	20+
   5099	      69 6E 66 6F 72 6D	61+
   5100	      63 6F 65 73
   5101	00F5  00			     db	     0
   5102	00F6  76 65 72			     db	     'ver'
   5103	00F9  00			     db	     0
   5104	00FA  20 20 20 20 20 20	20+	     db	     '		       mostra a	versao do MSO'
   5105	      20 20 20 20 20 20	20+
   5106	      20 20 20 6D 6F 73	74+
   5107	      72 61 20 61 20 76	65+
   5108	      72 73 61 6F 20 64	6F+
   5109	      20 4D 53 4F
   5110	0121  00			     db	     0
   5111	0122  64 61 74 65		     db	     'date'
   5112	0126  00			     db	     0
   5113	0127  20 20 20 20 20 20	20+	     db	     '		      mostra a data'
   5114	      20 20 20 20 20 20	20+
   5115	      20 20 6D 6F 73 74	72+
   5116	      61 20 61 20 64 61	74+
   5117	      61
   5118	0144  00			     db	     0
   5119	0145  74 69 6D 65		     db	     'time'
   5120	0149  00			     db	     0
   5121	014A  20 20 20 20 20 20	20+	     db	     '		      mostra a hora'
   5122	      20 20 20 20 20 20	20+
   5123	      20 20 6D 6F 73 74	72+
   5124	      61 20 61 20 68 6F	72+
   5125	      61
   5126	0167  00			     db	     0
   5127	0168  63 6C 73			     db	     'cls'
   5128	016B  00			     db	     0
   5129	016C  20 20 20 20 20 20	20+	     db	     '		       limpa a tela'
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 91
command.ASM



   5130	      20 20 20 20 20 20	20+
   5131	      20 20 20 6C 69 6D	70+
   5132	      61 20 61 20 74 65	6C+
   5133	      61
   5134	0189  00			     db	     0
   5135	018A  63 6C 65 61 72		     db	     'clear'
   5136	018F  00			     db	     0
   5137	0190  20 20 20 20 20 20	20+	     db	     '		     limpa a tela'
   5138	      20 20 20 20 20 20	20+
   5139	      20 6C 69 6D 70 61	20+
   5140	      61 20 74 65 6C 61
   5141	01AB  00			     db	     0
   5142	01AC  72 65 62 6F 6F 74		     db	     'reboot'
   5143	01B2  00			     db	     0
   5144	01B3  20 20 20 20 20 20	20+	     db	     '		    reinicializa o sistema'
   5145	      20 20 20 20 20 20	20+
   5146	      72 65 69 6E 69 63	69+
   5147	      61 6C 69 7A 61 20	6F+
   5148	      20 73 69 73 74 65	6D+
   5149	      61
   5150	01D7  00			     db	     0
   5151	01D8  65 78 69 74		     db	     'exit'
   5152	01DC  00			     db	     0
   5153	01DD  20 20 20 20 20 20	20+	     db	     '		      abandona o sistema'
   5154	      20 20 20 20 20 20	20+
   5155	      20 20 61 62 61 6E	64+
   5156	      6F 6E 61 20 6F 20	73+
   5157	      69 73 74 65 6D 61
   5158	01FF  00			     db	     0
   5159	0200  71 75 69 74		     db	     'quit'
   5160	0204  00			     db	     0
   5161	0205  20 20 20 20 20 20	20+	     db	     '		      abandona o sistema'
   5162	      20 20 20 20 20 20	20+
   5163	      20 20 61 62 61 6E	64+
   5164	      6F 6E 61 20 6F 20	73+
   5165	      69 73 74 65 6D 61
   5166	0227  00			     db	     0
   5167	0228  70 73			     db	     'ps'
   5168	022A  00			     db	     0
   5169	022B  20 20 20 20 20 20	20+	     db	     '			exibe processos/threads	em execucao'
   5170	      20 20 20 20 20 20	20+
   5171	      20 20 20 20 65 78	69+
   5172	      62 65 20 70 72 6F	63+
   5173	      65 73 73 6F 73 2F	74+
   5174	      68 72 65 61 64 73	20+
   5175	      65 6D 20 65 78 65	63+
   5176	      75 63 61 6F
   5177	0260  00			     db	     0
   5178	0261  6B 69 6C 6C		     db	     'kill'
   5179	0265  00			     db	     0
   5180	0266  20 3C 70 69 64 3E	20+	     db	     ' <pid>	      encerra um processo/thread'
   5181	      20 20 20 20 20 20	20+
   5182	      20 20 65 6E 63 65	72+
   5183	      72 61 20 75 6D 20	70+
   5184	      72 6F 63 65 73 73	6F+
   5185	      2F 74 68 72 65 61	64
   5186	0290  00			     db	     0
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 92
command.ASM



   5187	0291  64 65 6D 6F		     db	     'demo'
   5188	0295  00			     db	     0
   5189	0296  20 3C 65 78 69 74	63+	     db	     ' <exitcode>     inicia processos/threads de demonstracao'
   5190	      6F 64 65 3E 20 20	20+
   5191	      20 20 69 6E 69 63	69+
   5192	      61 20 70 72 6F 63	65+
   5193	      73 73 6F 73 2F 74	68+
   5194	      72 65 61 64 73 20	64+
   5195	      65 20 64 65 6D 6F	6E+
   5196	      73 74 72 61 63 61	6F
   5197	02CE  00			     db	     0
   5198	02CF  73 65 74			     db	     'set'
   5199	02D2  00			     db	     0
   5200	02D3  20 5B 3C 76 61 72	3E+	     db	     ' [<var> [<val>]] define o	valor da variavel ou exibe variavei'
   5201	      20 5B 3C 76 61 6C	3E+
   5202	      5D 5D 20 64 65 66	69+
   5203	      6E 65 20 6F 20 76	61+
   5204	      6C 6F 72 20 64 61	20+
   5205	      76 61 72 69 61 76	65+
   5206	      6C 20 6F 75 20 65	78+
   5207	      69 62 65 20 76 61	72+
   5208	      69 61 76 65 69
   5209	0310  73			     db	     's'
   5210	0311  00			     db	     0
   5211	0312  75 6E 73 65 74		     db	     'unset'
   5212	0317  00			     db	     0
   5213	0318  20 3C 76 61 72 3E	20+	     db	     ' <var>	     apaga a variavel'
   5214	      20 20 20 20 20 20	20+
   5215	      20 61 70 61 67 61	20+
   5216	      61 20 76 61 72 69	61+
   5217	      76 65 6C
   5218	0337  00			     db	     0
   5219	0338  65 63 68 6F		     db	     'echo'
   5220	033C  00			     db	     0
   5221	033D  20 5B 2D 6E 5D 20	3C+	     db	     ' [-n] <args>... imprime argumentos'
   5222	      61 72 67 73 3E 2E	2E+
   5223	      2E 20 69 6D 70 72	69+
   5224	      6D 65 20 61 72 67	75+
   5225	      6D 65 6E 74 6F 73
   5226	035F  00			     db	     0
   5227	0360  77 61 69 74 70 69	64	     db	     'waitpid'
   5228	0367  00			     db	     0
   5229	0368  20 3C 70 69 64 3E	20+	     db	     ' <pid>	   espera pelo processo-filho indicado'
   5230	      20 20 20 20 20 20	65+
   5231	      73 70 65 72 61 20	70+
   5232	      65 6C 6F 20 70 72	6F+
   5233	      63 65 73 73 6F 2D	66+
   5234	      69 6C 68 6F 20 69	6E+
   5235	      64 69 63 61 64 6F
   5236	0398  00			     db	     0
   5237	0399  77 61 69 74		     db	     'wait'
   5238	039D  00			     db	     0
   5239	039E  20 20 20 20 20 20	20+	     db	     '		      espera por um processo-filho'
   5240	      20 20 20 20 20 20	20+
   5241	      20 20 65 73 70 65	72+
   5242	      61 20 70 6F 72 20	75+
   5243	      6D 20 70 72 6F 63	65+
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 93
command.ASM



   5244	      73 73 6F 2D 66 69	6C+
   5245	      68 6F
   5246	03CA  00			     db	     0
   5247	03CB  73 65 6D 6C 73		     db	     'semls'
   5248	03D0  00			     db	     0
   5249	03D1  20 20 20 20 20 20	20+	     db	     '		     lista tabela de semaforos'
   5250	      20 20 20 20 20 20	20+
   5251	      20 6C 69 73 74 61	20+
   5252	      74 61 62 65 6C 61	20+
   5253	      64 65 20 73 65 6D	61+
   5254	      66 6F 72 6F 73
   5255	03F9  00			     db	     0
   5256	03FA  73 65 6D 63 72 65	61+	     db	     'semcreate'
   5257	      74 65
   5258	0403  00			     db	     0
   5259	0404  20 3C 76 61 6C 75	65+	     db	     ' <value>	 cria um semaforo'
   5260	      3E 20 20 20 63 72	69+
   5261	      61 20 75 6D 20 73	65+
   5262	      6D 61 66 6F 72 6F
   5263	041F  00			     db	     0
   5264	0420  73 65 6D 74 65 73	74	     db	     'semtest'
   5265	0427  00			     db	     0
   5266	0428  20 3C 73 65 6D 69	64+	     db	     ' <semid>	   aplicacao para teste	de semaforos'
   5267	      3E 20 20 20 20 20	61+
   5268	      70 6C 69 63 61 63	61+
   5269	      6F 20 70 61 72 61	20+
   5270	      74 65 73 74 65 20	64+
   5271	      65 20 73 65 6D 61	66+
   5272	      6F 72 6F 73
   5273	0456  00			     db	     0
   5274	0457  73 65 6D 75 70		     db	     'semup'
   5275	045C  00			     db	     0
   5276	045D  20 3C 73 65 6D 69	64+	     db	     ' <semid>	     incrementa	o valor	de um semaforo'
   5277	      3E 20 20 20 20 20	20+
   5278	      20 69 6E 63 72 65	6D+
   5279	      65 6E 74 61 20 6F	20+
   5280	      76 61 6C 6F 72 20	64+
   5281	      65 20 75 6D 20 73	65+
   5282	      6D 61 66 6F 72 6F
   5283	048D  00			     db	     0
   5284	048E  73 65 6D 64 65 73	74+	     db	     'semdestroy'
   5285	      72 6F 79
   5286	0498  00			     db	     0
   5287	0499  20 3C 73 65 6D 69	64+	     db	     ' <semid>	destroi	um semaforo'
   5288	      3E 20 20 64 65 73	74+
   5289	      72 6F 69 20 75 6D	20+
   5290	      73 65 6D 61 66 6F	72+
   5291	      6F
   5292	04B6  00			     db	     0
   5293	04B7  73 74 6F 70		     db	     'stop'
   5294	04BB  00			     db	     0
   5295	04BC  3C 70 69 64 3E 20	20+	     db	     '<pid>	     suspende um processo/thread'
   5296	      20 20 20 20 20 20	20+
   5297	      20 73 75 73 70 65	6E+
   5298	      64 65 20 75 6D 20	70+
   5299	      72 6F 63 65 73 73	6F+
   5300	      2F 74 68 72 65 61	64
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 94
command.ASM



   5301	04E6  00			     db	     0
   5302	04E7  72 65 73 75 6D 65		     db	     'resume'
   5303	04ED  00			     db	     0
   5304	04EE  3C 70 69 64 3E 20	20+	     db	     '<pid>	   reinicia um processo/thread'
   5305	      20 20 20 20 20 20	72+
   5306	      65 69 6E 69 63 69	61+
   5307	      20 75 6D 20 70 72	6F+
   5308	      63 65 73 73 6F 2F	74+
   5309	      68 72 65 61 64
   5310	0516  00			     db	     0
   5311	0517  20 20 20 20 20 20	20+	     db	     '			'
   5312	      20 20 20 20 20 20	20+
   5313	      20 20 20 20
   5314	0529  DC			     db	     -36
   5315	052A  DC			     db	     -36
   5316	052B  DC			     db	     -36
   5317	052C  DC			     db	     -36
   5318	052D  DC			     db	     -36
   5319	052E  DC			     db	     -36
   5320	052F  DC			     db	     -36
   5321	0530  20 20			     db	     '	'
   5322	0532  DC			     db	     -36
   5323	0533  DC			     db	     -36
   5324	0534  DC			     db	     -36
   5325	0535  DC			     db	     -36
   5326	0536  DC			     db	     -36
   5327	0537  DC			     db	     -36
   5328	0538  0A			     db	     10
   5329	0539  00			     db	     0
   5330	053A  20			     db	     ' '
   5331	053B  DC			     db	     -36
   5332	053C  DC			     db	     -36
   5333	053D  DC			     db	     -36
   5334	053E  DC			     db	     -36
   5335	053F  DC			     db	     -36
   5336	0540  20 20			     db	     '	'
   5337	0542  DC			     db	     -36
   5338	0543  20 20			     db	     '	'
   5339	0545  DC			     db	     -36
   5340	0546  DC			     db	     -36
   5341	0547  DC			     db	     -36
   5342	0548  20 20			     db	     '	'
   5343	054A  DC			     db	     -36
   5344	054B  20			     db	     ' '
   5345	054C  DB			     db	     -37
   5346	054D  DB			     db	     -37
   5347	054E  20 20 20			     db	     '	 '
   5348	0551  DF			     db	     -33
   5349	0552  DF			     db	     -33
   5350	0553  20 20			     db	     '	'
   5351	0555  DB			     db	     -37
   5352	0556  DB			     db	     -37
   5353	0557  20 20			     db	     '	'
   5354	0559  DB			     db	     -37
   5355	055A  DB			     db	     -37
   5356	055B  20 20			     db	     '	'
   5357	055D  00			     db	     0
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 95
command.ASM



   5358	055E  4D 69 6E 69 73 53	69+	     db	     'MinisSistema Operacional'
   5359	      73 74 65 6D 61 20	4F+
   5360	      70 65 72 61 63 69	6F+
   5361	      6E 61 6C
   5362	0576  0A			     db	     10
   5363	0577  00			     db	     0
   5364	0578  DC			     db	     -36
   5365	0579  DB			     db	     -37
   5366	057A  20			     db	     ' '
   5367	057B  DB			     db	     -37
   5368	057C  20			     db	     ' '
   5369	057D  DB			     db	     -37
   5370	057E  20			     db	     ' '
   5371	057F  DC			     db	     -36
   5372	0580  DB			     db	     -37
   5373	0581  20			     db	     ' '
   5374	0582  DC			     db	     -36
   5375	0583  DB			     db	     -37
   5376	0584  20			     db	     ' '
   5377	0585  DB			     db	     -37
   5378	0586  20			     db	     ' '
   5379	0587  DC			     db	     -36
   5380	0588  DB			     db	     -37
   5381	0589  20			     db	     ' '
   5382	058A  DF			     db	     -33
   5383	058B  DF			     db	     -33
   5384	058C  DF			     db	     -33
   5385	058D  DF			     db	     -33
   5386	058E  DB			     db	     -37
   5387	058F  DB			     db	     -37
   5388	0590  DB			     db	     -37
   5389	0591  20			     db	     ' '
   5390	0592  DB			     db	     -37
   5391	0593  DB			     db	     -37
   5392	0594  DB			     db	     -37
   5393	0595  20 20			     db	     '	'
   5394	0597  DB			     db	     -37
   5395	0598  DB			     db	     -37
   5396	0599  20 20			     db	     '	'
   5397	059B  00			     db	     0
   5398	059C  56 73 20			     db	     'Vs '
   5399	059F  00			     db	     0
   5400	05A0  32 30 31 35		     db	     '2015'
   5401	05A4  00			     db	     0
   5402	05A5  0A			     db	     10
   5403	05A6  00			     db	     0
   5404	05A7  DB			     db	     -37
   5405	05A8  DB			     db	     -37
   5406	05A9  20			     db	     ' '
   5407	05AA  DB			     db	     -37
   5408	05AB  20			     db	     ' '
   5409	05AC  DB			     db	     -37
   5410	05AD  20			     db	     ' '
   5411	05AE  DB			     db	     -37
   5412	05AF  DB			     db	     -37
   5413	05B0  20			     db	     ' '
   5414	05B1  DB			     db	     -37
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 96
command.ASM



   5415	05B2  DB			     db	     -37
   5416	05B3  20			     db	     ' '
   5417	05B4  DB			     db	     -37
   5418	05B5  20			     db	     ' '
   5419	05B6  DB			     db	     -37
   5420	05B7  DB			     db	     -37
   5421	05B8  20			     db	     ' '
   5422	05B9  DB			     db	     -37
   5423	05BA  DB			     db	     -37
   5424	05BB  DC			     db	     -36
   5425	05BC  DC			     db	     -36
   5426	05BD  DB			     db	     -37
   5427	05BE  DB			     db	     -37
   5428	05BF  DB			     db	     -37
   5429	05C0  20			     db	     ' '
   5430	05C1  DB			     db	     -37
   5431	05C2  DB			     db	     -37
   5432	05C3  DB			     db	     -37
   5433	05C4  DC			     db	     -36
   5434	05C5  DC			     db	     -36
   5435	05C6  DB			     db	     -37
   5436	05C7  DB			     db	     -37
   5437	05C8  20 20			     db	     '	'
   5438	05CA  00			     db	     0
   5439	05CB  70 6F 72 20 52 6F	6C+	     db	     'por Roland Teodorowitsch'
   5440	      61 6E 64 20 54 65	6F+
   5441	      64 6F 72 6F 77 69	74+
   5442	      73 63 68
   5443	05E3  0A			     db	     10
   5444	05E4  00			     db	     0
   5445	05E5  0A			     db	     10
   5446	05E6  44 69 67 69 74 65	20	     db	     'Digite '
   5447	05ED  27			     db	     39
   5448	05EE  68 65 6C 70		     db	     'help'
   5449	05F2  27			     db	     39
   5450	05F3  20 6F 75 20		     db	     ' ou '
   5451	05F7  27			     db	     39
   5452	05F8  3F			     db	     '?'
   5453	05F9  27			     db	     39
   5454	05FA  20 70 61 72 61 20	61+	     db	     ' para ajuda...'
   5455	      6A 75 64 61 2E 2E	2E
   5456	0608  0A			     db	     10
   5457	0609  0A			     db	     10
   5458	060A  00			     db	     0
   5459	060B  50 52 4F 4D 50 54		     db	     'PROMPT'
   5460	0611  00			     db	     0
   5461	0612  6D 69 6E 69 53 4F	3E	     db	     'miniSO>'
   5462	0619  00			     db	     0
   5463	061A  45 52 52 4F 52 4C	45+	     db	     'ERRORLEVEL'
   5464	      56 45 4C
   5465	0624  00			     db	     0
   5466	0625  30			     db	     '0'
   5467	0626  00			     db	     0
   5468	0627  45 52 52 4F 52 4C	45+	     db	     'ERRORLEVEL'
   5469	      56 45 4C
   5470	0631  00			     db	     0
   5471	0632  45 72 72 6F 3A 20	63+	     db	     'Erro: comando desconhecido!'
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 97
command.ASM



   5472	      6F 6D 61 6E 64 6F	20+
   5473	      64 65 73 63 6F 6E	68+
   5474	      65 63 69 64 6F 21
   5475	064D  0A			     db	     10
   5476	064E  00			     db	     0
   5477	064F  50 52 4F 4D 50 54		     db	     'PROMPT'
   5478	0655  00			     db	     0
   5479	0656  43 6F 6D 61 6E 64	6F+	     db	     'Comandos do minisSistema Operacional:'
   5480	      73 20 64 6F 20 6D	69+
   5481	      6E 69 73 53 69 73	74+
   5482	      65 6D 61 20 4F 70	65+
   5483	      72 61 63 69 6F 6E	61+
   5484	      6C 3A
   5485	067B  0A			     db	     10
   5486	067C  00			     db	     0
   5487	067D  6D 69 6E 69 73 53	69+	     db	     'minisSistema Operacional - Vs '
   5488	      73 74 65 6D 61 20	4F+
   5489	      70 65 72 61 63 69	6F+
   5490	      6E 61 6C 20 2D 20	56+
   5491	      73 20
   5492	069B  00			     db	     0
   5493	069C  32 30 31 35		     db	     '2015'
   5494	06A0  00			     db	     0
   5495	06A1  20 42 43 50 20 20	20+	     db	     ' BCP   PID   PPID	 STATUS	  WAIT	 ZLIST	PREV   NEXT'
   5496	      50 49 44 20 20 20	50+
   5497	      50 49 44 20 20 53	54+
   5498	      41 54 55 53 20 20	20+
   5499	      57 41 49 54 20 20	20+
   5500	      5A 4C 49 53 54 20	20+
   5501	      50 52 45 56 20 20	20+
   5502	      4E 45 58 54
   5503	06D6  0A			     db	     10
   5504	06D7  00			     db	     0
   5505	06D8  20 20			     db	     '	'
   5506	06DA  00			     db	     0
   5507	06DB  20 20			     db	     '	'
   5508	06DD  00			     db	     0
   5509	06DE  20 20			     db	     '	'
   5510	06E0  00			     db	     0
   5511	06E1  46 52 45 45 20 20	20	     db	     'FREE   '
   5512	06E8  00			     db	     0
   5513	06E9  52 45 41 44 59 20	20	     db	     'READY  '
   5514	06F0  00			     db	     0
   5515	06F1  52 55 4E 4E 49 4E	47	     db	     'RUNNING'
   5516	06F8  00			     db	     0
   5517	06F9  5A 4F 4D 42 49 45	20	     db	     'ZOMBIE '
   5518	0700  00			     db	     0
   5519	0701  57 41 49 54 20 20	20	     db	     'WAIT   '
   5520	0708  00			     db	     0
   5521	0709  57 41 49 54 53 49	47	     db	     'WAITSIG'
   5522	0710  00			     db	     0
   5523	0711  57 41 49 54 53 45	4D	     db	     'WAITSEM'
   5524	0718  00			     db	     0
   5525	0719  53 54 4F 50 50 45	44	     db	     'STOPPED'
   5526	0720  00			     db	     0
   5527	0721  20 20			     db	     '	'
   5528	0723  00			     db	     0
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 98
command.ASM



   5529	0724  20 20			     db	     '	'
   5530	0726  00			     db	     0
   5531	0727  20			     db	     ' '
   5532	0728  00			     db	     0
   5533	0729  20 20			     db	     '	'
   5534	072B  00			     db	     0
   5535	072C  45 72 72 6F 20 65	6D+	     db	     'Erro em kill: parametro nao fornecido!'
   5536	      20 6B 69 6C 6C 3A	20+
   5537	      70 61 72 61 6D 65	74+
   5538	      72 6F 20 6E 61 6F	20+
   5539	      66 6F 72 6E 65 63	69+
   5540	      64 6F 21
   5541	0752  0A			     db	     10
   5542	0753  00			     db	     0
   5543	0754  6B 69 6C 6C 3A 20	69+	     db	     'kill: impossivel matar o processo/thread'
   5544	      6D 70 6F 73 73 69	76+
   5545	      65 6C 20 6D 61 74	61+
   5546	      72 20 6F 20 70 72	6F+
   5547	      63 65 73 73 6F 2F	74+
   5548	      68 72 65 61 64
   5549	077C  0A			     db	     10
   5550	077D  00			     db	     0
   5551	077E  00			     db	     0
   5552	077F  45 72 72 6F 20 65	6D+	     db	     'Erro em set: nao ha espaco para novas variaveis!'
   5553	      20 73 65 74 3A 20	6E+
   5554	      61 6F 20 68 61 20	65+
   5555	      73 70 61 63 6F 20	70+
   5556	      61 72 61 20 6E 6F	76+
   5557	      61 73 20 76 61 72	69+
   5558	      61 76 65 69 73 21
   5559	07AF  0A			     db	     10
   5560	07B0  00			     db	     0
   5561	07B1  45 72 72 6F 20 65	6D+	     db	     'Erro em set: o tamanho do	nome da	variavel e muito grande!'
   5562	      20 73 65 74 3A 20	6F+
   5563	      20 74 61 6D 61 6E	68+
   5564	      6F 20 64 6F 20 6E	6F+
   5565	      6D 65 20 64 61 20	76+
   5566	      61 72 69 61 76 65	6C+
   5567	      20 65 20 6D 75 69	74+
   5568	      6F 20 67 72 61 6E	64+
   5569	      65 21
   5570	07EB  0A			     db	     10
   5571	07EC  00			     db	     0
   5572	07ED  45 72 72 6F 20 65	6D+	     db	     'Erro em set: o tamanho do	conteudo da variavel e muito grande'
   5573	      20 73 65 74 3A 20	6F+
   5574	      20 74 61 6D 61 6E	68+
   5575	      6F 20 64 6F 20 63	6F+
   5576	      6E 74 65 75 64 6F	20+
   5577	      64 61 20 76 61 72	69+
   5578	      61 76 65 6C 20 65	20+
   5579	      6D 75 69 74 6F 20	67+
   5580	      72 61 6E 64 65
   5581	082A  21			     db	     '!'
   5582	082B  0A			     db	     10
   5583	082C  00			     db	     0
   5584	082D  45 72 72 6F 20 65	6D+	     db	     'Erro em set: argumentos demais na	linha de comando!'
   5585	      20 73 65 74 3A 20	61+
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 99
command.ASM



   5586	      72 67 75 6D 65 6E	74+
   5587	      6F 73 20 64 65 6D	61+
   5588	      69 73 20 6E 61 20	6C+
   5589	      69 6E 68 61 20 64	65+
   5590	      20 63 6F 6D 61 6E	64+
   5591	      6F 21
   5592	0860  0A			     db	     10
   5593	0861  00			     db	     0
   5594	0862  45 72 72 6F 20 65	6D+	     db	     'Erro em unset: numero invalido de	argumentos!'
   5595	      20 75 6E 73 65 74	3A+
   5596	      20 6E 75 6D 65 72	6F+
   5597	      20 69 6E 76 61 6C	69+
   5598	      64 6F 20 64 65 20	61+
   5599	      72 67 75 6D 65 6E	74+
   5600	      6F 73 21
   5601	088F  0A			     db	     10
   5602	0890  00			     db	     0
   5603	0891  45 72 72 6F 20 65	6D+	     db	     'Erro em unset: variavel inexistente!'
   5604	      20 75 6E 73 65 74	3A+
   5605	      20 76 61 72 69 61	76+
   5606	      65 6C 20 69 6E 65	78+
   5607	      69 73 74 65 6E 74	65+
   5608	      21
   5609	08B5  0A			     db	     10
   5610	08B6  00			     db	     0
   5611	08B7  2D 6E			     db	     '-n'
   5612	08B9  00			     db	     0
   5613	08BA  DA			     db	     -38
   5614	08BB  C4			     db	     -60
   5615	08BC  C4			     db	     -60
   5616	08BD  20 54 68 72 65 61	64+	     db	     ' Thread '
   5617	      20
   5618	08C5  C4			     db	     -60
   5619	08C6  C4			     db	     -60
   5620	08C7  C4			     db	     -60
   5621	08C8  C4			     db	     -60
   5622	08C9  BF			     db	     -65
   5623	08CA  00			     db	     0
   5624	08CB  B3			     db	     -77
   5625	08CC  20 50 49 44 20 20	3D+	     db	     ' PID  =	    '
   5626	      20 20 20 20 20 20	20
   5627	08DA  B3			     db	     -77
   5628	08DB  00			     db	     0
   5629	08DC  B3			     db	     -77
   5630	08DD  20 45 78 65 63 75	63+	     db	     ' Execucao:    '
   5631	      61 6F 3A 20 20 20	20
   5632	08EB  B3			     db	     -77
   5633	08EC  00			     db	     0
   5634	08ED  B3			     db	     -77
   5635	08EE  20 20 20 20 20 20	20+	     db	     '		    '
   5636	      20 20 20 20 20 20	20
   5637	08FC  B3			     db	     -77
   5638	08FD  00			     db	     0
   5639	08FE  C0			     db	     -64
   5640	08FF  C4			     db	     -60
   5641	0900  C4			     db	     -60
   5642	0901  C4			     db	     -60
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 100
command.ASM



   5643	0902  C4			     db	     -60
   5644	0903  C4			     db	     -60
   5645	0904  C4			     db	     -60
   5646	0905  C4			     db	     -60
   5647	0906  C4			     db	     -60
   5648	0907  C4			     db	     -60
   5649	0908  C4			     db	     -60
   5650	0909  C4			     db	     -60
   5651	090A  C4			     db	     -60
   5652	090B  C4			     db	     -60
   5653	090C  C4			     db	     -60
   5654	090D  D9			     db	     -39
   5655	090E  00			     db	     0
   5656	090F  45 72 72 6F 20 65	6D+	     db	     'Erro em demo: numero invalido de argumentos!'
   5657	      20 64 65 6D 6F 3A	20+
   5658	      6E 75 6D 65 72 6F	20+
   5659	      69 6E 76 61 6C 69	64+
   5660	      6F 20 64 65 20 61	72+
   5661	      67 75 6D 65 6E 74	6F+
   5662	      73 21
   5663	093B  0A			     db	     10
   5664	093C  00			     db	     0
   5665	093D  45 72 72 6F 20 65	6D+	     db	     'Erro em demo: fork() nao conseguiu criar thread!'
   5666	      20 64 65 6D 6F 3A	20+
   5667	      66 6F 72 6B 28 29	20+
   5668	      6E 61 6F 20 63 6F	6E+
   5669	      73 65 67 75 69 75	20+
   5670	      63 72 69 61 72 20	74+
   5671	      68 72 65 61 64 21
   5672	096D  0A			     db	     10
   5673	096E  00			     db	     0
   5674	096F  45 72 72 6F 20 65	6D+	     db	     'Erro em waitpid: numero invalido de argumentos!'
   5675	      20 77 61 69 74 70	69+
   5676	      64 3A 20 6E 75 6D	65+
   5677	      72 6F 20 69 6E 76	61+
   5678	      6C 69 64 6F 20 64	65+
   5679	      20 61 72 67 75 6D	65+
   5680	      6E 74 6F 73 21
   5681	099E  0A			     db	     10
   5682	099F  00			     db	     0
   5683	09A0  50 72 6F 63 65 73	73+	     db	     'Processo '
   5684	      6F 20
   5685	09A9  00			     db	     0
   5686	09AA  20 65 6E 63 65 72	72+	     db	     ' encerrado com codigo de fim '
   5687	      61 64 6F 20 63 6F	6D+
   5688	      20 63 6F 64 69 67	6F+
   5689	      20 64 65 20 66 69	6D+
   5690	      20
   5691	09C7  00			     db	     0
   5692	09C8  21			     db	     '!'
   5693	09C9  0A			     db	     10
   5694	09CA  00			     db	     0
   5695	09CB  50 72 6F 63 65 73	73+	     db	     'Processo '
   5696	      6F 20
   5697	09D4  00			     db	     0
   5698	09D5  20 65 6E 63 65 72	72+	     db	     ' encerrado com codigo de fim '
   5699	      61 64 6F 20 63 6F	6D+
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 101
command.ASM



   5700	      20 63 6F 64 69 67	6F+
   5701	      20 64 65 20 66 69	6D+
   5702	      20
   5703	09F2  00			     db	     0
   5704	09F3  21			     db	     '!'
   5705	09F4  0A			     db	     10
   5706	09F5  00			     db	     0
   5707	09F6  53 65 6D 61 70 68	6F+	     db	     'Semaphores:'
   5708	      72 65 73 3A
   5709	0A01  0A			     db	     10
   5710	0A02  00			     db	     0
   5711	0A03  2D 20 69 64 3D		     db	     '-	id='
   5712	0A08  00			     db	     0
   5713	0A09  20 76 61 6C 75 65	3D	     db	     ' value='
   5714	0A10  00			     db	     0
   5715	0A11  20 71 75 65 75 65	3D	     db	     ' queue='
   5716	0A18  00			     db	     0
   5717	0A19  54 4F 54 41 4C 3D		     db	     'TOTAL='
   5718	0A1F  00			     db	     0
   5719	0A20  0A			     db	     10
   5720	0A21  0A			     db	     10
   5721	0A22  00			     db	     0
   5722	0A23  45 72 72 6F 20 65	6D+	     db	     'Erro em semcreate: numero	invalido de argumentos!'
   5723	      20 73 65 6D 63 72	65+
   5724	      61 74 65 3A 20 6E	75+
   5725	      6D 65 72 6F 20 69	6E+
   5726	      76 61 6C 69 64 6F	20+
   5727	      64 65 20 61 72 67	75+
   5728	      6D 65 6E 74 6F 73	21
   5729	0A54  0A			     db	     10
   5730	0A55  00			     db	     0
   5731	0A56  53 65 6D 61 66 6F	72+	     db	     'Semaforo id='
   5732	      6F 20 69 64 3D
   5733	0A62  00			     db	     0
   5734	0A63  20 63 72 69 61 64	6F+	     db	     ' criado (value='
   5735	      20 28 76 61 6C 75	65+
   5736	      3D
   5737	0A72  00			     db	     0
   5738	0A73  29			     db	     ')'
   5739	0A74  0A			     db	     10
   5740	0A75  00			     db	     0
   5741	0A76  DA			     db	     -38
   5742	0A77  C4			     db	     -60
   5743	0A78  C4			     db	     -60
   5744	0A79  20 54 68 72 65 61	64+	     db	     ' Thread '
   5745	      20
   5746	0A81  C4			     db	     -60
   5747	0A82  C4			     db	     -60
   5748	0A83  C4			     db	     -60
   5749	0A84  C4			     db	     -60
   5750	0A85  BF			     db	     -65
   5751	0A86  00			     db	     0
   5752	0A87  B3			     db	     -77
   5753	0A88  20 50 49 44 20 20	3D+	     db	     ' PID  =	    '
   5754	      20 20 20 20 20 20	20
   5755	0A96  B3			     db	     -77
   5756	0A97  00			     db	     0
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 102
command.ASM



   5757	0A98  B3			     db	     -77
   5758	0A99  20 45 78 65 63 75	63+	     db	     ' Execucao:    '
   5759	      61 6F 3A 20 20 20	20
   5760	0AA7  B3			     db	     -77
   5761	0AA8  00			     db	     0
   5762	0AA9  B3			     db	     -77
   5763	0AAA  20 20 20 20 20 20	20+	     db	     '		    '
   5764	      20 20 20 20 20 20	20
   5765	0AB8  B3			     db	     -77
   5766	0AB9  00			     db	     0
   5767	0ABA  C0			     db	     -64
   5768	0ABB  C4			     db	     -60
   5769	0ABC  C4			     db	     -60
   5770	0ABD  C4			     db	     -60
   5771	0ABE  C4			     db	     -60
   5772	0ABF  C4			     db	     -60
   5773	0AC0  C4			     db	     -60
   5774	0AC1  C4			     db	     -60
   5775	0AC2  C4			     db	     -60
   5776	0AC3  C4			     db	     -60
   5777	0AC4  C4			     db	     -60
   5778	0AC5  C4			     db	     -60
   5779	0AC6  C4			     db	     -60
   5780	0AC7  C4			     db	     -60
   5781	0AC8  C4			     db	     -60
   5782	0AC9  D9			     db	     -39
   5783	0ACA  00			     db	     0
   5784	0ACB  45 72 72 6F 20 65	6D+	     db	     'Erro em semtest: numero invalido de argumentos!'
   5785	      20 73 65 6D 74 65	73+
   5786	      74 3A 20 6E 75 6D	65+
   5787	      72 6F 20 69 6E 76	61+
   5788	      6C 69 64 6F 20 64	65+
   5789	      20 61 72 67 75 6D	65+
   5790	      6E 74 6F 73 21
   5791	0AFA  0A			     db	     10
   5792	0AFB  00			     db	     0
   5793	0AFC  45 72 72 6F 20 65	6D+	     db	     'Erro em demo: fork() nao conseguiu criar thread!'
   5794	      20 64 65 6D 6F 3A	20+
   5795	      66 6F 72 6B 28 29	20+
   5796	      6E 61 6F 20 63 6F	6E+
   5797	      73 65 67 75 69 75	20+
   5798	      63 72 69 61 72 20	74+
   5799	      68 72 65 61 64 21
   5800	0B2C  0A			     db	     10
   5801	0B2D  00			     db	     0
   5802	0B2E  45 72 72 6F 20 65	6D+	     db	     'Erro em semtest: numero invalido de argumentos!'
   5803	      20 73 65 6D 74 65	73+
   5804	      74 3A 20 6E 75 6D	65+
   5805	      72 6F 20 69 6E 76	61+
   5806	      6C 69 64 6F 20 64	65+
   5807	      20 61 72 67 75 6D	65+
   5808	      6E 74 6F 73 21
   5809	0B5D  0A			     db	     10
   5810	0B5E  00			     db	     0
   5811	0B5F  45 72 72 6F 20 65	6D+	     db	     'Erro em semtest: numero invalido de argumentos!'
   5812	      20 73 65 6D 74 65	73+
   5813	      74 3A 20 6E 75 6D	65+
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 103
command.ASM



   5814	      72 6F 20 69 6E 76	61+
   5815	      6C 69 64 6F 20 64	65+
   5816	      20 61 72 67 75 6D	65+
   5817	      6E 74 6F 73 21
   5818	0B8E  0A			     db	     10
   5819	0B8F  00			     db	     0
   5820	0B90  73 74 6F 70 3A 20	6E+	     db	     'stop: nenhum parametro foi fornecido'
   5821	      65 6E 68 75 6D 20	70+
   5822	      61 72 61 6D 65 74	72+
   5823	      6F 20 66 6F 69 20	66+
   5824	      6F 72 6E 65 63 69	64+
   5825	      6F
   5826	0BB4  0A			     db	     10
   5827	0BB5  00			     db	     0
   5828	0BB6  73 74 6F 70 3A 20	69+	     db	     'stop: impossivel suspender a thread'
   5829	      6D 70 6F 73 73 69	76+
   5830	      65 6C 20 73 75 73	70+
   5831	      65 6E 64 65 72 20	61+
   5832	      20 74 68 72 65 61	64
   5833	0BD9  0A			     db	     10
   5834	0BDA  00			     db	     0
   5835	0BDB  72 65 73 75 6D 65	3A+	     db	     'resume: nenhum parametro foi fornecido'
   5836	      20 6E 65 6E 68 75	6D+
   5837	      20 70 61 72 61 6D	65+
   5838	      74 72 6F 20 66 6F	69+
   5839	      20 66 6F 72 6E 65	63+
   5840	      69 64 6F
   5841	0C01  0A			     db	     10
   5842	0C02  00			     db	     0
   5843	0C03  72 65 73 75 6D 65	3A+	     db	     'resume: impossivel reiniciar a thread'
   5844	      20 69 6D 70 6F 73	73+
   5845	      69 76 65 6C 20 72	65+
   5846	      69 6E 69 63 69 61	72+
   5847	      20 61 20 74 68 72	65+
   5848	      61 64
   5849	0C28  0A			     db	     10
   5850	0C29  00			     db	     0
   5851	0C2A			     _DATA   ends
   5852	152B			     _TEXT   segment byte public 'CODE'
   5853	152B			     _TEXT   ends
   5854					     public  _sem_aplic
   5855					     public  _semid
   5856					     extrn   _miniSO_sem:word
   5857				     _exitcode	     equ     exitcode
   5858				     _demo_linha     equ     demo_linha
   5859				     _demo   equ     demo
   5860					     extrn   _miniSO_thread:word
   5861				     _commands	     equ     commands
   5862				     _var    equ     var
   5863				     _num_var	     equ     num_var
   5864				     _history_pos    equ     history_pos
   5865				     _history_nxt    equ     history_nxt
   5866				     _history_ini    equ     history_ini
   5867				     _history_len    equ     history_len
   5868				     _history	     equ     history
   5869				     _argv   equ     argv
   5870				     _argline	     equ     argline
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 104
command.ASM



   5871				     _palavra	     equ     palavra
   5872				     _cmdline	     equ     cmdline
   5873				     _end_command    equ     end_command
   5874					     extrn   _resume:near
   5875					     extrn   _stop:near
   5876					     extrn   _semdestroy:near
   5877					     extrn   _semdown:near
   5878					     extrn   _semup:near
   5879					     extrn   _semcreate:near
   5880					     extrn   _getpid:near
   5881					     extrn   _exit:near
   5882					     extrn   _waitpid:near
   5883					     extrn   _wait:near
   5884					     extrn   _kill:near
   5885					     extrn   _fork:near
   5886					     extrn   _reboot:near
   5887					     extrn   _inttostr:near
   5888					     extrn   _unsignedtostr:near
   5889					     extrn   _atoi:near
   5890					     extrn   _strlen:near
   5891					     extrn   _strcmp:near
   5892					     extrn   _strcpy:near
   5893					     extrn   _gettime:near
   5894					     extrn   _getdate:near
   5895					     extrn   _gotoxy:near
   5896					     extrn   _wherey:near
   5897					     extrn   _wherex:near
   5898					     extrn   _setcolor:near
   5899					     extrn   _getcolor:near
   5900					     extrn   _putstrxy:near
   5901					     extrn   _putstr:near
   5902					     extrn   _clrscr:near
   5903					     extrn   _getch:near
   5904					     extrn   _putch:near
   5905					     public  _cmd_resume
   5906					     public  _cmd_stop
   5907					     public  _cmd_semdestroy
   5908					     public  _cmd_semup
   5909					     public  _cmd_semtest
   5910					     public  _cmd_semcreate
   5911					     public  _cmd_semls
   5912					     public  _cmd_waitpid
   5913					     public  _cmd_wait
   5914					     public  _cmd_echo
   5915					     public  _cmd_unset
   5916					     public  _cmd_set
   5917					     public  _cmd_demo
   5918					     public  _cmd_kill
   5919					     public  _cmd_ps
   5920					     public  _cmd_ver
   5921					     public  _cmd_cls
   5922					     public  _cmd_time
   5923					     public  _cmd_date
   5924					     public  _cmd_help
   5925					     public  _cmd_reboot
   5926					     public  _cmd_exit
   5927				     _command_var_set	     equ     command_var_set
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 105
command.ASM



   5928				     _command_var_value	     equ     command_var_value
   5929				     _command_var_unset	     equ     command_var_unset
   5930				     _command_var_search     equ     command_var_search
   5931				     _command_var_list	     equ     command_var_list
   5932				     _command_var_nextfree   equ     command_var_nextfree
   5933				     _command_var_init	     equ     command_var_init
   5934				     _command_showprompt     equ     command_showprompt
   5935				     _command_backspace	     equ     command_backspace
   5936					     public  _command
   5937				     _s@     equ     s@
   5938					     end
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 106
Symbol Table




Symbol Name		Type   Value			   Cref	(defined at #)

??DATE			Text   "11/12/17"
??FILENAME		Text   "command	"
??TIME			Text   "21:55:21"
??VERSION		Number 030A
@10@114			Near   _TEXT:0755		   1819	 #1826
@10@170			Near   _TEXT:076A		   1836	 #1842
@10@254			Near   _TEXT:078B		   1866	 #1872
@10@282			Near   _TEXT:07A3		   1856	 #1886
@10@310			Near   _TEXT:07BF		   1825	 #1906
@10@86			Near   _TEXT:0753		   #1824  1841	1871  1905
@11@58			Near   _TEXT:07D4		   1940	 #1941
@12@58			Near   _TEXT:07EB		   1974	 #1975
@13@114			Near   _TEXT:0838		   2016	 #2050
@13@170			Near   _TEXT:0841		   2058	 #2059
@13@58			Near   _TEXT:0809		   #2017  2052
@14@58			Near   _TEXT:08DA		   2197	 #2198
@15@58			Near   _TEXT:097A		   2338	 #2339
@16@58			Near   _TEXT:0992		   2375	 #2376
@17@58			Near   _TEXT:09C1		   2432	 #2433
@18@1010		Near   _TEXT:0C30		   2940	 #2950
@18@1066		Near   _TEXT:0C4A		   2495	 #2971
@18@1094		Near   _TEXT:0C4B		   2484	 #2973
@18@114			Near   _TEXT:0A12		   #2517  2530
@18@1150		Near   _TEXT:0C57		   2984	 #2985
@18@142			Near   _TEXT:0A1A		   2516	 #2526
@18@198			Near   _TEXT:0A5C		   #2573  2586
@18@226			Near   _TEXT:0A64		   2572	 #2582
@18@282			Near   _TEXT:0AA6		   #2629  2642
@18@310			Near   _TEXT:0AAE		   2628	 #2638
@18@450			Near   _TEXT:0AE4		   #2674  2995
@18@478			Near   _TEXT:0AE8		   #2680  2692	2699  2706  2713  2720	2727  2734
@18@506			Near   _TEXT:0AF0		   #2686  2996
@18@534			Near   _TEXT:0AF6		   #2693  2997
@18@562			Near   _TEXT:0AFC		   #2700  2998
@18@58			Near   _TEXT:09E5		   #2485  2976
@18@590			Near   _TEXT:0B02		   #2707  2999
@18@618			Near   _TEXT:0B08		   #2714  3000
@18@646			Near   _TEXT:0B0E		   #2721  3001
@18@674			Near   _TEXT:0B14		   #2728  3002
@18@702			Near   _TEXT:0B1A		   2671	 2685  #2735
@18@730			Near   _TEXT:0B4A		   #2770  2783
@18@758			Near   _TEXT:0B52		   2769	 #2779
@18@814			Near   _TEXT:0B94		   #2827  2840
@18@842			Near   _TEXT:0B9C		   2826	 #2836
@18@898			Near   _TEXT:0BDE		   #2884  2897
@18@926			Near   _TEXT:0BE6		   2883	 #2893
@18@982			Near   _TEXT:0C28		   #2941  2954
@18@C1266		Word   _TEXT:0C5B		   2673	 #2994
@19@114			Near   _TEXT:0C87		   #3042  3081
@19@142			Near   _TEXT:0C89		   3027	 #3044
@19@198			Near   _TEXT:0CAB		   3067	 #3074
@19@226			Near   _TEXT:0CAF		   3043	 #3082
@19@86			Near   _TEXT:0C7E		   #3033  3073
@1@1094			Near   _TEXT:01D6		   507	#522
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 107
Symbol Table



@1@1150			Near   _TEXT:01E6		   521	528  #537
@1@1178			Near   _TEXT:01E8		   502	#544
@1@1262			Near   _TEXT:0203		   561	#566
@1@1290			Near   _TEXT:020A		   550	#575
@1@1374			Near   _TEXT:0227		   592	#598
@1@142			Near   _TEXT:00FD		   #309	 314
@1@1430			Near   _TEXT:0234		   604	#610
@1@1458			Near   _TEXT:023A		   543	574  582  597  609  #616
@1@1514			Near   _TEXT:0242		   #627	 640
@1@1542			Near   _TEXT:0246		   626	#638
@1@1598			Near   _TEXT:0278		   492	625  #675
@1@1626			Near   _TEXT:027B		   #682	 1265
@1@1766			Near   _TEXT:02A6		   706	#712
@1@1794			Near   _TEXT:02AC		   711	#718
@1@1822			Near   _TEXT:02AE		   699	#723
@1@1878			Near   _TEXT:02BF		   733	#738
@1@1934			Near   _TEXT:02CE		   722	744  #749
@1@1962			Near   _TEXT:02D0		   #751	 765
@1@1990			Near   _TEXT:02D4		   750	#763
@1@2074			Near   _TEXT:030D		   689	693  771  #805
@1@2102			Near   _TEXT:030F		   388	463  484  681  811  #812
@1@2130			Near   _TEXT:0312		   #818	 1280
@1@2158			Near   _TEXT:0337		   #849	 1014
@1@2186			Near   _TEXT:0339		   #851	 864  867
@1@2214			Near   _TEXT:033C		   850	#858
@1@226			Near   _TEXT:010D		   312	#316
@1@2298			Near   _TEXT:0357		   861	#868
@1@2354			Near   _TEXT:0363		   874	#879
@1@2382			Near   _TEXT:0367		   #885	 907
@1@2410			Near   _TEXT:0375		   884	#898
@1@2494			Near   _TEXT:0390		   901	904  #908
@1@254			Near   _TEXT:0111		   #318	 1279
@1@2578			Near   _TEXT:03D3		   935	#960
@1@2606			Near   _TEXT:03D5		   918	959  #966
@1@2662			Near   _TEXT:0411		   1003	 #1008
@1@2690			Near   _TEXT:0414		   965	#1013
@1@2718			Near   _TEXT:0417		   878	1007  #1015
@1@2774			Near   _TEXT:0423		   1022	 #1031
@1@282			Near   _TEXT:0114		   #324	 1278
@1@2830			Near   _TEXT:0448		   1052	 #1058
@1@2886			Near   _TEXT:0457		   1064	 #1070
@1@2914			Near   _TEXT:045B		   1057	 1069  #1076
@1@2970			Near   _TEXT:046A		   1082	 #1088
@1@2998			Near   _TEXT:046E		   1087	 #1094
@1@3026			Near   _TEXT:0477		   #1105  1133
@1@3082			Near   _TEXT:049E		   1120	 #1129
@1@3110			Near   _TEXT:049F		   1104	 #1131
@1@3138			Near   _TEXT:04A4		   1128	 #1134
@1@3194			Near   _TEXT:04E3		   1143	 #1182
@1@3222			Near   _TEXT:04ED		   1181	 #1193
@1@3278			Near   _TEXT:04F7		   1199	 #1204
@1@3306			Near   _TEXT:04FB		   315	#1214
@1@3362			Near   _TEXT:0511		   292	323  344  366  817  1030  1213	1220  #1235
@1@338			Near   _TEXT:011C		   330	#339
@1@366			Near   _TEXT:011F		   #345	 1281
@1@394			Near   _TEXT:0121		   #347	 361
@1@422			Near   _TEXT:0125		   346	#359
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 108
Symbol Table



@1@478			Near   _TEXT:012C		   #367	 1277
@1@562			Near   _TEXT:013F		   #382	 387
@1@58			Near   _TEXT:00EA		   #293	 1238
@1@646			Near   _TEXT:014F		   385	#389
@1@674			Near   _TEXT:0153		   #391	 1262
@1@702			Near   _TEXT:015B		   #398	 411
@1@730			Near   _TEXT:015F		   397	#409
@1@786			Near   _TEXT:016F		   #426	 454
@1@842			Near   _TEXT:0194		   425	#452
@1@898			Near   _TEXT:01A0		   #464	 1264
@1@954			Near   _TEXT:01A8		   470	#479
@1@982			Near   _TEXT:01AB		   #485	 1263
@1@C3234		Word   _TEXT:0531		   308	#1266
@1@C3330		Word   _TEXT:0521		   381	#1253
@20@114			Near   _TEXT:0CCB		   #3120  3218
@20@142			Near   _TEXT:0CCD		   3110	 #3122
@20@198			Near   _TEXT:0CE8		   3128	 #3141
@20@254			Near   _TEXT:0D04		   3146	 #3158
@20@282			Near   _TEXT:0D09		   3140	 3157  #3164
@20@366			Near   _TEXT:0D1B		   #3174  3237
@20@394			Near   _TEXT:0D21		   #3182  3236
@20@422			Near   _TEXT:0D27		   #3191  3235
@20@450			Near   _TEXT:0D2D		   #3201  3234
@20@478			Near   _TEXT:0D31		   3181	 3190  3200  #3209
@20@506			Near   _TEXT:0D3C		   3171	 #3219
@20@534			Near   _TEXT:0D3E		   3121	 #3221
@20@86			Near   _TEXT:0CC9		   #3118  3220
@20@C482		Word   _TEXT:0D44		   3173	 #3233
@21@114			Near   _TEXT:0D65		   #3268  3300
@21@142			Near   _TEXT:0D67		   3253	 #3270
@21@198			Near   _TEXT:0D84		   3286	 #3293
@21@226			Near   _TEXT:0D88		   3269	 #3301
@21@86			Near   _TEXT:0D5C		   #3259  3292
@22@114			Near   _TEXT:0DBE		   3342	 #3348
@22@142			Near   _TEXT:0DC9		   3347	 #3358
@22@170			Near   _TEXT:0DCE		   #3364  3395
@22@226			Near   _TEXT:0DD9		   3369	 #3372
@22@254			Near   _TEXT:0DE1		   3371	 #3380
@22@310			Near   _TEXT:0DF2		   3363	 #3393
@22@338			Near   _TEXT:0DF7		   3330	 #3396
@22@394			Near   _TEXT:0E05		   3403	 #3411
@22@422			Near   _TEXT:0E09		   3416	 #3417
@23@114			Near   _TEXT:0ED2		   3554	 #3583
@23@170			Near   _TEXT:0EDC		   #3592  3622
@23@226			Near   _TEXT:0F05		   3591	 #3620
@23@282			Near   _TEXT:0F0F		   #3629  3659
@23@338			Near   _TEXT:0F38		   3628	 #3657
@23@394			Near   _TEXT:0F42		   #3666  3696
@23@450			Near   _TEXT:0F6B		   3665	 #3694
@23@506			Near   _TEXT:0F75		   #3703  3733
@23@562			Near   _TEXT:0F9E		   3702	 #3731
@23@58			Near   _TEXT:0EA9		   #3555  3585
@23@618			Near   _TEXT:0FA8		   #3740  3770
@23@674			Near   _TEXT:0FD1		   3739	 #3768
@24@114			Near   _TEXT:0FFA		   #3816  3866
@24@142			Near   _TEXT:0FFC		   3801	 #3818
@24@198			Near   _TEXT:100E		   3828	 #3833
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 109
Symbol Table



@24@254			Near   _TEXT:1032		   3852	 #3859
@24@282			Near   _TEXT:1036		   3817	 #3867
@24@86			Near   _TEXT:0FF1		   #3807  3858
@25@114			Near   _TEXT:1054		   3892	 #3908
@25@142			Near   _TEXT:10C2		   3907	 #3998
@25@86			Near   _TEXT:1052		   #3906  3997
@26@58			Near   _TEXT:1139		   4110	 #4111
@27@114			Near   _TEXT:11F8		   4172	 #4275
@27@142			Near   _TEXT:11F9		   4162	 #4277
@27@198			Near   _TEXT:122F		   4323	 #4324
@27@58			Near   _TEXT:1164		   #4163  4280
@28@114			Near   _TEXT:1250		   #4368  4464
@28@142			Near   _TEXT:1252		   4353	 #4370
@28@198			Near   _TEXT:1270		   4393	 #4395
@28@226			Near   _TEXT:12BE		   4369	 #4465
@28@86			Near   _TEXT:124D		   #4366  4394
@29@114			Near   _TEXT:1381		   4586	 #4615
@29@170			Near   _TEXT:1391		   #4626  4657
@29@226			Near   _TEXT:13BA		   4625	 #4655
@29@58			Near   _TEXT:1358		   #4587  4617
@30@114			Near   _TEXT:13E3		   #4705  4755
@30@142			Near   _TEXT:13E5		   4690	 #4707
@30@198			Near   _TEXT:1408		   4727	 #4732
@30@254			Near   _TEXT:141B		   4741	 #4748
@30@282			Near   _TEXT:141F		   4706	 #4756
@30@86			Near   _TEXT:13DA		   #4696  4747
@31@114			Near   _TEXT:143C		   4778	 #4794
@31@142			Near   _TEXT:1456		   4793	 #4813
@31@86			Near   _TEXT:143A		   #4792  4812
@32@114			Near   _TEXT:1475		   4836	 #4852
@32@142			Near   _TEXT:148F		   4851	 #4871
@32@86			Near   _TEXT:1473		   #4850  4870
@33@114			Near   _TEXT:14B1		   4902	 #4918
@33@170			Near   _TEXT:14D7		   4941	 #4951
@33@198			Near   _TEXT:14DB		   4917	 #4957
@33@86			Near   _TEXT:14AF		   #4916  4956
@34@114			Near   _TEXT:14FD		   4989	 #5005
@34@170			Near   _TEXT:1523		   5028	 #5038
@34@198			Near   _TEXT:1527		   5004	 #5044
@34@86			Near   _TEXT:14FB		   #5003  5043
@3@86			Near   _TEXT:05AF		   1367	 #1396
@4@114			Near   _TEXT:05DF		   1426	 #1445
@4@58			Near   _TEXT:05C2		   #1427  1447
@5@114			Near   _TEXT:05FB		   1473	 #1481
@5@142			Near   _TEXT:05FF		   #1487  1506
@5@198			Near   _TEXT:0613		   1496	 #1502
@5@226			Near   _TEXT:0614		   1486	 #1504
@5@282			Near   _TEXT:061B		   1480	 #1508
@5@58			Near   _TEXT:05F6		   #1474  1507
@5@86			Near   _TEXT:05F9		   #1479  1501
@6@114			Near   _TEXT:0681		   1548	 #1602
@6@142			Near   _TEXT:0682		   1538	 #1604
@6@58			Near   _TEXT:062E		   #1539  1606
@7@114			Near   _TEXT:069E		   1633	 #1641
@7@142			Near   _TEXT:06A2		   #1647  1672
@7@198			Near   _TEXT:06C2		   1662	 #1668
@7@226			Near   _TEXT:06C3		   1646	 #1670
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 110
Symbol Table



@7@282			Near   _TEXT:06CA		   1640	 #1674
@7@58			Near   _TEXT:0699		   #1634  1673
@7@86			Near   _TEXT:069C		   #1639  1667
@8@114			Near   _TEXT:06E8		   1708	 #1715
@8@142			Near   _TEXT:070C		   1714	 #1741
@8@86			Near   _TEXT:06E6		   #1713  1740
@9@114			Near   _TEXT:072B		   1773	 #1781
@9@142			Near   _TEXT:0739		   1780	 #1791
@9@86			Near   _TEXT:0729		   #1779  1790
@@0			Near   _TEXT:01B5		   491	#493
@@1			Near   _TEXT:0285		   688	#690
@@2			Near   _TEXT:028F		   692	#694
@@3			Near   _TEXT:051B		   1237	 #1239
@@4			Near   _TEXT:09F8		   2494	 #2496
@@5			Near   _TEXT:0C53		   2975	 #2977
@@6			Near   _TEXT:1174		   4171	 #4173
@@7			Near   _TEXT:1201		   4279	 #4281
@CPU			Text   0101H
@CURSEG			Text   _TEXT			   #10	#14  #18  #22  #103  #2443  #2446  #3428  #3436	 #5054	#5082	  +
							   #5852
@FILENAME		Text   COMMAND
@WORDSIZE		Text   2			   #10	#14  #18  #22  #103  #2443  #2446  #3428  #3436	 #5054	#5082	  +
							   #5852
ARGLINE			Byte   _BSS:0388		   977	985  #5071
ARGV			Dword  _BSS:0348		   989	990  1115  1116	 1147  #5069
B@			Byte   _BSS:0000		   #19
B@W			Word   _BSS:0000		   #20	2502  2510  2535  2558	2566  2591  2614  2622	2647  2755  2763  +
							   2788	 2812  2820  2845  2869	 2877  2902  2926  2934	 2959
CMDLINE			Byte   _BSS:0606		   652	660  669  782  790  799	 834  840  1038	 1233  #5075
COMMANDS		Word   _DATA:0002		   #26	1114  1154  2026  2038
COMMAND_BACKSPACE	Near   _TEXT:0545		   338	358  408  478  637  762	 #1286
COMMAND_SHOWPROMPT	Near   _TEXT:056F		   291	459  1026  1203	 #1343
COMMAND_VAR_INIT	Near   _TEXT:05BB		   264	#1416
COMMAND_VAR_LIST	Near   _TEXT:061D		   #1520  3114
COMMAND_VAR_NEXTFREE	Near   _TEXT:05EC		   #1463  1860
COMMAND_VAR_SEARCH	Near   _TEXT:068C		   #1621  1700	1765  1848
COMMAND_VAR_SET		Near   _TEXT:073C		   274	285  1176  #1803  3137	3154
COMMAND_VAR_UNSET	Near   _TEXT:06CD		   #1688  3278
COMMAND_VAR_VALUE	Near   _TEXT:070F		   925	1357  #1753
D@			Byte   _DATA:0000		   #15
D@W			Word   _DATA:0000		   #16
DEMO			Near   _TEXT:0E0F		   #3441  3847
DEMO_LINHA		Word   _DATA:0098		   #3429  3454	3823  3827  3832  4492	4722  4726  4731
END_COMMAND		Word   _BSS:0625		   129	1198  1236  1969  #5077
EXITCODE		Word   _DATA:009A		   #3432  3459	3843
HISTORY			Byte   _BSS:0212		   439	649  779  1044	#5067
HISTORY_INI		Word   _BSS:020E		   133	431  581  591  1063  1068  1075	 #5063
HISTORY_LEN		Word   _BSS:0210		   453	490  501  687  698  703	 1051  1056  #5065
HISTORY_NXT		Word   _BSS:020C		   137	511  554  743  1041  1081  1086	 1093  #5061
HISTORY_POS		Word   _BSS:020A		   141	396  506  513  527  532	 549  556  560	565  580  590  596  603	  +
							   608	615  646  691  705  710	 717  728  732	737  742  748  770  776	  +
							   823	#5059
NUM_VAR			Word   _DATA:0000		   #23	1452  1472  1735
PALAVRA			Byte   _BSS:05E7		   892	913  917  923  942  950	 973  #5073
S@			Byte   _DATA:009C		   27  28  30  31  33  34  36  37  39  40  42  43  45  46  48  49  51  52 +
							   54  55  57  58  60  61  63  64  66  67  69  70  72  73  75  76  78  79 +
							   81  82  84  85  87  88  90  91  93  94  96  97  99  100  165	 175  185 +
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 111
Symbol Table



							   199	209  215  221  235  245	 255  269  272	280  283  1174	1188  1355+
							   2007	 2407  2416  2475  2544	 2600  2656  2679  2691	 2698  2705  2712 +
							   2719	 2726  2733  2741  2798	 2855  2912  3032  3072	 3133  3180  3189 +
							   3199	 3208  3258  3291  3335	 3466  3477  3490  3503	 3516  3806  3857 +
							   3897	 3934  3961  3988  4047	 4074  4101  4153  4178	 4208  4238  4287 +
							   4314	 4358  4401  4428  4455	 4499  4510  4523  4536	 4549  4695  4746 +
							   4783	 4841  4907  4946  4994	 5033  #5083
VAR			Word   _BSS:0016		   1435	 1443  1495  1547  1556	 1582  1655  1723  1731	 1788  1882  1897 +
							   #5057
_ARGLINE		Alias  ARGLINE			   #5870
_ARGV			Alias  ARGV			   #5869
_ATOI			Near   ----:---- Extern		   3052	 3840  3916  4378  4715	 4802  4860  4926  5013	 #5889
_CLRSCR			Near   ----:---- Extern		   153	2370  #5902
_CMDLINE		Alias  CMDLINE			   #5872
_CMD_CLS		Near   _TEXT:0980		   44  47  #2353  5921
_CMD_DATE		Near   _TEXT:0845		   38  #2072  5923
_CMD_DEMO		Near   _TEXT:0FE4		   65  #3791  5917
_CMD_ECHO		Near   _TEXT:0D8C		   74  #3313  5914
_CMD_EXIT		Near   _TEXT:07D8		   53  56  #1954  5926
_CMD_HELP		Near   _TEXT:07ED		   29  32  #1986  5924
_CMD_KILL		Near   _TEXT:0C6B		   62  #3007  5918
_CMD_PS			Near   _TEXT:09C5		   59  #2451  5919
_CMD_REBOOT		Near   _TEXT:07C2		   50  #1918  5925
_CMD_RESUME		Near   _TEXT:14DF		   101	#4970  5905
_CMD_SEMCREATE		Near   _TEXT:1235		   86  #4338  5910
_CMD_SEMDESTROY		Near   _TEXT:145A		   95  #4825  5907
_CMD_SEMLS		Near   _TEXT:113F		   83  #4125  5911
_CMD_SEMTEST		Near   _TEXT:13CD		   89  #4679  5909
_CMD_SEMUP		Near   _TEXT:1421		   92  #4767  5908
_CMD_SET		Near   _TEXT:0CB3		   68  #3095  5916
_CMD_STOP		Near   _TEXT:1493		   98  #4883  5906
_CMD_TIME		Near   _TEXT:08E0		   41  #2212  5922
_CMD_UNSET		Near   _TEXT:0D4C		   71  #3242  5915
_CMD_VER		Near   _TEXT:0996		   35  #2389  5920
_CMD_WAIT		Near   _TEXT:10C7		   80  #4011  5913
_CMD_WAITPID		Near   _TEXT:1038		   77  #3878  5912
_COMMAND		Near   _TEXT:0000		   #108	 5936
_COMMANDS		Alias  COMMANDS			   #5861
_COMMAND_BACKSPACE	Alias  COMMAND_BACKSPACE	   #5935
_COMMAND_SHOWPROMPT	Alias  COMMAND_SHOWPROMPT	   #5934
_COMMAND_VAR_INIT	Alias  COMMAND_VAR_INIT		   #5933
_COMMAND_VAR_LIST	Alias  COMMAND_VAR_LIST		   #5931
_COMMAND_VAR_NEXTFREE	Alias  COMMAND_VAR_NEXTFREE	   #5932
_COMMAND_VAR_SEARCH	Alias  COMMAND_VAR_SEARCH	   #5930
_COMMAND_VAR_SET	Alias  COMMAND_VAR_SET		   #5927
_COMMAND_VAR_UNSET	Alias  COMMAND_VAR_UNSET	   #5929
_COMMAND_VAR_VALUE	Alias  COMMAND_VAR_VALUE	   #5928
_DEMO			Alias  DEMO			   #5859
_DEMO_LINHA		Alias  DEMO_LINHA		   #5858
_END_COMMAND		Alias  END_COMMAND		   #5873
_EXIT			Near   ----:---- Extern		   3776	 4664  #5881
_EXITCODE		Alias  EXITCODE			   #5857
_FORK			Near   ----:---- Extern		   3849	 4738  #5885
_GETCH			Near   ----:---- Extern		   299	372  #5903
_GETCOLOR		Near   ----:---- Extern		   1371	 1532  #5899
_GETDATE		Near   ----:---- Extern		   2099	 #5894
_GETPID			Near   ----:---- Extern		   3529	 4562  #5880
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 112
Symbol Table



_GETTIME		Near   ----:---- Extern		   2236	 #5893
_GOTOXY			Near   ----:---- Extern		   1313	 1328  #5895
_HISTORY		Alias  HISTORY			   #5868
_HISTORY_INI		Alias  HISTORY_INI		   #5866
_HISTORY_LEN		Alias  HISTORY_LEN		   #5867
_HISTORY_NXT		Alias  HISTORY_NXT		   #5865
_HISTORY_POS		Alias  HISTORY_POS		   #5864
_INTTOSTR		Near   ----:---- Extern		   1165	 2504  2560  2616  2757	 2814  2871  2928  3534	 3946  3973  4059 +
							   4086	 4193  4223  4253  4299	 4413  4440  4567  #5887
_KILL			Near   ----:---- Extern		   3060	 #5884
_MINISO_SEM		Word   ----:---- Extern		   4170	 4189  4219  4249  #5856
_MINISO_THREAD		Word   ----:---- Extern		   2493	 2556  2612  2668  2753	 2810  2867  2924  #5860
_NUM_VAR		Alias  NUM_VAR			   #5863
_PALAVRA		Alias  PALAVRA			   #5871
_PUTCH			Near   ----:---- Extern		   418	449  829  1227	1321  1403  1566  1600	2047  2131  2162  2191	  +
							   2268	 2301  2332  2426  2524	 2580  2636  2777  2834	 2891  2948  2969 +
							   3378	 3409  4269  #5904
_PUTSTR			Near   ----:---- Extern		   167	177  187  201  211  217	 223  237  247	257  441  662  792  1190  +
							   1385	 1558  1584  2009  2027	 2039  2123  2154  2183	 2260  2293  2324 +
							   2409	 2418  2477  2537  2546	 2593  2602  2649  2658	 2682  2743  2790 +
							   2800	 2847  2857  2904  2914	 2961  3035  3211  3261	 3355  3389  3809 +
							   3899	 3936  3954  3963  3981	 3990  4049  4067  4076	 4094  4103  4155 +
							   4180	 4201  4210  4231  4240	 4261  4289  4307  4316	 4360  4403  4421 +
							   4430	 4448  4457  4698  4785	 4843  4909  4948  4996	 5035  #5901
_PUTSTRXY		Near   ----:---- Extern		   3471	 3484  3497  3510  3523	 3547  3580  3617  3654	 3691  3728  3765 +
							   4504	 4517  4530  4543  4556	 4580  4612  4652  #5900
_REBOOT			Near   ----:---- Extern		   1935	 #5886
_RESUME			Near   ----:---- Extern		   5021	 #5874
_S@			Alias  S@			   #5937
_SEMCREATE		Near   ----:---- Extern		   4386	 #5879
_SEMDESTROY		Near   ----:---- Extern		   4868	 #5876
_SEMDOWN		Near   ----:---- Extern		   4623	 #5877
_SEMID			Word   _BSS:0014		   4622	 4718  #5055  5855
_SEMUP			Near   ----:---- Extern		   4810	 #5878
_SEM_APLIC		Near   _TEXT:12C4		   #4479  4736	5854
_SETCOLOR		Near   ----:---- Extern		   148	159  182  192  206  228	 242  1378  1394  1573	1593  #5898
_STOP			Near   ----:---- Extern		   4934	 #5875
_STRCMP			Near   ----:---- Extern		   1117	 1659  3339  #5891
_STRCPY			Near   ----:---- Extern		   654	784  944  979  1046  1884  1899	 #5892
_STRLEN			Near   ----:---- Extern		   671	801  952  1815	1832  2512  2568  2624	2765  2822  2879  2936	  +
							   #5890
_UNSIGNEDTOSTR		Near   ----:---- Extern		   2115	 2146  2175  2252  2285	 2316  3567  3604  3641	 3678  3715  3752 +
							   4599	 4639  #5888
_VAR			Alias  VAR			   #5862
_WAIT			Near   ----:---- Extern		   4039	 #5883
_WAITPID		Near   ----:---- Extern		   3927	 #5882
_WHEREX			Near   ----:---- Extern		   1297	 #5897
_WHEREY			Near   ----:---- Extern		   1302	 #5896

Macro Name						   Cref	(defined at #)

$COMM							   #1
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 113
Symbol Table




Groups & Segments	Bit Size Align	Combine	Class	   Cref	(defined at #)

DGROUP			Group				   #12	13  27	28  30	31  33	34  36	37  39	40  42	43  45	46  48	49+
							   51  52  54  55  57  58  60  61  63  64  66  67  69  70  72  73  75  76 +
							   78  79  81  82  84  85  87  88  90  91  93  94  96  97  99  100  129	  +
							   133	137  141  165  175  185	 199  209  215	221  235  245  255  269	  +
							   272	280  283  396  431  439	 453  490  501	506  511  513  527  532	  +
							   549	554  556  560  565  580	 581  590  591	596  603  608  615  646	  +
							   649	652  660  669  687  691	 698  703  705	710  717  728  732  737	  +
							   742	743  748  770  776  779	 782  790  799	823  834  840  892  913	  +
							   917	923  942  950  973  977	 985  989  990	1038  1041  1044  1051	  +
							   1056	 1063  1068  1075  1081	 1086  1093  1114  1115	 1116  1147  1154 +
							   1174	 1188  1198  1233  1236	 1355  1435  1443  1452	 1472  1495  1547 +
							   1556	 1582  1655  1723  1731	 1735  1788  1882  1897	 1969  2007  2026 +
							   2038	 2407  2416  2475  2493	 2502  2510  2535  2544	 2556  2558  2566 +
							   2591	 2600  2612  2614  2622	 2647  2656  2668  2679	 2691  2698  2705 +
							   2712	 2719  2726  2733
  _BSS			16  0627 Word	Public	BSS	   12  #18  #2443  #5054
  _DATA			16  0C2A Word	Public	DATA	   12  #14  #22	 #3428	#5082
_TEXT			16  152B Byte	Public	CODE	   #10	13  #103  107  1285  1342  1415	 1462  1519  1620  1687	 1752	  +
							   1802	 1917  1953  1985  2071	 2211  2352  2388  #2446  2450	3006  3094+
							   3241	 3312  #3436  3440  3790  3877	4010  4124  4337  4478	4678  4766+
							   4824	 4882  4969  #5852
Turbo Assembler	 Version 3.1	    11/12/17 21:55:22	    Page 114
Error Summary



*Warning* command.ASM(3439) Reserved word used as symbol: EXITCODE
